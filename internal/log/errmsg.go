package log

type Global_error struct {
	id      string
	eType   string
	message string
}

var E000000 = Global_error{id: "000000", eType: UNEXPECTED_ERROR, message: "Unexpected error"}
var E100001 = Global_error{id: "100001", eType: EXPECTED_ERROR, message: "Data is modified. Would you like to save the changes ? "}
var E100002 = Global_error{id: "100002", eType: EXPECTED_ERROR, message: "Proceed to delete, will you? "}
var E100003 = Global_error{id: "100003", eType: EXPECTED_ERROR, message: "Data is successfully saved. "}
var E100004 = Global_error{id: "100004", eType: EXPECTED_ERROR, message: "Data is successfully deleted. "}
var E100005 = Global_error{id: "100005", eType: EXPECTED_ERROR, message: "The transaction is not successfully changed. "}
var E100006 = Global_error{id: "100006", eType: EXPECTED_ERROR, message: "Effective date must be earlier than expiry date. "}
var E100007 = Global_error{id: "100007", eType: EXPECTED_ERROR, message: "Effective date must be later than today. "}
var E100009 = Global_error{id: "100009", eType: EXPECTED_ERROR, message: "Blank is not allowed. "}
var E100010 = Global_error{id: "100010", eType: EXPECTED_ERROR, message: "More than 1 occurrence in FML buffer. "}
var E100011 = Global_error{id: "100011", eType: EXPECTED_ERROR, message: "Expiry date can not be earlier than today. "}
var E100012 = Global_error{id: "100012", eType: EXPECTED_ERROR, message: "Effective date can not be earlier than today. "}
var E100013 = Global_error{id: "100013", eType: EXPECTED_ERROR, message: "Invalid date. "}
var E100014 = Global_error{id: "100014", eType: EXPECTED_ERROR, message: "Invalid time. "}
var E100015 = Global_error{id: "100015", eType: EXPECTED_ERROR, message: "Number of fields is not enough. "}
var E100016 = Global_error{id: "100016", eType: EXPECTED_ERROR, message: "Invalid record status. "}
var E100017 = Global_error{id: "100017", eType: EXPECTED_ERROR, message: "No row is found for the supplied conditions. "}
var E100018 = Global_error{id: "100018", eType: EXPECTED_ERROR, message: "Error in code generating. "}
var E100019 = Global_error{id: "100019", eType: EXPECTED_ERROR, message: "Invalid associated flag. "}
var E100020 = Global_error{id: "100020", eType: EXPECTED_ERROR, message: "Data is not up to date. Update failed. Please refresh data and try again. "}
var E100021 = Global_error{id: "100021", eType: EXPECTED_ERROR, message: "Number of columns does not match number of FML fields. "}
var E100022 = Global_error{id: "100022", eType: EXPECTED_ERROR, message: "Service name can not be blank. "}
var E100023 = Global_error{id: "100023", eType: EXPECTED_ERROR, message: "Length of a field must be greater than 0. "}
var E100024 = Global_error{id: "100024", eType: EXPECTED_ERROR, message: "Number of value(s) specified for Other columns is(are) not equal to the FML column(s) "}
var E100025 = Global_error{id: "100025", eType: EXPECTED_ERROR, message: "FML field for the CODE Column must be provided. "}
var E100026 = Global_error{id: "100026", eType: EXPECTED_ERROR, message: "FML field for the DESCRIPTION column must be provided. "}
var E100027 = Global_error{id: "100027", eType: EXPECTED_ERROR, message: "Number of FML field(s) to use for excluding not equal to the number of values. "}
var E100028 = Global_error{id: "100028", eType: EXPECTED_ERROR, message: "No rows in the FML buffer. "}
var E100029 = Global_error{id: "100029", eType: EXPECTED_ERROR, message: "Multiple values returned. Use 'List of Values' to select a specific value. "}
var E100030 = Global_error{id: "100030", eType: EXPECTED_ERROR, message: "Can not open the Message File. Please contact System Administrator. "}
var E100031 = Global_error{id: "100031", eType: EXPECTED_ERROR, message: "Error in closing file. Please contact System Administrator. "}
var E100032 = Global_error{id: "100032", eType: EXPECTED_ERROR, message: "Label File for the screen has not been set. "}
var E100033 = Global_error{id: "100033", eType: EXPECTED_ERROR, message: "No right on this screen. "}
var E100034 = Global_error{id: "100034", eType: EXPECTED_ERROR, message: "Error in opening Windows. "}
var E100035 = Global_error{id: "100035", eType: EXPECTED_ERROR, message: "Error in setting system security. Please contact system administrator. "}
var E100036 = Global_error{id: "100036", eType: EXPECTED_ERROR, message: "Number of entries for the Key fields do not match the number of entries for the "}
var E100037 = Global_error{id: "100037", eType: EXPECTED_ERROR, message: "No Key fields passed. "}
var E100038 = Global_error{id: "100038", eType: EXPECTED_ERROR, message: "Table name cannot be BLANK. "}
var E100039 = Global_error{id: "100039", eType: EXPECTED_ERROR, message: "Select the message to be opened. "}
var E100040 = Global_error{id: "100040", eType: EXPECTED_ERROR, message: "Date cannot be less than the current date. "}
var E100041 = Global_error{id: "100041", eType: EXPECTED_ERROR, message: "Unexpected error from TUXEDO. For explanation, click the Detail button. "}
var E100042 = Global_error{id: "100042", eType: EXPECTED_ERROR, message: "A screen cannot be its own parent. "}
var E100043 = Global_error{id: "100043", eType: EXPECTED_ERROR, message: "Invalid READ FLAG. "}
var E100044 = Global_error{id: "100044", eType: EXPECTED_ERROR, message: "Invalid SAVE FLAG. "}
var E100045 = Global_error{id: "100045", eType: EXPECTED_ERROR, message: "End value of range cannot be less than start value. "}
var E100046 = Global_error{id: "100046", eType: EXPECTED_ERROR, message: "Parent effective date has to be earlier than child effective date. "}
var E100047 = Global_error{id: "100047", eType: EXPECTED_ERROR, message: "Parent expire date has to be later than child expire date. "}
var E100048 = Global_error{id: "100048", eType: EXPECTED_ERROR, message: "Invalid SAVE FLAG DEATILS. "}
var E100049 = Global_error{id: "100049", eType: EXPECTED_ERROR, message: "Invalid date time. "}
var E100050 = Global_error{id: "100050", eType: EXPECTED_ERROR, message: "FROM value is same as TO value. "}
var E100051 = Global_error{id: "100051", eType: EXPECTED_ERROR, message: "Invalid FROM and TO range. "}
var E100052 = Global_error{id: "100052", eType: EXPECTED_ERROR, message: "Value is not numberic "}
var E100053 = Global_error{id: "100053", eType: EXPECTED_ERROR, message: "Cannot delete detail record as only one detail exist for master. "}
var E100054 = Global_error{id: "100054", eType: EXPECTED_ERROR, message: "DataWindow does not attached to the DataWindow Control. "}
var E100055 = Global_error{id: "100055", eType: EXPECTED_ERROR, message: "Failed to get the datatype. "}
var E100056 = Global_error{id: "100056", eType: EXPECTED_ERROR, message: "Field does not found in FML Buffer. "}
var E100057 = Global_error{id: "100057", eType: EXPECTED_ERROR, message: "Window name does not exist. Please contact System Administrator. "}
var E100058 = Global_error{id: "100058", eType: EXPECTED_ERROR, message: "Data type entered is not allowed in current field. "}
var E100059 = Global_error{id: "100059", eType: EXPECTED_ERROR, message: "Data not modified. Nothing to save. "}
var E100060 = Global_error{id: "100060", eType: EXPECTED_ERROR, message: "Window error. "}
var E100062 = Global_error{id: "100062", eType: EXPECTED_ERROR, message: "Error opening label file. Contact System Administrator "}
var E100063 = Global_error{id: "100063", eType: EXPECTED_ERROR, message: "Duplicate entry found. "}
var E100064 = Global_error{id: "100064", eType: EXPECTED_ERROR, message: "Invalid group effective date. "}
var E100065 = Global_error{id: "100065", eType: EXPECTED_ERROR, message: "Invalid group expiry date. "}
var E100066 = Global_error{id: "100066", eType: EXPECTED_ERROR, message: "Maximum Logins attempts used. "}
var E100067 = Global_error{id: "100067", eType: EXPECTED_ERROR, message: "Failed to refresh DataWindow. "}
var E100068 = Global_error{id: "100068", eType: EXPECTED_ERROR, message: "Failed to delete rows in DataWindow. "}
var E100069 = Global_error{id: "100069", eType: EXPECTED_ERROR, message: "Failed to generate the Original Buffer. "}
var E100070 = Global_error{id: "100070", eType: EXPECTED_ERROR, message: "Failed to get Column Name. "}
var E100071 = Global_error{id: "100071", eType: EXPECTED_ERROR, message: "Failed to get column identifier. "}
var E100072 = Global_error{id: "100072", eType: EXPECTED_ERROR, message: "Failed to change the DataWindow properties. "}
var E100073 = Global_error{id: "100073", eType: EXPECTED_ERROR, message: "File does not exist. "}
var E100074 = Global_error{id: "100074", eType: EXPECTED_ERROR, message: "No data to load. "}
var E100075 = Global_error{id: "100075", eType: EXPECTED_ERROR, message: "Invalid chunk size. "}
var E100076 = Global_error{id: "100076", eType: EXPECTED_ERROR, message: "Must have at least 1 row to load. "}
var E100077 = Global_error{id: "100077", eType: EXPECTED_ERROR, message: "Length of the header is greater than the chunk size. "}
var E100078 = Global_error{id: "100078", eType: EXPECTED_ERROR, message: "From code and to code cannot be same. "}
var E100079 = Global_error{id: "100079", eType: EXPECTED_ERROR, message: "Overlapping range entered. "}
var E100080 = Global_error{id: "100080", eType: EXPECTED_ERROR, message: "User does not have rights to delete data. "}
var E100081 = Global_error{id: "100081", eType: EXPECTED_ERROR, message: "User does not have rights to save data. "}
var E100082 = Global_error{id: "100082", eType: EXPECTED_ERROR, message: "Data is not up-to-date. Delete fails. Please refresh data. "}
var E100083 = Global_error{id: "100083", eType: EXPECTED_ERROR, message: "Effective date should be greater than today. "}
var E100084 = Global_error{id: "100084", eType: EXPECTED_ERROR, message: "Cannot insert master record without at least one detail record passed. "}
var E100085 = Global_error{id: "100085", eType: EXPECTED_ERROR, message: "Would you like to send Hardware information to EIR? "}
var E100086 = Global_error{id: "100086", eType: EXPECTED_ERROR, message: "Would you like to delete Hardware information from EIR? "}
var E100087 = Global_error{id: "100087", eType: EXPECTED_ERROR, message: "Require superuser rights for this operation. "}
var E100088 = Global_error{id: "100088", eType: EXPECTED_ERROR, message: "You have chosen to purge all the entries in the Queue. Are you sure to process? "}
var E100089 = Global_error{id: "100089", eType: EXPECTED_ERROR, message: "Invalid Zoom Percentage. "}
var E100090 = Global_error{id: "100090", eType: EXPECTED_ERROR, message: "Invalid data in List Box, please contact application support "}
var E100091 = Global_error{id: "100091", eType: EXPECTED_ERROR, message: "No row selected for open detail window "}
var E100092 = Global_error{id: "100092", eType: EXPECTED_ERROR, message: "Salesman effective date cannot be less than dealer effective date. "}
var E100093 = Global_error{id: "100093", eType: EXPECTED_ERROR, message: "Salesman expiry date cannot be greater than dealer expiry date. "}
var E100094 = Global_error{id: "100094", eType: EXPECTED_ERROR, message: "TO DATE cannot be earlier than FROM DATE. "}
var E100095 = Global_error{id: "100095", eType: EXPECTED_ERROR, message: "Activate/ Deactivate completed successfully. "}
var E100096 = Global_error{id: "100096", eType: EXPECTED_ERROR, message: "Value is not corresponded with flag or Indicator "}
var E100097 = Global_error{id: "100097", eType: EXPECTED_ERROR, message: "Percentage should be between 0 and 100 "}
var E100098 = Global_error{id: "100098", eType: EXPECTED_ERROR, message: "Date for entered must not be greater than today. "}
var E100099 = Global_error{id: "100099", eType: EXPECTED_ERROR, message: "Invalid Indicator. "}
var E100103 = Global_error{id: "100103", eType: EXPECTED_ERROR, message: "Invalid Password. "}
var E100104 = Global_error{id: "100104", eType: EXPECTED_ERROR, message: "Passwords do not match. "}
var E100105 = Global_error{id: "100105", eType: EXPECTED_ERROR, message: "Invalid length of customer number. "}
var E100106 = Global_error{id: "100106", eType: EXPECTED_ERROR, message: "Format Type cannot be null. "}
var E100107 = Global_error{id: "100107", eType: EXPECTED_ERROR, message: "Bank code cannot be null. "}
var E100108 = Global_error{id: "100108", eType: EXPECTED_ERROR, message: "Product code cannot be null. "}
var E100109 = Global_error{id: "100109", eType: EXPECTED_ERROR, message: "Data file name cannot be null. "}
var E100110 = Global_error{id: "100110", eType: EXPECTED_ERROR, message: "Source path cannot be null. "}
var E100113 = Global_error{id: "100113", eType: EXPECTED_ERROR, message: "Lease Period must be greater than or equal Payment Frequency. "}
var E100114 = Global_error{id: "100114", eType: EXPECTED_ERROR, message: "Maximum Extent must not be less than Start Number + Increment Value. "}
var E100115 = Global_error{id: "100115", eType: EXPECTED_ERROR, message: "Current Sequence Number must not be greater than Start Number + Increment Value. "}
var E100116 = Global_error{id: "100116", eType: EXPECTED_ERROR, message: "Current Sequence Number must not be greater than Maximum Extent value. "}
var E100117 = Global_error{id: "100117", eType: EXPECTED_ERROR, message: "Maximum Extent cannot be less than Current Number value. "}
var E100118 = Global_error{id: "100118", eType: EXPECTED_ERROR, message: "Maximum Extent cannot be greater than Integer Value - Increment Value. "}
var E100119 = Global_error{id: "100119", eType: EXPECTED_ERROR, message: "Adjustment amount cannot be greater than Balance. "}
var E100120 = Global_error{id: "100120", eType: EXPECTED_ERROR, message: "Customer with same Identification no. is found in Black List. "}
var E100121 = Global_error{id: "100121", eType: EXPECTED_ERROR, message: "Hardware in Bad Hardward list.  Would you like to continue process? "}
var E100122 = Global_error{id: "100122", eType: EXPECTED_ERROR, message: "Calendar date must be between 1-31. "}
var E100123 = Global_error{id: "100123", eType: EXPECTED_ERROR, message: "Bill Day must be between 1-28. "}
var E100124 = Global_error{id: "100124", eType: EXPECTED_ERROR, message: "Valid values for month are start from  1 to 12. "}
var E100125 = Global_error{id: "100125", eType: EXPECTED_ERROR, message: "Increment value should not less than or equal to zero. "}
var E100126 = Global_error{id: "100126", eType: EXPECTED_ERROR, message: "Start value should not less than or equal to zero. "}
var E100127 = Global_error{id: "100127", eType: EXPECTED_ERROR, message: "From value cannot be greater than the to value. "}
var E100128 = Global_error{id: "100128", eType: EXPECTED_ERROR, message: "Received amount must not be less than the total paid amount. "}
var E100129 = Global_error{id: "100129", eType: EXPECTED_ERROR, message: "Invalid cheque amount "}
var E100130 = Global_error{id: "100130", eType: EXPECTED_ERROR, message: "Would you like to change cheque amount? "}
var E100131 = Global_error{id: "100131", eType: EXPECTED_ERROR, message: "Invalid paid amount. "}
var E100132 = Global_error{id: "100132", eType: EXPECTED_ERROR, message: "Invalid withholding tax. "}
var E100133 = Global_error{id: "100133", eType: EXPECTED_ERROR, message: "Invalid card number length. "}
var E100134 = Global_error{id: "100134", eType: EXPECTED_ERROR, message: "Would you like to reduce advance amount? "}
var E100135 = Global_error{id: "100135", eType: EXPECTED_ERROR, message: "User can swap subscriber at the most 15 subscribers. "}
var E100136 = Global_error{id: "100136", eType: EXPECTED_ERROR, message: "At least 2 subscribers must be provided "}
var E100137 = Global_error{id: "100137", eType: EXPECTED_ERROR, message: "Customer is written off "}
var E100138 = Global_error{id: "100138", eType: EXPECTED_ERROR, message: "New hardware number is registered as BAD hardware. "}
var E100139 = Global_error{id: "100139", eType: EXPECTED_ERROR, message: "Receive amount exceeds Total Amount to Pay.Would you like to allocate asADVANCE? "}
var E100140 = Global_error{id: "100140", eType: EXPECTED_ERROR, message: "No Transaction exists. Do you want to pay advance? "}
var E100141 = Global_error{id: "100141", eType: EXPECTED_ERROR, message: "Value must be greater than 0. "}
var E100142 = Global_error{id: "100142", eType: EXPECTED_ERROR, message: "Would you like to use the existing customer number? "}
var E100143 = Global_error{id: "100143", eType: EXPECTED_ERROR, message: "Start value must be less than the Maximum Extent value.1 "}
var E100144 = Global_error{id: "100144", eType: EXPECTED_ERROR, message: "Value must be less than maximum long value "}
var E100145 = Global_error{id: "100145", eType: EXPECTED_ERROR, message: "All transactions are under query. Would you like to pay advance? "}
var E100146 = Global_error{id: "100146", eType: EXPECTED_ERROR, message: "Woul you like to create a new customer? "}
var E100147 = Global_error{id: "100147", eType: EXPECTED_ERROR, message: "Date must not exceed boundary. "}
var E100148 = Global_error{id: "100148", eType: EXPECTED_ERROR, message: "Invalid dealer number. "}
var E100149 = Global_error{id: "100149", eType: EXPECTED_ERROR, message: "Invalid cheque number "}
var E100151 = Global_error{id: "100151", eType: EXPECTED_ERROR, message: "Invalid telephone prefix length. "}
var E100152 = Global_error{id: "100152", eType: EXPECTED_ERROR, message: "From date and to date should be in the current calendar year. "}
var E100153 = Global_error{id: "100153", eType: EXPECTED_ERROR, message: "Insufficient balance on this cheque "}
var E100154 = Global_error{id: "100154", eType: EXPECTED_ERROR, message: "User does not have payment rights. "}
var E100155 = Global_error{id: "100155", eType: EXPECTED_ERROR, message: "Would you like to start process? "}
var E100156 = Global_error{id: "100156", eType: EXPECTED_ERROR, message: "Password already expire. "}
var E100157 = Global_error{id: "100157", eType: EXPECTED_ERROR, message: "Printer Not Ready. Activate Printer and click the 'Ok' button to proceed. "}
var E100158 = Global_error{id: "100158", eType: EXPECTED_ERROR, message: "Incorrect version installed. Press OK to continue. "}
var E100159 = Global_error{id: "100159", eType: EXPECTED_ERROR, message: "User must be provided either Access or Allocation or both Link  to Dealer. "}
var E100160 = Global_error{id: "100160", eType: EXPECTED_ERROR, message: "The process finished. Please see details for loading information. "}
var E100161 = Global_error{id: "100161", eType: EXPECTED_ERROR, message: "Receipt requested for cancellation can be cancelled or uncancelled. "}
var E100162 = Global_error{id: "100162", eType: EXPECTED_ERROR, message: "Receipt in uncancelled state can only be set to Normal state. "}
var E100163 = Global_error{id: "100163", eType: EXPECTED_ERROR, message: "DataWindow not attached "}
var E100164 = Global_error{id: "100164", eType: EXPECTED_ERROR, message: "Failed to get the datatype for column in DataWindow. "}
var E100165 = Global_error{id: "100165", eType: EXPECTED_ERROR, message: "Field not found in the FML buffer "}
var E100166 = Global_error{id: "100166", eType: EXPECTED_ERROR, message: "Window name is not found. "}
var E100167 = Global_error{id: "100167", eType: EXPECTED_ERROR, message: "Would you like to start Credit Limit process? "}
var E100168 = Global_error{id: "100168", eType: EXPECTED_ERROR, message: "Would you like to start Month End process? "}
var E100169 = Global_error{id: "100169", eType: EXPECTED_ERROR, message: "Would you like to start Arrears Reset process? "}
var E100170 = Global_error{id: "100170", eType: EXPECTED_ERROR, message: "Would you like to start Credit Limit Reset process? "}
var E100171 = Global_error{id: "100171", eType: EXPECTED_ERROR, message: "Would you like to start Recovery Arrears process? "}
var E100172 = Global_error{id: "100172", eType: EXPECTED_ERROR, message: "Would you like to start Recovery Credit Limit process? "}
var E100173 = Global_error{id: "100173", eType: EXPECTED_ERROR, message: "Would you like to start Recovery Month End process? "}
var E100174 = Global_error{id: "100174", eType: EXPECTED_ERROR, message: "Would you like to start Recovery Arrears Reset process? "}
var E100175 = Global_error{id: "100175", eType: EXPECTED_ERROR, message: "Would you like to start Recovery Credit Limit Reset process? "}
var E100176 = Global_error{id: "100176", eType: EXPECTED_ERROR, message: "Date on the client machine is not the same the server machine. "}
var E100177 = Global_error{id: "100177", eType: EXPECTED_ERROR, message: "Invalid date setting. Contact System Administrator. "}
var E100178 = Global_error{id: "100178", eType: EXPECTED_ERROR, message: "Receipt Line Number should be between 1 and 3. "}
var E100179 = Global_error{id: "100179", eType: EXPECTED_ERROR, message: "Error opening the HELP FILE. "}
var E100180 = Global_error{id: "100180", eType: EXPECTED_ERROR, message: "Invalid Credit Limit amount. "}
var E100181 = Global_error{id: "100181", eType: EXPECTED_ERROR, message: "Date must not be less than Today. "}
var E100182 = Global_error{id: "100182", eType: EXPECTED_ERROR, message: "Invalid transaction type. "}
var E100183 = Global_error{id: "100183", eType: EXPECTED_ERROR, message: "Invalid telephone. "}
var E100184 = Global_error{id: "100184", eType: EXPECTED_ERROR, message: "Conversational service disconnected. "}
var E100185 = Global_error{id: "100185", eType: EXPECTED_ERROR, message: "Conversational service error. "}
var E100186 = Global_error{id: "100186", eType: EXPECTED_ERROR, message: "No group code is specified. "}
var E100187 = Global_error{id: "100187", eType: EXPECTED_ERROR, message: "No module has been selected. "}
var E100188 = Global_error{id: "100188", eType: EXPECTED_ERROR, message: "Would you llike to start process to automatically generate deposit? "}
var E100189 = Global_error{id: "100189", eType: EXPECTED_ERROR, message: "IMSI Reference must have the same first 5 digits "}
var E100190 = Global_error{id: "100190", eType: EXPECTED_ERROR, message: "Password length must be greater or equal 4 and less than or equal 8 charaters. "}
var E100191 = Global_error{id: "100191", eType: EXPECTED_ERROR, message: "New Password can not be same Old Password. "}
var E100192 = Global_error{id: "100192", eType: EXPECTED_ERROR, message: "Data is modified. Would you like to re-open?. "}
var E100193 = Global_error{id: "100193", eType: EXPECTED_ERROR, message: "Data is modified. Would you like to exit?. "}
var E100194 = Global_error{id: "100194", eType: EXPECTED_ERROR, message: "No authorize for transaction type "}
var E100195 = Global_error{id: "100195", eType: EXPECTED_ERROR, message: "Each password must contain at least one numeric. "}
var E100196 = Global_error{id: "100196", eType: EXPECTED_ERROR, message: "Each password must differ from the user's login name. "}
var E100197 = Global_error{id: "100197", eType: EXPECTED_ERROR, message: "Invalid cheque date, Latest of cheque date is. "}
var E100198 = Global_error{id: "100198", eType: EXPECTED_ERROR, message: "Would you like to create new master record? "}
var E100199 = Global_error{id: "100199", eType: EXPECTED_ERROR, message: "Invalid Hardware Prefix "}
var E100200 = Global_error{id: "100200", eType: EXPECTED_ERROR, message: "Date Of Birth cannot be equal or greater than today. "}
var E100201 = Global_error{id: "100201", eType: EXPECTED_ERROR, message: "Adjustment amount cannot be greater than Before Vat. "}
var E102202 = Global_error{id: "102202", eType: EXPECTED_ERROR, message: "Customer is Group Customer. Can Not Change Payment Method. "}
var E102203 = Global_error{id: "102203", eType: EXPECTED_ERROR, message: "Do you want to print receipt ? "}
var E102204 = Global_error{id: "102204", eType: EXPECTED_ERROR, message: "Invalid� coupon amount . "}
var E102205 = Global_error{id: "102205", eType: EXPECTED_ERROR, message: "Transit transaction of web payment does not exist "}
var E102206 = Global_error{id: "102206", eType: EXPECTED_ERROR, message: "All transaction of web payment does not exist "}
var E102207 = Global_error{id: "102207", eType: EXPECTED_ERROR, message: "Card Reader not ready "}
var E102208 = Global_error{id: "102208", eType: EXPECTED_ERROR, message: "Can't get Card number "}
var E102209 = Global_error{id: "102209", eType: EXPECTED_ERROR, message: "Duplicate Entry in Company Code. "}
var E102210 = Global_error{id: "102210", eType: EXPECTED_ERROR, message: "Duplicate Entry in Product Code. "}
var E102211 = Global_error{id: "102211", eType: EXPECTED_ERROR, message: "No data found for the given condition in Black list. "}
var E102212 = Global_error{id: "102212", eType: EXPECTED_ERROR, message: "Total Adjust Amount Can Not Less Than Sum of Each Adjust Amount. "}
var E102213 = Global_error{id: "102213", eType: EXPECTED_ERROR, message: "No transaction exists. "}
var E102214 = Global_error{id: "102214", eType: EXPECTED_ERROR, message: "This VPN group cannot hunt this number. "}
var E102215 = Global_error{id: "102215", eType: EXPECTED_ERROR, message: "The file name format is not valid. "}
var E102216 = Global_error{id: "102216", eType: EXPECTED_ERROR, message: "Telephone number status is not valid. "}
var E102217 = Global_error{id: "102217", eType: EXPECTED_ERROR, message: "Please choose Telephone or Telephone Dummy before continue the next operation. "}
var E102218 = Global_error{id: "102218", eType: EXPECTED_ERROR, message: "The dummy telephone request authorization does not exist "}
var E102219 = Global_error{id: "102219", eType: EXPECTED_ERROR, message: "Dummy telephone request type must be null "}
var E102220 = Global_error{id: "102220", eType: EXPECTED_ERROR, message: "Invalid dummy telephone request type "}
var E102221 = Global_error{id: "102221", eType: EXPECTED_ERROR, message: "Dummy telephone request method already exists but is not active "}
var E102222 = Global_error{id: "102222", eType: EXPECTED_ERROR, message: "Dummy telephone request method already exists and is currently active "}
var E102223 = Global_error{id: "102223", eType: EXPECTED_ERROR, message: "Invalid require value "}
var E102224 = Global_error{id: "102224", eType: EXPECTED_ERROR, message: "Dummy telephone request special type does not exist "}
var E102225 = Global_error{id: "102225", eType: EXPECTED_ERROR, message: "Dummy telephone request special type already exists and is currently effective "}
var E102226 = Global_error{id: "102226", eType: EXPECTED_ERROR, message: "Dummy telephone request special type already exists but is not effective "}
var E102227 = Global_error{id: "102227", eType: EXPECTED_ERROR, message: "Dummy telephone request special type already exists "}
var E102228 = Global_error{id: "102228", eType: EXPECTED_ERROR, message: "Invalid Maximum dummy request per day value "}
var E102229 = Global_error{id: "102229", eType: EXPECTED_ERROR, message: "Invalid Unlimited dummy request per day value "}
var E102230 = Global_error{id: "102230", eType: EXPECTED_ERROR, message: "Invalid Maximum dummy request per subscriber value "}
var E102231 = Global_error{id: "102231", eType: EXPECTED_ERROR, message: "Invalid Unlimited dummy request per subscriber value "}
var E102232 = Global_error{id: "102232", eType: EXPECTED_ERROR, message: "Invalid Maximum subscriber return value "}
var E102233 = Global_error{id: "102233", eType: EXPECTED_ERROR, message: "Effective date should be equal or greater than today "}
var E102234 = Global_error{id: "102234", eType: EXPECTED_ERROR, message: "Not allow to change E-mail address for this alert method "}
var E102235 = Global_error{id: "102235", eType: EXPECTED_ERROR, message: "dtac will send your e-invoice to %s. Thank you for using dtac�s e-invoice. "}
var E102236 = Global_error{id: "102236", eType: EXPECTED_ERROR, message: "invoice alert service has been deactivated. Thank you "}
var E102237 = Global_error{id: "102237", eType: EXPECTED_ERROR, message: "Current credit limit amount have more than new credit limit amount. "}
var E102238 = Global_error{id: "102238", eType: EXPECTED_ERROR, message: "Cannot adjust credit limit amount because of approval status is incorrect. "}
var E102239 = Global_error{id: "102239", eType: EXPECTED_ERROR, message: "The number of days is over your authorization. "}
var E102240 = Global_error{id: "102240", eType: EXPECTED_ERROR, message: "Customer's company does not match with company code. "}
var E102241 = Global_error{id: "102241", eType: EXPECTED_ERROR, message: "Customer's company of this subscriber must match with previous subscriber. "}
var E102242 = Global_error{id: "102242", eType: EXPECTED_ERROR, message: "Balance Transfer between DTAC and�DTN is NOT allowed. "}
var E102243 = Global_error{id: "102243", eType: EXPECTED_ERROR, message: "TriNet Customer can not register Recurring payment method. "}
var E102244 = Global_error{id: "102244", eType: EXPECTED_ERROR, message: "Cheque is used to different company. "}
var E102245 = Global_error{id: "102245", eType: EXPECTED_ERROR, message: "Invalid ID Number/TAX ID. "}
var E102246 = Global_error{id: "102246", eType: EXPECTED_ERROR, message: "Invalid VAT Branch. "}
var E102247 = Global_error{id: "102247", eType: EXPECTED_ERROR, message: "Invalid TAX ID and VAT Branch, please input the correct value or blank. "}
var E102248 = Global_error{id: "102248", eType: EXPECTED_ERROR, message: "VAT Branch is printed to Head Office. "}
var E102249 = Global_error{id: "102249", eType: EXPECTED_ERROR, message: "Invalid ID Number/TAX ID. "}
var E102250 = Global_error{id: "102250", eType: EXPECTED_ERROR, message: "Invalid TAX ID and VAT Branch. "}
var E102251 = Global_error{id: "102251", eType: EXPECTED_ERROR, message: "Group Code and Extended Group cannot be same value. "}
var E102252 = Global_error{id: "102252", eType: EXPECTED_ERROR, message: "Would you like to do all transactions? "}
var E102253 = Global_error{id: "102253", eType: EXPECTED_ERROR, message: "You are not authorized to cancel or change while contract term of this number is still active. "}
var E200001 = Global_error{id: "200001", eType: EXPECTED_ERROR, message: "User code already exists "}
var E200002 = Global_error{id: "200002", eType: EXPECTED_ERROR, message: "Associations exists for the group. Would you like to delete ? "}
var E200003 = Global_error{id: "200003", eType: EXPECTED_ERROR, message: "Dealer(s) associated with this user. Would you like to delete ? "}
var E200004 = Global_error{id: "200004", eType: EXPECTED_ERROR, message: "Location(s) associated with this user. Would you like to delete? "}
var E200005 = Global_error{id: "200005", eType: EXPECTED_ERROR, message: "Group Code does not exist. "}
var E200006 = Global_error{id: "200006", eType: EXPECTED_ERROR, message: "Group exists but is not currently effective. "}
var E200007 = Global_error{id: "200007", eType: EXPECTED_ERROR, message: "Group exists and is currently effective. "}
var E200008 = Global_error{id: "200008", eType: EXPECTED_ERROR, message: "User Code does not exist. "}
var E200009 = Global_error{id: "200009", eType: EXPECTED_ERROR, message: "User exists but is not currently effective. "}
var E200010 = Global_error{id: "200010", eType: EXPECTED_ERROR, message: "User exists and is currently effective. "}
var E200011 = Global_error{id: "200011", eType: EXPECTED_ERROR, message: "User does not exist to this group. "}
var E200012 = Global_error{id: "200012", eType: EXPECTED_ERROR, message: "User exists for this group for earlier effective date. "}
var E200013 = Global_error{id: "200013", eType: EXPECTED_ERROR, message: "Effective date for user cannot be earlier than effective date for the group. "}
var E200014 = Global_error{id: "200014", eType: EXPECTED_ERROR, message: "Expiry date for user cannot be later than expiry date for the group. "}
var E200015 = Global_error{id: "200015", eType: EXPECTED_ERROR, message: "User exists for this group with later expiry date. "}
var E200016 = Global_error{id: "200016", eType: EXPECTED_ERROR, message: "Location code does not exist. "}
var E200017 = Global_error{id: "200017", eType: EXPECTED_ERROR, message: "Dealer code does not exist. "}
var E200018 = Global_error{id: "200018", eType: EXPECTED_ERROR, message: "Update ACL failed. "}
var E200020 = Global_error{id: "200020", eType: EXPECTED_ERROR, message: "Service does not exist. "}
var E200021 = Global_error{id: "200021", eType: EXPECTED_ERROR, message: "Service exists but is not currently effective. "}
var E200022 = Global_error{id: "200022", eType: EXPECTED_ERROR, message: "Service exists and is currently effective. "}
var E200023 = Global_error{id: "200023", eType: EXPECTED_ERROR, message: "Service associated to an operation of a screen, cannot delete. "}
var E200024 = Global_error{id: "200024", eType: EXPECTED_ERROR, message: "Operation does not exist. "}
var E200025 = Global_error{id: "200025", eType: EXPECTED_ERROR, message: "Operation code exists but is not currently effective. "}
var E200026 = Global_error{id: "200026", eType: EXPECTED_ERROR, message: "Operation code exists and is currently effective. "}
var E200027 = Global_error{id: "200027", eType: EXPECTED_ERROR, message: "Operation associated to a screen, cannot delete. "}
var E200028 = Global_error{id: "200028", eType: EXPECTED_ERROR, message: "Screen does not exist. "}
var E200029 = Global_error{id: "200029", eType: EXPECTED_ERROR, message: "Screen exists but is not currently effective. "}
var E200030 = Global_error{id: "200030", eType: EXPECTED_ERROR, message: "Screen exists and is currently effective. "}
var E200031 = Global_error{id: "200031", eType: EXPECTED_ERROR, message: "Child screen associated to this screen, cannot delete. "}
var E200032 = Global_error{id: "200032", eType: EXPECTED_ERROR, message: "Parent of this screen is not currently effective. "}
var E200033 = Global_error{id: "200033", eType: EXPECTED_ERROR, message: "Invalid Parent attached to this Screen Item. "}
var E200034 = Global_error{id: "200034", eType: EXPECTED_ERROR, message: "Screen code cannot be equal to parent code. "}
var E200035 = Global_error{id: "200035", eType: EXPECTED_ERROR, message: "Invalid Screen-Parent combination. "}
var E200036 = Global_error{id: "200036", eType: EXPECTED_ERROR, message: "User exists for this group with greater expiry date. "}
var E200037 = Global_error{id: "200037", eType: EXPECTED_ERROR, message: "Screen - Operation combination does not exist. "}
var E200038 = Global_error{id: "200038", eType: EXPECTED_ERROR, message: "Associations exist for this Message Nature. Cannot delete ! "}
var E200039 = Global_error{id: "200039", eType: EXPECTED_ERROR, message: "Message Catalogue does not exist. "}
var E200040 = Global_error{id: "200040", eType: EXPECTED_ERROR, message: "Message Nature code does not exist. "}
var E200042 = Global_error{id: "200042", eType: EXPECTED_ERROR, message: "Service code already exists. "}
var E200043 = Global_error{id: "200043", eType: EXPECTED_ERROR, message: "Screen code already exists. "}
var E200044 = Global_error{id: "200044", eType: EXPECTED_ERROR, message: "Operation code already exists. "}
var E200045 = Global_error{id: "200045", eType: EXPECTED_ERROR, message: "Process does not exist. "}
var E200046 = Global_error{id: "200046", eType: EXPECTED_ERROR, message: "Argument does not exist. "}
var E200047 = Global_error{id: "200047", eType: EXPECTED_ERROR, message: "Periodicity does not exist. "}
var E200048 = Global_error{id: "200048", eType: EXPECTED_ERROR, message: "sy_code does not exist "}
var E200049 = Global_error{id: "200049", eType: EXPECTED_ERROR, message: "Queue code exist. "}
var E200050 = Global_error{id: "200050", eType: EXPECTED_ERROR, message: "Crash Information does not exist. "}
var E200051 = Global_error{id: "200051", eType: EXPECTED_ERROR, message: "Execute parameter does not exist. "}
var E200052 = Global_error{id: "200052", eType: EXPECTED_ERROR, message: "Process exist using this periodicity code. "}
var E200053 = Global_error{id: "200053", eType: EXPECTED_ERROR, message: "This Queue Entry has not crashed. "}
var E200054 = Global_error{id: "200054", eType: EXPECTED_ERROR, message: "Queue Entry has already been executed. "}
var E200055 = Global_error{id: "200055", eType: EXPECTED_ERROR, message: "Queue Entry has Crashed. "}
var E200056 = Global_error{id: "200056", eType: EXPECTED_ERROR, message: "Invalid Service Name. "}
var E200057 = Global_error{id: "200057", eType: EXPECTED_ERROR, message: "Next scheduled date and time of execution cannot be earlier than today. "}
var E200058 = Global_error{id: "200058", eType: EXPECTED_ERROR, message: "Batch/Report Indicator can be either 'B' or 'R'. "}
var E200059 = Global_error{id: "200059", eType: EXPECTED_ERROR, message: "Crash Recovery Indicator can be either 'Y' or 'N'. "}
var E200060 = Global_error{id: "200060", eType: EXPECTED_ERROR, message: "Error in queue code generating "}
var E200061 = Global_error{id: "200061", eType: EXPECTED_ERROR, message: "Invalid process code. "}
var E200064 = Global_error{id: "200064", eType: EXPECTED_ERROR, message: "Mandatory Indicator can be either 'Y' or 'N'. "}
var E200065 = Global_error{id: "200065", eType: EXPECTED_ERROR, message: "Invalid user code. "}
var E200066 = Global_error{id: "200066", eType: EXPECTED_ERROR, message: "Invalid periodicity code. "}
var E200067 = Global_error{id: "200067", eType: EXPECTED_ERROR, message: "Group-Screen-Operation combination does not exist. "}
var E200068 = Global_error{id: "200068", eType: EXPECTED_ERROR, message: "User exists for this group. Cannot delete. "}
var E200069 = Global_error{id: "200069", eType: EXPECTED_ERROR, message: "No LOCATIONS associated to this USER. "}
var E200070 = Global_error{id: "200070", eType: EXPECTED_ERROR, message: "No DEALERS associated to this USER. "}
var E200071 = Global_error{id: "200071", eType: EXPECTED_ERROR, message: "Group data found. "}
var E200072 = Global_error{id: "200072", eType: EXPECTED_ERROR, message: "User data found. "}
var E200075 = Global_error{id: "200075", eType: EXPECTED_ERROR, message: "Nature code data found. "}
var E200076 = Global_error{id: "200076", eType: EXPECTED_ERROR, message: "Message data found. "}
var E200077 = Global_error{id: "200077", eType: EXPECTED_ERROR, message: "Dealer data found. "}
var E200078 = Global_error{id: "200078", eType: EXPECTED_ERROR, message: "Location data found. "}
var E200080 = Global_error{id: "200080", eType: EXPECTED_ERROR, message: "Access provided for all component. "}
var E200081 = Global_error{id: "200081", eType: EXPECTED_ERROR, message: "All the screens and operations have been associated successfully. "}
var E200082 = Global_error{id: "200082", eType: EXPECTED_ERROR, message: "You are not AUTHORIZED to use this system. Please contact Hot line service 31190 "}
var E200083 = Global_error{id: "200083", eType: EXPECTED_ERROR, message: "No operation associate to this screen. "}
var E200084 = Global_error{id: "200084", eType: EXPECTED_ERROR, message: "Screen operation data found. "}
var E200085 = Global_error{id: "200085", eType: EXPECTED_ERROR, message: "This Service is not associated to any Screen-Operation combination yet. "}
var E200086 = Global_error{id: "200086", eType: EXPECTED_ERROR, message: "Error saving to the MIB. "}
var E200087 = Global_error{id: "200087", eType: EXPECTED_ERROR, message: "Group code has to be numeric. "}
var E200088 = Global_error{id: "200088", eType: EXPECTED_ERROR, message: "Message Nature should be between 1-9 "}
var E200089 = Global_error{id: "200089", eType: EXPECTED_ERROR, message: "Invalid Menu-Window combination. "}
var E200090 = Global_error{id: "200090", eType: EXPECTED_ERROR, message: "Valid screen . "}
var E200092 = Global_error{id: "200092", eType: EXPECTED_ERROR, message: "Parameter already exist. "}
var E200093 = Global_error{id: "200093", eType: EXPECTED_ERROR, message: "Parameter does not exist. "}
var E200094 = Global_error{id: "200094", eType: EXPECTED_ERROR, message: "Periodicity code exist. "}
var E200096 = Global_error{id: "200096", eType: EXPECTED_ERROR, message: "Process defined with this periodicity. Cannot Delete. "}
var E200097 = Global_error{id: "200097", eType: EXPECTED_ERROR, message: "Queue does not exist. "}
var E200098 = Global_error{id: "200098", eType: EXPECTED_ERROR, message: "Process code does not exist. "}
var E200099 = Global_error{id: "200099", eType: EXPECTED_ERROR, message: "Error inserting value in BO_EXEC_VALU. "}
var E200102 = Global_error{id: "200102", eType: EXPECTED_ERROR, message: "Next schedule data and time of execution cannot be earlier than today. "}
var E200103 = Global_error{id: "200103", eType: EXPECTED_ERROR, message: "Cannot delete, because card associated with more than one telphone. "}
var E200105 = Global_error{id: "200105", eType: EXPECTED_ERROR, message: "Batch / Report code already exist. "}
var E200106 = Global_error{id: "200106", eType: EXPECTED_ERROR, message: "Argument already exists. "}
var E200108 = Global_error{id: "200108", eType: EXPECTED_ERROR, message: "Entries exist in Queue for this Batch / Report which are not yet to be executed. "}
var E200109 = Global_error{id: "200109", eType: EXPECTED_ERROR, message: "Queue entry has child entries. "}
var E200110 = Global_error{id: "200110", eType: EXPECTED_ERROR, message: "This ESN is not Bad. "}
var E200111 = Global_error{id: "200111", eType: EXPECTED_ERROR, message: "This ESN is Bad. "}
var E200112 = Global_error{id: "200112", eType: EXPECTED_ERROR, message: "Bad ESN Reason does not exists. "}
var E200113 = Global_error{id: "200113", eType: EXPECTED_ERROR, message: "Bad ESN Reason already exists. "}
var E200114 = Global_error{id: "200114", eType: EXPECTED_ERROR, message: "This IMEI is not Bad. "}
var E200115 = Global_error{id: "200115", eType: EXPECTED_ERROR, message: "This IMEI is Bad. "}
var E200116 = Global_error{id: "200116", eType: EXPECTED_ERROR, message: "Bad IMEI Reason does not exists. "}
var E200117 = Global_error{id: "200117", eType: EXPECTED_ERROR, message: "Bad IMEI Reason exists. "}
var E200119 = Global_error{id: "200119", eType: EXPECTED_ERROR, message: "TAC Branch does not exist. "}
var E200120 = Global_error{id: "200120", eType: EXPECTED_ERROR, message: "TAC Branch already exists. "}
var E200121 = Global_error{id: "200121", eType: EXPECTED_ERROR, message: "TAC Branch exists and is currently effective. "}
var E200122 = Global_error{id: "200122", eType: EXPECTED_ERROR, message: "TAC Branch exists but is not  currently effective. "}
var E200123 = Global_error{id: "200123", eType: EXPECTED_ERROR, message: "Brand does not exist. "}
var E200124 = Global_error{id: "200124", eType: EXPECTED_ERROR, message: "Brand already exists. "}
var E200125 = Global_error{id: "200125", eType: EXPECTED_ERROR, message: "Brand exists and is currently effective. "}
var E200126 = Global_error{id: "200126", eType: EXPECTED_ERROR, message: "Brand exists but is not currently effective. "}
var E200127 = Global_error{id: "200127", eType: EXPECTED_ERROR, message: "Card country does not exists. "}
var E200128 = Global_error{id: "200128", eType: EXPECTED_ERROR, message: "Card Country already exist. "}
var E200129 = Global_error{id: "200129", eType: EXPECTED_ERROR, message: "Card country exists and is currently effective. "}
var E200130 = Global_error{id: "200130", eType: EXPECTED_ERROR, message: "Card country exists but is not currently effective. "}
var E200131 = Global_error{id: "200131", eType: EXPECTED_ERROR, message: "Card Number does not exist. "}
var E200132 = Global_error{id: "200132", eType: EXPECTED_ERROR, message: "Card Number already exists. "}
var E200133 = Global_error{id: "200133", eType: EXPECTED_ERROR, message: "Card issuer does not exist. "}
var E200134 = Global_error{id: "200134", eType: EXPECTED_ERROR, message: "Card Issuer already exists. "}
var E200135 = Global_error{id: "200135", eType: EXPECTED_ERROR, message: "Card issuer exists and is currently effective. "}
var E200136 = Global_error{id: "200136", eType: EXPECTED_ERROR, message: "Card issuer exists but  is not currently effective. "}
var E200137 = Global_error{id: "200137", eType: EXPECTED_ERROR, message: "Card network does not exist. "}
var E200138 = Global_error{id: "200138", eType: EXPECTED_ERROR, message: "Card Network already exist. "}
var E200139 = Global_error{id: "200139", eType: EXPECTED_ERROR, message: "Card network exists and is currently effective. "}
var E200140 = Global_error{id: "200140", eType: EXPECTED_ERROR, message: "Prize amount much less than unit amount. "}
var E200141 = Global_error{id: "200141", eType: EXPECTED_ERROR, message: "Card service does not exist. "}
var E200142 = Global_error{id: "200142", eType: EXPECTED_ERROR, message: "Card service already exists. "}
var E200143 = Global_error{id: "200143", eType: EXPECTED_ERROR, message: "Card service exists and is currently effective. "}
var E200144 = Global_error{id: "200144", eType: EXPECTED_ERROR, message: "Card service exists and is not currently effective. "}
var E200145 = Global_error{id: "200145", eType: EXPECTED_ERROR, message: "Card status does not exist. "}
var E200146 = Global_error{id: "200146", eType: EXPECTED_ERROR, message: "Card status exists. "}
var E200147 = Global_error{id: "200147", eType: EXPECTED_ERROR, message: "Card style exists. "}
var E200148 = Global_error{id: "200148", eType: EXPECTED_ERROR, message: "Card style does not exist. "}
var E200149 = Global_error{id: "200149", eType: EXPECTED_ERROR, message: "Card style exists and is currently effective. "}
var E200150 = Global_error{id: "200150", eType: EXPECTED_ERROR, message: "Card style exists but is not currently effective. "}
var E200151 = Global_error{id: "200151", eType: EXPECTED_ERROR, message: "Card Type does not exist. "}
var E200152 = Global_error{id: "200152", eType: EXPECTED_ERROR, message: "Card Type already exists. "}
var E200153 = Global_error{id: "200153", eType: EXPECTED_ERROR, message: "Company does not exists. "}
var E200154 = Global_error{id: "200154", eType: EXPECTED_ERROR, message: "Company already exist. "}
var E200155 = Global_error{id: "200155", eType: EXPECTED_ERROR, message: "Dealer exists and is currently effective. "}
var E200156 = Global_error{id: "200156", eType: EXPECTED_ERROR, message: "Dealer exists but is not currently effective. "}
var E200157 = Global_error{id: "200157", eType: EXPECTED_ERROR, message: "Dealer Master Number already exists. "}
var E200158 = Global_error{id: "200158", eType: EXPECTED_ERROR, message: "Dealer Type does not exist. "}
var E200159 = Global_error{id: "200159", eType: EXPECTED_ERROR, message: "Dealer type already exists. "}
var E200162 = Global_error{id: "200162", eType: EXPECTED_ERROR, message: "Golden Number does not exist. "}
var E200163 = Global_error{id: "200163", eType: EXPECTED_ERROR, message: "Golden Number already exists. "}
var E200164 = Global_error{id: "200164", eType: EXPECTED_ERROR, message: "Hardware Number does not exist. "}
var E200165 = Global_error{id: "200165", eType: EXPECTED_ERROR, message: "Hardware number already exists. "}
var E200166 = Global_error{id: "200166", eType: EXPECTED_ERROR, message: "Hardware Status does not exist. "}
var E200167 = Global_error{id: "200167", eType: EXPECTED_ERROR, message: "Hardware Status already exists. "}
var E200168 = Global_error{id: "200168", eType: EXPECTED_ERROR, message: "Hardware Type does not exist. "}
var E200169 = Global_error{id: "200169", eType: EXPECTED_ERROR, message: "Hardware Type already exists. "}
var E200170 = Global_error{id: "200170", eType: EXPECTED_ERROR, message: "Invalid length of ESN number. "}
var E200172 = Global_error{id: "200172", eType: EXPECTED_ERROR, message: "Invalid Sim Card Number. "}
var E200173 = Global_error{id: "200173", eType: EXPECTED_ERROR, message: "Model does not exist. "}
var E200174 = Global_error{id: "200174", eType: EXPECTED_ERROR, message: "Model already exists. "}
var E200175 = Global_error{id: "200175", eType: EXPECTED_ERROR, message: "Model exists and is currently effective. "}
var E200176 = Global_error{id: "200176", eType: EXPECTED_ERROR, message: "Model exists but is not currently effective. "}
var E200179 = Global_error{id: "200179", eType: EXPECTED_ERROR, message: "Prefix does not exist. "}
var E200180 = Global_error{id: "200180", eType: EXPECTED_ERROR, message: "Prefix already exists. "}
var E200181 = Global_error{id: "200181", eType: EXPECTED_ERROR, message: "Prefix exists and is currently effective. "}
var E200182 = Global_error{id: "200182", eType: EXPECTED_ERROR, message: "Prefix exists but is not currently effective. "}
var E200183 = Global_error{id: "200183", eType: EXPECTED_ERROR, message: "Product does not exist. "}
var E200184 = Global_error{id: "200184", eType: EXPECTED_ERROR, message: "Product already exists. "}
var E200185 = Global_error{id: "200185", eType: EXPECTED_ERROR, message: "Booked telephone does not exist in Book List. "}
var E200186 = Global_error{id: "200186", eType: EXPECTED_ERROR, message: "Salesman does not exist. "}
var E200187 = Global_error{id: "200187", eType: EXPECTED_ERROR, message: "Salesman already exists. "}
var E200188 = Global_error{id: "200188", eType: EXPECTED_ERROR, message: "Telephone does not exist. "}
var E200189 = Global_error{id: "200189", eType: EXPECTED_ERROR, message: "Telephone number already exists. "}
var E200190 = Global_error{id: "200190", eType: EXPECTED_ERROR, message: "Telephone type does not exist. "}
var E200191 = Global_error{id: "200191", eType: EXPECTED_ERROR, message: "Telephone type already exists. "}
var E200192 = Global_error{id: "200192", eType: EXPECTED_ERROR, message: "This Telephone number is booked. "}
var E200193 = Global_error{id: "200193", eType: EXPECTED_ERROR, message: "This Telephone number is unbooked. "}
var E200194 = Global_error{id: "200194", eType: EXPECTED_ERROR, message: "Unbooked reason does not exists. "}
var E200195 = Global_error{id: "200195", eType: EXPECTED_ERROR, message: "Unbooked reason already exists. "}
var E200196 = Global_error{id: "200196", eType: EXPECTED_ERROR, message: "Unreserved telephone does not exist. "}
var E200197 = Global_error{id: "200197", eType: EXPECTED_ERROR, message: "No Saleman detail exists. Cannot maintain header details without details. "}
var E200198 = Global_error{id: "200198", eType: EXPECTED_ERROR, message: "Cannot delete Salesman details, only one detail row exist. "}
var E200199 = Global_error{id: "200199", eType: EXPECTED_ERROR, message: "Dealer exists in allocation list, cannot delete. "}
var E200200 = Global_error{id: "200200", eType: EXPECTED_ERROR, message: "Dealer exists in Telephone, cannot delete. "}
var E200201 = Global_error{id: "200201", eType: EXPECTED_ERROR, message: "Invalid Golden Number length. "}
var E200202 = Global_error{id: "200202", eType: EXPECTED_ERROR, message: "Telephone could not be created. "}
var E200203 = Global_error{id: "200203", eType: EXPECTED_ERROR, message: "Telephone could not be allocated. "}
var E200204 = Global_error{id: "200204", eType: EXPECTED_ERROR, message: "Invalid SIM number. "}
var E200205 = Global_error{id: "200205", eType: EXPECTED_ERROR, message: "Invalid IMSI number. "}
var E200206 = Global_error{id: "200206", eType: EXPECTED_ERROR, message: "Invalid PIN & PUK number. "}
var E200207 = Global_error{id: "200207", eType: EXPECTED_ERROR, message: "Card number exists in telephone table, cannot delete card. "}
var E200208 = Global_error{id: "200208", eType: EXPECTED_ERROR, message: "Card is live, cannot delete. "}
var E200209 = Global_error{id: "200209", eType: EXPECTED_ERROR, message: "Telephone is in used, cannot delete. "}
var E200210 = Global_error{id: "200210", eType: EXPECTED_ERROR, message: "Telephone exists in Allocation table, cannot delete. "}
var E200211 = Global_error{id: "200211", eType: EXPECTED_ERROR, message: "Telephone exists in Unreserve telephone table, cannot delete. "}
var E200212 = Global_error{id: "200212", eType: EXPECTED_ERROR, message: "No Telephone number to deallocated. "}
var E200213 = Global_error{id: "200213", eType: EXPECTED_ERROR, message: "Invalid telephone range. "}
var E200214 = Global_error{id: "200214", eType: EXPECTED_ERROR, message: "Deallocate dealer does not belong to User's dealer allocation list. "}
var E200215 = Global_error{id: "200215", eType: EXPECTED_ERROR, message: "Live flag of telephone is Live. "}
var E200216 = Global_error{id: "200216", eType: EXPECTED_ERROR, message: "Error in deallocation. "}
var E200217 = Global_error{id: "200217", eType: EXPECTED_ERROR, message: "Telephone could not deallocated in allocation table. "}
var E200218 = Global_error{id: "200218", eType: EXPECTED_ERROR, message: "Hardware Prefix exists in hardward table, cannot delete. "}
var E200219 = Global_error{id: "200219", eType: EXPECTED_ERROR, message: "Hardware Type exists in Model Table, cannot delete. "}
var E200220 = Global_error{id: "200220", eType: EXPECTED_ERROR, message: "Hardware Status exists in hardware table, cannot delete. "}
var E200221 = Global_error{id: "200221", eType: EXPECTED_ERROR, message: "Hardware Status exist in Param table cannot delete. "}
var E200222 = Global_error{id: "200222", eType: EXPECTED_ERROR, message: "Brand has been associated with RD_MODL table, cannot delete. "}
var E200223 = Global_error{id: "200223", eType: EXPECTED_ERROR, message: "TAC Branch code exists in Telephone table, cannot delete. "}
var E200224 = Global_error{id: "200224", eType: EXPECTED_ERROR, message: "TAC Branch code exists in Dealer Table, cannot delete. "}
var E200225 = Global_error{id: "200225", eType: EXPECTED_ERROR, message: "Company has been associated with Bill Product, cannot delete. "}
var E200226 = Global_error{id: "200226", eType: EXPECTED_ERROR, message: "Hardware Prefix is mapped with this Model, cannot delete. "}
var E200227 = Global_error{id: "200227", eType: EXPECTED_ERROR, message: "Telephone type is in use in Telephone Table, cannot delete "}
var E200228 = Global_error{id: "200228", eType: EXPECTED_ERROR, message: "Unbooked reason code exist in Unbook Telephone. Can not Delete. "}
var E200229 = Global_error{id: "200229", eType: EXPECTED_ERROR, message: "Batch number does not exist. "}
var E200230 = Global_error{id: "200230", eType: EXPECTED_ERROR, message: "Card Number is Live. "}
var E200231 = Global_error{id: "200231", eType: EXPECTED_ERROR, message: "Telephone's product has been changed. "}
var E200232 = Global_error{id: "200232", eType: EXPECTED_ERROR, message: "Telephone attached to card is Live, cannot delete. "}
var E200233 = Global_error{id: "200233", eType: EXPECTED_ERROR, message: "Telephone attached to card has been switched off, cannot delete. "}
var E200234 = Global_error{id: "200234", eType: EXPECTED_ERROR, message: "Invalid dealer code for complete booking. "}
var E200235 = Global_error{id: "200235", eType: EXPECTED_ERROR, message: "Telephone does not exist in Reserve List. "}
var E200236 = Global_error{id: "200236", eType: EXPECTED_ERROR, message: "Telephone is not applicable for booking. "}
var E200237 = Global_error{id: "200237", eType: EXPECTED_ERROR, message: "This telephone cannot be booked due to switch off date. "}
var E200238 = Global_error{id: "200238", eType: EXPECTED_ERROR, message: "This telephone number is already reserved. "}
var E200239 = Global_error{id: "200239", eType: EXPECTED_ERROR, message: "EIR Indicator for product is not valid. "}
var E200240 = Global_error{id: "200240", eType: EXPECTED_ERROR, message: "All hardware numbers could not be deleted with live-flag and swof-date condition "}
var E200241 = Global_error{id: "200241", eType: EXPECTED_ERROR, message: "New ESN number is added to the BAD ESN list. "}
var E200242 = Global_error{id: "200242", eType: EXPECTED_ERROR, message: "Existing ESN number which is currently marked as GOOD, now updated as a Bad ESN. "}
var E200243 = Global_error{id: "200243", eType: EXPECTED_ERROR, message: "ESN Number is already listed as a Bad ESN. "}
var E200244 = Global_error{id: "200244", eType: EXPECTED_ERROR, message: "New IMEI Number added to the Bad IMEI list. "}
var E200245 = Global_error{id: "200245", eType: EXPECTED_ERROR, message: "Existing IMEI Number is currently marked as GOOD, now updated as a Bad IMEI. "}
var E200246 = Global_error{id: "200246", eType: EXPECTED_ERROR, message: "IMEI Number is already listed as Bad IMEI. "}
var E200247 = Global_error{id: "200247", eType: EXPECTED_ERROR, message: "ESN Number already exists. "}
var E200248 = Global_error{id: "200248", eType: EXPECTED_ERROR, message: "ESN Number does not exist. "}
var E200249 = Global_error{id: "200249", eType: EXPECTED_ERROR, message: "IMEI Number already exists. "}
var E200250 = Global_error{id: "200250", eType: EXPECTED_ERROR, message: "IMEI Number does not exist. "}
var E200251 = Global_error{id: "200251", eType: EXPECTED_ERROR, message: "This Telephone does not exist in Unreserved Table. "}
var E200255 = Global_error{id: "200255", eType: EXPECTED_ERROR, message: "Card Network exists for this Country Code. cannot delete. "}
var E200256 = Global_error{id: "200256", eType: EXPECTED_ERROR, message: "Card exists for this card service, cannot delete. "}
var E200257 = Global_error{id: "200257", eType: EXPECTED_ERROR, message: "Card exists for this Card Status, cannot delete. "}
var E200258 = Global_error{id: "200258", eType: EXPECTED_ERROR, message: "Card exists for this Card Style, cannot delete. "}
var E200259 = Global_error{id: "200259", eType: EXPECTED_ERROR, message: "Card exists for this Card Type, cannot delete. "}
var E200260 = Global_error{id: "200260", eType: EXPECTED_ERROR, message: "Dealer(s) exist for this Dealer Type, cannot delete. "}
var E200261 = Global_error{id: "200261", eType: EXPECTED_ERROR, message: "Bad ESN Reason has been associated in Bad ESN. "}
var E200262 = Global_error{id: "200262", eType: EXPECTED_ERROR, message: "Bad IMEI Reason has been associated in Bad IMEI. "}
var E200263 = Global_error{id: "200263", eType: EXPECTED_ERROR, message: "Hardware  number is currently LIVE� cannot delete. "}
var E200264 = Global_error{id: "200264", eType: EXPECTED_ERROR, message: "Switch of date already exists. "}
var E200265 = Global_error{id: "200265", eType: EXPECTED_ERROR, message: "Telephone number is not currently NOT LIVE. "}
var E200266 = Global_error{id: "200266", eType: EXPECTED_ERROR, message: "Telephone  number is currently allocated to a dealer. "}
var E200267 = Global_error{id: "200267", eType: EXPECTED_ERROR, message: "Telephone's product is not as same as FROM product. "}
var E200268 = Global_error{id: "200268", eType: EXPECTED_ERROR, message: "Telephone is currently reserved. "}
var E200269 = Global_error{id: "200269", eType: EXPECTED_ERROR, message: "Telephone's branch is not as same as FROM branch. "}
var E200270 = Global_error{id: "200270", eType: EXPECTED_ERROR, message: "Product has EIR indicator as FALSE. "}
var E200271 = Global_error{id: "200271", eType: EXPECTED_ERROR, message: "Model's product is different from hardware's product. "}
var E200272 = Global_error{id: "200272", eType: EXPECTED_ERROR, message: "No details rows exists. "}
var E200273 = Global_error{id: "200273", eType: EXPECTED_ERROR, message: "Prefix part does not exist in hardware number. "}
var E200274 = Global_error{id: "200274", eType: EXPECTED_ERROR, message: "ESN number already exists in another hardware. "}
var E200275 = Global_error{id: "200275", eType: EXPECTED_ERROR, message: "IMEI number already exists in other hardware. "}
var E200276 = Global_error{id: "200276", eType: EXPECTED_ERROR, message: "Allocate to dealer does not belong to User's dealer allocation. "}
var E200277 = Global_error{id: "200277", eType: EXPECTED_ERROR, message: "Invalid Bad Source. "}
var E200278 = Global_error{id: "200278", eType: EXPECTED_ERROR, message: "ESN length not equal to 8. "}
var E200279 = Global_error{id: "200279", eType: EXPECTED_ERROR, message: "ESN number is not a hexadecimal number. "}
var E200280 = Global_error{id: "200280", eType: EXPECTED_ERROR, message: "Model and Brand do not belong to product. "}
var E200281 = Global_error{id: "200281", eType: EXPECTED_ERROR, message: "Telephone has already been used. "}
var E200282 = Global_error{id: "200282", eType: EXPECTED_ERROR, message: "Request flag can be A or B only. "}
var E200283 = Global_error{id: "200283", eType: EXPECTED_ERROR, message: "Account number already exists in GL master. "}
var E200284 = Global_error{id: "200284", eType: EXPECTED_ERROR, message: "Account number is already used by transaction, cannot update. "}
var E200285 = Global_error{id: "200285", eType: EXPECTED_ERROR, message: "Account type already exists. "}
var E200286 = Global_error{id: "200286", eType: EXPECTED_ERROR, message: "Account Type does not exist. "}
var E200287 = Global_error{id: "200287", eType: EXPECTED_ERROR, message: "Cannot update status "}
var E200288 = Global_error{id: "200288", eType: EXPECTED_ERROR, message: "Close period is not equal last period plus one, cannot insert. "}
var E200289 = Global_error{id: "200289", eType: EXPECTED_ERROR, message: "Close period is not equal last period, cannot update "}
var E200290 = Global_error{id: "200290", eType: EXPECTED_ERROR, message: "Closing month cannot be zero. "}
var E200291 = Global_error{id: "200291", eType: EXPECTED_ERROR, message: "Cost cannot be zero. "}
var E200292 = Global_error{id: "200292", eType: EXPECTED_ERROR, message: "Credit  note is already canceled. "}
var E200293 = Global_error{id: "200293", eType: EXPECTED_ERROR, message: "Credit note cost should be greater than zero. "}
var E200294 = Global_error{id: "200294", eType: EXPECTED_ERROR, message: "Credit note's date cannot be future date. "}
var E200295 = Global_error{id: "200295", eType: EXPECTED_ERROR, message: "Credit note does not exist. "}
var E200297 = Global_error{id: "200297", eType: EXPECTED_ERROR, message: "Credit note line's value should be greater than zero. "}
var E200298 = Global_error{id: "200298", eType: EXPECTED_ERROR, message: "Credit note's number cannot be zero. "}
var E200299 = Global_error{id: "200299", eType: EXPECTED_ERROR, message: "Credit note's price should be greater than 0 "}
var E200300 = Global_error{id: "200300", eType: EXPECTED_ERROR, message: "Credit note's quantity is not valid "}
var E200301 = Global_error{id: "200301", eType: EXPECTED_ERROR, message: "Credit Note's  quantity should be greater than zero. "}
var E200303 = Global_error{id: "200303", eType: EXPECTED_ERROR, message: "Credit note's value is incorrect "}
var E200304 = Global_error{id: "200304", eType: EXPECTED_ERROR, message: "Credit note's value should be greater than zero. "}
var E200305 = Global_error{id: "200305", eType: EXPECTED_ERROR, message: "Customer already exists. "}
var E200306 = Global_error{id: "200306", eType: EXPECTED_ERROR, message: "Customer code cannot be zero. "}
var E200307 = Global_error{id: "200307", eType: EXPECTED_ERROR, message: "Customer detail for the invoice does not exist "}
var E200308 = Global_error{id: "200308", eType: EXPECTED_ERROR, message: "Customer does not exist. "}
var E200309 = Global_error{id: "200309", eType: EXPECTED_ERROR, message: "Customer number exists but is not currently active. "}
var E200311 = Global_error{id: "200311", eType: EXPECTED_ERROR, message: "Date cannot be future date. "}
var E200312 = Global_error{id: "200312", eType: EXPECTED_ERROR, message: "Debit note is already canceled. "}
var E200313 = Global_error{id: "200313", eType: EXPECTED_ERROR, message: "Debit Note's date cannot be future date. "}
var E200314 = Global_error{id: "200314", eType: EXPECTED_ERROR, message: "Debit Note does not exist "}
var E200315 = Global_error{id: "200315", eType: EXPECTED_ERROR, message: "Delivery date cannot be earlier than invoice date. "}
var E200316 = Global_error{id: "200316", eType: EXPECTED_ERROR, message: "Delivery date cannot be future date. "}
var E200317 = Global_error{id: "200317", eType: EXPECTED_ERROR, message: "Delivery freegoods is already canceled. "}
var E200318 = Global_error{id: "200318", eType: EXPECTED_ERROR, message: "Delivery freegoods does not exist. "}
var E200319 = Global_error{id: "200319", eType: EXPECTED_ERROR, message: "Delivery is more than pending "}
var E200320 = Global_error{id: "200320", eType: EXPECTED_ERROR, message: "Delivery number does not exist "}
var E200322 = Global_error{id: "200322", eType: EXPECTED_ERROR, message: "Delivery quantity should be greater than zero. "}
var E200323 = Global_error{id: "200323", eType: EXPECTED_ERROR, message: "Delivery warehouse quantity should be greater than zero. "}
var E200324 = Global_error{id: "200324", eType: EXPECTED_ERROR, message: "Despatch note cannot be zero. "}
var E200325 = Global_error{id: "200325", eType: EXPECTED_ERROR, message: "Despatch Number cannot be zero. "}
var E200326 = Global_error{id: "200326", eType: EXPECTED_ERROR, message: "Despatch number does not exist. "}
var E200327 = Global_error{id: "200327", eType: EXPECTED_ERROR, message: "Discount date is already exist. "}
var E200328 = Global_error{id: "200328", eType: EXPECTED_ERROR, message: "Discount does not exist. "}
var E200329 = Global_error{id: "200329", eType: EXPECTED_ERROR, message: "Discount should be between 0 and 100 "}
var E200330 = Global_error{id: "200330", eType: EXPECTED_ERROR, message: "Discount value is incorrect "}
var E200331 = Global_error{id: "200331", eType: EXPECTED_ERROR, message: "Document heading number does not exist. "}
var E200332 = Global_error{id: "200332", eType: EXPECTED_ERROR, message: "Document heading number is already exist. "}
var E200333 = Global_error{id: "200333", eType: EXPECTED_ERROR, message: "Document type already exists. "}
var E200334 = Global_error{id: "200334", eType: EXPECTED_ERROR, message: "Document type does not exist. "}
var E200335 = Global_error{id: "200335", eType: EXPECTED_ERROR, message: "Freegoods does not exist for the product promotion. "}
var E200336 = Global_error{id: "200336", eType: EXPECTED_ERROR, message: "Freegoods indication is not valid "}
var E200337 = Global_error{id: "200337", eType: EXPECTED_ERROR, message: "Freegoods line number cannot be zero. "}
var E200338 = Global_error{id: "200338", eType: EXPECTED_ERROR, message: "Freegoods product code cannot be repeated in a product promotion "}
var E200339 = Global_error{id: "200339", eType: EXPECTED_ERROR, message: "Freegoods quantity should be positive "}
var E200340 = Global_error{id: "200340", eType: EXPECTED_ERROR, message: "GL record does not exist "}
var E200341 = Global_error{id: "200341", eType: EXPECTED_ERROR, message: "GRN data from VMS does not exist. "}
var E200342 = Global_error{id: "200342", eType: EXPECTED_ERROR, message: "GRN date cannot be future date. "}
var E200343 = Global_error{id: "200343", eType: EXPECTED_ERROR, message: "GRN does not exist. "}
var E200344 = Global_error{id: "200344", eType: EXPECTED_ERROR, message: "GRN line does not exist. "}
var E200345 = Global_error{id: "200345", eType: EXPECTED_ERROR, message: "GRN number does not exist. "}
var E200346 = Global_error{id: "200346", eType: EXPECTED_ERROR, message: "GRN warehouse does not exist "}
var E200347 = Global_error{id: "200347", eType: EXPECTED_ERROR, message: "Invalid active flag. "}
var E200348 = Global_error{id: "200348", eType: EXPECTED_ERROR, message: "Invalid inventory indicator flag. "}
var E200349 = Global_error{id: "200349", eType: EXPECTED_ERROR, message: "Invalid purchase order posted to database flag. "}
var E200350 = Global_error{id: "200350", eType: EXPECTED_ERROR, message: "Invalid serial flag. "}
var E200351 = Global_error{id: "200351", eType: EXPECTED_ERROR, message: "Invalid status flag "}
var E200352 = Global_error{id: "200352", eType: EXPECTED_ERROR, message: "Inventory adjustor is not proper for the document type "}
var E200353 = Global_error{id: "200353", eType: EXPECTED_ERROR, message: "Inventory close does not exist. "}
var E200354 = Global_error{id: "200354", eType: EXPECTED_ERROR, message: "Inventory indicator is not proper for the document type "}
var E200355 = Global_error{id: "200355", eType: EXPECTED_ERROR, message: "Inventory is already closed for the period, cannot close again. "}
var E200356 = Global_error{id: "200356", eType: EXPECTED_ERROR, message: "Inventory movement information not inserted. "}
var E200357 = Global_error{id: "200357", eType: EXPECTED_ERROR, message: "Inventory movement serial information not inserted. "}
var E200358 = Global_error{id: "200358", eType: EXPECTED_ERROR, message: "Inventory transaction date cannot be future date. "}
var E200359 = Global_error{id: "200359", eType: EXPECTED_ERROR, message: "Inventory transaction does not exist "}
var E200360 = Global_error{id: "200360", eType: EXPECTED_ERROR, message: "Inventory transaction exists on GL account. Cannot delete. "}
var E200361 = Global_error{id: "200361", eType: EXPECTED_ERROR, message: "Inventory transaction line number does not exist, cannot update "}
var E200362 = Global_error{id: "200362", eType: EXPECTED_ERROR, message: "Inventory transaction number does not exist, cannot update. "}
var E200363 = Global_error{id: "200363", eType: EXPECTED_ERROR, message: "Inventory transaction quantity is more than available quantity "}
var E200364 = Global_error{id: "200364", eType: EXPECTED_ERROR, message: "Investor company already exists. "}
var E200365 = Global_error{id: "200365", eType: EXPECTED_ERROR, message: "Investor company does not exist. "}
var E200366 = Global_error{id: "200366", eType: EXPECTED_ERROR, message: "Invoice is already canceled. "}
var E200367 = Global_error{id: "200367", eType: EXPECTED_ERROR, message: "Invoice does not exist. "}
var E200368 = Global_error{id: "200368", eType: EXPECTED_ERROR, message: "Invoice is not active "}
var E200369 = Global_error{id: "200369", eType: EXPECTED_ERROR, message: "Invoice does not belong to same customer. "}
var E200370 = Global_error{id: "200370", eType: EXPECTED_ERROR, message: "Invoice line cost should be greater than zero. "}
var E200371 = Global_error{id: "200371", eType: EXPECTED_ERROR, message: "Invoice line delivery quantity should be greater than zero. "}
var E200372 = Global_error{id: "200372", eType: EXPECTED_ERROR, message: "Invoice line details do not exist. "}
var E200373 = Global_error{id: "200373", eType: EXPECTED_ERROR, message: "Invoice line number already exists. "}
var E200374 = Global_error{id: "200374", eType: EXPECTED_ERROR, message: "Invoice line number cannot be zero. "}
var E200375 = Global_error{id: "200375", eType: EXPECTED_ERROR, message: "Invoice line number does not exist "}
var E200376 = Global_error{id: "200376", eType: EXPECTED_ERROR, message: "Invoice line's price should be greater than zero. "}
var E200377 = Global_error{id: "200377", eType: EXPECTED_ERROR, message: "Invoice line quantity should be greater than zero. "}
var E200378 = Global_error{id: "200378", eType: EXPECTED_ERROR, message: "Invoice line/freegoods sequence does not exist "}
var E200379 = Global_error{id: "200379", eType: EXPECTED_ERROR, message: "Invoice is not active. "}
var E200380 = Global_error{id: "200380", eType: EXPECTED_ERROR, message: "Invoice number already exists. "}
var E200381 = Global_error{id: "200381", eType: EXPECTED_ERROR, message: "Invoice number cannot be zero. "}
var E200382 = Global_error{id: "200382", eType: EXPECTED_ERROR, message: "Invoice number does not exist "}
var E200383 = Global_error{id: "200383", eType: EXPECTED_ERROR, message: "Invoice payment already exists. "}
var E200384 = Global_error{id: "200384", eType: EXPECTED_ERROR, message: "Invoice payment amount should be greater than zero. "}
var E200385 = Global_error{id: "200385", eType: EXPECTED_ERROR, message: "Invoice serial already exists. "}
var E200386 = Global_error{id: "200386", eType: EXPECTED_ERROR, message: "Invoice serial does not exist "}
var E200387 = Global_error{id: "200387", eType: EXPECTED_ERROR, message: "Invoice value should be greater than zero. "}
var E200388 = Global_error{id: "200388", eType: EXPECTED_ERROR, message: "Invoice warehouse already exists. "}
var E200389 = Global_error{id: "200389", eType: EXPECTED_ERROR, message: "Invoice warehouse does not exist "}
var E200390 = Global_error{id: "200390", eType: EXPECTED_ERROR, message: "Invoice warehouse quantity should be greater than zero. "}
var E200391 = Global_error{id: "200391", eType: EXPECTED_ERROR, message: "Journal does not exist. "}
var E200392 = Global_error{id: "200392", eType: EXPECTED_ERROR, message: "Lease invoice already canceled "}
var E200393 = Global_error{id: "200393", eType: EXPECTED_ERROR, message: "Lease invoice does not exist. "}
var E200394 = Global_error{id: "200394", eType: EXPECTED_ERROR, message: "Lease invoice record does not exist. "}
var E200395 = Global_error{id: "200395", eType: EXPECTED_ERROR, message: "Lease invoice warehouse details do not exist. "}
var E200396 = Global_error{id: "200396", eType: EXPECTED_ERROR, message: "Lease line cost should be greater than 0 "}
var E200397 = Global_error{id: "200397", eType: EXPECTED_ERROR, message: "Lease line number already exists. "}
var E200398 = Global_error{id: "200398", eType: EXPECTED_ERROR, message: "Lease line price should be greater than zero. "}
var E200399 = Global_error{id: "200399", eType: EXPECTED_ERROR, message: "Lease line quantity should be greater than zero. "}
var E200400 = Global_error{id: "200400", eType: EXPECTED_ERROR, message: "Lease number already exists. "}
var E200401 = Global_error{id: "200401", eType: EXPECTED_ERROR, message: "Lease number does not exist "}
var E200402 = Global_error{id: "200402", eType: EXPECTED_ERROR, message: "Lease serial already exists. "}
var E200403 = Global_error{id: "200403", eType: EXPECTED_ERROR, message: "Lease warehouse already exists. "}
var E200404 = Global_error{id: "200404", eType: EXPECTED_ERROR, message: "Lease warehouse quantity should be greater than zero. "}
var E200405 = Global_error{id: "200405", eType: EXPECTED_ERROR, message: "Line cost is not matching with location cost "}
var E200406 = Global_error{id: "200406", eType: EXPECTED_ERROR, message: "Line number already exists, cannot insert. "}
var E200407 = Global_error{id: "200407", eType: EXPECTED_ERROR, message: "Line number cannot be zero. "}
var E200408 = Global_error{id: "200408", eType: EXPECTED_ERROR, message: "Line number cannot be repeated. "}
var E200409 = Global_error{id: "200409", eType: EXPECTED_ERROR, message: "Location and product code already exists "}
var E200410 = Global_error{id: "200410", eType: EXPECTED_ERROR, message: "Location cannot be repeated in a promotion "}
var E200411 = Global_error{id: "200411", eType: EXPECTED_ERROR, message: "Location cannot use this product. "}
var E200412 = Global_error{id: "200412", eType: EXPECTED_ERROR, message: "Location cannot use this promotion. "}
var E200413 = Global_error{id: "200413", eType: EXPECTED_ERROR, message: "Location effective date is out of promotion period "}
var E200414 = Global_error{id: "200414", eType: EXPECTED_ERROR, message: "Location exists and is currently effective. "}
var E200415 = Global_error{id: "200415", eType: EXPECTED_ERROR, message: "Location exists but is not currently effective. "}
var E200416 = Global_error{id: "200416", eType: EXPECTED_ERROR, message: "Location expiry date is out of promotion period "}
var E200417 = Global_error{id: "200417", eType: EXPECTED_ERROR, message: "Location product already exists. "}
var E200418 = Global_error{id: "200418", eType: EXPECTED_ERROR, message: "Location product does not exist. "}
var E200419 = Global_error{id: "200419", eType: EXPECTED_ERROR, message: "Location promotion  already exists "}
var E200420 = Global_error{id: "200420", eType: EXPECTED_ERROR, message: "Location promotion does not exist. "}
var E200421 = Global_error{id: "200421", eType: EXPECTED_ERROR, message: "Location promotion exists but is not currently effective. "}
var E200422 = Global_error{id: "200422", eType: EXPECTED_ERROR, message: "Location supplier already exists. "}
var E200423 = Global_error{id: "200423", eType: EXPECTED_ERROR, message: "Location supplier does not exist. "}
var E200424 = Global_error{id: "200424", eType: EXPECTED_ERROR, message: "Member discount does not exist. "}
var E200425 = Global_error{id: "200425", eType: EXPECTED_ERROR, message: "Member does not exist. "}
var E200426 = Global_error{id: "200426", eType: EXPECTED_ERROR, message: "Member exists and is currently effective. "}
var E200427 = Global_error{id: "200427", eType: EXPECTED_ERROR, message: "Member exists but not effective. "}
var E200428 = Global_error{id: "200428", eType: EXPECTED_ERROR, message: "Minimum single row of class is required "}
var E200429 = Global_error{id: "200429", eType: EXPECTED_ERROR, message: "Minimum single row of heading is required "}
var E200430 = Global_error{id: "200430", eType: EXPECTED_ERROR, message: "No line details exist. Cannot insert . "}
var E200431 = Global_error{id: "200431", eType: EXPECTED_ERROR, message: "Payment detail does not exist "}
var E200432 = Global_error{id: "200432", eType: EXPECTED_ERROR, message: "Payment type already exists "}
var E200433 = Global_error{id: "200433", eType: EXPECTED_ERROR, message: "Payment type does not exist "}
var E200434 = Global_error{id: "200434", eType: EXPECTED_ERROR, message: "Percentage discount should not be zero or null. "}
var E200435 = Global_error{id: "200435", eType: EXPECTED_ERROR, message: "PO does not exist "}
var E200436 = Global_error{id: "200436", eType: EXPECTED_ERROR, message: "PO is not active "}
var E200437 = Global_error{id: "200437", eType: EXPECTED_ERROR, message: "PO is not cancelled "}
var E200438 = Global_error{id: "200438", eType: EXPECTED_ERROR, message: "PO line number already exists. "}
var E200439 = Global_error{id: "200439", eType: EXPECTED_ERROR, message: "PO line number does not exist. "}
var E200440 = Global_error{id: "200440", eType: EXPECTED_ERROR, message: "PO line quantity should be positive. "}
var E200441 = Global_error{id: "200441", eType: EXPECTED_ERROR, message: "Post Code does not exist. "}
var E200442 = Global_error{id: "200442", eType: EXPECTED_ERROR, message: "Price should be positive "}
var E200443 = Global_error{id: "200443", eType: EXPECTED_ERROR, message: "Product class already exist. "}
var E200444 = Global_error{id: "200444", eType: EXPECTED_ERROR, message: "Product class cannot be repeated "}
var E200445 = Global_error{id: "200445", eType: EXPECTED_ERROR, message: "Product class does not exist. "}
var E200447 = Global_error{id: "200447", eType: EXPECTED_ERROR, message: "Product class is used by investor product. Cannot delete "}
var E200448 = Global_error{id: "200448", eType: EXPECTED_ERROR, message: "Product code cannot be repeated "}
var E200449 = Global_error{id: "200449", eType: EXPECTED_ERROR, message: "Product code is cancelled ,This line cannot received GRN "}
var E200450 = Global_error{id: "200450", eType: EXPECTED_ERROR, message: "Product code not permitted for the location. "}
var E200451 = Global_error{id: "200451", eType: EXPECTED_ERROR, message: "Product cost should be greater than zero. "}
var E200452 = Global_error{id: "200452", eType: EXPECTED_ERROR, message: "Product group already exist. "}
var E200453 = Global_error{id: "200453", eType: EXPECTED_ERROR, message: "Product group does not exist "}
var E200454 = Global_error{id: "200454", eType: EXPECTED_ERROR, message: "Product group is not available, cannot update "}
var E200455 = Global_error{id: "200455", eType: EXPECTED_ERROR, message: "Product is currently not active. "}
var E200456 = Global_error{id: "200456", eType: EXPECTED_ERROR, message: "Product price should be greater than zero. "}
var E200457 = Global_error{id: "200457", eType: EXPECTED_ERROR, message: "Product promotion does not exist. "}
var E200458 = Global_error{id: "200458", eType: EXPECTED_ERROR, message: "Product serial does not exist in invoice serial "}
var E200459 = Global_error{id: "200459", eType: EXPECTED_ERROR, message: "Product type already exists. "}
var E200460 = Global_error{id: "200460", eType: EXPECTED_ERROR, message: "Product type cannot be repeated. "}
var E200461 = Global_error{id: "200461", eType: EXPECTED_ERROR, message: "Product type does not exist. "}
var E200463 = Global_error{id: "200463", eType: EXPECTED_ERROR, message: "Promotion does not exist. "}
var E200464 = Global_error{id: "200464", eType: EXPECTED_ERROR, message: "Promotion already exists. "}
var E200465 = Global_error{id: "200465", eType: EXPECTED_ERROR, message: "Promotion exists and is currently effective. "}
var E200466 = Global_error{id: "200466", eType: EXPECTED_ERROR, message: "Promotion exists but is not currently effective. "}
var E200467 = Global_error{id: "200467", eType: EXPECTED_ERROR, message: "Promotion is already effective, cannot modify. "}
var E200469 = Global_error{id: "200469", eType: EXPECTED_ERROR, message: "Promotion product is freegoods, but no freegoods product. "}
var E200470 = Global_error{id: "200470", eType: EXPECTED_ERROR, message: "Promotion should be 'Normal sale' or 'Promotion sale'. "}
var E200471 = Global_error{id: "200471", eType: EXPECTED_ERROR, message: "Quantity cannot be zero. "}
var E200472 = Global_error{id: "200472", eType: EXPECTED_ERROR, message: "Requested warehouse already exists. "}
var E200473 = Global_error{id: "200473", eType: EXPECTED_ERROR, message: "Request accept quantity should be greater than 0. "}
var E200474 = Global_error{id: "200474", eType: EXPECTED_ERROR, message: "Requested line has already been confirmed, cannot delete. "}
var E200475 = Global_error{id: "200475", eType: EXPECTED_ERROR, message: "Request line number does not exist "}
var E200476 = Global_error{id: "200476", eType: EXPECTED_ERROR, message: "Request send quantity should be greater than zero. "}
var E200477 = Global_error{id: "200477", eType: EXPECTED_ERROR, message: "Request serial already exists. "}
var E200478 = Global_error{id: "200478", eType: EXPECTED_ERROR, message: "Request warehouse cost should be greater than zero. "}
var E200479 = Global_error{id: "200479", eType: EXPECTED_ERROR, message: "Request warehouse does not exist. "}
var E200480 = Global_error{id: "200480", eType: EXPECTED_ERROR, message: "Requested warehouse quantity should be greater than zero. "}
var E200481 = Global_error{id: "200481", eType: EXPECTED_ERROR, message: "Request/Return number does not exist "}
var E200482 = Global_error{id: "200482", eType: EXPECTED_ERROR, message: "Requested location does not exist. "}
var E200483 = Global_error{id: "200483", eType: EXPECTED_ERROR, message: "Requested quantity should be greater than zero. "}
var E200484 = Global_error{id: "200484", eType: EXPECTED_ERROR, message: "Request and requested location cannot be the same "}
var E200485 = Global_error{id: "200485", eType: EXPECTED_ERROR, message: "Request and requested location does not belong to same investor. "}
var E200486 = Global_error{id: "200486", eType: EXPECTED_ERROR, message: "Requested location does not exist. "}
var E200487 = Global_error{id: "200487", eType: EXPECTED_ERROR, message: "Accept return date cannot be future date. "}
var E200488 = Global_error{id: "200488", eType: EXPECTED_ERROR, message: "Return date cannot be future date. "}
var E200489 = Global_error{id: "200489", eType: EXPECTED_ERROR, message: "Returned quantity should be greater than zero. "}
var E200490 = Global_error{id: "200490", eType: EXPECTED_ERROR, message: "Returned serial already exists. "}
var E200491 = Global_error{id: "200491", eType: EXPECTED_ERROR, message: "Returned warehouse already exists. "}
var E200492 = Global_error{id: "200492", eType: EXPECTED_ERROR, message: "Returned warehouse's cost should be greater than zero. "}
var E200493 = Global_error{id: "200493", eType: EXPECTED_ERROR, message: "Returned warehouse does not exist. "}
var E200494 = Global_error{id: "200494", eType: EXPECTED_ERROR, message: "Returned warehouse's quantity should be greater than zero. "}
var E200495 = Global_error{id: "200495", eType: EXPECTED_ERROR, message: "Returned location can not use the product. "}
var E200496 = Global_error{id: "200496", eType: EXPECTED_ERROR, message: "Returned location exists but is not currently effective. "}
var E200497 = Global_error{id: "200497", eType: EXPECTED_ERROR, message: "Sequence number should be positive. "}
var E200498 = Global_error{id: "200498", eType: EXPECTED_ERROR, message: "Serial number does not exist. "}
var E200499 = Global_error{id: "200499", eType: EXPECTED_ERROR, message: "Serial number exists but is not currently not active. "}
var E200500 = Global_error{id: "200500", eType: EXPECTED_ERROR, message: "Serial number already exists, cannot insert. "}
var E200501 = Global_error{id: "200501", eType: EXPECTED_ERROR, message: "Serial number cannot be repeated. "}
var E200502 = Global_error{id: "200502", eType: EXPECTED_ERROR, message: "Serial number does not match. "}
var E200503 = Global_error{id: "200503", eType: EXPECTED_ERROR, message: "Status does not match. "}
var E200504 = Global_error{id: "200504", eType: EXPECTED_ERROR, message: "Supplier code already exists. "}
var E200505 = Global_error{id: "200505", eType: EXPECTED_ERROR, message: "Supplier code does not exist. "}
var E200506 = Global_error{id: "200506", eType: EXPECTED_ERROR, message: "Supplier is not active. "}
var E200507 = Global_error{id: "200507", eType: EXPECTED_ERROR, message: "This month is not the last month closed, cannot delete. "}
var E200508 = Global_error{id: "200508", eType: EXPECTED_ERROR, message: "To location does not exist. "}
var E200509 = Global_error{id: "200509", eType: EXPECTED_ERROR, message: "Total value cannot be zero. "}
var E200510 = Global_error{id: "200510", eType: EXPECTED_ERROR, message: "Product type is used by investor product, cannot delete. "}
var E200511 = Global_error{id: "200511", eType: EXPECTED_ERROR, message: "Discount should not be zero or null. "}
var E200512 = Global_error{id: "200512", eType: EXPECTED_ERROR, message: "VAT included indication is not valid. "}
var E200513 = Global_error{id: "200513", eType: EXPECTED_ERROR, message: "VAT rate already exists. "}
var E200514 = Global_error{id: "200514", eType: EXPECTED_ERROR, message: "VAT rate does not exist. "}
var E200515 = Global_error{id: "200515", eType: EXPECTED_ERROR, message: "VAT value cannot be zero. "}
var E200516 = Global_error{id: "200516", eType: EXPECTED_ERROR, message: "Warehouse already exists. "}
var E200517 = Global_error{id: "200517", eType: EXPECTED_ERROR, message: "Warehouse cannot be zero. "}
var E200518 = Global_error{id: "200518", eType: EXPECTED_ERROR, message: "Warehouse does not exist. "}
var E200519 = Global_error{id: "200519", eType: EXPECTED_ERROR, message: "Warehouse exists but is not currently effective. "}
var E200520 = Global_error{id: "200520", eType: EXPECTED_ERROR, message: "Warehouse is not active. "}
var E200521 = Global_error{id: "200521", eType: EXPECTED_ERROR, message: "Warehouse quantity should be greater than zero. "}
var E200522 = Global_error{id: "200522", eType: EXPECTED_ERROR, message: "Product code has been associated in RD_TELP, cannot delete. "}
var E200523 = Global_error{id: "200523", eType: EXPECTED_ERROR, message: "Product code has been associated in RD_HRDW_TYPE, cannot delete. "}
var E200524 = Global_error{id: "200524", eType: EXPECTED_ERROR, message: "Product code has been associated in RD_DEAL_DET, cannot delete. "}
var E200525 = Global_error{id: "200525", eType: EXPECTED_ERROR, message: "Airtime code does not exist. "}
var E200526 = Global_error{id: "200526", eType: EXPECTED_ERROR, message: "Airtime Code exist. "}
var E200527 = Global_error{id: "200527", eType: EXPECTED_ERROR, message: "Airtime code exists in Cross Reference table, cannot delete. "}
var E200528 = Global_error{id: "200528", eType: EXPECTED_ERROR, message: "Area does not exist. "}
var E200529 = Global_error{id: "200529", eType: EXPECTED_ERROR, message: "Area code already exists. "}
var E200530 = Global_error{id: "200530", eType: EXPECTED_ERROR, message: "Area exist in Area To Area table, Cannot delete. "}
var E200531 = Global_error{id: "200531", eType: EXPECTED_ERROR, message: "Area code exists in Cell Destination table, cannot delete. "}
var E200532 = Global_error{id: "200532", eType: EXPECTED_ERROR, message: "Area code exists in Dialed Digits table, cannot delete. "}
var E200533 = Global_error{id: "200533", eType: EXPECTED_ERROR, message: "Area To Area does not exist. "}
var E200534 = Global_error{id: "200534", eType: EXPECTED_ERROR, message: "Area To Area already exists. "}
var E200535 = Global_error{id: "200535", eType: EXPECTED_ERROR, message: "Area To Area exists and is currently active. "}
var E200536 = Global_error{id: "200536", eType: EXPECTED_ERROR, message: "Area To Area exists but is not currently active. "}
var E200537 = Global_error{id: "200537", eType: EXPECTED_ERROR, message: "Bill code does not exist. "}
var E200538 = Global_error{id: "200538", eType: EXPECTED_ERROR, message: "Bill code already exists. "}
var E200539 = Global_error{id: "200539", eType: EXPECTED_ERROR, message: "Bill code already exists and is currently active. "}
var E200540 = Global_error{id: "200540", eType: EXPECTED_ERROR, message: "Bill code already exists but is not currently active. "}
var E200541 = Global_error{id: "200541", eType: EXPECTED_ERROR, message: "Bill constrain does not exist. "}
var E200542 = Global_error{id: "200542", eType: EXPECTED_ERROR, message: "Bill constrain already exists. "}
var E200543 = Global_error{id: "200543", eType: EXPECTED_ERROR, message: "Bill cycle does not exist. "}
var E200544 = Global_error{id: "200544", eType: EXPECTED_ERROR, message: "Bill cycle already exists. "}
var E200545 = Global_error{id: "200545", eType: EXPECTED_ERROR, message: "Bill Effective does not exist. "}
var E200546 = Global_error{id: "200546", eType: EXPECTED_ERROR, message: "Bill Effective already exists. "}
var E200547 = Global_error{id: "200547", eType: EXPECTED_ERROR, message: "Bill Frequency code does not exist . "}
var E200548 = Global_error{id: "200548", eType: EXPECTED_ERROR, message: "Bill Frequency Code exist. "}
var E200549 = Global_error{id: "200549", eType: EXPECTED_ERROR, message: "Bill Mode does not exist. "}
var E200550 = Global_error{id: "200550", eType: EXPECTED_ERROR, message: "Bill Mode exists in Bill Code table, cannot delete. "}
var E200551 = Global_error{id: "200551", eType: EXPECTED_ERROR, message: "Bill Mode already exists. "}
var E200552 = Global_error{id: "200552", eType: EXPECTED_ERROR, message: "Bill Parameter does not exist. "}
var E200553 = Global_error{id: "200553", eType: EXPECTED_ERROR, message: "Bill Parameter already exists. "}
var E200554 = Global_error{id: "200554", eType: EXPECTED_ERROR, message: "Bill Type does not exist. "}
var E200555 = Global_error{id: "200555", eType: EXPECTED_ERROR, message: "Bill Type already exists. "}
var E200556 = Global_error{id: "200556", eType: EXPECTED_ERROR, message: "Bill Type exists in Bill Code table, cannot delete. "}
var E200557 = Global_error{id: "200557", eType: EXPECTED_ERROR, message: "Boundary Flag should be none, percentage or value. "}
var E200558 = Global_error{id: "200558", eType: EXPECTED_ERROR, message: "Break Dialed Digits does not exist. "}
var E200559 = Global_error{id: "200559", eType: EXPECTED_ERROR, message: "Break Dialed Digits exists in Dialed Digits table, cannot delete. "}
var E200560 = Global_error{id: "200560", eType: EXPECTED_ERROR, message: "Break dialed digits already exist. "}
var E200561 = Global_error{id: "200561", eType: EXPECTED_ERROR, message: "Call action does not exist. "}
var E200562 = Global_error{id: "200562", eType: EXPECTED_ERROR, message: "Call action already exists. "}
var E200563 = Global_error{id: "200563", eType: EXPECTED_ERROR, message: "Cell destination does not exist. "}
var E200564 = Global_error{id: "200564", eType: EXPECTED_ERROR, message: "Cell destination already exists. "}
var E200565 = Global_error{id: "200565", eType: EXPECTED_ERROR, message: "Cell destination exists and is currently active. "}
var E200566 = Global_error{id: "200566", eType: EXPECTED_ERROR, message: "Cell destination exists but is not currently active. "}
var E200567 = Global_error{id: "200567", eType: EXPECTED_ERROR, message: "Column name does not exist. "}
var E200568 = Global_error{id: "200568", eType: EXPECTED_ERROR, message: "Column name already exists. "}
var E200569 = Global_error{id: "200569", eType: EXPECTED_ERROR, message: "Constant charge flag can only be none, percentage or value. "}
var E200570 = Global_error{id: "200570", eType: EXPECTED_ERROR, message: "Constant Charge Value/Percentage is not corresponded with Constant Charge Flag. "}
var E200571 = Global_error{id: "200571", eType: EXPECTED_ERROR, message: "Constraint of Bill Frequency Unit does not exist. "}
var E200572 = Global_error{id: "200572", eType: EXPECTED_ERROR, message: "Constraint of Operator table Prefix does not exist. "}
var E200573 = Global_error{id: "200573", eType: EXPECTED_ERROR, message: "Constraint of Rounding Direction does not exist. "}
var E200574 = Global_error{id: "200574", eType: EXPECTED_ERROR, message: "Constraint of Tariff Day does not exist. "}
var E200575 = Global_error{id: "200575", eType: EXPECTED_ERROR, message: "Cross Reference aleady exists. "}
var E200576 = Global_error{id: "200576", eType: EXPECTED_ERROR, message: "Cross Reference does not exist. "}
var E200577 = Global_error{id: "200577", eType: EXPECTED_ERROR, message: "Cross Reference already exists and is currently effective. "}
var E200578 = Global_error{id: "200578", eType: EXPECTED_ERROR, message: "Cross Reference already exists but is not currently effective. "}
var E200579 = Global_error{id: "200579", eType: EXPECTED_ERROR, message: "Currency code does not exist. "}
var E200580 = Global_error{id: "200580", eType: EXPECTED_ERROR, message: "Currency Code already exists. "}
var E200581 = Global_error{id: "200581", eType: EXPECTED_ERROR, message: "Currency code exists in Home PLMN table, cannot delete. "}
var E200582 = Global_error{id: "200582", eType: EXPECTED_ERROR, message: "Currency code exists in Operator Parameter table, cannot delete. "}
var E200583 = Global_error{id: "200583", eType: EXPECTED_ERROR, message: "Currency code exists in PLMN Parameter table, cannot delete. "}
var E200584 = Global_error{id: "200584", eType: EXPECTED_ERROR, message: "Destination code does not exist. "}
var E200585 = Global_error{id: "200585", eType: EXPECTED_ERROR, message: "Destination Code already exists. "}
var E200586 = Global_error{id: "200586", eType: EXPECTED_ERROR, message: "Dialed Digits does not exist. "}
var E200587 = Global_error{id: "200587", eType: EXPECTED_ERROR, message: "Dialed Digits already exists. "}
var E200588 = Global_error{id: "200588", eType: EXPECTED_ERROR, message: "Dialed Digits exists and is currently active. "}
var E200589 = Global_error{id: "200589", eType: EXPECTED_ERROR, message: "Dialed Digits exists but is not currently active. "}
var E200590 = Global_error{id: "200590", eType: EXPECTED_ERROR, message: "Discount Code does not exist. "}
var E200591 = Global_error{id: "200591", eType: EXPECTED_ERROR, message: "Discount Code exists in Discount Plan Detail table, cannot delete. "}
var E200592 = Global_error{id: "200592", eType: EXPECTED_ERROR, message: "Discount Code already exists. "}
var E200593 = Global_error{id: "200593", eType: EXPECTED_ERROR, message: "Discount Flag should be Percentage or Value. "}
var E200594 = Global_error{id: "200594", eType: EXPECTED_ERROR, message: "Discount Plan Detail does not exist. "}
var E200595 = Global_error{id: "200595", eType: EXPECTED_ERROR, message: "Discount Plan Detail already exists. "}
var E200596 = Global_error{id: "200596", eType: EXPECTED_ERROR, message: "Discount Plan does not exist. "}
var E200597 = Global_error{id: "200597", eType: EXPECTED_ERROR, message: "Discount Plan exists in Tariff Line, cannot delete. "}
var E200598 = Global_error{id: "200598", eType: EXPECTED_ERROR, message: "Discount Plan already exists. "}
var E200599 = Global_error{id: "200599", eType: EXPECTED_ERROR, message: "Discount Plan Line does not exist, cannot delete. "}
var E200600 = Global_error{id: "200600", eType: EXPECTED_ERROR, message: "Discount Unit Code does not exist. "}
var E200601 = Global_error{id: "200601", eType: EXPECTED_ERROR, message: "Discount Unit Code already exists. "}
var E200602 = Global_error{id: "200602", eType: EXPECTED_ERROR, message: "Discount Unit Code exists in Discount Code table, cannot delete. "}
var E200603 = Global_error{id: "200603", eType: EXPECTED_ERROR, message: "Discount volume flag is invalid. "}
var E200604 = Global_error{id: "200604", eType: EXPECTED_ERROR, message: "Distance does not exist. "}
var E200605 = Global_error{id: "200605", eType: EXPECTED_ERROR, message: "Distance exists in Area To Area table, cannot delete. "}
var E200606 = Global_error{id: "200606", eType: EXPECTED_ERROR, message: "Distance exists in Cross Reference table, cannot delete. "}
var E200607 = Global_error{id: "200607", eType: EXPECTED_ERROR, message: "Distance already exists. "}
var E200608 = Global_error{id: "200608", eType: EXPECTED_ERROR, message: "Distance Group does not exist. "}
var E200609 = Global_error{id: "200609", eType: EXPECTED_ERROR, message: "Distance Group already exists. "}
var E200612 = Global_error{id: "200612", eType: EXPECTED_ERROR, message: "Effective Date cannot overlap with expire date of previous record. "}
var E200613 = Global_error{id: "200613", eType: EXPECTED_ERROR, message: "Expire date cannot overlap with effective date of next record. "}
var E200614 = Global_error{id: "200614", eType: EXPECTED_ERROR, message: "Expire date of previous record should not be NULL. "}
var E200615 = Global_error{id: "200615", eType: EXPECTED_ERROR, message: "Free Unit cannot be Greater than Subtraction of Max Unit and Min Unit. "}
var E200616 = Global_error{id: "200616", eType: EXPECTED_ERROR, message: "Free Value cannot be Greater than Subtraction of Maximum Value and Minimum Value. "}
var E200617 = Global_error{id: "200617", eType: EXPECTED_ERROR, message: "Home PLMN does not exist. "}
var E200618 = Global_error{id: "200618", eType: EXPECTED_ERROR, message: "Home PLMN already exists. "}
var E200619 = Global_error{id: "200619", eType: EXPECTED_ERROR, message: "Home Zone does not exist. "}
var E200620 = Global_error{id: "200620", eType: EXPECTED_ERROR, message: "Home Zone already exists. "}
var E200621 = Global_error{id: "200621", eType: EXPECTED_ERROR, message: "Home Zone exists and is currently active. "}
var E200622 = Global_error{id: "200622", eType: EXPECTED_ERROR, message: "Home Zone exists but is not currently active. "}
var E200623 = Global_error{id: "200623", eType: EXPECTED_ERROR, message: "Home Zone Switching Cross Reference does not exist. "}
var E200624 = Global_error{id: "200624", eType: EXPECTED_ERROR, message: "Home Zone Switching Cross Reference already exists. "}
var E200625 = Global_error{id: "200625", eType: EXPECTED_ERROR, message: "IMSI Group already exists. "}
var E200626 = Global_error{id: "200626", eType: EXPECTED_ERROR, message: "IMSI Group does not exist. "}
var E200627 = Global_error{id: "200627", eType: EXPECTED_ERROR, message: "IMSI Group exists and is currently active. "}
var E200628 = Global_error{id: "200628", eType: EXPECTED_ERROR, message: "IMSI Group exists but is not currently active. "}
var E200629 = Global_error{id: "200629", eType: EXPECTED_ERROR, message: "Maximum Boundary Percentage should not be less than Minimum Boundary Percentage. "}
var E200630 = Global_error{id: "200630", eType: EXPECTED_ERROR, message: "Maximum Boundary Value should not be less than Minimum Boundary Value. "}
var E200631 = Global_error{id: "200631", eType: EXPECTED_ERROR, message: "Maximum Range Percentage should not be less than Minimum Range Percentage. "}
var E200633 = Global_error{id: "200633", eType: EXPECTED_ERROR, message: "Maximum Range Value should not be less than Minimum Range Value. "}
var E200634 = Global_error{id: "200634", eType: EXPECTED_ERROR, message: "Maximum unit should not be less than Minimum Unit. "}
var E200635 = Global_error{id: "200635", eType: EXPECTED_ERROR, message: "Maximum Value should not be less than Minimum Value. "}
var E200637 = Global_error{id: "200637", eType: EXPECTED_ERROR, message: "Billing Message Code already exists. "}
var E200638 = Global_error{id: "200638", eType: EXPECTED_ERROR, message: "Billing Message Code does not exist. "}
var E200639 = Global_error{id: "200639", eType: EXPECTED_ERROR, message: "Mobile Group does not exist. "}
var E200640 = Global_error{id: "200640", eType: EXPECTED_ERROR, message: "Mobile Group already exists. "}
var E200641 = Global_error{id: "200641", eType: EXPECTED_ERROR, message: "Mobile Group exists and is currently active. "}
var E200642 = Global_error{id: "200642", eType: EXPECTED_ERROR, message: "Mobile Group exists but is not currently active. "}
var E200643 = Global_error{id: "200643", eType: EXPECTED_ERROR, message: "Operator Code does not exist. "}
var E200644 = Global_error{id: "200644", eType: EXPECTED_ERROR, message: "Operator code already exists. "}
var E200645 = Global_error{id: "200645", eType: EXPECTED_ERROR, message: "Operator code exists and is currently active. "}
var E200646 = Global_error{id: "200646", eType: EXPECTED_ERROR, message: "Operator code exists but is not currently active. "}
var E200647 = Global_error{id: "200647", eType: EXPECTED_ERROR, message: "Operator code exists in DOCM_TYPE table, cannot delete. "}
var E200648 = Global_error{id: "200648", eType: EXPECTED_ERROR, message: "Operator code exists in MOBL_GRUP table, cannot delete. "}
var E200649 = Global_error{id: "200649", eType: EXPECTED_ERROR, message: "Operator code exists in OPTR_PARM table, cannot delete. "}
var E200650 = Global_error{id: "200650", eType: EXPECTED_ERROR, message: "Operator code exists in OPTR_PARM table, cannot delete. "}
var E200651 = Global_error{id: "200651", eType: EXPECTED_ERROR, message: "Operator Parameter does not exist. "}
var E200652 = Global_error{id: "200652", eType: EXPECTED_ERROR, message: "Operator Parameter already exists. "}
var E200653 = Global_error{id: "200653", eType: EXPECTED_ERROR, message: "Operator Parameter exists and is currently active. "}
var E200654 = Global_error{id: "200654", eType: EXPECTED_ERROR, message: "Operator Parameter exists but is not currently active. "}
var E200655 = Global_error{id: "200655", eType: EXPECTED_ERROR, message: "Operator Parameter Line does not exist. "}
var E200656 = Global_error{id: "200656", eType: EXPECTED_ERROR, message: "Operator Parameter Line already exists. "}
var E200657 = Global_error{id: "200657", eType: EXPECTED_ERROR, message: "Operator Prefix does not exist. "}
var E200658 = Global_error{id: "200658", eType: EXPECTED_ERROR, message: "PLMN parameter does not exist. "}
var E200659 = Global_error{id: "200659", eType: EXPECTED_ERROR, message: "PLMN Parameter already exists. "}
var E200660 = Global_error{id: "200660", eType: EXPECTED_ERROR, message: "PLMN Parameter exists and currently active. "}
var E200661 = Global_error{id: "200661", eType: EXPECTED_ERROR, message: "PLMN Parameter exists but is not currently active. "}
var E200662 = Global_error{id: "200662", eType: EXPECTED_ERROR, message: "PLMN Parameter Line does not exist. "}
var E200663 = Global_error{id: "200663", eType: EXPECTED_ERROR, message: "PLMN Parameter Line already exists. "}
var E200664 = Global_error{id: "200664", eType: EXPECTED_ERROR, message: "Premium flag should be none, percentage or value. "}
var E200665 = Global_error{id: "200665", eType: EXPECTED_ERROR, message: "Price Parameter does not exist. "}
var E200666 = Global_error{id: "200666", eType: EXPECTED_ERROR, message: "Price parameter already exists. "}
var E200667 = Global_error{id: "200667", eType: EXPECTED_ERROR, message: "Pro Rata Code does not exist. "}
var E200668 = Global_error{id: "200668", eType: EXPECTED_ERROR, message: "Pro Rata Code already exists. "}
var E200669 = Global_error{id: "200669", eType: EXPECTED_ERROR, message: "Pro Rata exists in Bill Code table, cannot delete. "}
var E200670 = Global_error{id: "200670", eType: EXPECTED_ERROR, message: "Range Flag should be Percentage or Value. "}
var E200671 = Global_error{id: "200671", eType: EXPECTED_ERROR, message: "Rate Change does not exist. "}
var E200672 = Global_error{id: "200672", eType: EXPECTED_ERROR, message: "Rate Change exists in Bill Code table, cannot delete. "}
var E200673 = Global_error{id: "200673", eType: EXPECTED_ERROR, message: "Rate Change already exists. "}
var E200674 = Global_error{id: "200674", eType: EXPECTED_ERROR, message: "Reallocate Credit Limit does not exist. "}
var E200675 = Global_error{id: "200675", eType: EXPECTED_ERROR, message: "Reallocate Credit Limit exists and is currently active. "}
var E200676 = Global_error{id: "200676", eType: EXPECTED_ERROR, message: "Reallocate Credit Limit exists and is not currently active. "}
var E200677 = Global_error{id: "200677", eType: EXPECTED_ERROR, message: "Reallocate Transaction does not exist. "}
var E200678 = Global_error{id: "200678", eType: EXPECTED_ERROR, message: "Reallocate Transaction exists but is not currently active. "}
var E200679 = Global_error{id: "200679", eType: EXPECTED_ERROR, message: "Reallocate Transaction exists and is currently active. "}
var E200680 = Global_error{id: "200680", eType: EXPECTED_ERROR, message: "Record Type does not exist. "}
var E200681 = Global_error{id: "200681", eType: EXPECTED_ERROR, message: "Record Type already exists. "}
var E200682 = Global_error{id: "200682", eType: EXPECTED_ERROR, message: "Record Type exists in Service table, cannot delete. "}
var E200683 = Global_error{id: "200683", eType: EXPECTED_ERROR, message: "Rounding Method does not exist. "}
var E200684 = Global_error{id: "200684", eType: EXPECTED_ERROR, message: "Rounding Method already exists. "}
var E200685 = Global_error{id: "200685", eType: EXPECTED_ERROR, message: "Rounding Method exists in Bill Code table, cannot delete. "}
var E200686 = Global_error{id: "200686", eType: EXPECTED_ERROR, message: "Rounding Method exists in Tariff Header table, cannot delete. "}
var E200687 = Global_error{id: "200687", eType: EXPECTED_ERROR, message: "SDR Exchange does not exist. "}
var E200688 = Global_error{id: "200688", eType: EXPECTED_ERROR, message: "SDR Exchange already exists. "}
var E200689 = Global_error{id: "200689", eType: EXPECTED_ERROR, message: "SDR Exchange exists and is currently effective. "}
var E200690 = Global_error{id: "200690", eType: EXPECTED_ERROR, message: "SDR Exchange exists but is not currently effective. "}
var E200691 = Global_error{id: "200691", eType: EXPECTED_ERROR, message: "Service ID does not exist. "}
var E200692 = Global_error{id: "200692", eType: EXPECTED_ERROR, message: "Service ID already exists. "}
var E200693 = Global_error{id: "200693", eType: EXPECTED_ERROR, message: "Service ID exists in Service table, cannot delete "}
var E200694 = Global_error{id: "200694", eType: EXPECTED_ERROR, message: "Service Type does not exist. "}
var E200695 = Global_error{id: "200695", eType: EXPECTED_ERROR, message: "Service Type exist. "}
var E200696 = Global_error{id: "200696", eType: EXPECTED_ERROR, message: "Service Type exists in Service ID  table, Can not delete. "}
var E200697 = Global_error{id: "200697", eType: EXPECTED_ERROR, message: "Special Reference does not exist. "}
var E200698 = Global_error{id: "200698", eType: EXPECTED_ERROR, message: "Special Reference already exists. "}
var E200699 = Global_error{id: "200699", eType: EXPECTED_ERROR, message: "Special Reference exists in Cross Reference table, cannot delete. "}
var E200700 = Global_error{id: "200700", eType: EXPECTED_ERROR, message: "Switching Box does not exist. "}
var E200701 = Global_error{id: "200701", eType: EXPECTED_ERROR, message: "Switching Box exists in Cell Destination table, cannot delete. "}
var E200702 = Global_error{id: "200702", eType: EXPECTED_ERROR, message: "Switching Box already exists. "}
var E200703 = Global_error{id: "200703", eType: EXPECTED_ERROR, message: "Table Name does not exist. "}
var E200704 = Global_error{id: "200704", eType: EXPECTED_ERROR, message: "Table Name already exists. "}
var E200705 = Global_error{id: "200705", eType: EXPECTED_ERROR, message: "Tariff Header does not exist. "}
var E200706 = Global_error{id: "200706", eType: EXPECTED_ERROR, message: "Tariff Header already exists. "}
var E200707 = Global_error{id: "200707", eType: EXPECTED_ERROR, message: "Tariff Header exists in Cross Reference table , cannot Delete. "}
var E200708 = Global_error{id: "200708", eType: EXPECTED_ERROR, message: "Tariff Header exists and is currently active. "}
var E200709 = Global_error{id: "200709", eType: EXPECTED_ERROR, message: "Tariff Header exists but  is not currently active. "}
var E200710 = Global_error{id: "200710", eType: EXPECTED_ERROR, message: "Tariff Line already exists. "}
var E200711 = Global_error{id: "200711", eType: EXPECTED_ERROR, message: "Tariff Line does not exist. "}
var E200712 = Global_error{id: "200712", eType: EXPECTED_ERROR, message: "Tariff Type does not exist. "}
var E200713 = Global_error{id: "200713", eType: EXPECTED_ERROR, message: "Tariff Type already exists. "}
var E200714 = Global_error{id: "200714", eType: EXPECTED_ERROR, message: "Tariff Type exists in Tariff Header table, cannot delete. "}
var E200715 = Global_error{id: "200715", eType: EXPECTED_ERROR, message: "Tax Code does not exist. "}
var E200716 = Global_error{id: "200716", eType: EXPECTED_ERROR, message: "Cannot insert return serial after saving return once. "}
var E200717 = Global_error{id: "200717", eType: EXPECTED_ERROR, message: "Cannot insert return warehouse after saving return once. "}
var E200718 = Global_error{id: "200718", eType: EXPECTED_ERROR, message: "Close period does not exist. "}
var E200719 = Global_error{id: "200719", eType: EXPECTED_ERROR, message: "Credit note already exists. "}
var E200720 = Global_error{id: "200720", eType: EXPECTED_ERROR, message: "Credit Note(s) does not exist for the given criteria. "}
var E200721 = Global_error{id: "200721", eType: EXPECTED_ERROR, message: "Credit Note(s) does not currenntly active for the given criteria. "}
var E200722 = Global_error{id: "200722", eType: EXPECTED_ERROR, message: "Customer does not have invoice(s) for the given criteria. "}
var E200723 = Global_error{id: "200723", eType: EXPECTED_ERROR, message: "Customer does not have lease invoice(s) for the given criteria. "}
var E200724 = Global_error{id: "200724", eType: EXPECTED_ERROR, message: "Customer(s) does not exist for the given criteria. "}
var E200725 = Global_error{id: "200725", eType: EXPECTED_ERROR, message: "Customer(s) does not currently active for the given criteria. "}
var E200726 = Global_error{id: "200726", eType: EXPECTED_ERROR, message: "Debit Note(s) does not exist for the given criteria. "}
var E200727 = Global_error{id: "200727", eType: EXPECTED_ERROR, message: "Debit Note(s) does not currently active for the given criteria. "}
var E200728 = Global_error{id: "200728", eType: EXPECTED_ERROR, message: "Delivery number(s) does not exist for the given criteria. "}
var E200729 = Global_error{id: "200729", eType: EXPECTED_ERROR, message: "Delivery number(s) does not currently active for the given criteria. "}
var E200730 = Global_error{id: "200730", eType: EXPECTED_ERROR, message: "Despatch Note(s) does not exist for the given criteria. "}
var E200731 = Global_error{id: "200731", eType: EXPECTED_ERROR, message: "Despatch Note does not match with the allocate GRN flag for the given criteria. "}
var E200732 = Global_error{id: "200732", eType: EXPECTED_ERROR, message: "Freegoods promotion already exists, cannot delete. "}
var E200733 = Global_error{id: "200733", eType: EXPECTED_ERROR, message: "GRN number(s) does not exist for the given criteria. "}
var E200734 = Global_error{id: "200734", eType: EXPECTED_ERROR, message: "GRN number(s) does not currently active for the given criteria. "}
var E200735 = Global_error{id: "200735", eType: EXPECTED_ERROR, message: "Invalid percentage discount value. "}
var E200736 = Global_error{id: "200736", eType: EXPECTED_ERROR, message: "Invalid unit discount value. "}
var E200737 = Global_error{id: "200737", eType: EXPECTED_ERROR, message: "Inventory transaction(s) does not exist for the given criteria. "}
var E200738 = Global_error{id: "200738", eType: EXPECTED_ERROR, message: "Investor company(s) does not exist for the given criteria. "}
var E200739 = Global_error{id: "200739", eType: EXPECTED_ERROR, message: "Invoice(s) does not exist for the given criteria. "}
var E200740 = Global_error{id: "200740", eType: EXPECTED_ERROR, message: "Invoice(s) does not currently active for the given criteria. "}
var E200741 = Global_error{id: "200741", eType: EXPECTED_ERROR, message: "Lease Invoice(s) does not exist for the given criteria. "}
var E200742 = Global_error{id: "200742", eType: EXPECTED_ERROR, message: "Lease Invoice(s) does not currently active for the given criteria. "}
var E200743 = Global_error{id: "200743", eType: EXPECTED_ERROR, message: "Location promotion already exists, cannot delete. "}
var E200744 = Global_error{id: "200744", eType: EXPECTED_ERROR, message: "Location promotion exists and is currently effective. "}
var E200745 = Global_error{id: "200745", eType: EXPECTED_ERROR, message: "Owner location does not exist. "}
var E200746 = Global_error{id: "200746", eType: EXPECTED_ERROR, message: "PO number(s) does not exist. "}
var E200747 = Global_error{id: "200747", eType: EXPECTED_ERROR, message: "PO number(s) already exist but does not currently active. "}
var E200748 = Global_error{id: "200748", eType: EXPECTED_ERROR, message: "Product code not match with requested location. "}
var E200749 = Global_error{id: "200749", eType: EXPECTED_ERROR, message: "Product not valid for requesting location. "}
var E200750 = Global_error{id: "200750", eType: EXPECTED_ERROR, message: "Product promotion already exists, cannot delete. "}
var E200751 = Global_error{id: "200751", eType: EXPECTED_ERROR, message: "Product warehouse does not exist. "}
var E200752 = Global_error{id: "200752", eType: EXPECTED_ERROR, message: "Promotion is already used in transaction. "}
var E200753 = Global_error{id: "200753", eType: EXPECTED_ERROR, message: "Request accept date cannot be future date. "}
var E200754 = Global_error{id: "200754", eType: EXPECTED_ERROR, message: "Request confirm date cannot be future date. "}
var E200755 = Global_error{id: "200755", eType: EXPECTED_ERROR, message: "Request date cannot be future date. "}
var E200756 = Global_error{id: "200756", eType: EXPECTED_ERROR, message: "Returned location does not exist. "}
var E200757 = Global_error{id: "200757", eType: EXPECTED_ERROR, message: "Supllier(s) does not exist. "}
var E200758 = Global_error{id: "200758", eType: EXPECTED_ERROR, message: "Supplier(s) already exist but does not currently active. "}
var E200759 = Global_error{id: "200759", eType: EXPECTED_ERROR, message: "VAT rate should be between 0 and 100. "}
var E200760 = Global_error{id: "200760", eType: EXPECTED_ERROR, message: "VAT rate(s) does not exist. "}
var E200761 = Global_error{id: "200761", eType: EXPECTED_ERROR, message: "VAT rate(s) already exist but does not currently active. "}
var E200762 = Global_error{id: "200762", eType: EXPECTED_ERROR, message: "Warehouse code for request/return line number not exist in request/return warehouse table. "}
var E200763 = Global_error{id: "200763", eType: EXPECTED_ERROR, message: "Warehouse request/return line number not exist in request/return line table. "}
var E200764 = Global_error{id: "200764", eType: EXPECTED_ERROR, message: "Warehouse(s) active flag does not matched for the given criteria. "}
var E200765 = Global_error{id: "200765", eType: EXPECTED_ERROR, message: "Warehouse(s) does not exist for the given criteria. "}
var E200766 = Global_error{id: "200766", eType: EXPECTED_ERROR, message: "Credit note header already exists. "}
var E200767 = Global_error{id: "200767", eType: EXPECTED_ERROR, message: "Credit note line already exists. "}
var E200768 = Global_error{id: "200768", eType: EXPECTED_ERROR, message: "Delivery freegoods already exists. "}
var E200769 = Global_error{id: "200769", eType: EXPECTED_ERROR, message: "Delivery warehouse details already exist. "}
var E200770 = Global_error{id: "200770", eType: EXPECTED_ERROR, message: "Debit note header already exists. "}
var E200771 = Global_error{id: "200771", eType: EXPECTED_ERROR, message: "GRN header already exists. "}
var E200772 = Global_error{id: "200772", eType: EXPECTED_ERROR, message: "Temp GRN header does not exist. "}
var E200773 = Global_error{id: "200773", eType: EXPECTED_ERROR, message: "GRN line already exists. "}
var E200774 = Global_error{id: "200774", eType: EXPECTED_ERROR, message: "GRN warehouse already exists. "}
var E200775 = Global_error{id: "200775", eType: EXPECTED_ERROR, message: "GRN serial already exists. "}
var E200776 = Global_error{id: "200776", eType: EXPECTED_ERROR, message: "Inventory transaction already exists. "}
var E200777 = Global_error{id: "200777", eType: EXPECTED_ERROR, message: "Payment detail already exists. "}
var E200778 = Global_error{id: "200778", eType: EXPECTED_ERROR, message: "Promotion already exists. "}
var E200779 = Global_error{id: "200779", eType: EXPECTED_ERROR, message: "Product promotion already exists. "}
var E200780 = Global_error{id: "200780", eType: EXPECTED_ERROR, message: "Freegoods promotion already exists. "}
var E200781 = Global_error{id: "200781", eType: EXPECTED_ERROR, message: "Process data already exists. "}
var E200782 = Global_error{id: "200782", eType: EXPECTED_ERROR, message: "Queue data already exists. "}
var E200783 = Global_error{id: "200783", eType: EXPECTED_ERROR, message: "Invalid value for INCL_ARGV. "}
var E200784 = Global_error{id: "200784", eType: EXPECTED_ERROR, message: "Batch/Report code does not exist. "}
var E200785 = Global_error{id: "200785", eType: EXPECTED_ERROR, message: "Invalid EXEC_FLAG value. "}
var E200786 = Global_error{id: "200786", eType: EXPECTED_ERROR, message: "Invalid CRSH_FLAG value. "}
var E200787 = Global_error{id: "200787", eType: EXPECTED_ERROR, message: "Error inserting value in BO_QUEU. "}
var E200788 = Global_error{id: "200788", eType: EXPECTED_ERROR, message: "Invalid network indicator. "}
var E200789 = Global_error{id: "200789", eType: EXPECTED_ERROR, message: "Invalid ACPT_INDC value. "}
var E200790 = Global_error{id: "200790", eType: EXPECTED_ERROR, message: "Unreserved telephone already exists. "}
var E200791 = Global_error{id: "200791", eType: EXPECTED_ERROR, message: "Live flag is not live. "}
var E200792 = Global_error{id: "200792", eType: EXPECTED_ERROR, message: "Gl record already exists "}
var E200793 = Global_error{id: "200793", eType: EXPECTED_ERROR, message: "Invalid Expiry Flag value. "}
var E200794 = Global_error{id: "200794", eType: EXPECTED_ERROR, message: "Invalid posting flag value, should be either Credit or Debit "}
var E200795 = Global_error{id: "200795", eType: EXPECTED_ERROR, message: "Invalid  update flag value. "}
var E200796 = Global_error{id: "200796", eType: EXPECTED_ERROR, message: "Journal type is invalid, should be 'C' or 'S'. "}
var E200797 = Global_error{id: "200797", eType: EXPECTED_ERROR, message: "Location product already exists and is currently active. "}
var E200798 = Global_error{id: "200798", eType: EXPECTED_ERROR, message: "Location product already exists but is not currently active "}
var E200799 = Global_error{id: "200799", eType: EXPECTED_ERROR, message: "Product class exists for product type, cannot delete "}
var E200800 = Global_error{id: "200800", eType: EXPECTED_ERROR, message: "Product code already exists and is currently active. "}
var E200801 = Global_error{id: "200801", eType: EXPECTED_ERROR, message: "Product code is already cancelled. "}
var E200802 = Global_error{id: "200802", eType: EXPECTED_ERROR, message: "Request/return warehouse already exists. "}
var E200803 = Global_error{id: "200803", eType: EXPECTED_ERROR, message: "Serial number for the product code is already in used. "}
var E200804 = Global_error{id: "200804", eType: EXPECTED_ERROR, message: "Supplier already exists and is currently active. "}
var E200805 = Global_error{id: "200805", eType: EXPECTED_ERROR, message: "Warehouse already exists and is currently active "}
var E200806 = Global_error{id: "200806", eType: EXPECTED_ERROR, message: "Warehouse is already cancelled "}
var E200807 = Global_error{id: "200807", eType: EXPECTED_ERROR, message: "Warehouse is already suspended. "}
var E200810 = Global_error{id: "200810", eType: EXPECTED_ERROR, message: "Distance group exists in Distance table, cannot delete. "}
var E200811 = Global_error{id: "200811", eType: EXPECTED_ERROR, message: "Operator Table Prefix exists in  Bill Parameter table, cannot update. "}
var E200812 = Global_error{id: "200812", eType: EXPECTED_ERROR, message: "Update Operator Table Prefix in Mobile Group table failed, Transaction was not completed "}
var E200813 = Global_error{id: "200813", eType: EXPECTED_ERROR, message: "Update Operator Table Prefix in IMSI Group table failed, Transaction was not completed "}
var E200814 = Global_error{id: "200814", eType: EXPECTED_ERROR, message: "Range unit does not exist. "}
var E200815 = Global_error{id: "200815", eType: EXPECTED_ERROR, message: "Boundary unit does not exist. "}
var E200816 = Global_error{id: "200816", eType: EXPECTED_ERROR, message: "Premium unit does not exist. "}
var E200817 = Global_error{id: "200817", eType: EXPECTED_ERROR, message: "This table must have only one row, cannot insert. "}
var E200818 = Global_error{id: "200818", eType: EXPECTED_ERROR, message: "IMSI reference must has first 5 digits are alike. "}
var E200819 = Global_error{id: "200819", eType: EXPECTED_ERROR, message: "Terminated area does not exist. "}
var E200820 = Global_error{id: "200820", eType: EXPECTED_ERROR, message: "Originated area does not exist. "}
var E200821 = Global_error{id: "200821", eType: EXPECTED_ERROR, message: "Arrears plan does not exist. "}
var E200822 = Global_error{id: "200822", eType: EXPECTED_ERROR, message: "Arrears plan already exists. "}
var E200823 = Global_error{id: "200823", eType: EXPECTED_ERROR, message: "Arrears Plan with stage details does not exist. "}
var E200824 = Global_error{id: "200824", eType: EXPECTED_ERROR, message: "Arrears Stage does not exist. "}
var E200825 = Global_error{id: "200825", eType: EXPECTED_ERROR, message: "Blank does not allowed for Product code, Letter code and Letter date. "}
var E200826 = Global_error{id: "200826", eType: EXPECTED_ERROR, message: "Cannot proceed for Arrears processing. "}
var E200827 = Global_error{id: "200827", eType: EXPECTED_ERROR, message: "Cannot proceed for Credit Limit processing. "}
var E200828 = Global_error{id: "200828", eType: EXPECTED_ERROR, message: "Charge Code already exists and is currently effective. "}
var E200829 = Global_error{id: "200829", eType: EXPECTED_ERROR, message: "Charge Code already exists but is not currently effective. "}
var E200830 = Global_error{id: "200830", eType: EXPECTED_ERROR, message: "Charge Code does not exist. "}
var E200831 = Global_error{id: "200831", eType: EXPECTED_ERROR, message: "Charge code already exists. "}
var E200832 = Global_error{id: "200832", eType: EXPECTED_ERROR, message: "Charge detail does not exist "}
var E200833 = Global_error{id: "200833", eType: EXPECTED_ERROR, message: "Complete date exists, please use normal process. "}
var E200834 = Global_error{id: "200834", eType: EXPECTED_ERROR, message: "Credit Limit Plan does not exist. "}
var E200835 = Global_error{id: "200835", eType: EXPECTED_ERROR, message: "Credit limit plan already exists. "}
var E200836 = Global_error{id: "200836", eType: EXPECTED_ERROR, message: "Credit Limit Plan with stage details does not exist. "}
var E200837 = Global_error{id: "200837", eType: EXPECTED_ERROR, message: "Credit Limit Stage does not exist. "}
var E200838 = Global_error{id: "200838", eType: EXPECTED_ERROR, message: "Current month must be greater than the last period end's month. "}
var E200839 = Global_error{id: "200839", eType: EXPECTED_ERROR, message: "Current year must be greater than the last period end's year. "}
var E200840 = Global_error{id: "200840", eType: EXPECTED_ERROR, message: "Data Code does not exist. "}
var E200841 = Global_error{id: "200841", eType: EXPECTED_ERROR, message: "Data Code already exists. "}
var E200842 = Global_error{id: "200842", eType: EXPECTED_ERROR, message: "Extract Code does not exist. "}
var E200843 = Global_error{id: "200843", eType: EXPECTED_ERROR, message: "Extract code already exists. "}
var E200844 = Global_error{id: "200844", eType: EXPECTED_ERROR, message: "Extract Data does not exist. "}
var E200845 = Global_error{id: "200845", eType: EXPECTED_ERROR, message: "Extract Data already exists. "}
var E200846 = Global_error{id: "200846", eType: EXPECTED_ERROR, message: "Extract detail does not exist. "}
var E200847 = Global_error{id: "200847", eType: EXPECTED_ERROR, message: "Extract code exists and is currently effective. "}
var E200848 = Global_error{id: "200848", eType: EXPECTED_ERROR, message: "Extract Code exists but is not currently effective. "}
var E200849 = Global_error{id: "200849", eType: EXPECTED_ERROR, message: "Generate extract file is in progress. "}
var E200850 = Global_error{id: "200850", eType: EXPECTED_ERROR, message: "Last Arrears processing was not completed, cannot proceed. "}
var E200851 = Global_error{id: "200851", eType: EXPECTED_ERROR, message: "Last Arrears Re-processing was not completed, cannot proceed. "}
var E200852 = Global_error{id: "200852", eType: EXPECTED_ERROR, message: "Last Credit Limit processing was not completed, cannot proceed. "}
var E200853 = Global_error{id: "200853", eType: EXPECTED_ERROR, message: "Last Credit Limit re-processing was not completed, cannot proceed. "}
var E200854 = Global_error{id: "200854", eType: EXPECTED_ERROR, message: "Letter Code does not exist. "}
var E200855 = Global_error{id: "200855", eType: EXPECTED_ERROR, message: "Letter code already exists. "}
var E200856 = Global_error{id: "200856", eType: EXPECTED_ERROR, message: "Letter Data does not exist. "}
var E200857 = Global_error{id: "200857", eType: EXPECTED_ERROR, message: "Letter Data exists. "}
var E200858 = Global_error{id: "200858", eType: EXPECTED_ERROR, message: "Product group already exists. "}
var E200859 = Global_error{id: "200859", eType: EXPECTED_ERROR, message: "Letter detail can not be retrieved. "}
var E200860 = Global_error{id: "200860", eType: EXPECTED_ERROR, message: "Letter detail does not exist. "}
var E200861 = Global_error{id: "200861", eType: EXPECTED_ERROR, message: "Letter detail already exists. "}
var E200862 = Global_error{id: "200862", eType: EXPECTED_ERROR, message: "Letter code exists and is currently effective. "}
var E200863 = Global_error{id: "200863", eType: EXPECTED_ERROR, message: "Letter code exists but is not currently effective. "}
var E200864 = Global_error{id: "200864", eType: EXPECTED_ERROR, message: "Monthly Period End Code does not exist. "}
var E200865 = Global_error{id: "200865", eType: EXPECTED_ERROR, message: "Monthly period end process is running. "}
var E200866 = Global_error{id: "200866", eType: EXPECTED_ERROR, message: "No Extract Data exist. Cannot insert Extract Master without at least one data. "}
var E200867 = Global_error{id: "200867", eType: EXPECTED_ERROR, message: "No Letter Data exists. Cannot insert Letter Master without at least one data. "}
var E200868 = Global_error{id: "200868", eType: EXPECTED_ERROR, message: "No Plan Change Detail exist. Cannot insert Plan Change Reason without at least one detail. "}
var E200869 = Global_error{id: "200869", eType: EXPECTED_ERROR, message: "No record found in Arrears Action Detail. "}
var E200870 = Global_error{id: "200870", eType: EXPECTED_ERROR, message: "No record found in Arrears Action. "}
var E200871 = Global_error{id: "200871", eType: EXPECTED_ERROR, message: "No record found in Credit Limit Action. "}
var E200872 = Global_error{id: "200872", eType: EXPECTED_ERROR, message: "No record to delete for Arrears Action History. "}
var E200873 = Global_error{id: "200873", eType: EXPECTED_ERROR, message: "No record to delete for Credit Limit Action History. "}
var E200874 = Global_error{id: "200874", eType: EXPECTED_ERROR, message: "No record to transfer for Arrears Action. "}
var E200875 = Global_error{id: "200875", eType: EXPECTED_ERROR, message: "No record to transfer for Credit Limit Action. "}
var E200876 = Global_error{id: "200876", eType: EXPECTED_ERROR, message: "Other table referred to this code. cannot delete. "}
var E200877 = Global_error{id: "200877", eType: EXPECTED_ERROR, message: "Plan Change and Product do not exist. "}
var E200878 = Global_error{id: "200878", eType: EXPECTED_ERROR, message: "Plan change and product already exist. "}
var E200879 = Global_error{id: "200879", eType: EXPECTED_ERROR, message: "Plan Change Reason and Detail do not exist. "}
var E200880 = Global_error{id: "200880", eType: EXPECTED_ERROR, message: "Plan Change Reason Code does not exist. "}
var E200881 = Global_error{id: "200881", eType: EXPECTED_ERROR, message: "Plan change reason code already exists. "}
var E200882 = Global_error{id: "200882", eType: EXPECTED_ERROR, message: "Process is completed. "}
var E200883 = Global_error{id: "200883", eType: EXPECTED_ERROR, message: "Process stage not complete. "}
var E200884 = Global_error{id: "200884", eType: EXPECTED_ERROR, message: "Product Code and Extract Code do not exist. "}
var E200885 = Global_error{id: "200885", eType: EXPECTED_ERROR, message: "Product code and Extract code already exist. "}
var E200886 = Global_error{id: "200886", eType: EXPECTED_ERROR, message: "Product Code and Letter Code do not exist. "}
var E200887 = Global_error{id: "200887", eType: EXPECTED_ERROR, message: "Product code and letter code already exist. "}
var E200888 = Global_error{id: "200888", eType: EXPECTED_ERROR, message: "Product Code and Occupation Type do not exist. "}
var E200889 = Global_error{id: "200889", eType: EXPECTED_ERROR, message: "Product code and occupation type already exist. "}
var E200890 = Global_error{id: "200890", eType: EXPECTED_ERROR, message: "Retrieve extract record from PARAMETER table failed. "}
var E200891 = Global_error{id: "200891", eType: EXPECTED_ERROR, message: "Routine code does not exist. "}
var E200892 = Global_error{id: "200892", eType: EXPECTED_ERROR, message: "Routine code already exists. "}
var E200893 = Global_error{id: "200893", eType: EXPECTED_ERROR, message: "This Plan Change Reason Code exists and is currently active. "}
var E200894 = Global_error{id: "200894", eType: EXPECTED_ERROR, message: "This Plan Change Reason Code exists but is not currently active. "}
var E200895 = Global_error{id: "200895", eType: EXPECTED_ERROR, message: "This record is already activate. "}
var E200896 = Global_error{id: "200896", eType: EXPECTED_ERROR, message: "Updating PARAMETER row failed. "}
var E200897 = Global_error{id: "200897", eType: EXPECTED_ERROR, message: "Yearly Period End Code does not exist. "}
var E200898 = Global_error{id: "200898", eType: EXPECTED_ERROR, message: "Yearly period end process is running. "}
var E200899 = Global_error{id: "200899", eType: EXPECTED_ERROR, message: "Invalid product code for the location. "}
var E200900 = Global_error{id: "200900", eType: EXPECTED_ERROR, message: "Invalid product for the warehouse. "}
var E200901 = Global_error{id: "200901", eType: EXPECTED_ERROR, message: "Inventory Movement already exists. "}
var E200902 = Global_error{id: "200902", eType: EXPECTED_ERROR, message: "Not enough stock for this product. "}
var E200903 = Global_error{id: "200903", eType: EXPECTED_ERROR, message: "Serial already exists in the warehouse. "}
var E200904 = Global_error{id: "200904", eType: EXPECTED_ERROR, message: "Active group/user does not exist. "}
var E200905 = Global_error{id: "200905", eType: EXPECTED_ERROR, message: "Active Suspension Reason Code does not exist. "}
var E200906 = Global_error{id: "200906", eType: EXPECTED_ERROR, message: "Active Switch Off Reason Code does not exist. "}
var E200907 = Global_error{id: "200907", eType: EXPECTED_ERROR, message: "Address already exists. "}
var E200908 = Global_error{id: "200908", eType: EXPECTED_ERROR, message: "Address does not exist. "}
var E200909 = Global_error{id: "200909", eType: EXPECTED_ERROR, message: "Address type already exists. "}
var E200910 = Global_error{id: "200910", eType: EXPECTED_ERROR, message: "Address Type does not exist. "}
var E200911 = Global_error{id: "200911", eType: EXPECTED_ERROR, message: "At least one field must have a value. "}
var E200912 = Global_error{id: "200912", eType: EXPECTED_ERROR, message: "Bad ESN reason requirement can be 'Y' or 'N' only. "}
var E200913 = Global_error{id: "200913", eType: EXPECTED_ERROR, message: "Bad IMEI reason requirement can be 'Y' or 'N' only. "}
var E200914 = Global_error{id: "200914", eType: EXPECTED_ERROR, message: "Bill flag can be 'Y' or 'N' only. "}
var E200915 = Global_error{id: "200915", eType: EXPECTED_ERROR, message: "Black list reason code already exists. "}
var E200916 = Global_error{id: "200916", eType: EXPECTED_ERROR, message: "Black List Reason Code does not exist. "}
var E200917 = Global_error{id: "200917", eType: EXPECTED_ERROR, message: "Black list source code already exists. "}
var E200918 = Global_error{id: "200918", eType: EXPECTED_ERROR, message: "Black List Source Code does not exist. "}
var E200919 = Global_error{id: "200919", eType: EXPECTED_ERROR, message: "Black Listed Customer does not exist. "}
var E200920 = Global_error{id: "200920", eType: EXPECTED_ERROR, message: "Calendar date already exists. "}
var E200921 = Global_error{id: "200921", eType: EXPECTED_ERROR, message: "Calendar date does not exist. "}
var E200922 = Global_error{id: "200922", eType: EXPECTED_ERROR, message: "Card status can be 'Y' or 'N' only. "}
var E200923 = Global_error{id: "200923", eType: EXPECTED_ERROR, message: "Change Reason Code already exists and is currently effective. "}
var E200924 = Global_error{id: "200924", eType: EXPECTED_ERROR, message: "Change Reason Code already exists but is not currently effective. "}
var E200925 = Global_error{id: "200925", eType: EXPECTED_ERROR, message: "Change reason code already exists. "}
var E200926 = Global_error{id: "200926", eType: EXPECTED_ERROR, message: "Change Reason Code does not exist. "}
var E200927 = Global_error{id: "200927", eType: EXPECTED_ERROR, message: "Change Reason Type already exists and is currently effective. "}
var E200928 = Global_error{id: "200928", eType: EXPECTED_ERROR, message: "Change Reason Type already exists but is not currently effective. "}
var E200929 = Global_error{id: "200929", eType: EXPECTED_ERROR, message: "Change reason type already exists. "}
var E200930 = Global_error{id: "200930", eType: EXPECTED_ERROR, message: "Change Reason Type does not exist. "}
var E200931 = Global_error{id: "200931", eType: EXPECTED_ERROR, message: "Country code already exists. "}
var E200932 = Global_error{id: "200932", eType: EXPECTED_ERROR, message: "Country Code does not exist. "}
var E200933 = Global_error{id: "200933", eType: EXPECTED_ERROR, message: "Customer does not exist. "}
var E200934 = Global_error{id: "200934", eType: EXPECTED_ERROR, message: "Customer is already in black listed. "}
var E200935 = Global_error{id: "200935", eType: EXPECTED_ERROR, message: "Customer number already exists. "}
var E200936 = Global_error{id: "200936", eType: EXPECTED_ERROR, message: "Customer address already exists. "}
var E200937 = Global_error{id: "200937", eType: EXPECTED_ERROR, message: "Customer's Address does not exist. "}
var E200938 = Global_error{id: "200938", eType: EXPECTED_ERROR, message: "Dealer Number does not exist. "}
var E200939 = Global_error{id: "200939", eType: EXPECTED_ERROR, message: "Divert Code already exists. "}
var E200940 = Global_error{id: "200940", eType: EXPECTED_ERROR, message: "Divert Code does not exist. "}
var E200941 = Global_error{id: "200941", eType: EXPECTED_ERROR, message: "EIR can be 'Y' or 'N' only. "}
var E200942 = Global_error{id: "200942", eType: EXPECTED_ERROR, message: "Fee Flag can be 'Y' or 'N' only. "}
var E200943 = Global_error{id: "200943", eType: EXPECTED_ERROR, message: "Group code or user code exists in the authorized table. "}
var E200944 = Global_error{id: "200944", eType: EXPECTED_ERROR, message: "Hardware status can be 'Y' or 'N' only. "}
var E200945 = Global_error{id: "200945", eType: EXPECTED_ERROR, message: "ID type code already exists. "}
var E200946 = Global_error{id: "200946", eType: EXPECTED_ERROR, message: "ID type code does not exist. "}
var E200947 = Global_error{id: "200947", eType: EXPECTED_ERROR, message: "Increment value can not less than or equal zero. "}
var E200948 = Global_error{id: "200948", eType: EXPECTED_ERROR, message: "Invalid Bill Day. "}
var E200949 = Global_error{id: "200949", eType: EXPECTED_ERROR, message: "Invalid calendar date. "}
var E200950 = Global_error{id: "200950", eType: EXPECTED_ERROR, message: "Lease Period cannot be less than zero. "}
var E200951 = Global_error{id: "200951", eType: EXPECTED_ERROR, message: "Leasing code already exists. "}
var E200952 = Global_error{id: "200952", eType: EXPECTED_ERROR, message: "Leasing Code does not exist. "}
var E200953 = Global_error{id: "200953", eType: EXPECTED_ERROR, message: "Maximum Extent cannot less than Start Value. "}
var E200954 = Global_error{id: "200954", eType: EXPECTED_ERROR, message: "Next running number must be greater than Start Value. "}
var E200955 = Global_error{id: "200955", eType: EXPECTED_ERROR, message: "Group code and user code must not be null at the same time. "}
var E200956 = Global_error{id: "200956", eType: EXPECTED_ERROR, message: "Occupation code already exists. "}
var E200957 = Global_error{id: "200957", eType: EXPECTED_ERROR, message: "Occupation code does not exist. "}
var E200958 = Global_error{id: "200958", eType: EXPECTED_ERROR, message: "Occupation type already exists. "}
var E200959 = Global_error{id: "200959", eType: EXPECTED_ERROR, message: "Occupation type does not exist. "}
var E200960 = Global_error{id: "200960", eType: EXPECTED_ERROR, message: "Offset Unit can be 'D', 'M' or 'Y' only. "}
var E200961 = Global_error{id: "200961", eType: EXPECTED_ERROR, message: "Payment Frequency should be between zero and Lease Period. "}
var E200962 = Global_error{id: "200962", eType: EXPECTED_ERROR, message: "Post Code already exists. "}
var E200963 = Global_error{id: "200963", eType: EXPECTED_ERROR, message: "Post code does not exist. "}
var E200964 = Global_error{id: "200964", eType: EXPECTED_ERROR, message: "Province code already exists. "}
var E200965 = Global_error{id: "200965", eType: EXPECTED_ERROR, message: "Province Code does not exist. "}
var E200966 = Global_error{id: "200966", eType: EXPECTED_ERROR, message: "Reason type already exists. "}
var E200967 = Global_error{id: "200967", eType: EXPECTED_ERROR, message: "Reason type does not exist. "}
var E200968 = Global_error{id: "200968", eType: EXPECTED_ERROR, message: "Reconnection reason code already exists. "}
var E200969 = Global_error{id: "200969", eType: EXPECTED_ERROR, message: "Reconnection Reason Code does not exist. "}
var E200970 = Global_error{id: "200970", eType: EXPECTED_ERROR, message: "Request Code already exists and is currently effective. "}
var E200971 = Global_error{id: "200971", eType: EXPECTED_ERROR, message: "Request Code already exists but is not currently effective. "}
var E200972 = Global_error{id: "200972", eType: EXPECTED_ERROR, message: "Request code already exists. "}
var E200973 = Global_error{id: "200973", eType: EXPECTED_ERROR, message: "Request code does not exist. "}
var E200974 = Global_error{id: "200974", eType: EXPECTED_ERROR, message: "Request type does not exist. "}
var E200975 = Global_error{id: "200975", eType: EXPECTED_ERROR, message: "Sequence name already exists. "}
var E200976 = Global_error{id: "200976", eType: EXPECTED_ERROR, message: "Sequence name does not exist. "}
var E200977 = Global_error{id: "200977", eType: EXPECTED_ERROR, message: "Sequence number already exists. "}
var E200978 = Global_error{id: "200978", eType: EXPECTED_ERROR, message: "Sequence number does not exist. "}
var E200979 = Global_error{id: "200979", eType: EXPECTED_ERROR, message: "Service code does not exist. "}
var E200980 = Global_error{id: "200980", eType: EXPECTED_ERROR, message: "Service Order Request Code does not exist. "}
var E200981 = Global_error{id: "200981", eType: EXPECTED_ERROR, message: "Black List Source already exists. "}
var E200982 = Global_error{id: "200982", eType: EXPECTED_ERROR, message: "Black List Source does not exist. "}
var E200983 = Global_error{id: "200983", eType: EXPECTED_ERROR, message: "Source of Sales Category already exists. "}
var E200984 = Global_error{id: "200984", eType: EXPECTED_ERROR, message: "Source of Sales Category does not exist. "}
var E200985 = Global_error{id: "200985", eType: EXPECTED_ERROR, message: "Start value cannot less than zero. "}
var E200986 = Global_error{id: "200986", eType: EXPECTED_ERROR, message: "Subscriber number already exists. "}
var E200987 = Global_error{id: "200987", eType: EXPECTED_ERROR, message: "Subscriber Number does not exist. "}
var E200988 = Global_error{id: "200988", eType: EXPECTED_ERROR, message: "Suspension reason code already exists. "}
var E200989 = Global_error{id: "200989", eType: EXPECTED_ERROR, message: "Suspension reason code does not exist. "}
var E200990 = Global_error{id: "200990", eType: EXPECTED_ERROR, message: "Switch off reason code already exists and is currently active. "}
var E200991 = Global_error{id: "200991", eType: EXPECTED_ERROR, message: "Switch off reason code already exists but is not currently active. "}
var E200992 = Global_error{id: "200992", eType: EXPECTED_ERROR, message: "Switch off reason code already exists. "}
var E200993 = Global_error{id: "200993", eType: EXPECTED_ERROR, message: "Switch off reason code does not exist. "}
var E200994 = Global_error{id: "200994", eType: EXPECTED_ERROR, message: "Switch off reason type already exists. "}
var E200995 = Global_error{id: "200995", eType: EXPECTED_ERROR, message: "Switch Off Reason type does not exist. "}
var E200996 = Global_error{id: "200996", eType: EXPECTED_ERROR, message: "Switch on reason code already exists. "}
var E200997 = Global_error{id: "200997", eType: EXPECTED_ERROR, message: "Switch on reason code does not exist. "}
var E200998 = Global_error{id: "200998", eType: EXPECTED_ERROR, message: "Switch on reason type already exists. "}
var E200999 = Global_error{id: "200999", eType: EXPECTED_ERROR, message: "Switch on reason type does not exist. "}
var E201000 = Global_error{id: "201000", eType: EXPECTED_ERROR, message: "Un-Black List reason code already exists. "}
var E201001 = Global_error{id: "201001", eType: EXPECTED_ERROR, message: "Un-Black List reason code does not exist. "}
var E201002 = Global_error{id: "201002", eType: EXPECTED_ERROR, message: "Update Bad flag must be 'Y' or 'N' only. "}
var E201003 = Global_error{id: "201003", eType: EXPECTED_ERROR, message: "Value in From Date cannot be null when the value in To Date is not null. "}
var E201004 = Global_error{id: "201004", eType: EXPECTED_ERROR, message: "Voluntary Flag can be 'Y' or 'N' only. "}
var E201005 = Global_error{id: "201005", eType: EXPECTED_ERROR, message: "Operator code exists in IMSI Group  table, cannot delete. "}
var E201006 = Global_error{id: "201006", eType: EXPECTED_ERROR, message: "Service records does not exist. "}
var E201007 = Global_error{id: "201007", eType: EXPECTED_ERROR, message: "Service records already exists. "}
var E201008 = Global_error{id: "201008", eType: EXPECTED_ERROR, message: "Service records exists in Cross Reference table, cannot delete. "}
var E201010 = Global_error{id: "201010", eType: EXPECTED_ERROR, message: "Document type exists and is currently effective. "}
var E201011 = Global_error{id: "201011", eType: EXPECTED_ERROR, message: "Document tyype exists but is not currently effective. "}
var E201012 = Global_error{id: "201012", eType: EXPECTED_ERROR, message: "Update Duplicate Flag in Bill Code table failed, transaction was not completed "}
var E201013 = Global_error{id: "201013", eType: EXPECTED_ERROR, message: "Destination exists in Cell Destination table, cannot delete. "}
var E201014 = Global_error{id: "201014", eType: EXPECTED_ERROR, message: "Destination exists in Dialed Digits table, cannot delete. "}
var E201015 = Global_error{id: "201015", eType: EXPECTED_ERROR, message: "Destination exists in PLMN Parameter table, cannot delete. "}
var E201016 = Global_error{id: "201016", eType: EXPECTED_ERROR, message: "Destination exists in Operator Parameter table, cannot delete. "}
var E201017 = Global_error{id: "201017", eType: EXPECTED_ERROR, message: "Cell Destination  exist in Home Zone Switching Cross Reference table, Cannot delete "}
var E201018 = Global_error{id: "201018", eType: EXPECTED_ERROR, message: "TAPIN MOC Handling Indicator should be None, Percent or Value "}
var E201019 = Global_error{id: "201019", eType: EXPECTED_ERROR, message: "TAPOUT Tax Indicator should be 'Y' or  'N' only. "}
var E201020 = Global_error{id: "201020", eType: EXPECTED_ERROR, message: "TAPOUT MOC Handling Indicator should be None, Percent or Value. "}
var E201021 = Global_error{id: "201021", eType: EXPECTED_ERROR, message: "Bill Frequency exists in Bill Code table, cannot delete. "}
var E201022 = Global_error{id: "201022", eType: EXPECTED_ERROR, message: "Despatch number already exists. "}
var E201023 = Global_error{id: "201023", eType: EXPECTED_ERROR, message: "Account type already exist in GL master, cannot delete. "}
var E201024 = Global_error{id: "201024", eType: EXPECTED_ERROR, message: "Account type already exists in Payment Type table,  cannot delete. "}
var E201025 = Global_error{id: "201025", eType: EXPECTED_ERROR, message: "Updated reorder quantity and safety stock quantity. "}
var E201026 = Global_error{id: "201026", eType: EXPECTED_ERROR, message: "Updated avaliable quantity, average cost, reorder quantity and safety stock quantity "}
var E201027 = Global_error{id: "201027", eType: EXPECTED_ERROR, message: "Updated order quantity, reorder quantity and safety stock quantity "}
var E201028 = Global_error{id: "201028", eType: EXPECTED_ERROR, message: "Updated avaliable quantity, average cost, order quantity, reorder quantity and safety stock quantity "}
var E201029 = Global_error{id: "201029", eType: EXPECTED_ERROR, message: "Neither active nor expired Package Plan Code does not exist. "}
var E201030 = Global_error{id: "201030", eType: EXPECTED_ERROR, message: "Active Flag must be 0 or 1. "}
var E201031 = Global_error{id: "201031", eType: EXPECTED_ERROR, message: "Cannot delete all the detail records. "}
var E201032 = Global_error{id: "201032", eType: EXPECTED_ERROR, message: "Connection Fee Transfer Flag can be 'Y' or 'N' only. "}
var E201033 = Global_error{id: "201033", eType: EXPECTED_ERROR, message: "Dependent Package Code does not exist. "}
var E201034 = Global_error{id: "201034", eType: EXPECTED_ERROR, message: "Deposit Transfer Flag can be 'Y' or 'N' only. "}
var E201035 = Global_error{id: "201035", eType: EXPECTED_ERROR, message: "Both effective brand code and model code do not exist. "}
var E201036 = Global_error{id: "201036", eType: EXPECTED_ERROR, message: "Effective dealer number does not exist. "}
var E201037 = Global_error{id: "201037", eType: EXPECTED_ERROR, message: "Effective package plan code does not exist. "}
var E201038 = Global_error{id: "201038", eType: EXPECTED_ERROR, message: "Details does not exist, cannot insert data without at least one detail. "}
var E201039 = Global_error{id: "201039", eType: EXPECTED_ERROR, message: "Package Plan Code already exists. "}
var E201040 = Global_error{id: "201040", eType: EXPECTED_ERROR, message: "Package Plan Code does not exist. "}
var E201041 = Global_error{id: "201041", eType: EXPECTED_ERROR, message: "Record already exists "}
var E201042 = Global_error{id: "201042", eType: EXPECTED_ERROR, message: "Record is found. "}
var E201043 = Global_error{id: "201043", eType: EXPECTED_ERROR, message: "Source of Sales Code already exists. "}
var E201044 = Global_error{id: "201044", eType: EXPECTED_ERROR, message: "Source of Sales Code does not exist. "}
var E201045 = Global_error{id: "201045", eType: EXPECTED_ERROR, message: "Transaction Type Code is expire. "}
var E201046 = Global_error{id: "201046", eType: EXPECTED_ERROR, message: "Adjustment amount should not greater than Invoice/Receipt amount. "}
var E201047 = Global_error{id: "201047", eType: EXPECTED_ERROR, message: "Allocation Method Code already exists and is currently effective in Transaction Type. "}
var E201048 = Global_error{id: "201048", eType: EXPECTED_ERROR, message: "Allocation Method Code already exists and is currently effective. "}
var E201049 = Global_error{id: "201049", eType: EXPECTED_ERROR, message: "Allocation Method Code already exists but is not currently not effective. "}
var E201050 = Global_error{id: "201050", eType: EXPECTED_ERROR, message: "Allocation Method Code already exists. "}
var E201051 = Global_error{id: "201051", eType: EXPECTED_ERROR, message: "Allocation Method Code does not exist. "}
var E201052 = Global_error{id: "201052", eType: EXPECTED_ERROR, message: "Bank Code does not exist. "}
var E201053 = Global_error{id: "201053", eType: EXPECTED_ERROR, message: "Calculate commission recoverable by location is complete. "}
var E201054 = Global_error{id: "201054", eType: EXPECTED_ERROR, message: "Calculate commission recoverable by location type is complete. "}
var E201055 = Global_error{id: "201055", eType: EXPECTED_ERROR, message: "Calculate Commission Recoverable By TAC is complete. "}
var E201056 = Global_error{id: "201056", eType: EXPECTED_ERROR, message: "Cheque details already exists. "}
var E201057 = Global_error{id: "201057", eType: EXPECTED_ERROR, message: "Cheque details already exists. "}
var E201058 = Global_error{id: "201058", eType: EXPECTED_ERROR, message: "Cheque Details does not exist. "}
var E201059 = Global_error{id: "201059", eType: EXPECTED_ERROR, message: "Cheque information already exists. "}
var E201060 = Global_error{id: "201060", eType: EXPECTED_ERROR, message: "Cheque master already exists. "}
var E201061 = Global_error{id: "201061", eType: EXPECTED_ERROR, message: "Cheque master does not exist "}
var E201062 = Global_error{id: "201062", eType: EXPECTED_ERROR, message: "Cheque number does not exist. "}
var E201063 = Global_error{id: "201063", eType: EXPECTED_ERROR, message: "Cheque status should be S, R or C only. "}
var E201064 = Global_error{id: "201064", eType: EXPECTED_ERROR, message: "Commission Rate already exists and is currently effective. "}
var E201065 = Global_error{id: "201065", eType: EXPECTED_ERROR, message: "Commission Rate already exists but is not currently effective. "}
var E201066 = Global_error{id: "201066", eType: EXPECTED_ERROR, message: "Commission Rate already exists. "}
var E201067 = Global_error{id: "201067", eType: EXPECTED_ERROR, message: "Commission rate should be greater than 0 and less than 100. "}
var E201068 = Global_error{id: "201068", eType: EXPECTED_ERROR, message: "Customer Number should not be null. "}
var E201069 = Global_error{id: "201069", eType: EXPECTED_ERROR, message: "Database Link should be null when default value is not null. "}
var E201070 = Global_error{id: "201070", eType: EXPECTED_ERROR, message: "Database link should not be null when default value is null. "}
var E201071 = Global_error{id: "201071", eType: EXPECTED_ERROR, message: "Debit Note already exists. "}
var E201072 = Global_error{id: "201072", eType: EXPECTED_ERROR, message: "Document type code already exists in document running number. "}
var E201073 = Global_error{id: "201073", eType: EXPECTED_ERROR, message: "Document Type Code already exists in Transaction Type. "}
var E201074 = Global_error{id: "201074", eType: EXPECTED_ERROR, message: "Format code already exists and is currently effective. "}
var E201075 = Global_error{id: "201075", eType: EXPECTED_ERROR, message: "Format Code already exists but is not currently effective. "}
var E201076 = Global_error{id: "201076", eType: EXPECTED_ERROR, message: "Format code already exists but is not currently effective. "}
var E201077 = Global_error{id: "201077", eType: EXPECTED_ERROR, message: "Format Code already exists in Format Detail. "}
var E201078 = Global_error{id: "201078", eType: EXPECTED_ERROR, message: "Format code already exists in Format Method. "}
var E201079 = Global_error{id: "201079", eType: EXPECTED_ERROR, message: "Format code already exists. "}
var E201080 = Global_error{id: "201080", eType: EXPECTED_ERROR, message: "Format Code does not exist "}
var E201081 = Global_error{id: "201081", eType: EXPECTED_ERROR, message: "Format detail code already exists and is currently effective. "}
var E201082 = Global_error{id: "201082", eType: EXPECTED_ERROR, message: "Format detail code already exists and is currently not effective. "}
var E201083 = Global_error{id: "201083", eType: EXPECTED_ERROR, message: "Format detail code already exists. "}
var E201084 = Global_error{id: "201084", eType: EXPECTED_ERROR, message: "Format detail code does not exist. "}
var E201085 = Global_error{id: "201085", eType: EXPECTED_ERROR, message: "Format Item code does not exist in format method. "}
var E201086 = Global_error{id: "201086", eType: EXPECTED_ERROR, message: "Format Item Code does not exist in the Format Detail. "}
var E201087 = Global_error{id: "201087", eType: EXPECTED_ERROR, message: "Format Method Code already exists. "}
var E201088 = Global_error{id: "201088", eType: EXPECTED_ERROR, message: "Information details already exists. "}
var E201089 = Global_error{id: "201089", eType: EXPECTED_ERROR, message: "Information Details does not  exist. "}
var E201090 = Global_error{id: "201090", eType: EXPECTED_ERROR, message: "Invalid Cheque Date. "}
var E201091 = Global_error{id: "201091", eType: EXPECTED_ERROR, message: "Invalid cheque status. "}
var E201092 = Global_error{id: "201092", eType: EXPECTED_ERROR, message: "Invalid effective and expiry date. "}
var E201093 = Global_error{id: "201093", eType: EXPECTED_ERROR, message: "Invalid expiry date. "}
var E201094 = Global_error{id: "201094", eType: EXPECTED_ERROR, message: "Link field and method code should not be null. "}
var E201095 = Global_error{id: "201095", eType: EXPECTED_ERROR, message: "Location code already exists and is currently effective. "}
var E201096 = Global_error{id: "201096", eType: EXPECTED_ERROR, message: "Location code already exists but is not currently effective. "}
var E201097 = Global_error{id: "201097", eType: EXPECTED_ERROR, message: "Location code already exists in document running number. "}
var E201098 = Global_error{id: "201098", eType: EXPECTED_ERROR, message: "Location code already exists in receipt header. "}
var E201099 = Global_error{id: "201099", eType: EXPECTED_ERROR, message: "Location code already exists. "}
var E201100 = Global_error{id: "201100", eType: EXPECTED_ERROR, message: "Location code does not exist. "}
var E201101 = Global_error{id: "201101", eType: EXPECTED_ERROR, message: "Location type code already exists in location. "}
var E201102 = Global_error{id: "201102", eType: EXPECTED_ERROR, message: "Location type code already exists. "}
var E201103 = Global_error{id: "201103", eType: EXPECTED_ERROR, message: "Location type code does not exist. "}
var E201104 = Global_error{id: "201104", eType: EXPECTED_ERROR, message: "Paid amount should greaater than total amount. "}
var E201105 = Global_error{id: "201105", eType: EXPECTED_ERROR, message: "Parameter code should not be null. "}
var E201106 = Global_error{id: "201106", eType: EXPECTED_ERROR, message: "Payment cycle number already exists. "}
var E201107 = Global_error{id: "201107", eType: EXPECTED_ERROR, message: "Payment cycle number does not exist. "}
var E201108 = Global_error{id: "201108", eType: EXPECTED_ERROR, message: "Payment method code does not exist. "}
var E201109 = Global_error{id: "201109", eType: EXPECTED_ERROR, message: "Receipt Allocation already exists. "}
var E201110 = Global_error{id: "201110", eType: EXPECTED_ERROR, message: "Receipt already cancelled. "}
var E201111 = Global_error{id: "201111", eType: EXPECTED_ERROR, message: "Receipt already request to cancel. "}
var E201112 = Global_error{id: "201112", eType: EXPECTED_ERROR, message: "Receipt has not been requested to be cancel before. "}
var E201113 = Global_error{id: "201113", eType: EXPECTED_ERROR, message: "Receipt header does not exist. "}
var E201114 = Global_error{id: "201114", eType: EXPECTED_ERROR, message: "Receipt Information already exists. "}
var E201115 = Global_error{id: "201115", eType: EXPECTED_ERROR, message: "Receipt Information  does not exist. "}
var E201116 = Global_error{id: "201116", eType: EXPECTED_ERROR, message: "Receipt number already exists. "}
var E201117 = Global_error{id: "201117", eType: EXPECTED_ERROR, message: "Receipt number does not exist. "}
var E201118 = Global_error{id: "201118", eType: EXPECTED_ERROR, message: "Receipt Status should be 'R' or 'C' only. "}
var E201119 = Global_error{id: "201119", eType: EXPECTED_ERROR, message: "Reconnection code for suspension reason does not exist. "}
var E201120 = Global_error{id: "201120", eType: EXPECTED_ERROR, message: "Reference number does not exist. "}
var E201121 = Global_error{id: "201121", eType: EXPECTED_ERROR, message: "Reference number should not be null. "}
var E201122 = Global_error{id: "201122", eType: EXPECTED_ERROR, message: "Reprint commission recoverable by location is complete. "}
var E201123 = Global_error{id: "201123", eType: EXPECTED_ERROR, message: "Reprint Commission Recoverable by location type is complete. "}
var E201124 = Global_error{id: "201124", eType: EXPECTED_ERROR, message: "Reprint Commission Recoverable by TAC is complete. "}
var E201125 = Global_error{id: "201125", eType: EXPECTED_ERROR, message: "Sale Ledger Header already exists. "}
var E201126 = Global_error{id: "201126", eType: EXPECTED_ERROR, message: "Subscriber number should not be null. "}
var E201127 = Global_error{id: "201127", eType: EXPECTED_ERROR, message: "Subscriber suspension code does not exist. "}
var E201128 = Global_error{id: "201128", eType: EXPECTED_ERROR, message: "Support branch code does not exist in TAC Branch. "}
var E201129 = Global_error{id: "201129", eType: EXPECTED_ERROR, message: "Support location type code does not exist in location type. "}
var E201130 = Global_error{id: "201130", eType: EXPECTED_ERROR, message: "Suspend Switch Off Interface already exists. "}
var E201131 = Global_error{id: "201131", eType: EXPECTED_ERROR, message: "Tax rate code does not exist. "}
var E201132 = Global_error{id: "201132", eType: EXPECTED_ERROR, message: "Transaction group code already exists and is currently effective. "}
var E201133 = Global_error{id: "201133", eType: EXPECTED_ERROR, message: "Transaction group code already exists but is not currently effective. "}
var E201134 = Global_error{id: "201134", eType: EXPECTED_ERROR, message: "Transaction group code already exists. "}
var E201135 = Global_error{id: "201135", eType: EXPECTED_ERROR, message: "Transaction group code does not exist. "}
var E201136 = Global_error{id: "201136", eType: EXPECTED_ERROR, message: "Transaction type code already exists and is currently effective. "}
var E201137 = Global_error{id: "201137", eType: EXPECTED_ERROR, message: "Transaction type code already exists but is not currently effective. "}
var E201138 = Global_error{id: "201138", eType: EXPECTED_ERROR, message: "Transaction type code already exists in account transaction. "}
var E201139 = Global_error{id: "201139", eType: EXPECTED_ERROR, message: "Transaction type code already exists in Charge. "}
var E201140 = Global_error{id: "201140", eType: EXPECTED_ERROR, message: "Transaction type code already exists in transaction group. "}
var E201141 = Global_error{id: "201141", eType: EXPECTED_ERROR, message: "Transaction type code already exists. "}
var E201142 = Global_error{id: "201142", eType: EXPECTED_ERROR, message: "Transaction type code does not exist. "}
var E201143 = Global_error{id: "201143", eType: EXPECTED_ERROR, message: "Transaction type code should not be null. "}
var E201144 = Global_error{id: "201144", eType: EXPECTED_ERROR, message: "Value of the month field should start from 1 to 12. "}
var E201145 = Global_error{id: "201145", eType: EXPECTED_ERROR, message: "Value of the year field must be more than zero. "}
var E201146 = Global_error{id: "201146", eType: EXPECTED_ERROR, message: "Withholding tax amount should not less than paid amount. "}
var E201147 = Global_error{id: "201147", eType: EXPECTED_ERROR, message: "Total serials in GRN serial are not equal to quantity in the GRN warehouse "}
var E201148 = Global_error{id: "201148", eType: EXPECTED_ERROR, message: "Sum of quantity in all warehouse is not equal to received quantity in GRN line "}
var E201149 = Global_error{id: "201149", eType: EXPECTED_ERROR, message: "Journal already exists. "}
var E201150 = Global_error{id: "201150", eType: EXPECTED_ERROR, message: "Serial indicator and serial in occurrence does not match "}
var E201151 = Global_error{id: "201151", eType: EXPECTED_ERROR, message: "Would you like to run process (Y/N) ? "}
var E201152 = Global_error{id: "201152", eType: EXPECTED_ERROR, message: "Processing, please wait... "}
var E201153 = Global_error{id: "201153", eType: EXPECTED_ERROR, message: "Error opening file. "}
var E201154 = Global_error{id: "201154", eType: EXPECTED_ERROR, message: "Error creating file. "}
var E201155 = Global_error{id: "201155", eType: EXPECTED_ERROR, message: "Error writing into text file. "}
var E201156 = Global_error{id: "201156", eType: EXPECTED_ERROR, message: "Request/Return status does not match for given criteria. "}
var E201157 = Global_error{id: "201157", eType: EXPECTED_ERROR, message: "Account number does not exist. "}
var E201158 = Global_error{id: "201158", eType: EXPECTED_ERROR, message: "GL account is not balance. "}
var E201159 = Global_error{id: "201159", eType: EXPECTED_ERROR, message: "GRN quantity is more than PO line quantity. "}
var E201160 = Global_error{id: "201160", eType: EXPECTED_ERROR, message: "Group and user code must not have a value at the same time. "}
var E201161 = Global_error{id: "201161", eType: EXPECTED_ERROR, message: "Package and Dealer already exist. "}
var E201162 = Global_error{id: "201162", eType: EXPECTED_ERROR, message: "TAPIN MTC Handling Indicator should be none, percent or value. "}
var E201163 = Global_error{id: "201163", eType: EXPECTED_ERROR, message: "TAPIN Tax Indicator should be 'Y', 'N' only. "}
var E201164 = Global_error{id: "201164", eType: EXPECTED_ERROR, message: "TAPOUT MTC Handling Indicator should be none, percent or value. "}
var E201165 = Global_error{id: "201165", eType: EXPECTED_ERROR, message: "Discount Plan exists and is currently active "}
var E201166 = Global_error{id: "201166", eType: EXPECTED_ERROR, message: "Discount Plan exists but is not currently active. "}
var E201168 = Global_error{id: "201168", eType: EXPECTED_ERROR, message: "Telephone number has to be numeric. "}
var E201169 = Global_error{id: "201169", eType: EXPECTED_ERROR, message: "User does not have privilege to allocate telephone/card. "}
var E201170 = Global_error{id: "201170", eType: EXPECTED_ERROR, message: "No Dealer for user to allocate telephone. "}
var E201171 = Global_error{id: "201171", eType: EXPECTED_ERROR, message: "No Dealer number in dealer list. "}
var E201172 = Global_error{id: "201172", eType: EXPECTED_ERROR, message: "Telephone number is not belong to child dealer. "}
var E201173 = Global_error{id: "201173", eType: EXPECTED_ERROR, message: "Telephone number is not belong to user's dealer. "}
var E201177 = Global_error{id: "201177", eType: EXPECTED_ERROR, message: "Telephone number already exists in allocation list. "}
var E201178 = Global_error{id: "201178", eType: EXPECTED_ERROR, message: "Data group already exists. "}
var E201179 = Global_error{id: "201179", eType: EXPECTED_ERROR, message: "Data group does not exist. "}
var E201180 = Global_error{id: "201180", eType: EXPECTED_ERROR, message: "Data group has associate with user, cannot delete. "}
var E201181 = Global_error{id: "201181", eType: EXPECTED_ERROR, message: "Extract detail already exists. "}
var E201182 = Global_error{id: "201182", eType: EXPECTED_ERROR, message: "Divert code already exists but is not currently active. "}
var E201183 = Global_error{id: "201183", eType: EXPECTED_ERROR, message: "Divert code already exists and is currently active. "}
var E201184 = Global_error{id: "201184", eType: EXPECTED_ERROR, message: "Invalid severity level. "}
var E201185 = Global_error{id: "201185", eType: EXPECTED_ERROR, message: "Priority level already exists. "}
var E201186 = Global_error{id: "201186", eType: EXPECTED_ERROR, message: "Suspension reason code already exists and is currently active. "}
var E201187 = Global_error{id: "201187", eType: EXPECTED_ERROR, message: "Suspension reason code already exists but is not currently active. "}
var E201188 = Global_error{id: "201188", eType: EXPECTED_ERROR, message: "Invalid customer status. "}
var E201189 = Global_error{id: "201189", eType: EXPECTED_ERROR, message: "Nationality code does not exist. "}
var E201190 = Global_error{id: "201190", eType: EXPECTED_ERROR, message: "Bill Day does not exist. "}
var E201191 = Global_error{id: "201191", eType: EXPECTED_ERROR, message: "Invalid gender for juristic person. "}
var E201192 = Global_error{id: "201192", eType: EXPECTED_ERROR, message: "Date of birth cannot be null for Male/Female. "}
var E201193 = Global_error{id: "201193", eType: EXPECTED_ERROR, message: "Invalid language. "}
var E201194 = Global_error{id: "201194", eType: EXPECTED_ERROR, message: "Present status of subscriber is not applicable, No data found for the given condition. "}
var E201195 = Global_error{id: "201195", eType: EXPECTED_ERROR, message: "Hardware status does not found in Parameter Table. "}
var E201196 = Global_error{id: "201196", eType: EXPECTED_ERROR, message: "Hardware is in used or hardware status is not as same as in Parameter Table. "}
var E201197 = Global_error{id: "201197", eType: EXPECTED_ERROR, message: "Reason code for the specified type does not exist. "}
var E201198 = Global_error{id: "201198", eType: EXPECTED_ERROR, message: "No authorized switch off reason code exists. "}
var E201199 = Global_error{id: "201199", eType: EXPECTED_ERROR, message: "Change to this source of sales period is not available in parameter table. "}
var E201200 = Global_error{id: "201200", eType: EXPECTED_ERROR, message: "Change Source Of Sales is not applicable as it exceeds the allowed period "}
var E201201 = Global_error{id: "201201", eType: EXPECTED_ERROR, message: "Normal Switch On Reason Type is not available in the parameter table. "}
var E201202 = Global_error{id: "201202", eType: EXPECTED_ERROR, message: "Switch On Reason Type of the subscriber is not applicable for the changing of Source Of Sale. "}
var E201203 = Global_error{id: "201203", eType: EXPECTED_ERROR, message: "Package(s) under the current Source of Sales of the subscriber has been expired. "}
var E201204 = Global_error{id: "201204", eType: EXPECTED_ERROR, message: "Change Reason Type for Change IMEI function is not found in Parameter Table. "}
var E201205 = Global_error{id: "201205", eType: EXPECTED_ERROR, message: "Change Reason Type for Change Serial function is not found in parameter table. "}
var E201206 = Global_error{id: "201206", eType: EXPECTED_ERROR, message: "Card status is not found in Parameter Table. "}
var E201207 = Global_error{id: "201207", eType: EXPECTED_ERROR, message: "Card number is in use. "}
var E201208 = Global_error{id: "201208", eType: EXPECTED_ERROR, message: "Card status is not as same as the one in Parameter Table. "}
var E201209 = Global_error{id: "201209", eType: EXPECTED_ERROR, message: "Change Reason Type for Change SIM Card function is not found in  the Parameter Table. "}
var E201210 = Global_error{id: "201210", eType: EXPECTED_ERROR, message: "Subscriber is not applicable regarding any change in deposit relation. "}
var E201211 = Global_error{id: "201211", eType: EXPECTED_ERROR, message: "Subscriber is not valid. "}
var E201212 = Global_error{id: "201212", eType: EXPECTED_ERROR, message: "Transition period between switch off and reconnection is not available in the Parameter Table. "}
var E201213 = Global_error{id: "201213", eType: EXPECTED_ERROR, message: "Reconnection is not allowed as the period exceeds the reconnection period. "}
var E201214 = Global_error{id: "201214", eType: EXPECTED_ERROR, message: "Current Source Of Sales of the subscriber does not exist in Source Of Sales master table. "}
var E201215 = Global_error{id: "201215", eType: EXPECTED_ERROR, message: "Hardware status does not exist in Parameter Table. "}
var E201216 = Global_error{id: "201216", eType: EXPECTED_ERROR, message: "Old card number is the same as the new card number. "}
var E201217 = Global_error{id: "201217", eType: EXPECTED_ERROR, message: "Subscriber does not exist or subscriber status is not applicable. "}
var E201218 = Global_error{id: "201218", eType: EXPECTED_ERROR, message: "Subscriber number does not exist in Deposit Relation History. "}
var E201219 = Global_error{id: "201219", eType: EXPECTED_ERROR, message: "Subscriber debt control information is not available for Credit Limit. "}
var E201220 = Global_error{id: "201220", eType: EXPECTED_ERROR, message: "Billing product record does not exist. "}
var E201221 = Global_error{id: "201221", eType: EXPECTED_ERROR, message: "Offset Period must greater than zero. "}
var E201222 = Global_error{id: "201222", eType: EXPECTED_ERROR, message: "Package Plan authorization is granted to all/this user. "}
var E201223 = Global_error{id: "201223", eType: EXPECTED_ERROR, message: "Package Plan authorization is granted to all/this dealer. "}
var E201224 = Global_error{id: "201224", eType: EXPECTED_ERROR, message: "Package Plan authorization is granted to all/this hardware. "}
var E201225 = Global_error{id: "201225", eType: EXPECTED_ERROR, message: "Dealer does not belong to Product. "}
var E201226 = Global_error{id: "201226", eType: EXPECTED_ERROR, message: "Package Plan authorization is not granted to user. "}
var E201227 = Global_error{id: "201227", eType: EXPECTED_ERROR, message: "Package Plan authorization is not granted to hardware. "}
var E201228 = Global_error{id: "201228", eType: EXPECTED_ERROR, message: "Package Plan authorization is not granted to dealer. "}
var E201229 = Global_error{id: "201229", eType: EXPECTED_ERROR, message: "Suspend / Unsuspend / Switch Off authorization is granted to this user. "}
var E201230 = Global_error{id: "201230", eType: EXPECTED_ERROR, message: "Next Arrears Date must be less than or equal to Next Arrears Date Boundary. "}
var E201231 = Global_error{id: "201231", eType: EXPECTED_ERROR, message: "One/More Package Plan code is expired. "}
var E201232 = Global_error{id: "201232", eType: EXPECTED_ERROR, message: "Rate flag should be percentage or value. "}
var E201233 = Global_error{id: "201233", eType: EXPECTED_ERROR, message: "Invalid Allocate-Deallocate flag. "}
var E201235 = Global_error{id: "201235", eType: EXPECTED_ERROR, message: "Invalid debt status. "}
var E201236 = Global_error{id: "201236", eType: EXPECTED_ERROR, message: "Routine type must be 'CHRG' , 'XTRC' or 'LETR'. "}
var E201237 = Global_error{id: "201237", eType: EXPECTED_ERROR, message: "This record is active, cannot delete. "}
var E201238 = Global_error{id: "201238", eType: EXPECTED_ERROR, message: "Routine code is refered from Charge Master table, cannot deleted. "}
var E201239 = Global_error{id: "201239", eType: EXPECTED_ERROR, message: "Routine Code is refered from Extract Master table, cannot delete. "}
var E201240 = Global_error{id: "201240", eType: EXPECTED_ERROR, message: "Routine code is refered from Letter Master table, cannot delete. "}
var E201241 = Global_error{id: "201241", eType: EXPECTED_ERROR, message: "Invalid Include detail flag. "}
var E201242 = Global_error{id: "201242", eType: EXPECTED_ERROR, message: "Cannot expire package as expiry date of one/more parents is null. "}
var E201243 = Global_error{id: "201243", eType: EXPECTED_ERROR, message: "Active customer does not exist. "}
var E201244 = Global_error{id: "201244", eType: EXPECTED_ERROR, message: "Active Divert Code does not exist. "}
var E201245 = Global_error{id: "201245", eType: EXPECTED_ERROR, message: "Amphur description cannot be null. "}
var E201246 = Global_error{id: "201246", eType: EXPECTED_ERROR, message: "Province code cannot be null. "}
var E201247 = Global_error{id: "201247", eType: EXPECTED_ERROR, message: "Start value cannot be greater than sequence running number. "}
var E201248 = Global_error{id: "201248", eType: EXPECTED_ERROR, message: "Cannot find register information. "}
var E201249 = Global_error{id: "201249", eType: EXPECTED_ERROR, message: "Default country code does not exist. "}
var E201250 = Global_error{id: "201250", eType: EXPECTED_ERROR, message: "Error writing to file. "}
var E201251 = Global_error{id: "201251", eType: EXPECTED_ERROR, message: "Cannot delete effective package plan code. "}
var E201252 = Global_error{id: "201252", eType: EXPECTED_ERROR, message: "Package Plan Code and all its dependent must not be the same. "}
var E201253 = Global_error{id: "201253", eType: EXPECTED_ERROR, message: "Package plane code under soure of sales does not exist. "}
var E201254 = Global_error{id: "201254", eType: EXPECTED_ERROR, message: "Address type already exists but is not currently active. "}
var E201255 = Global_error{id: "201255", eType: EXPECTED_ERROR, message: "Address type already exists and is currently active. "}
var E201256 = Global_error{id: "201256", eType: EXPECTED_ERROR, message: "Black list reason already exists but is not currently active. "}
var E201257 = Global_error{id: "201257", eType: EXPECTED_ERROR, message: "Black list reason already exists and is currently active. "}
var E201258 = Global_error{id: "201258", eType: EXPECTED_ERROR, message: "Incorrect value of INCL_ARTM_DETL. "}
var E201259 = Global_error{id: "201259", eType: EXPECTED_ERROR, message: "Incorrect value of INCL_BILL_DETL. "}
var E201260 = Global_error{id: "201260", eType: EXPECTED_ERROR, message: "Incorrect value of INCL_SRVC_DETL. "}
var E201261 = Global_error{id: "201261", eType: EXPECTED_ERROR, message: "More than one record exists for the master, cannot do futher processing. "}
var E201262 = Global_error{id: "201262", eType: EXPECTED_ERROR, message: "Package plan code already exists but is not currently effective. "}
var E201263 = Global_error{id: "201263", eType: EXPECTED_ERROR, message: "Package plan code already exists and is currently effective. "}
var E201264 = Global_error{id: "201264", eType: EXPECTED_ERROR, message: "Occupation type already exists with the expired tax code. "}
var E201265 = Global_error{id: "201265", eType: EXPECTED_ERROR, message: "Invalid status. "}
var E201266 = Global_error{id: "201266", eType: EXPECTED_ERROR, message: "Extract details cannot be retrieved. "}
var E201267 = Global_error{id: "201267", eType: EXPECTED_ERROR, message: "Present status of the subscriber is not applicable. No data found for the given condition. "}
var E201268 = Global_error{id: "201268", eType: EXPECTED_ERROR, message: "Screen-Operation combination has been associated with group, cannot delete. "}
var E201269 = Global_error{id: "201269", eType: EXPECTED_ERROR, message: "Billing product code for the subscriber is not found. "}
var E201270 = Global_error{id: "201270", eType: EXPECTED_ERROR, message: "Credit limit amount for the subscriber not found. "}
var E201271 = Global_error{id: "201271", eType: EXPECTED_ERROR, message: "Default prameter code already exists. "}
var E201272 = Global_error{id: "201272", eType: EXPECTED_ERROR, message: "Default parameter code does not exist. "}
var E201273 = Global_error{id: "201273", eType: EXPECTED_ERROR, message: "Error in extracting lease period and offset unit from lease table. "}
var E201274 = Global_error{id: "201274", eType: EXPECTED_ERROR, message: "Hardware number does not exist in bad IMEI table. "}
var E201275 = Global_error{id: "201275", eType: EXPECTED_ERROR, message: "Leasing code already exists but is not currently active. "}
var E201276 = Global_error{id: "201276", eType: EXPECTED_ERROR, message: "No other active suspension reason code exists. "}
var E201277 = Global_error{id: "201277", eType: EXPECTED_ERROR, message: "No other authorized suspension reason code exists. "}
var E201278 = Global_error{id: "201278", eType: EXPECTED_ERROR, message: "Salesman already exists but is not currently active. "}
var E201279 = Global_error{id: "201279", eType: EXPECTED_ERROR, message: "Source of sales code for this subscriber does not exist. "}
var E201280 = Global_error{id: "201280", eType: EXPECTED_ERROR, message: "Status of the Subscriber is not Switch Off, the subscriber cannot be reconnected. "}
var E201281 = Global_error{id: "201281", eType: EXPECTED_ERROR, message: "Subscriber billing information does not exist. "}
var E201282 = Global_error{id: "201282", eType: EXPECTED_ERROR, message: "Subscriber can not be reconnected because the transition time exceeds the defined time. "}
var E201283 = Global_error{id: "201283", eType: EXPECTED_ERROR, message: "Suspension eason Code applicable to the Subscriber does not exist in Suspension Reason Master. "}
var E201284 = Global_error{id: "201284", eType: EXPECTED_ERROR, message: "Switch on reason type of the subscriber is not applicable for the changing of Source of Sales. "}
var E201285 = Global_error{id: "201285", eType: EXPECTED_ERROR, message: "Service code already exists but is not currently active. "}
var E201286 = Global_error{id: "201286", eType: EXPECTED_ERROR, message: "Service code already exists and is currently active. "}
var E201287 = Global_error{id: "201287", eType: EXPECTED_ERROR, message: "Post code already exists but is not currently active. "}
var E201288 = Global_error{id: "201288", eType: EXPECTED_ERROR, message: "Post code already exists and is currently active. "}
var E201289 = Global_error{id: "201289", eType: EXPECTED_ERROR, message: "No other authorized for suspension reason code exists. "}
var E201290 = Global_error{id: "201290", eType: EXPECTED_ERROR, message: "No other active suspension reason code exists. "}
var E201291 = Global_error{id: "201291", eType: EXPECTED_ERROR, message: "Last arrears stage cannot be zero. "}
var E201292 = Global_error{id: "201292", eType: EXPECTED_ERROR, message: "Calendar date and bill day cannot be NULL. "}
var E201293 = Global_error{id: "201293", eType: EXPECTED_ERROR, message: "Invalid Service Value Require. "}
var E201294 = Global_error{id: "201294", eType: EXPECTED_ERROR, message: "Error in reading parameter table. "}
var E201295 = Global_error{id: "201295", eType: EXPECTED_ERROR, message: "Leasing code exists and is currently active. "}
var E201296 = Global_error{id: "201296", eType: EXPECTED_ERROR, message: "Package plan code is expired. "}
var E201297 = Global_error{id: "201297", eType: EXPECTED_ERROR, message: "Error in fetching ESN number. "}
var E201298 = Global_error{id: "201298", eType: EXPECTED_ERROR, message: "Format type exists. "}
var E201299 = Global_error{id: "201299", eType: EXPECTED_ERROR, message: "Format type does not exist. "}
var E201300 = Global_error{id: "201300", eType: EXPECTED_ERROR, message: "Invalid auto generate flag. "}
var E201301 = Global_error{id: "201301", eType: EXPECTED_ERROR, message: "Invalid witholding tax flag. "}
var E201302 = Global_error{id: "201302", eType: EXPECTED_ERROR, message: "Invalid juristic person flag. "}
var E201303 = Global_error{id: "201303", eType: EXPECTED_ERROR, message: "Invalid gender. "}
var E201304 = Global_error{id: "201304", eType: EXPECTED_ERROR, message: "Invalid Maximum XTNT. "}
var E201305 = Global_error{id: "201305", eType: EXPECTED_ERROR, message: "Start value cannot be less than or equal to zero. "}
var E201306 = Global_error{id: "201306", eType: EXPECTED_ERROR, message: "Invalid function ID. "}
var E201307 = Global_error{id: "201307", eType: EXPECTED_ERROR, message: "Arrears letter exists for this letter, cannot delete. "}
var E201308 = Global_error{id: "201308", eType: EXPECTED_ERROR, message: "Credit Limit Letter exist for this letter, cannot delete. "}
var E201309 = Global_error{id: "201309", eType: EXPECTED_ERROR, message: "Arrears action letter exists for this letter, cannot delete. "}
var E201310 = Global_error{id: "201310", eType: EXPECTED_ERROR, message: "Create limit action letter exists for this letter, cannot delete. "}
var E201311 = Global_error{id: "201311", eType: EXPECTED_ERROR, message: "Arrears extract exists for this letter, cannot delete. "}
var E201312 = Global_error{id: "201312", eType: EXPECTED_ERROR, message: "Credit Limit Extract exists for this letter, cannot delete. "}
var E201313 = Global_error{id: "201313", eType: EXPECTED_ERROR, message: "Arrears action extract exists for this letter, cannot delete. "}
var E201314 = Global_error{id: "201314", eType: EXPECTED_ERROR, message: "Create Limit Action Extract exists for this letter, cannot delete. "}
var E201315 = Global_error{id: "201315", eType: EXPECTED_ERROR, message: "Invalid switch off method. "}
var E201316 = Global_error{id: "201316", eType: EXPECTED_ERROR, message: "Invalid Churn flag. "}
var E201317 = Global_error{id: "201317", eType: EXPECTED_ERROR, message: "Payment transaction type code does not exist. "}
var E201318 = Global_error{id: "201318", eType: EXPECTED_ERROR, message: "Billing and product code does not exist. "}
var E201319 = Global_error{id: "201319", eType: EXPECTED_ERROR, message: "Charged by must be 'CUST', 'SUBR' or 'INVC' only. "}
var E201320 = Global_error{id: "201320", eType: EXPECTED_ERROR, message: "When to generate must be 'AUTO', 'PAID' or 'MONTH'. "}
var E201321 = Global_error{id: "201321", eType: EXPECTED_ERROR, message: "Actual expiry date is less than start date. "}
var E201322 = Global_error{id: "201322", eType: EXPECTED_ERROR, message: "Suspend / Unsuspend / Switch Off authorization have not granted to this user. "}
var E201325 = Global_error{id: "201325", eType: EXPECTED_ERROR, message: "Invalid deposit transfer flag. "}
var E201326 = Global_error{id: "201326", eType: EXPECTED_ERROR, message: "Invalid connection fee transfer flag. "}
var E201327 = Global_error{id: "201327", eType: EXPECTED_ERROR, message: "Bank holiday does not exist. "}
var E201328 = Global_error{id: "201328", eType: EXPECTED_ERROR, message: "Sale Ledger number exists. "}
var E201329 = Global_error{id: "201329", eType: EXPECTED_ERROR, message: "Sale Ledger number does not exist. "}
var E201330 = Global_error{id: "201330", eType: EXPECTED_ERROR, message: "Bank code already exists. "}
var E201331 = Global_error{id: "201331", eType: EXPECTED_ERROR, message: "Id type already exists but is not currently active. "}
var E201332 = Global_error{id: "201332", eType: EXPECTED_ERROR, message: "Id type already exists and is currently active. "}
var E201333 = Global_error{id: "201333", eType: EXPECTED_ERROR, message: "Stop bill flag can be 'Y' or 'N' only. "}
var E201334 = Global_error{id: "201334", eType: EXPECTED_ERROR, message: "Update EIR flag can be 'Y' or 'N' only. "}
var E201335 = Global_error{id: "201335", eType: EXPECTED_ERROR, message: "Stop airtime flag can be 'Y' or 'N' only. "}
var E201336 = Global_error{id: "201336", eType: EXPECTED_ERROR, message: "Bill product indicator does not exist. "}
var E201337 = Global_error{id: "201337", eType: EXPECTED_ERROR, message: "Cancel reciept reason code already exists. "}
var E201338 = Global_error{id: "201338", eType: EXPECTED_ERROR, message: "Cancel recipt reason does not exist. "}
var E201339 = Global_error{id: "201339", eType: EXPECTED_ERROR, message: "Query reason code does not exist. "}
var E201340 = Global_error{id: "201340", eType: EXPECTED_ERROR, message: "Query Reason code already exists. "}
var E201341 = Global_error{id: "201341", eType: EXPECTED_ERROR, message: "Payment cycle exists in PY_CSBK_TRNF table. "}
var E201342 = Global_error{id: "201342", eType: EXPECTED_ERROR, message: "Bank holiday already exists. "}
var E201343 = Global_error{id: "201343", eType: EXPECTED_ERROR, message: "Transaction group code exists in PY_TRNS_TYPE. "}
var E201344 = Global_error{id: "201344", eType: EXPECTED_ERROR, message: "Location code is not effective or does not exist. "}
var E201345 = Global_error{id: "201345", eType: EXPECTED_ERROR, message: "Location code is effective or does not exist. "}
var E201349 = Global_error{id: "201349", eType: EXPECTED_ERROR, message: "Sale Ledger number must be greater than zero. "}
var E201350 = Global_error{id: "201350", eType: EXPECTED_ERROR, message: "Sequence year must be in range '0' to '9'. "}
var E201351 = Global_error{id: "201351", eType: EXPECTED_ERROR, message: "Document type is not active or does not exist. "}
var E201352 = Global_error{id: "201352", eType: EXPECTED_ERROR, message: "Tax code is not effective or does not exist. "}
var E201353 = Global_error{id: "201353", eType: EXPECTED_ERROR, message: "Tax code is effective or does not exist. "}
var E201354 = Global_error{id: "201354", eType: EXPECTED_ERROR, message: "Transaction type authorization already exists. "}
var E201355 = Global_error{id: "201355", eType: EXPECTED_ERROR, message: "Transaction Type Authorization does not exist. "}
var E201356 = Global_error{id: "201356", eType: EXPECTED_ERROR, message: "Invalid flag. "}
var E201357 = Global_error{id: "201357", eType: EXPECTED_ERROR, message: "Format type is not active or does not exist. "}
var E201358 = Global_error{id: "201358", eType: EXPECTED_ERROR, message: "Batch Running number does not exist. "}
var E201359 = Global_error{id: "201359", eType: EXPECTED_ERROR, message: "Batch running number already exists. "}
var E201360 = Global_error{id: "201360", eType: EXPECTED_ERROR, message: "Document running number does not exist. "}
var E201361 = Global_error{id: "201361", eType: EXPECTED_ERROR, message: "Document running number already exists. "}
var E201362 = Global_error{id: "201362", eType: EXPECTED_ERROR, message: "Charge code is referred from Credit Limit Charge table, cannot delete. "}
var E201363 = Global_error{id: "201363", eType: EXPECTED_ERROR, message: "Charge code is referred from Credit Limit Action Charge table, cannot delete. "}
var E201364 = Global_error{id: "201364", eType: EXPECTED_ERROR, message: "Charge code is referred from Arrears Charge table, cannot delete. "}
var E201365 = Global_error{id: "201365", eType: EXPECTED_ERROR, message: "Charge code is referred from Arrears Action Charge table, cannot delete. "}
var E201366 = Global_error{id: "201366", eType: EXPECTED_ERROR, message: "Charge code is referred from Arrears Detail Charge table, cannot delete. "}
var E201367 = Global_error{id: "201367", eType: EXPECTED_ERROR, message: "Discount plan code with Allow Bill Flag does not exist. "}
var E201368 = Global_error{id: "201368", eType: EXPECTED_ERROR, message: "Discount plan code with Allow Package Flag does not exist. "}
var E201369 = Global_error{id: "201369", eType: EXPECTED_ERROR, message: "Dependent Package code is expired. "}
var E201370 = Global_error{id: "201370", eType: EXPECTED_ERROR, message: "Credit Limit Amount must be greater than or equal to zero. "}
var E201371 = Global_error{id: "201371", eType: EXPECTED_ERROR, message: "Total homezone applicable must be greater than or equal to zero. "}
var E201372 = Global_error{id: "201372", eType: EXPECTED_ERROR, message: "Invalid value entered for Start Offset Unit. "}
var E201373 = Global_error{id: "201373", eType: EXPECTED_ERROR, message: "Invalid value entered for End Offset Unit. "}
var E201374 = Global_error{id: "201374", eType: EXPECTED_ERROR, message: "Start Offset Period must be greater than zero. "}
var E201375 = Global_error{id: "201375", eType: EXPECTED_ERROR, message: "End Offset Period must be greater than zero. "}
var E201376 = Global_error{id: "201376", eType: EXPECTED_ERROR, message: "Start date must be greater than or equal to today's date. "}
var E201377 = Global_error{id: "201377", eType: EXPECTED_ERROR, message: "End date cannot be less than Start date "}
var E201378 = Global_error{id: "201378", eType: EXPECTED_ERROR, message: "Bill code is not currently active. "}
var E201379 = Global_error{id: "201379", eType: EXPECTED_ERROR, message: "Discount plan code is not currently active. "}
var E201380 = Global_error{id: "201380", eType: EXPECTED_ERROR, message: "Two or more Bill codes cannot  have same Bill type when duplicate flag of bill type is zero. "}
var E201381 = Global_error{id: "201381", eType: EXPECTED_ERROR, message: "Service code is not currently active "}
var E201382 = Global_error{id: "201382", eType: EXPECTED_ERROR, message: "Bill code already exists in Package Billing Detail. "}
var E201383 = Global_error{id: "201383", eType: EXPECTED_ERROR, message: "Cannot delete Effective Package Plan Code. "}
var E201384 = Global_error{id: "201384", eType: EXPECTED_ERROR, message: "Cannot delete detail record "}
var E201385 = Global_error{id: "201385", eType: EXPECTED_ERROR, message: "Airtime code already exists in Package Airtime detail. "}
var E201386 = Global_error{id: "201386", eType: EXPECTED_ERROR, message: "Service code already exists in Package Service detail. "}
var E201387 = Global_error{id: "201387", eType: EXPECTED_ERROR, message: "Multiple Parameter value. "}
var E201388 = Global_error{id: "201388", eType: EXPECTED_ERROR, message: "No model code. "}
var E201389 = Global_error{id: "201389", eType: EXPECTED_ERROR, message: "No switch off reason code. "}
var E201390 = Global_error{id: "201390", eType: EXPECTED_ERROR, message: "No suspension reason code. "}
var E201391 = Global_error{id: "201391", eType: EXPECTED_ERROR, message: "Maximum Extent must be greater than Start Value + Increment Value. "}
var E201392 = Global_error{id: "201392", eType: EXPECTED_ERROR, message: "Maximum Extent must be greater than Next Running Number. "}
var E201393 = Global_error{id: "201393", eType: EXPECTED_ERROR, message: "Maximum Extent must not greater than Interger Value - Increment Value. "}
var E201394 = Global_error{id: "201394", eType: EXPECTED_ERROR, message: "Lease Period must be greater than or equal Payment Frequency. "}
var E201395 = Global_error{id: "201395", eType: EXPECTED_ERROR, message: "Payment Frequency must be greater than zero. "}
var E201396 = Global_error{id: "201396", eType: EXPECTED_ERROR, message: "Next Arrear Date must be less than or equal Next Arrear Date boundary and must be greater than Previous Value. "}
var E201397 = Global_error{id: "201397", eType: EXPECTED_ERROR, message: "Invalid Header / Detail / Trail. "}
var E201398 = Global_error{id: "201398", eType: EXPECTED_ERROR, message: "Invalid Text Alignment. "}
var E201399 = Global_error{id: "201399", eType: EXPECTED_ERROR, message: "Tax code already exists. "}
var E201400 = Global_error{id: "201400", eType: EXPECTED_ERROR, message: "Transaction type is not active or does not exist. "}
var E201401 = Global_error{id: "201401", eType: EXPECTED_ERROR, message: "Location type code exists in PY_LOCN table. "}
var E201402 = Global_error{id: "201402", eType: EXPECTED_ERROR, message: "Bank Branch does not exist. "}
var E201403 = Global_error{id: "201403", eType: EXPECTED_ERROR, message: "Bank branch code exists. "}
var E201404 = Global_error{id: "201404", eType: EXPECTED_ERROR, message: "Location code is not effective or does not exist. "}
var E201405 = Global_error{id: "201405", eType: EXPECTED_ERROR, message: "Location code is effective or does not exist. "}
var E201406 = Global_error{id: "201406", eType: EXPECTED_ERROR, message: "Invalid field code. "}
var E201407 = Global_error{id: "201407", eType: EXPECTED_ERROR, message: "Format code is not effective or does not exist. "}
var E201408 = Global_error{id: "201408", eType: EXPECTED_ERROR, message: "Format code is effective or does not exist. "}
var E201409 = Global_error{id: "201409", eType: EXPECTED_ERROR, message: "Invalid print document flag. "}
var E201410 = Global_error{id: "201410", eType: EXPECTED_ERROR, message: "Invalid Generate document number flag. "}
var E201411 = Global_error{id: "201411", eType: EXPECTED_ERROR, message: "Receipt cancel reason does not exist. "}
var E201412 = Global_error{id: "201412", eType: EXPECTED_ERROR, message: "Receipt cancel reason already exists . "}
var E201413 = Global_error{id: "201413", eType: EXPECTED_ERROR, message: "Invalid package code. "}
var E201414 = Global_error{id: "201414", eType: EXPECTED_ERROR, message: "All Home Zone have been granted, cannot insert new Home Zone. "}
var E201415 = Global_error{id: "201415", eType: EXPECTED_ERROR, message: "Home Zone is not applicable to the subscriber. "}
var E201416 = Global_error{id: "201416", eType: EXPECTED_ERROR, message: "Invalid reject type. "}
var E201417 = Global_error{id: "201417", eType: EXPECTED_ERROR, message: "Bank reject reason does not exist. "}
var E201418 = Global_error{id: "201418", eType: EXPECTED_ERROR, message: "Bank reject reason code already exists. "}
var E201419 = Global_error{id: "201419", eType: EXPECTED_ERROR, message: "Invalid Bangkok flag. "}
var E201420 = Global_error{id: "201420", eType: EXPECTED_ERROR, message: "Bank code is not active or does not exist in PY_BANK table. "}
var E201421 = Global_error{id: "201421", eType: EXPECTED_ERROR, message: "Location type already exists in PY_LOCN_TYPE. "}
var E201422 = Global_error{id: "201422", eType: EXPECTED_ERROR, message: "No effective dealer for this user to allocate. "}
var E201423 = Global_error{id: "201423", eType: EXPECTED_ERROR, message: "Service Order interface transaction number already exists. "}
var E201424 = Global_error{id: "201424", eType: EXPECTED_ERROR, message: "Read receipt flag value should be '1' or '2' only. "}
var E201425 = Global_error{id: "201425", eType: EXPECTED_ERROR, message: "Receipt Allocation details does not exist. "}
var E201426 = Global_error{id: "201426", eType: EXPECTED_ERROR, message: "Receipt status should be 'N', 'R', 'C' or 'U' only. "}
var E201427 = Global_error{id: "201427", eType: EXPECTED_ERROR, message: "Cannot update telephone. "}
var E201428 = Global_error{id: "201428", eType: EXPECTED_ERROR, message: "Cancel reason code does not exist. "}
var E201429 = Global_error{id: "201429", eType: EXPECTED_ERROR, message: "Sales Ledger Transaction does not exist. "}
var E201430 = Global_error{id: "201430", eType: EXPECTED_ERROR, message: "Cannot Un-Cancel Receipt which status is normal. "}
var E201431 = Global_error{id: "201431", eType: EXPECTED_ERROR, message: "Payment method is not currently active. "}
var E201432 = Global_error{id: "201432", eType: EXPECTED_ERROR, message: "No dealer exists, cannot insert dealer data without at least one detail. "}
var E201433 = Global_error{id: "201433", eType: EXPECTED_ERROR, message: "Invalid operation status. "}
var E201434 = Global_error{id: "201434", eType: EXPECTED_ERROR, message: "Invalid format structure. "}
var E201435 = Global_error{id: "201435", eType: EXPECTED_ERROR, message: "Invalid media type. "}
var E201436 = Global_error{id: "201436", eType: EXPECTED_ERROR, message: "Default Archive Flag Code does not exist. "}
var E201437 = Global_error{id: "201437", eType: EXPECTED_ERROR, message: "Default Archive Transient Days does not exist. "}
var E201438 = Global_error{id: "201438", eType: EXPECTED_ERROR, message: "Transaction date error. "}
var E201439 = Global_error{id: "201439", eType: EXPECTED_ERROR, message: "Invalid Advance flag. "}
var E201440 = Global_error{id: "201440", eType: EXPECTED_ERROR, message: "Invalid General Ledger flag. "}
var E201441 = Global_error{id: "201441", eType: EXPECTED_ERROR, message: "Subscriber Billing information does not exist. "}
var E201442 = Global_error{id: "201442", eType: EXPECTED_ERROR, message: "Dealer detail already exists. "}
var E201443 = Global_error{id: "201443", eType: EXPECTED_ERROR, message: "Payment method code exists. "}
var E201444 = Global_error{id: "201444", eType: EXPECTED_ERROR, message: "Invalid process flag. "}
var E201445 = Global_error{id: "201445", eType: EXPECTED_ERROR, message: "Invalid process point. "}
var E201446 = Global_error{id: "201446", eType: EXPECTED_ERROR, message: "Tax type must be 'V' or 'W'  only. "}
var E201452 = Global_error{id: "201452", eType: EXPECTED_ERROR, message: "New hardware number is same as existing hardware number. "}
var E201453 = Global_error{id: "201453", eType: EXPECTED_ERROR, message: "Invalid Subscriber. "}
var E201458 = Global_error{id: "201458", eType: EXPECTED_ERROR, message: "Batch number already exists. "}
var E201459 = Global_error{id: "201459", eType: EXPECTED_ERROR, message: "Invoice transaction type does not exist in Parameter table. "}
var E201460 = Global_error{id: "201460", eType: EXPECTED_ERROR, message: "Card number exists and is currently live, cannot load. "}
var E201461 = Global_error{id: "201461", eType: EXPECTED_ERROR, message: "Telephone attached to card is live, cannot unload card. "}
var E201462 = Global_error{id: "201462", eType: EXPECTED_ERROR, message: "Telephone attach to card is Reserved. Cannot Unload Card. "}
var E201463 = Global_error{id: "201463", eType: EXPECTED_ERROR, message: "Telephone has already been used, cannot unload card. "}
var E201464 = Global_error{id: "201464", eType: EXPECTED_ERROR, message: "Dealer exists for telephone, cannot unload card. "}
var E201465 = Global_error{id: "201465", eType: EXPECTED_ERROR, message: "Transaction type code does not active. "}
var E201466 = Global_error{id: "201466", eType: EXPECTED_ERROR, message: "Debit Note/Credit Note transaction already exists. "}
var E201467 = Global_error{id: "201467", eType: EXPECTED_ERROR, message: "Debit Note/Credit Note transaction does not exist. "}
var E201468 = Global_error{id: "201468", eType: EXPECTED_ERROR, message: "Sales Ledger Allocation is already exists. "}
var E201469 = Global_error{id: "201469", eType: EXPECTED_ERROR, message: "Card status has been changed, cannot load. "}
var E201471 = Global_error{id: "201471", eType: EXPECTED_ERROR, message: "Billing Product code does not exist. "}
var E201472 = Global_error{id: "201472", eType: EXPECTED_ERROR, message: "Bank customer account number already exists. "}
var E201473 = Global_error{id: "201473", eType: EXPECTED_ERROR, message: "No child dealer for this user. "}
var E201474 = Global_error{id: "201474", eType: EXPECTED_ERROR, message: "Debit / Credit Indicator must be 'D' or 'C' only. "}
var E201475 = Global_error{id: "201475", eType: EXPECTED_ERROR, message: "Invalid Allocation Method Code. "}
var E201476 = Global_error{id: "201476", eType: EXPECTED_ERROR, message: "Invalid Screen function. "}
var E201477 = Global_error{id: "201477", eType: EXPECTED_ERROR, message: "Invalid Receive Screen Detail. "}
var E201478 = Global_error{id: "201478", eType: EXPECTED_ERROR, message: "Invalid Group Amount flag. "}
var E201479 = Global_error{id: "201479", eType: EXPECTED_ERROR, message: "Invalid Change Amount flag. "}
var E201480 = Global_error{id: "201480", eType: EXPECTED_ERROR, message: "Invalid Transaction Monthly flag. "}
var E201481 = Global_error{id: "201481", eType: EXPECTED_ERROR, message: "Invalid Statement print flag. "}
var E201482 = Global_error{id: "201482", eType: EXPECTED_ERROR, message: "Invalid Arrear flag. "}
var E201483 = Global_error{id: "201483", eType: EXPECTED_ERROR, message: "Invalid Rearrear flag. "}
var E201484 = Global_error{id: "201484", eType: EXPECTED_ERROR, message: "Invalid interface GL flag. "}
var E201485 = Global_error{id: "201485", eType: EXPECTED_ERROR, message: "Invalid Rearrear change flag. "}
var E201486 = Global_error{id: "201486", eType: EXPECTED_ERROR, message: "Created Document Type code is not active. "}
var E201487 = Global_error{id: "201487", eType: EXPECTED_ERROR, message: "Allocated Document Type code is not active. "}
var E201488 = Global_error{id: "201488", eType: EXPECTED_ERROR, message: "Invoice Transaction Type code is not active. "}
var E201489 = Global_error{id: "201489", eType: EXPECTED_ERROR, message: "Invalid Check Flag. "}
var E201490 = Global_error{id: "201490", eType: EXPECTED_ERROR, message: "Invalid Exclude/Include flag. "}
var E201491 = Global_error{id: "201491", eType: EXPECTED_ERROR, message: "Tax Rate Code does not effective. "}
var E201492 = Global_error{id: "201492", eType: EXPECTED_ERROR, message: "Un-Black List Reason Code already exist and is currently not active. "}
var E201493 = Global_error{id: "201493", eType: EXPECTED_ERROR, message: "Un-Black List Reason Code already exist and is currently active. "}
var E201494 = Global_error{id: "201494", eType: EXPECTED_ERROR, message: "Source of sale code and Package plan code already exist. "}
var E201495 = Global_error{id: "201495", eType: EXPECTED_ERROR, message: "Source of sale code and Package plan code does not exist "}
var E201496 = Global_error{id: "201496", eType: EXPECTED_ERROR, message: "Character, Integer and Money field must not be NULL at the same time. "}
var E201497 = Global_error{id: "201497", eType: EXPECTED_ERROR, message: "Character, Integer and Money field must not have a value at the same time. "}
var E201498 = Global_error{id: "201498", eType: EXPECTED_ERROR, message: "Error in getting data. "}
var E201499 = Global_error{id: "201499", eType: EXPECTED_ERROR, message: "Error in inserting rows. "}
var E201500 = Global_error{id: "201500", eType: EXPECTED_ERROR, message: "Error in updating tables. "}
var E201501 = Global_error{id: "201501", eType: EXPECTED_ERROR, message: "Error in deleting tables. "}
var E201502 = Global_error{id: "201502", eType: EXPECTED_ERROR, message: "Error in calling function. "}
var E201503 = Global_error{id: "201503", eType: EXPECTED_ERROR, message: "No Dealer associated to product. "}
var E201504 = Global_error{id: "201504", eType: EXPECTED_ERROR, message: "Insert History failed. "}
var E201505 = Global_error{id: "201505", eType: EXPECTED_ERROR, message: "Black List Source Code already exist and is currently not active. "}
var E201506 = Global_error{id: "201506", eType: EXPECTED_ERROR, message: "Black List Source Code already exist and is currently active. "}
var E201507 = Global_error{id: "201507", eType: EXPECTED_ERROR, message: "Address Type for Mailing is not found in Parameter table. "}
var E201508 = Global_error{id: "201508", eType: EXPECTED_ERROR, message: "Error in  Updating SY_PARM table. "}
var E201509 = Global_error{id: "201509", eType: EXPECTED_ERROR, message: "This Telephone is not mapped with any card. "}
var E201510 = Global_error{id: "201510", eType: EXPECTED_ERROR, message: "Telephone is not yet allocated to a dealer. "}
var E201511 = Global_error{id: "201511", eType: EXPECTED_ERROR, message: "Telephone is currently in switch off state. "}
var E201512 = Global_error{id: "201512", eType: EXPECTED_ERROR, message: "Debt Status must be '0' or '1'. "}
var E201513 = Global_error{id: "201513", eType: EXPECTED_ERROR, message: "Credit Limit Charge already exist. "}
var E201514 = Global_error{id: "201514", eType: EXPECTED_ERROR, message: "Credit Limit Charge does not exist. "}
var E201515 = Global_error{id: "201515", eType: EXPECTED_ERROR, message: "Unauthorized package. "}
var E201516 = Global_error{id: "201516", eType: EXPECTED_ERROR, message: "Hardware unauthorized package. "}
var E201517 = Global_error{id: "201517", eType: EXPECTED_ERROR, message: "Credit Limit Extract already exist. "}
var E201518 = Global_error{id: "201518", eType: EXPECTED_ERROR, message: "Credit Limit Extract does not exist. "}
var E201519 = Global_error{id: "201519", eType: EXPECTED_ERROR, message: "Invalid default parameter value. "}
var E201520 = Global_error{id: "201520", eType: EXPECTED_ERROR, message: "Invalid customer occupation/Id type/Nationality. "}
var E201521 = Global_error{id: "201521", eType: EXPECTED_ERROR, message: "If FROM DATE is not NULL, TO DATE should not be NULL. "}
var E201522 = Global_error{id: "201522", eType: EXPECTED_ERROR, message: "Cheque Return Transaction does not exist. "}
var E201523 = Global_error{id: "201523", eType: EXPECTED_ERROR, message: "Cheque Information does not exist. "}
var E201524 = Global_error{id: "201524", eType: EXPECTED_ERROR, message: "Invalid Sequence name. "}
var E201525 = Global_error{id: "201525", eType: EXPECTED_ERROR, message: "Sequence exhausted. "}
var E201526 = Global_error{id: "201526", eType: EXPECTED_ERROR, message: "Arrears Charge does not exist. "}
var E201527 = Global_error{id: "201527", eType: EXPECTED_ERROR, message: "Arrears Charge already exist. "}
var E201528 = Global_error{id: "201528", eType: EXPECTED_ERROR, message: "Invalid Request Code. "}
var E201529 = Global_error{id: "201529", eType: EXPECTED_ERROR, message: "Convert between datetime and date fail. "}
var E201530 = Global_error{id: "201530", eType: EXPECTED_ERROR, message: "Telephone is not belong to child dealer. "}
var E201531 = Global_error{id: "201531", eType: EXPECTED_ERROR, message: "Customer Number cannot be 0. "}
var E201532 = Global_error{id: "201532", eType: EXPECTED_ERROR, message: "No Stage exist. Cannot insert Credit Limit Plan data without at least one stage. "}
var E201533 = Global_error{id: "201533", eType: EXPECTED_ERROR, message: "Discount Check must be '0' or '1'. "}
var E201534 = Global_error{id: "201534", eType: EXPECTED_ERROR, message: "Advance Flag must be '0' or '1'. "}
var E201535 = Global_error{id: "201535", eType: EXPECTED_ERROR, message: "Arrears Extract already exist. "}
var E201536 = Global_error{id: "201536", eType: EXPECTED_ERROR, message: "Arrears Extract does not exist. "}
var E201537 = Global_error{id: "201537", eType: EXPECTED_ERROR, message: "Arrears Letter already exist. "}
var E201538 = Global_error{id: "201538", eType: EXPECTED_ERROR, message: "Arrears Letter does not exist. "}
var E201539 = Global_error{id: "201539", eType: EXPECTED_ERROR, message: "Parameter Code already exist. "}
var E201540 = Global_error{id: "201540", eType: EXPECTED_ERROR, message: "Parameter Code does not exist. "}
var E201541 = Global_error{id: "201541", eType: EXPECTED_ERROR, message: "Cutomer Debt Control information is not available. "}
var E201542 = Global_error{id: "201542", eType: EXPECTED_ERROR, message: "Parameter table information is not available. "}
var E201543 = Global_error{id: "201543", eType: EXPECTED_ERROR, message: "Credit Limit Amount is not available in Package Plan table. "}
var E201544 = Global_error{id: "201544", eType: EXPECTED_ERROR, message: "Subscriber does not exist in subscriber debt control information table. "}
var E201545 = Global_error{id: "201545", eType: EXPECTED_ERROR, message: "Customer does not exist in Customer Debt Control entity. "}
var E201546 = Global_error{id: "201546", eType: EXPECTED_ERROR, message: "Credit Limit Letter does not exist. "}
var E201547 = Global_error{id: "201547", eType: EXPECTED_ERROR, message: "Credit Limit Letter already exist. "}
var E201548 = Global_error{id: "201548", eType: EXPECTED_ERROR, message: "Credit Limit Stage already exist. "}
var E201549 = Global_error{id: "201549", eType: EXPECTED_ERROR, message: "No stage exist. Cannot insert Arrears Plan data without al least one stage. "}
var E201550 = Global_error{id: "201550", eType: EXPECTED_ERROR, message: "Minimum Balance should be positive. "}
var E201551 = Global_error{id: "201551", eType: EXPECTED_ERROR, message: "Deposit Return must be '0' or '1'. "}
var E201552 = Global_error{id: "201552", eType: EXPECTED_ERROR, message: "Write Off must be '0' or '1'. "}
var E201553 = Global_error{id: "201553", eType: EXPECTED_ERROR, message: "Suspend Reason code does not exist. "}
var E201554 = Global_error{id: "201554", eType: EXPECTED_ERROR, message: "Arrears State exist. "}
var E201555 = Global_error{id: "201555", eType: EXPECTED_ERROR, message: "Last Arrears processing was completed, cannot proceed. "}
var E201556 = Global_error{id: "201556", eType: EXPECTED_ERROR, message: "Last Arrears Re-processing was completed, cannot proceed. "}
var E201557 = Global_error{id: "201557", eType: EXPECTED_ERROR, message: "Telephone attach to card is in used. "}
var E201558 = Global_error{id: "201558", eType: EXPECTED_ERROR, message: "Invalid cheque flag. "}
var E201559 = Global_error{id: "201559", eType: EXPECTED_ERROR, message: "Cheque is return already. "}
var E201560 = Global_error{id: "201560", eType: EXPECTED_ERROR, message: "Cheque is pass already. Cannot return Cheque again. "}
var E201561 = Global_error{id: "201561", eType: EXPECTED_ERROR, message: "Invalid Cheque Return Date. "}
var E201562 = Global_error{id: "201562", eType: EXPECTED_ERROR, message: "Receive amount should not be NULL. "}
var E201563 = Global_error{id: "201563", eType: EXPECTED_ERROR, message: "Advance flag should be '1' or '2' only. "}
var E201564 = Global_error{id: "201564", eType: EXPECTED_ERROR, message: "Reconnection flag should be '1' or '2' only. "}
var E201565 = Global_error{id: "201565", eType: EXPECTED_ERROR, message: "Allocation Method is not matching. "}
var E201566 = Global_error{id: "201566", eType: EXPECTED_ERROR, message: "Invalid bank transaction date. "}
var E201567 = Global_error{id: "201567", eType: EXPECTED_ERROR, message: "Transaction type detail does not exist. "}
var E201568 = Global_error{id: "201568", eType: EXPECTED_ERROR, message: "Customer Number does not exist. "}
var E201569 = Global_error{id: "201569", eType: EXPECTED_ERROR, message: "Default reference number in Parameter does not exist. "}
var E201570 = Global_error{id: "201570", eType: EXPECTED_ERROR, message: "Advance allocate document does not exist in parameter table. "}
var E201571 = Global_error{id: "201571", eType: EXPECTED_ERROR, message: "Receipt details already exist. "}
var E201572 = Global_error{id: "201572", eType: EXPECTED_ERROR, message: "This product does not require card. "}
var E201573 = Global_error{id: "201573", eType: EXPECTED_ERROR, message: "Customer bank account already exists. "}
var E201574 = Global_error{id: "201574", eType: EXPECTED_ERROR, message: "Customer Bank Account does not exist. "}
var E201575 = Global_error{id: "201575", eType: EXPECTED_ERROR, message: "Parameter 'CONX_BILL_CODE' does not exist "}
var E201576 = Global_error{id: "201576", eType: EXPECTED_ERROR, message: "Parameter 'DPST_BILL_CODE' does not exist. "}
var E201577 = Global_error{id: "201577", eType: EXPECTED_ERROR, message: "Parameter 'DPST_CONN_TYPE' does not exist. "}
var E201578 = Global_error{id: "201578", eType: EXPECTED_ERROR, message: "Parameter 'DPST_CONP_TYPE' does not exist. "}
var E201579 = Global_error{id: "201579", eType: EXPECTED_ERROR, message: "Parameter 'DPST_FRMT_TYPE' does not exist. "}
var E201580 = Global_error{id: "201580", eType: EXPECTED_ERROR, message: "Parameter 'DFLT_LOG_PATH' does not exist. "}
var E201581 = Global_error{id: "201581", eType: EXPECTED_ERROR, message: "Parameter 'DPST_BLPD_LSDT' does not exist. "}
var E201582 = Global_error{id: "201582", eType: EXPECTED_ERROR, message: "Parameter 'DPST_GDAY_NUMB' does not exist. "}
var E201583 = Global_error{id: "201583", eType: EXPECTED_ERROR, message: "Today data has been processed already. "}
var E201584 = Global_error{id: "201584", eType: EXPECTED_ERROR, message: "Cannot open log file. "}
var E201585 = Global_error{id: "201585", eType: EXPECTED_ERROR, message: "Connection Rate Amount does not exist. "}
var E201586 = Global_error{id: "201586", eType: EXPECTED_ERROR, message: "Deposit Rate Amount does not exist. "}
var E201587 = Global_error{id: "201587", eType: EXPECTED_ERROR, message: "Batch control does not exist. "}
var E201589 = Global_error{id: "201589", eType: EXPECTED_ERROR, message: "Maximum allowed numbers of swapping is crossed. "}
var E201590 = Global_error{id: "201590", eType: EXPECTED_ERROR, message: "Insufficient number of subscriber numbers for swapping. "}
var E201591 = Global_error{id: "201591", eType: EXPECTED_ERROR, message: "Cannot access to host 'EPSILON'. "}
var E201592 = Global_error{id: "201592", eType: EXPECTED_ERROR, message: "Cannot execute 'calcubll' on Billing Host. "}
var E201593 = Global_error{id: "201593", eType: EXPECTED_ERROR, message: "Remote execute failed. "}
var E201595 = Global_error{id: "201595", eType: EXPECTED_ERROR, message: "One card cannot be associated to multiple telephone with the same telephone type. "}
var E201596 = Global_error{id: "201596", eType: EXPECTED_ERROR, message: "Charged By must be 'CUST' OR 'SUBR' only. "}
var E201597 = Global_error{id: "201597", eType: EXPECTED_ERROR, message: "Telephone associate with card must have same Billing Product Code. "}
var E201598 = Global_error{id: "201598", eType: EXPECTED_ERROR, message: "Batch Running Number must be greater than 0. "}
var E201599 = Global_error{id: "201599", eType: EXPECTED_ERROR, message: "Parameter Sequence must be greater than 0. "}
var E201600 = Global_error{id: "201600", eType: EXPECTED_ERROR, message: "Invalid IMEI length. "}
var E201601 = Global_error{id: "201601", eType: EXPECTED_ERROR, message: "More than one record exist for the same service code in subscriber service detail table. "}
var E201602 = Global_error{id: "201602", eType: EXPECTED_ERROR, message: "More than one record exist for the same airtime code in subscriber usage detail table. "}
var E201603 = Global_error{id: "201603", eType: EXPECTED_ERROR, message: "Payment Term Days must be in range 0 to 365. "}
var E201604 = Global_error{id: "201604", eType: EXPECTED_ERROR, message: "Salesman and dealer number already exist. "}
var E201605 = Global_error{id: "201605", eType: EXPECTED_ERROR, message: "Telephone number exists in another product, cannot be created. "}
var E201606 = Global_error{id: "201606", eType: EXPECTED_ERROR, message: "Paid Amount is less than zero, cannot allocate transaction. "}
var E201607 = Global_error{id: "201607", eType: EXPECTED_ERROR, message: "No package applicable to the subscriber. "}
var E201608 = Global_error{id: "201608", eType: EXPECTED_ERROR, message: "No bill codes applicatble to the subscriber. "}
var E201609 = Global_error{id: "201609", eType: EXPECTED_ERROR, message: "No airtime code applicable to the subscriber. "}
var E201610 = Global_error{id: "201610", eType: EXPECTED_ERROR, message: "No service applicable for the subscriber. "}
var E201611 = Global_error{id: "201611", eType: EXPECTED_ERROR, message: "No package available to the subscriber to be re-opened. "}
var E201612 = Global_error{id: "201612", eType: EXPECTED_ERROR, message: "No packages available in SOS. "}
var E201613 = Global_error{id: "201613", eType: EXPECTED_ERROR, message: "Subscriber not found in subscriber billing information table. "}
var E201614 = Global_error{id: "201614", eType: EXPECTED_ERROR, message: "No Bill / Airtime / Service codes available in the package / SOS. "}
var E201615 = Global_error{id: "201615", eType: EXPECTED_ERROR, message: "Default path of Log file does not exist in parameter. "}
var E201616 = Global_error{id: "201616", eType: EXPECTED_ERROR, message: "Error Generating Log File. "}
var E201617 = Global_error{id: "201617", eType: EXPECTED_ERROR, message: "Default path of receipt file does not exist in parameter. "}
var E201618 = Global_error{id: "201618", eType: EXPECTED_ERROR, message: "Error Generating Receipt Text File. "}
var E201619 = Global_error{id: "201619", eType: EXPECTED_ERROR, message: "Default path of report summary file does not exist in parameter. "}
var E201620 = Global_error{id: "201620", eType: EXPECTED_ERROR, message: "Letter date must be greater than or equal today and less than today + 7. "}
var E201621 = Global_error{id: "201621", eType: EXPECTED_ERROR, message: "Arrears Extract exist for this extract, cannot delete. "}
var E201622 = Global_error{id: "201622", eType: EXPECTED_ERROR, message: "Credit Limit Extract exist for this extract, cannot delete. "}
var E201623 = Global_error{id: "201623", eType: EXPECTED_ERROR, message: "Arrears Action Extract exist for this extract, cannot delete. "}
var E201624 = Global_error{id: "201624", eType: EXPECTED_ERROR, message: "Credit Limit Action Extract exist for this extract, cannot delete. "}
var E201625 = Global_error{id: "201625", eType: EXPECTED_ERROR, message: "Error Generating report summary File. "}
var E201626 = Global_error{id: "201626", eType: EXPECTED_ERROR, message: "User Code cannot be null. "}
var E201627 = Global_error{id: "201627", eType: EXPECTED_ERROR, message: "Period cannot be null. "}
var E201628 = Global_error{id: "201628", eType: EXPECTED_ERROR, message: "Invalid Period value. "}
var E201629 = Global_error{id: "201629", eType: EXPECTED_ERROR, message: "Invalid Cycle Number. "}
var E201630 = Global_error{id: "201630", eType: EXPECTED_ERROR, message: "Parameter 'LOG_FILE_PATH' does not exist. "}
var E201631 = Global_error{id: "201631", eType: EXPECTED_ERROR, message: "Can not generate batch number. "}
var E201632 = Global_error{id: "201632", eType: EXPECTED_ERROR, message: "Data file name and/or file path is null. "}
var E201633 = Global_error{id: "201633", eType: EXPECTED_ERROR, message: "Cannot open output data file. "}
var E201634 = Global_error{id: "201634", eType: EXPECTED_ERROR, message: "Both of Default Value and Field Code cannot be null. "}
var E201635 = Global_error{id: "201635", eType: EXPECTED_ERROR, message: "Details of format detail does not exist. "}
var E201636 = Global_error{id: "201636", eType: EXPECTED_ERROR, message: "Billing type of the new bill code is incompatable with that of existing. "}
var E201637 = Global_error{id: "201637", eType: EXPECTED_ERROR, message: "More than one record exist for the same billing code in subscriber billing detail table. "}
var E201638 = Global_error{id: "201638", eType: EXPECTED_ERROR, message: "Discount codes of the billing code to be merged are not same. "}
var E201639 = Global_error{id: "201639", eType: EXPECTED_ERROR, message: "This dealer already been used as parent. Cannot delete. "}
var E201640 = Global_error{id: "201640", eType: EXPECTED_ERROR, message: "Initialized year does not exist. "}
var E201641 = Global_error{id: "201641", eType: EXPECTED_ERROR, message: "Invalid read receipt flag, value should be '1' or '2' or '3'. "}
var E201642 = Global_error{id: "201642", eType: EXPECTED_ERROR, message: "Invalid package, incomplete master data. "}
var E201643 = Global_error{id: "201643", eType: EXPECTED_ERROR, message: "Package already expired. "}
var E201644 = Global_error{id: "201644", eType: EXPECTED_ERROR, message: "Package already existing, can't be duplicated. "}
var E201645 = Global_error{id: "201645", eType: EXPECTED_ERROR, message: "Invalid package, No Bill/ Airtime/ Service code associated with the package. "}
var E201646 = Global_error{id: "201646", eType: EXPECTED_ERROR, message: "Branch code does not exist. "}
var E201647 = Global_error{id: "201647", eType: EXPECTED_ERROR, message: "Branch code is not effective. "}
var E201648 = Global_error{id: "201648", eType: EXPECTED_ERROR, message: "Invalid telephone number. "}
var E201649 = Global_error{id: "201649", eType: EXPECTED_ERROR, message: "This telephone can not be Sold due to switch off date. "}
var E201650 = Global_error{id: "201650", eType: EXPECTED_ERROR, message: "Date comparision function fails. "}
var E201651 = Global_error{id: "201651", eType: EXPECTED_ERROR, message: "Invalid dealer number. "}
var E201652 = Global_error{id: "201652", eType: EXPECTED_ERROR, message: "Date of birth can not be null. "}
var E201653 = Global_error{id: "201653", eType: EXPECTED_ERROR, message: "Invalid Country/ Post code/ Post code sequence. "}
var E201654 = Global_error{id: "201654", eType: EXPECTED_ERROR, message: "Arrear plan not found for the occupation type and billing product of the customer. "}
var E201655 = Global_error{id: "201655", eType: EXPECTED_ERROR, message: "Invalid bill frequency unit. "}
var E201656 = Global_error{id: "201656", eType: EXPECTED_ERROR, message: "Invalid customer credit limit plan. "}
var E201657 = Global_error{id: "201657", eType: EXPECTED_ERROR, message: "Invalid subscriber credit limit plan. "}
var E201658 = Global_error{id: "201658", eType: EXPECTED_ERROR, message: "Invalid salesman number. "}
var E201659 = Global_error{id: "201659", eType: EXPECTED_ERROR, message: "Record does not exist in customer billing information table for the existing customer. "}
var E201660 = Global_error{id: "201660", eType: EXPECTED_ERROR, message: "Invalid product code. "}
var E201661 = Global_error{id: "201661", eType: EXPECTED_ERROR, message: "Date is out of range 1 to 31. "}
var E201662 = Global_error{id: "201662", eType: EXPECTED_ERROR, message: "Start Day cannot be greater than End Day. "}
var E201663 = Global_error{id: "201663", eType: EXPECTED_ERROR, message: "Overlap range of start and end day. "}
var E201664 = Global_error{id: "201664", eType: EXPECTED_ERROR, message: "Invalid payment cycle number. "}
var E201665 = Global_error{id: "201665", eType: EXPECTED_ERROR, message: "Product code does not exist. "}
var E201666 = Global_error{id: "201666", eType: EXPECTED_ERROR, message: "Bank format detail does not exist. "}
var E201667 = Global_error{id: "201667", eType: EXPECTED_ERROR, message: "This Telephone used to be bulk change before, cannot change back. "}
var E201668 = Global_error{id: "201668", eType: EXPECTED_ERROR, message: "Sequence year does not exist. "}
var E201669 = Global_error{id: "201669", eType: EXPECTED_ERROR, message: "Overlap of the effective and expire Date. "}
var E201670 = Global_error{id: "201670", eType: EXPECTED_ERROR, message: "Random number generation fails. "}
var E201671 = Global_error{id: "201671", eType: EXPECTED_ERROR, message: "Invalid transaction matching flag. "}
var E201672 = Global_error{id: "201672", eType: EXPECTED_ERROR, message: "No customer exists with specific product. "}
var E201673 = Global_error{id: "201673", eType: EXPECTED_ERROR, message: "Customer is not applicable. "}
var E201674 = Global_error{id: "201674", eType: EXPECTED_ERROR, message: "Active/Authorized Package code is not found. "}
var E201675 = Global_error{id: "201675", eType: EXPECTED_ERROR, message: "Routine type is in used, cannot change. "}
var E201676 = Global_error{id: "201676", eType: EXPECTED_ERROR, message: "This is no service for the subscriber for which service value is required. "}
var E201677 = Global_error{id: "201677", eType: EXPECTED_ERROR, message: "Invalid SOS flag. "}
var E201678 = Global_error{id: "201678", eType: EXPECTED_ERROR, message: "Incomplete address information. "}
var E201679 = Global_error{id: "201679", eType: EXPECTED_ERROR, message: "Invalid due date. "}
var E201680 = Global_error{id: "201680", eType: EXPECTED_ERROR, message: "This server can not process. "}
var E201681 = Global_error{id: "201681", eType: EXPECTED_ERROR, message: "Para value does not exist. "}
var E201682 = Global_error{id: "201682", eType: EXPECTED_ERROR, message: "Invalid switch off reason code. "}
var E201683 = Global_error{id: "201683", eType: EXPECTED_ERROR, message: "No active airtime code is applicable to subscriber. "}
var E201684 = Global_error{id: "201684", eType: EXPECTED_ERROR, message: "No active service code is applicable to subscriber. "}
var E201685 = Global_error{id: "201685", eType: EXPECTED_ERROR, message: "Customer debt control information is not found. "}
var E201686 = Global_error{id: "201686", eType: EXPECTED_ERROR, message: "Invalid card number. "}
var E201687 = Global_error{id: "201687", eType: EXPECTED_ERROR, message: "Invalid suspension reason code. "}
var E201688 = Global_error{id: "201688", eType: EXPECTED_ERROR, message: "Existing subscriber's suspendsion reason is invalid. "}
var E201689 = Global_error{id: "201689", eType: EXPECTED_ERROR, message: "Parameter information is not available. "}
var E201690 = Global_error{id: "201690", eType: EXPECTED_ERROR, message: "Invalid subscriber's suspension reason code. "}
var E201691 = Global_error{id: "201691", eType: EXPECTED_ERROR, message: "Transaction type/ Reconnection Bill code parameter is not found. "}
var E201692 = Global_error{id: "201692", eType: EXPECTED_ERROR, message: "Current batch number does not exist in default parameter table. "}
var E201693 = Global_error{id: "201693", eType: EXPECTED_ERROR, message: "Unable to calculate due date. "}
var E201694 = Global_error{id: "201694", eType: EXPECTED_ERROR, message: "Dependent Package code cannot be as same as the parent Package code. "}
var E201695 = Global_error{id: "201695", eType: EXPECTED_ERROR, message: "Entered package code is already expired. "}
var E201696 = Global_error{id: "201696", eType: EXPECTED_ERROR, message: "Invalid billing product code. "}
var E201697 = Global_error{id: "201697", eType: EXPECTED_ERROR, message: "Source of Sales already exists but is not currently effective. "}
var E201698 = Global_error{id: "201698", eType: EXPECTED_ERROR, message: "Source of Sales already exists and is currently effective. "}
var E201699 = Global_error{id: "201699", eType: EXPECTED_ERROR, message: "Reference 1 is invalid. "}
var E201700 = Global_error{id: "201700", eType: EXPECTED_ERROR, message: "Batch number are already updated. "}
var E201701 = Global_error{id: "201701", eType: EXPECTED_ERROR, message: "This hardware cannot be changed to this Brand/Model. "}
var E201702 = Global_error{id: "201702", eType: EXPECTED_ERROR, message: "DPST_STAT should be 0 or 1 only. "}
var E201703 = Global_error{id: "201703", eType: EXPECTED_ERROR, message: "Invalid convert option. "}
var E201704 = Global_error{id: "201704", eType: EXPECTED_ERROR, message: "Dealer of user is not the dealer of this telephone number. "}
var E201705 = Global_error{id: "201705", eType: EXPECTED_ERROR, message: "Package end date cannot be less than TODAY. "}
var E201706 = Global_error{id: "201706", eType: EXPECTED_ERROR, message: "Error update in PY_BTCH_CTRL table. "}
var E201707 = Global_error{id: "201707", eType: EXPECTED_ERROR, message: "Receipt log does not exist. "}
var E201708 = Global_error{id: "201708", eType: EXPECTED_ERROR, message: "Receipt log already exists. "}
var E201709 = Global_error{id: "201709", eType: EXPECTED_ERROR, message: "Generate receipt file flag value should be 1 or 2 only. "}
var E201710 = Global_error{id: "201710", eType: EXPECTED_ERROR, message: "Invalid post code sequence number. "}
var E201711 = Global_error{id: "201711", eType: EXPECTED_ERROR, message: "No data found in parameter table. "}
var E201712 = Global_error{id: "201712", eType: EXPECTED_ERROR, message: "Last processing failed is Credit Limit Process.It's not Re-Processed. "}
var E201713 = Global_error{id: "201713", eType: EXPECTED_ERROR, message: "Last Credit Limit processing was completed, Cannot proceed. "}
var E201714 = Global_error{id: "201714", eType: EXPECTED_ERROR, message: "Error in update DC_PARM. "}
var E201715 = Global_error{id: "201715", eType: EXPECTED_ERROR, message: "Cannot access to host 'EPSILON'. "}
var E201716 = Global_error{id: "201716", eType: EXPECTED_ERROR, message: "Cannot execute 'calcubll' on Billing Host. "}
var E201717 = Global_error{id: "201717", eType: EXPECTED_ERROR, message: "Remote execute failed. "}
var E201718 = Global_error{id: "201718", eType: EXPECTED_ERROR, message: "Error in calling calcubll function. "}
var E201719 = Global_error{id: "201719", eType: EXPECTED_ERROR, message: "The last credit limit Re-processing was completed, cannot proceed. "}
var E201720 = Global_error{id: "201720", eType: EXPECTED_ERROR, message: "The last process was completed. Cannot process this. "}
var E201721 = Global_error{id: "201721", eType: EXPECTED_ERROR, message: "Billing Information for this subscriber does not found. "}
var E201722 = Global_error{id: "201722", eType: EXPECTED_ERROR, message: "Credit limit information for this subscriber does not found. "}
var E201723 = Global_error{id: "201723", eType: EXPECTED_ERROR, message: "Deposit Relation with PAGER not found. "}
var E201724 = Global_error{id: "201724", eType: EXPECTED_ERROR, message: "Value should not be greater than maximum long. "}
var E201725 = Global_error{id: "201725", eType: EXPECTED_ERROR, message: "Invalid transaction date. "}
var E201726 = Global_error{id: "201726", eType: EXPECTED_ERROR, message: "Default parameter code of Reconnection Suspension code does not exist. "}
var E201727 = Global_error{id: "201727", eType: EXPECTED_ERROR, message: "Allocation Method 05 does not exist in parameter table. "}
var E201728 = Global_error{id: "201728", eType: EXPECTED_ERROR, message: "Unable to retrieve request code for generating service order. "}
var E201729 = Global_error{id: "201729", eType: EXPECTED_ERROR, message: "Self swapping is not allowed. "}
var E201730 = Global_error{id: "201730", eType: EXPECTED_ERROR, message: "There should be minimum of 2 and maximum of 15 subscriber to be swapped. "}
var E201731 = Global_error{id: "201731", eType: EXPECTED_ERROR, message: "No Credit Limit Action history detail exists for this customer. "}
var E201732 = Global_error{id: "201732", eType: EXPECTED_ERROR, message: "No Arrear Action history detail exists for this customer. "}
var E201733 = Global_error{id: "201733", eType: EXPECTED_ERROR, message: "There is no Other History for this customer. "}
var E201734 = Global_error{id: "201734", eType: EXPECTED_ERROR, message: "There is no Arrear History for this customer. "}
var E201735 = Global_error{id: "201735", eType: EXPECTED_ERROR, message: "There is no charge detail for this customer. "}
var E201736 = Global_error{id: "201736", eType: EXPECTED_ERROR, message: "Receipt log does not exist. "}
var E201737 = Global_error{id: "201737", eType: EXPECTED_ERROR, message: "Invalid payment method. "}
var E201738 = Global_error{id: "201738", eType: EXPECTED_ERROR, message: "Invalid customer number. "}
var E201739 = Global_error{id: "201739", eType: EXPECTED_ERROR, message: "Invalid switch on reason code. "}
var E201740 = Global_error{id: "201740", eType: EXPECTED_ERROR, message: "Invalid Source of Sales code. "}
var E201741 = Global_error{id: "201741", eType: EXPECTED_ERROR, message: "Customer and subscriber combination already exists. "}
var E201742 = Global_error{id: "201742", eType: EXPECTED_ERROR, message: "Invalid dealer number. "}
var E201743 = Global_error{id: "201743", eType: EXPECTED_ERROR, message: "Error opening BTCH file. "}
var E201744 = Global_error{id: "201744", eType: EXPECTED_ERROR, message: "Range of telephone number cannot exceed the limit ( 10,000 ). "}
var E201745 = Global_error{id: "201745", eType: EXPECTED_ERROR, message: "The telephone prefix has to be at least 6 digits long. "}
var E201746 = Global_error{id: "201746", eType: EXPECTED_ERROR, message: "Customer number in PY_CSBK_TRNF does not exist. "}
var E201747 = Global_error{id: "201747", eType: EXPECTED_ERROR, message: "Batch number in PY_BTCH_CRTL does not exist. "}
var E201748 = Global_error{id: "201748", eType: EXPECTED_ERROR, message: "Batch number in PY_APAC_HEDR already exists. "}
var E201749 = Global_error{id: "201749", eType: EXPECTED_ERROR, message: "Batch number in PY_APAC_HEDR does not exist. "}
var E201750 = Global_error{id: "201750", eType: EXPECTED_ERROR, message: "Batch number in PY_APAC_DT already exists. "}
var E201751 = Global_error{id: "201751", eType: EXPECTED_ERROR, message: "Invalid reference date. "}
var E201752 = Global_error{id: "201752", eType: EXPECTED_ERROR, message: "Invalid change reason code. "}
var E201753 = Global_error{id: "201753", eType: EXPECTED_ERROR, message: "Length of FROM_TELP must equal to TO_TELP. "}
var E201754 = Global_error{id: "201754", eType: EXPECTED_ERROR, message: "Read flag must be 2 only. "}
var E201755 = Global_error{id: "201755", eType: EXPECTED_ERROR, message: "Switch off datetime is not avaliable. "}
var E201756 = Global_error{id: "201756", eType: EXPECTED_ERROR, message: "Status of the subscriber is Switch off, package and datetime is not avaliable. "}
var E201757 = Global_error{id: "201757", eType: EXPECTED_ERROR, message: "Error opening s_unexpc_log file. "}
var E201758 = Global_error{id: "201758", eType: EXPECTED_ERROR, message: "Error writting s_unexpc_log file. "}
var E201759 = Global_error{id: "201759", eType: EXPECTED_ERROR, message: "There is no detail information available for this receipt number. "}
var E201760 = Global_error{id: "201760", eType: EXPECTED_ERROR, message: "User-Dealer combination does not exist. "}
var E201761 = Global_error{id: "201761", eType: EXPECTED_ERROR, message: "Formulated package end date is less than start date. "}
var E201762 = Global_error{id: "201762", eType: EXPECTED_ERROR, message: "Start date of the package is greater than subscriber switch off datetime. "}
var E201766 = Global_error{id: "201766", eType: EXPECTED_ERROR, message: "Cheque clearing format type does not exist in parametee table. "}
var E201767 = Global_error{id: "201767", eType: EXPECTED_ERROR, message: "Length of the key required for generating the password is not enough. "}
var E201768 = Global_error{id: "201768", eType: EXPECTED_ERROR, message: "Insert Audit fail. "}
var E201769 = Global_error{id: "201769", eType: EXPECTED_ERROR, message: "Dealer(s) associated to the user is expired or belong to other product. "}
var E201770 = Global_error{id: "201770", eType: EXPECTED_ERROR, message: "IMSI number already exists. "}
var E201772 = Global_error{id: "201772", eType: EXPECTED_ERROR, message: "Location associated with user does not exist. "}
var E201773 = Global_error{id: "201773", eType: EXPECTED_ERROR, message: "Witholding tax code does not exist in parameter table. "}
var E201774 = Global_error{id: "201774", eType: EXPECTED_ERROR, message: "Bank branch code is not effective or does not exist. "}
var E201775 = Global_error{id: "201775", eType: EXPECTED_ERROR, message: "Bank banch code is effective or does not exist. "}
var E201776 = Global_error{id: "201776", eType: EXPECTED_ERROR, message: "Required default parameters are not available. "}
var E201777 = Global_error{id: "201777", eType: EXPECTED_ERROR, message: "Receive amount should be greater than outstanding balance of cheque. "}
var E201778 = Global_error{id: "201778", eType: EXPECTED_ERROR, message: "Customer number already exists, but apply status not 'R' or  'C' . "}
var E201779 = Global_error{id: "201779", eType: EXPECTED_ERROR, message: "This telephone number is in used. "}
var E201780 = Global_error{id: "201780", eType: EXPECTED_ERROR, message: "You are not authorize to allocate this telephone number. "}
var E201781 = Global_error{id: "201781", eType: EXPECTED_ERROR, message: "You are not authorized. "}
var E201782 = Global_error{id: "201782", eType: EXPECTED_ERROR, message: "Insert record to Service Order table fail. "}
var E201783 = Global_error{id: "201783", eType: EXPECTED_ERROR, message: "Reconnection Description does not exist in parameter table. "}
var E201784 = Global_error{id: "201784", eType: EXPECTED_ERROR, message: "Advance description does not exist in parameter table. "}
var E201785 = Global_error{id: "201785", eType: EXPECTED_ERROR, message: "User-Location combination does not exist. "}
var E201786 = Global_error{id: "201786", eType: EXPECTED_ERROR, message: "Invalid Method Code can be 'BR', 'BC', or 'BB' "}
var E201787 = Global_error{id: "201787", eType: EXPECTED_ERROR, message: "Invalid method code can be 'CR', 'CC', 'DD' or 'CA' only. "}
var E201788 = Global_error{id: "201788", eType: EXPECTED_ERROR, message: "Invalid method code can be 'CR', 'CC', or 'DD' only. "}
var E201789 = Global_error{id: "201789", eType: EXPECTED_ERROR, message: "Invalid APLD_STTS. "}
var E201791 = Global_error{id: "201791", eType: EXPECTED_ERROR, message: "Bill-start-date is greater than or equal next invoice date. "}
var E201792 = Global_error{id: "201792", eType: EXPECTED_ERROR, message: "This bill code has been charged before this. "}
var E201793 = Global_error{id: "201793", eType: EXPECTED_ERROR, message: "Bill-start-date is greater than or equal Next-invc-date. "}
var E201794 = Global_error{id: "201794", eType: EXPECTED_ERROR, message: "Error in Reading Bill Frequency code. "}
var E201795 = Global_error{id: "201795", eType: EXPECTED_ERROR, message: "Error from calcdate function. "}
var E201796 = Global_error{id: "201796", eType: EXPECTED_ERROR, message: "Cust-bill-freq is greater than or equal next invoice date. "}
var E201797 = Global_error{id: "201797", eType: EXPECTED_ERROR, message: "Error in reading rate change code. "}
var E201798 = Global_error{id: "201798", eType: EXPECTED_ERROR, message: "Error in reading Pro Rata code. "}
var E201799 = Global_error{id: "201799", eType: EXPECTED_ERROR, message: "Error in reading Bill rate. "}
var E201800 = Global_error{id: "201800", eType: EXPECTED_ERROR, message: "Error in calculate bill code. "}
var E201801 = Global_error{id: "201801", eType: EXPECTED_ERROR, message: "Error in reading bill type. "}
var E201802 = Global_error{id: "201802", eType: EXPECTED_ERROR, message: "Error in reading bill code. "}
var E201803 = Global_error{id: "201803", eType: EXPECTED_ERROR, message: "Invalid agreement check flag. "}
var E201804 = Global_error{id: "201804", eType: EXPECTED_ERROR, message: "Invalid  receipt line number. "}
var E201805 = Global_error{id: "201805", eType: EXPECTED_ERROR, message: "Start date is greater than switch on date. "}
var E201806 = Global_error{id: "201806", eType: EXPECTED_ERROR, message: "No Sales Ledger Information found. "}
var E201807 = Global_error{id: "201807", eType: EXPECTED_ERROR, message: "No Invoice Details found. "}
var E201808 = Global_error{id: "201808", eType: EXPECTED_ERROR, message: "No S/L Allocation Details found. "}
var E201809 = Global_error{id: "201809", eType: EXPECTED_ERROR, message: "Parameter 'CURR_PERD' does not exist. "}
var E201810 = Global_error{id: "201810", eType: EXPECTED_ERROR, message: "No D/N&C/N Details found. "}
var E201811 = Global_error{id: "201811", eType: EXPECTED_ERROR, message: "No Cheque Information for this S/L. "}
var E201812 = Global_error{id: "201812", eType: EXPECTED_ERROR, message: "Error  in Cheque Details. "}
var E201813 = Global_error{id: "201813", eType: EXPECTED_ERROR, message: "Error  in Cheque Allocation Details. "}
var E201814 = Global_error{id: "201814", eType: EXPECTED_ERROR, message: "No Receipt Information found. "}
var E201815 = Global_error{id: "201815", eType: EXPECTED_ERROR, message: "Error in Receipt Details. "}
var E201816 = Global_error{id: "201816", eType: EXPECTED_ERROR, message: "No D/N&C/N found. "}
var E201817 = Global_error{id: "201817", eType: EXPECTED_ERROR, message: "Error in Sales Ledger Details. "}
var E201818 = Global_error{id: "201818", eType: EXPECTED_ERROR, message: "No Arrear History is found. "}
var E201819 = Global_error{id: "201819", eType: EXPECTED_ERROR, message: "No Arrear History Details is found. "}
var E201820 = Global_error{id: "201820", eType: EXPECTED_ERROR, message: "No Credit Limit History found. "}
var E201821 = Global_error{id: "201821", eType: EXPECTED_ERROR, message: "No Credit Limit History Details found. "}
var E201822 = Global_error{id: "201822", eType: EXPECTED_ERROR, message: "No other history data is found. "}
var E201823 = Global_error{id: "201823", eType: EXPECTED_ERROR, message: "Package end date cannot be greater than already specified date. "}
var E201824 = Global_error{id: "201824", eType: EXPECTED_ERROR, message: "Duplicate record exists for subrscriber service. "}
var E201825 = Global_error{id: "201825", eType: EXPECTED_ERROR, message: "Last credit limit stage cannot less than zero. "}
var E201826 = Global_error{id: "201826", eType: EXPECTED_ERROR, message: "Sales Ledger Transaction already exists. "}
var E201827 = Global_error{id: "201827", eType: EXPECTED_ERROR, message: "This APAC detail is already loaded. "}
var E201828 = Global_error{id: "201828", eType: EXPECTED_ERROR, message: "Next Credit Limit ate must be greater than or equal Next Credit Limit Date Boundary and greater than Previous Value. "}
var E201829 = Global_error{id: "201829", eType: EXPECTED_ERROR, message: "Credit Limit amount must be greater than zero. "}
var E201830 = Global_error{id: "201830", eType: EXPECTED_ERROR, message: "Bill end date is less than Bill to date. "}
var E201831 = Global_error{id: "201831", eType: EXPECTED_ERROR, message: "Current SOS and New SOS can not be same. "}
var E201832 = Global_error{id: "201832", eType: EXPECTED_ERROR, message: "Telephone attach to card is lived, reserved or allocated to dealer,cannot update "}
var E201833 = Global_error{id: "201833", eType: EXPECTED_ERROR, message: "No Suspension History is found. "}
var E201834 = Global_error{id: "201834", eType: EXPECTED_ERROR, message: "No Call Details Records found. "}
var E201835 = Global_error{id: "201835", eType: EXPECTED_ERROR, message: "End date cannot be less than effective date. "}
var E201836 = Global_error{id: "201836", eType: EXPECTED_ERROR, message: "Start date cannot be less than effective date. "}
var E201837 = Global_error{id: "201837", eType: EXPECTED_ERROR, message: "Cheque does not send to bank. "}
var E201838 = Global_error{id: "201838", eType: EXPECTED_ERROR, message: "Cheque return transaction group does not exist in parameter. "}
var E201839 = Global_error{id: "201839", eType: EXPECTED_ERROR, message: "Actual expiry date must be greater than start date. "}
var E201840 = Global_error{id: "201840", eType: EXPECTED_ERROR, message: "Start date is less than switch on date. "}
var E201841 = Global_error{id: "201841", eType: EXPECTED_ERROR, message: "Associate Service and Group already exists. "}
var E201842 = Global_error{id: "201842", eType: EXPECTED_ERROR, message: "Associate service and group does not exist. "}
var E201843 = Global_error{id: "201843", eType: EXPECTED_ERROR, message: "This text file has been loaded, cannot load it again. "}
var E201844 = Global_error{id: "201844", eType: EXPECTED_ERROR, message: "Next invoice date can not be less than today. "}
var E201845 = Global_error{id: "201845", eType: EXPECTED_ERROR, message: "Next invoice date can not greater or equal to the existing one. "}
var E201846 = Global_error{id: "201846", eType: EXPECTED_ERROR, message: "Cannot reprint before printing the original receipt. "}
var E201847 = Global_error{id: "201847", eType: EXPECTED_ERROR, message: "Please update your client Application to V2.01 "}
var E201848 = Global_error{id: "201848", eType: EXPECTED_ERROR, message: "Please process Update Deposit Receipt first. "}
var E201849 = Global_error{id: "201849", eType: EXPECTED_ERROR, message: "User-Product combination does not exist. "}
var E201850 = Global_error{id: "201850", eType: EXPECTED_ERROR, message: "Receipt Status should be N or R only "}
var E201851 = Global_error{id: "201851", eType: EXPECTED_ERROR, message: "Invalid Receipt Status. "}
var E201852 = Global_error{id: "201852", eType: EXPECTED_ERROR, message: "APACS details do not match with APACS header. "}
var E201853 = Global_error{id: "201853", eType: EXPECTED_ERROR, message: "Cannot login more than MAXLOGIN time(s). "}
var E201854 = Global_error{id: "201854", eType: EXPECTED_ERROR, message: "The login you are using is currently used by another person. You will be disconnected in 2 minutes. "}
var E201855 = Global_error{id: "201855", eType: EXPECTED_ERROR, message: "Mail Return Reason does not exist. "}
var E201856 = Global_error{id: "201856", eType: EXPECTED_ERROR, message: "Document Type does not exist. "}
var E201857 = Global_error{id: "201857", eType: EXPECTED_ERROR, message: "Invalid value for period. "}
var E201858 = Global_error{id: "201858", eType: EXPECTED_ERROR, message: "Should not be greather than current period. "}
var E201859 = Global_error{id: "201859", eType: EXPECTED_ERROR, message: "From period should not be greather than to period. "}
var E201860 = Global_error{id: "201860", eType: EXPECTED_ERROR, message: "Printing Finished. "}
var E201861 = Global_error{id: "201861", eType: EXPECTED_ERROR, message: "Existing Records Are Overlapping. "}
var E201862 = Global_error{id: "201862", eType: EXPECTED_ERROR, message: "Record To Be Updated Does Not Exist. "}
var E201863 = Global_error{id: "201863", eType: EXPECTED_ERROR, message: "No package is available to perform Swap Hardware. "}
var E201864 = Global_error{id: "201864", eType: EXPECTED_ERROR, message: "Swap Hardware is not allowed for this subscriber. "}
var E201865 = Global_error{id: "201865", eType: EXPECTED_ERROR, message: "Extend Credit limit amount must be greater than or equal to 0. "}
var E201866 = Global_error{id: "201866", eType: EXPECTED_ERROR, message: "Invalid tax flag. "}
var E201867 = Global_error{id: "201867", eType: EXPECTED_ERROR, message: "Records can not be merged as New allocation key is not same as Existing allocation key. "}
var E201868 = Global_error{id: "201868", eType: EXPECTED_ERROR, message: "Extended Credit limit amount must be less than or equal to Credit limit amount. "}
var E201869 = Global_error{id: "201869", eType: EXPECTED_ERROR, message: "Invalid additional package flag. "}
var E201870 = Global_error{id: "201870", eType: EXPECTED_ERROR, message: "Receipt date can not be later than today. "}
var E201871 = Global_error{id: "201871", eType: EXPECTED_ERROR, message: "Error transferring file to server, Please reload. "}
var E201872 = Global_error{id: "201872", eType: EXPECTED_ERROR, message: "Matching transaction does not exists. "}
var E201873 = Global_error{id: "201873", eType: EXPECTED_ERROR, message: "Matching transaction already exists. "}
var E201874 = Global_error{id: "201874", eType: EXPECTED_ERROR, message: "Hardware Number cannot swap because hardware status <> '10' or live flag <> 'N'. "}
var E201875 = Global_error{id: "201875", eType: EXPECTED_ERROR, message: "Error in open file. "}
var E201876 = Global_error{id: "201876", eType: EXPECTED_ERROR, message: "Invalid swap hardware flag. "}
var E201877 = Global_error{id: "201877", eType: EXPECTED_ERROR, message: "Invalid single hardware flag. "}
var E201878 = Global_error{id: "201878", eType: EXPECTED_ERROR, message: "Invalid Root Package-Indicator. "}
var E201879 = Global_error{id: "201879", eType: EXPECTED_ERROR, message: "Extend Credit limit amount is not available in Package Plan table. "}
var E201880 = Global_error{id: "201880", eType: EXPECTED_ERROR, message: "Distance Label already exists. "}
var E201881 = Global_error{id: "201881", eType: EXPECTED_ERROR, message: "Distance Label does not exist. "}
var E201882 = Global_error{id: "201882", eType: EXPECTED_ERROR, message: "The value must be greater than or equal to 0. "}
var E201883 = Global_error{id: "201883", eType: EXPECTED_ERROR, message: "Default path of Deposit AP does not exist in parameter. "}
var E201884 = Global_error{id: "201884", eType: EXPECTED_ERROR, message: "Error in generating DpstAP text file. "}
var E201885 = Global_error{id: "201885", eType: EXPECTED_ERROR, message: "Matching Transaction Type can not be same as the transaction type being matched to. "}
var E201886 = Global_error{id: "201886", eType: EXPECTED_ERROR, message: "Customer and subscriber does not exist in Print Registration Form Table. "}
var E201887 = Global_error{id: "201887", eType: EXPECTED_ERROR, message: "Date must be less than Today. "}
var E201888 = Global_error{id: "201888", eType: EXPECTED_ERROR, message: "To Date must not be less than Last Print Registration Date. "}
var E201889 = Global_error{id: "201889", eType: EXPECTED_ERROR, message: "Deposit of old customer does not exists. "}
var E201890 = Global_error{id: "201890", eType: EXPECTED_ERROR, message: "Parameter 'DPST_SWAP_TYPE' does not exist. "}
var E201891 = Global_error{id: "201891", eType: EXPECTED_ERROR, message: "Parameter 'DPST_RELE_TXTP' does not exist. "}
var E201892 = Global_error{id: "201892", eType: EXPECTED_ERROR, message: "Adjust amount can not greater than the default value. "}
var E201893 = Global_error{id: "201893", eType: EXPECTED_ERROR, message: "Maximum adjust amount does not exist. "}
var E201894 = Global_error{id: "201894", eType: EXPECTED_ERROR, message: "Finished Process. "}
var E201895 = Global_error{id: "201895", eType: EXPECTED_ERROR, message: "IMEI Number must be numeric. "}
var E201896 = Global_error{id: "201896", eType: EXPECTED_ERROR, message: "Problem locating the remote directory.Want to continue?. "}
var E201897 = Global_error{id: "201897", eType: EXPECTED_ERROR, message: "Problem creating the local file. Continue? "}
var E201898 = Global_error{id: "201898", eType: EXPECTED_ERROR, message: "Problem writing the local file or in communication. Continue? "}
var E201899 = Global_error{id: "201899", eType: EXPECTED_ERROR, message: "Transfer file successful. "}
var E201900 = Global_error{id: "201900", eType: EXPECTED_ERROR, message: "Invalid batch type. "}
var E201901 = Global_error{id: "201901", eType: EXPECTED_ERROR, message: "Dialed Digits Group already exists. "}
var E201902 = Global_error{id: "201902", eType: EXPECTED_ERROR, message: "Dialed Digits Group does not exists. "}
var E201903 = Global_error{id: "201903", eType: EXPECTED_ERROR, message: "Invalid Service Value. "}
var E201904 = Global_error{id: "201904", eType: EXPECTED_ERROR, message: "Constraint of Airtime Reference flag does not exist. "}
var E201905 = Global_error{id: "201905", eType: EXPECTED_ERROR, message: "Dialed Digits Group  exists and is currently not active. "}
var E201906 = Global_error{id: "201906", eType: EXPECTED_ERROR, message: "Dialed Digits Group  exists and  currently active. "}
var E201907 = Global_error{id: "201907", eType: EXPECTED_ERROR, message: "Cannot process transaction which outstanding less than 0. "}
var E201908 = Global_error{id: "201908", eType: EXPECTED_ERROR, message: "Cannot process transaction which has been queried. "}
var E201909 = Global_error{id: "201909", eType: EXPECTED_ERROR, message: "Subscriber has been changed owner, Can't do reconnection. "}
var E201910 = Global_error{id: "201910", eType: EXPECTED_ERROR, message: "No voice mail services applicable to the subscriber. "}
var E201911 = Global_error{id: "201911", eType: EXPECTED_ERROR, message: "Error while sending mail. "}
var E201912 = Global_error{id: "201912", eType: EXPECTED_ERROR, message: "Adjustment amount cannot be greater than Value. "}
var E201913 = Global_error{id: "201913", eType: EXPECTED_ERROR, message: "Auto Unsuspend flag should be '0' or '1' only. "}
var E201914 = Global_error{id: "201914", eType: EXPECTED_ERROR, message: "Invalid over due amount. "}
var E201915 = Global_error{id: "201915", eType: EXPECTED_ERROR, message: "Invalid other balance amount. "}
var E201916 = Global_error{id: "201916", eType: EXPECTED_ERROR, message: "Deposit or Connection Transaction type of New SOS is not compatible with that of the Subscriber. "}
var E201917 = Global_error{id: "201917", eType: EXPECTED_ERROR, message: "Invalid Coverage Area Value. "}
var E201918 = Global_error{id: "201918", eType: EXPECTED_ERROR, message: "Service value is mandatory for coverage package. "}
var E201919 = Global_error{id: "201919", eType: EXPECTED_ERROR, message: "More than one package exist for coverage or fraud. "}
var E201920 = Global_error{id: "201920", eType: EXPECTED_ERROR, message: "Service value can not be updated as required service does not exist. "}
var E201921 = Global_error{id: "201921", eType: EXPECTED_ERROR, message: "Existing subscriber package is not effective yet. "}
var E201922 = Global_error{id: "201922", eType: EXPECTED_ERROR, message: "Existing service to be updated does not exist. "}
var E201923 = Global_error{id: "201923", eType: EXPECTED_ERROR, message: "Invalid subscriber status. "}
var E201924 = Global_error{id: "201924", eType: EXPECTED_ERROR, message: "More than one service code exist for coverage area. "}
var E201925 = Global_error{id: "201925", eType: EXPECTED_ERROR, message: "Format / Length of service value is not correct. "}
var E201926 = Global_error{id: "201926", eType: EXPECTED_ERROR, message: "Password length must be greater than or equal to 8 charaters. "}
var E201927 = Global_error{id: "201927", eType: EXPECTED_ERROR, message: "Other Transaction type exist. "}
var E201928 = Global_error{id: "201928", eType: EXPECTED_ERROR, message: "Other Transaction group does not exist. "}
var E201929 = Global_error{id: "201929", eType: EXPECTED_ERROR, message: "Other Transaction group exist. "}
var E201930 = Global_error{id: "201930", eType: EXPECTED_ERROR, message: "Other Company code does not exist. "}
var E201931 = Global_error{id: "201931", eType: EXPECTED_ERROR, message: "Other Company code exist. "}
var E201932 = Global_error{id: "201932", eType: EXPECTED_ERROR, message: "Other Product code does not exist. "}
var E201933 = Global_error{id: "201933", eType: EXPECTED_ERROR, message: "Other Product code exist. "}
var E201934 = Global_error{id: "201934", eType: EXPECTED_ERROR, message: "Other Document running number does not exist. "}
var E201935 = Global_error{id: "201935", eType: EXPECTED_ERROR, message: "Other Document running number exist. "}
var E201936 = Global_error{id: "201936", eType: EXPECTED_ERROR, message: "Other Company product transaction does not exist. "}
var E201937 = Global_error{id: "201937", eType: EXPECTED_ERROR, message: "Other Company product transaction exist. "}
var E201938 = Global_error{id: "201938", eType: EXPECTED_ERROR, message: "Other Company product transaction is not effective or does not exist. "}
var E201939 = Global_error{id: "201939", eType: EXPECTED_ERROR, message: "Other Company product transaction is effective or does not exist. "}
var E201940 = Global_error{id: "201940", eType: EXPECTED_ERROR, message: "Other Transaction authorize does not exist. "}
var E201941 = Global_error{id: "201941", eType: EXPECTED_ERROR, message: "Other Transaction authorize exist. "}
var E201942 = Global_error{id: "201942", eType: EXPECTED_ERROR, message: "Other Credit note does not exist. "}
var E201943 = Global_error{id: "201943", eType: EXPECTED_ERROR, message: "Other Credit note exist. "}
var E201944 = Global_error{id: "201944", eType: EXPECTED_ERROR, message: "Other Cheque return does not exist. "}
var E201945 = Global_error{id: "201945", eType: EXPECTED_ERROR, message: "Other Cheque return exist. "}
var E201946 = Global_error{id: "201946", eType: EXPECTED_ERROR, message: "Other Receipt does not exist. "}
var E201947 = Global_error{id: "201947", eType: EXPECTED_ERROR, message: "Other Receipt exist. "}
var E201948 = Global_error{id: "201948", eType: EXPECTED_ERROR, message: "Other Cheque detail does not exist. "}
var E201949 = Global_error{id: "201949", eType: EXPECTED_ERROR, message: "Other Cheque detail exist. "}
var E201950 = Global_error{id: "201950", eType: EXPECTED_ERROR, message: "Amount should be greater than or equal zero. "}
var E201951 = Global_error{id: "201951", eType: EXPECTED_ERROR, message: "Unit should be greater than or equal zero. "}
var E201952 = Global_error{id: "201952", eType: EXPECTED_ERROR, message: "Unit value should be greater than zero. "}
var E201953 = Global_error{id: "201953", eType: EXPECTED_ERROR, message: "Invalid Indicator flag.. "}
var E201954 = Global_error{id: "201954", eType: EXPECTED_ERROR, message: "Invalid Print flag.. "}
var E201955 = Global_error{id: "201955", eType: EXPECTED_ERROR, message: "Document type code does not exist in PY_DOCM_TYPE table. "}
var E201956 = Global_error{id: "201956", eType: EXPECTED_ERROR, message: "Credit note type code does not exist in OT_TRNS_TYPE table. "}
var E201957 = Global_error{id: "201957", eType: EXPECTED_ERROR, message: "Transaction type code does not exist in OT_TRNS_TYPE table. "}
var E201958 = Global_error{id: "201958", eType: EXPECTED_ERROR, message: "Product code does not exist in OT_PROD_CODE table. "}
var E201959 = Global_error{id: "201959", eType: EXPECTED_ERROR, message: "Company code does not exist in OT_COMP_CODE table. "}
var E201960 = Global_error{id: "201960", eType: EXPECTED_ERROR, message: "Data group  does not exist in OT_TXAU table. "}
var E201961 = Global_error{id: "201961", eType: EXPECTED_ERROR, message: "Transaction group code does not exist in OT_TRNS_GRUP table. "}
var E201962 = Global_error{id: "201962", eType: EXPECTED_ERROR, message: "Receipt number  does not exist in OT_RCPT_HEDR table. "}
var E201963 = Global_error{id: "201963", eType: EXPECTED_ERROR, message: "Invalid Screen detail. "}
var E201964 = Global_error{id: "201964", eType: EXPECTED_ERROR, message: "Invalid Authorize screen user. "}
var E201965 = Global_error{id: "201965", eType: EXPECTED_ERROR, message: "Receipt quantity  should be greater than '0'. "}
var E201966 = Global_error{id: "201966", eType: EXPECTED_ERROR, message: "Cheque number does not exist. "}
var E201967 = Global_error{id: "201967", eType: EXPECTED_ERROR, message: "This cheque is cheque return. "}
var E201968 = Global_error{id: "201968", eType: EXPECTED_ERROR, message: "Cheque amount is less then pay amount. "}
var E201969 = Global_error{id: "201969", eType: EXPECTED_ERROR, message: "Cheque  number already exists. "}
var E201970 = Global_error{id: "201970", eType: EXPECTED_ERROR, message: "Company code already exists in OT_COMP_PDTP table. "}
var E201971 = Global_error{id: "201971", eType: EXPECTED_ERROR, message: "Company code already exists in OT_DOCM_RNNO table. "}
var E201972 = Global_error{id: "201972", eType: EXPECTED_ERROR, message: "Company code already exists in OT_COMP_CODE table. "}
var E201973 = Global_error{id: "201973", eType: EXPECTED_ERROR, message: "Product code already exists in OT_COMP_PDTP table. "}
var E201974 = Global_error{id: "201974", eType: EXPECTED_ERROR, message: "Product code already exists in OT_DOCM_RNNO table. "}
var E201975 = Global_error{id: "201975", eType: EXPECTED_ERROR, message: "Data group does not exist in SC_DATA_GRUP. "}
var E201976 = Global_error{id: "201976", eType: EXPECTED_ERROR, message: "Update CS_FRUD_CTRL failed. "}
var E201977 = Global_error{id: "201977", eType: EXPECTED_ERROR, message: "Inserting record into Fraud Manual table fails. "}
var E201978 = Global_error{id: "201978", eType: EXPECTED_ERROR, message: "Customer can not paid by cheque or credit card or cash in the same time. "}
var E201979 = Global_error{id: "201979", eType: EXPECTED_ERROR, message: "Invalid telephone type. "}
var E201980 = Global_error{id: "201980", eType: EXPECTED_ERROR, message: "Update failure acknowledgement. "}
var E201981 = Global_error{id: "201981", eType: EXPECTED_ERROR, message: "Other Transaction type does not exist. "}
var E201982 = Global_error{id: "201982", eType: EXPECTED_ERROR, message: "Special Number Package is not applicable to the subscriber. "}
var E201983 = Global_error{id: "201983", eType: EXPECTED_ERROR, message: "Total number of Special Number applicable must be greater than or equal to zero. "}
var E201984 = Global_error{id: "201984", eType: EXPECTED_ERROR, message: "TAPOUT Header does not exist. "}
var E201985 = Global_error{id: "201985", eType: EXPECTED_ERROR, message: "No TAPOUT detail record. "}
var E201986 = Global_error{id: "201986", eType: EXPECTED_ERROR, message: "Invalid Area Code. "}
var E201987 = Global_error{id: "201987", eType: EXPECTED_ERROR, message: "Telephone Number is a Free Number. "}
var E201988 = Global_error{id: "201988", eType: EXPECTED_ERROR, message: "There is no change in the data. "}
var E201989 = Global_error{id: "201989", eType: EXPECTED_ERROR, message: "Other receipt log already exists. "}
var E201990 = Global_error{id: "201990", eType: EXPECTED_ERROR, message: "Other receipt log does not exist. "}
var E201991 = Global_error{id: "201991", eType: EXPECTED_ERROR, message: "Arrears group does not exist. "}
var E201992 = Global_error{id: "201992", eType: EXPECTED_ERROR, message: "Arrears group detail cannot be retrieved. "}
var E201993 = Global_error{id: "201993", eType: EXPECTED_ERROR, message: "Arrears group is referred from Arrears Stage table, Cannot be deleted. "}
var E201994 = Global_error{id: "201994", eType: EXPECTED_ERROR, message: "Arrears group is referred from Arrears Transaction table, Cannot be deleted. "}
var E201995 = Global_error{id: "201995", eType: EXPECTED_ERROR, message: "Arrears group already exist. "}
var E201996 = Global_error{id: "201996", eType: EXPECTED_ERROR, message: "This receipt should not have document number. "}
var E201997 = Global_error{id: "201997", eType: EXPECTED_ERROR, message: "Version Number does not exist. "}
var E201998 = Global_error{id: "201998", eType: EXPECTED_ERROR, message: "Deposit balance does not exists. "}
var E201999 = Global_error{id: "201999", eType: EXPECTED_ERROR, message: "Data deposit swap for Customer number and subscriber number not found in table cs_subr_xxxx. "}
var E202000 = Global_error{id: "202000", eType: EXPECTED_ERROR, message: "Not found old customer number or old subscriber number. "}
var E202001 = Global_error{id: "202001", eType: EXPECTED_ERROR, message: "Hardware Status is invalid. "}
var E202002 = Global_error{id: "202002", eType: EXPECTED_ERROR, message: "Duplicate Deposit/Connection Receipt. "}
var E202003 = Global_error{id: "202003", eType: EXPECTED_ERROR, message: "Receive amount should be smaller than or equal to outstanding balance of cheque "}
var E202004 = Global_error{id: "202004", eType: EXPECTED_ERROR, message: "There are no packages available for transfer. "}
var E202005 = Global_error{id: "202005", eType: EXPECTED_ERROR, message: "Invalid check number flag, value should be '0' or '1'. "}
var E202006 = Global_error{id: "202006", eType: EXPECTED_ERROR, message: "Year in FROM_DATE and TO_DATE should be the same. "}
var E202007 = Global_error{id: "202007", eType: EXPECTED_ERROR, message: "Hardware status is normal. "}
var E202008 = Global_error{id: "202008", eType: EXPECTED_ERROR, message: "Live flag is not equal to not live. "}
var E202009 = Global_error{id: "202009", eType: EXPECTED_ERROR, message: "Invalid parent customer. "}
var E202010 = Global_error{id: "202010", eType: EXPECTED_ERROR, message: "Customer is not applicable for Group Customer. "}
var E202011 = Global_error{id: "202011", eType: EXPECTED_ERROR, message: "Invalid existing parent customer. "}
var E202012 = Global_error{id: "202012", eType: EXPECTED_ERROR, message: "Invalid child customer. "}
var E202013 = Global_error{id: "202013", eType: EXPECTED_ERROR, message: "Invalid New parent customer. "}
var E202014 = Global_error{id: "202014", eType: EXPECTED_ERROR, message: "Existing or new parent customer is invalid. "}
var E202015 = Global_error{id: "202015", eType: EXPECTED_ERROR, message: "Child customer and new parent customer cannot be same. "}
var E202016 = Global_error{id: "202016", eType: EXPECTED_ERROR, message: "New parent customer and existing parent customer cannot be same. "}
var E202017 = Global_error{id: "202017", eType: EXPECTED_ERROR, message: "Child customer and existing parent customer cannot be same. "}
var E202018 = Global_error{id: "202018", eType: EXPECTED_ERROR, message: "All the subscriber's under child customer are Switch Off Or Closed. "}
var E202019 = Global_error{id: "202019", eType: EXPECTED_ERROR, message: "All the subscriber's under new parent customer are Switch Off Or Closed. "}
var E202020 = Global_error{id: "202020", eType: EXPECTED_ERROR, message: "Child customer does not exist in Customer Billing information table. "}
var E202021 = Global_error{id: "202021", eType: EXPECTED_ERROR, message: "Existing leaf customer flag is inconsistent. "}
var E202022 = Global_error{id: "202022", eType: EXPECTED_ERROR, message: "This cheque is a cheque return or not enough money in the old cheque. "}
var E202023 = Global_error{id: "202023", eType: EXPECTED_ERROR, message: "Can not change Telephone Type of Dependent Package. "}
var E202024 = Global_error{id: "202024", eType: EXPECTED_ERROR, message: "Telephone Type of Dependent Package is inconsistent. "}
var E202025 = Global_error{id: "202025", eType: EXPECTED_ERROR, message: "Active / Authorized Source of Sale code is not found. "}
var E202026 = Global_error{id: "202026", eType: EXPECTED_ERROR, message: "TODAY less than run date. "}
var E202027 = Global_error{id: "202027", eType: EXPECTED_ERROR, message: "User name does not exist. "}
var E202028 = Global_error{id: "202028", eType: EXPECTED_ERROR, message: "User name and customer-subscriber should not have in condition at the same time. "}
var E202029 = Global_error{id: "202029", eType: EXPECTED_ERROR, message: "Found user name associate with cutomer and subscriber. "}
var E202030 = Global_error{id: "202030", eType: EXPECTED_ERROR, message: "No association between subscriber(s) and your username. "}
var E202031 = Global_error{id: "202031", eType: EXPECTED_ERROR, message: "This customer-subscriber has already associated with another username. "}
var E202032 = Global_error{id: "202032", eType: EXPECTED_ERROR, message: "Insert record into change pin table fail. "}
var E202033 = Global_error{id: "202033", eType: EXPECTED_ERROR, message: "No package is available to perform change promotion. "}
var E202034 = Global_error{id: "202034", eType: EXPECTED_ERROR, message: "Subscriber exceed the allowed transition period to change the promotion. "}
var E202035 = Global_error{id: "202035", eType: EXPECTED_ERROR, message: "Subscriber has changed its promotion and is not eligible for more than one time. "}
var E202036 = Global_error{id: "202036", eType: EXPECTED_ERROR, message: "Can't change promotion as currently subscriber is using Normal Package. "}
var E202037 = Global_error{id: "202037", eType: EXPECTED_ERROR, message: "Existing effective package and new package code is same. "}
var E202038 = Global_error{id: "202038", eType: EXPECTED_ERROR, message: "Can't change promotion as after changing, subscriber is not left with any promotion. "}
var E202039 = Global_error{id: "202039", eType: EXPECTED_ERROR, message: "Additional Credit Limit already exist "}
var E202040 = Global_error{id: "202040", eType: EXPECTED_ERROR, message: "Additional Credit Limit detail cannot be retrieved "}
var E202041 = Global_error{id: "202041", eType: EXPECTED_ERROR, message: "Additional Credit Limit does not exist "}
var E202042 = Global_error{id: "202042", eType: EXPECTED_ERROR, message: "Additional Credit Limit is currently effective "}
var E202043 = Global_error{id: "202043", eType: EXPECTED_ERROR, message: "Additional Credit Limit is currently not effective "}
var E202044 = Global_error{id: "202044", eType: EXPECTED_ERROR, message: "Error in reading first line. "}
var E202045 = Global_error{id: "202045", eType: EXPECTED_ERROR, message: "Can not close this location "}
var E202046 = Global_error{id: "202046", eType: EXPECTED_ERROR, message: "Address code already exists "}
var E202047 = Global_error{id: "202047", eType: EXPECTED_ERROR, message: "Address code does not exists "}
var E202048 = Global_error{id: "202048", eType: EXPECTED_ERROR, message: "Invalid customer MOD "}
var E202049 = Global_error{id: "202049", eType: EXPECTED_ERROR, message: "Telephone number cannot overlap. "}
var E202050 = Global_error{id: "202050", eType: EXPECTED_ERROR, message: "No Discount details found. "}
var E202051 = Global_error{id: "202051", eType: EXPECTED_ERROR, message: "New hardware number cannot be temporary hardware number. "}
var E202052 = Global_error{id: "202052", eType: EXPECTED_ERROR, message: "ESN of temporary hardware cannot be changed. "}
var E202053 = Global_error{id: "202053", eType: EXPECTED_ERROR, message: "Prompt subscribers are not eligable for additional services. "}
var E202054 = Global_error{id: "202054", eType: EXPECTED_ERROR, message: "You had entered the wrong password more than 5 times your username is locking now ,Please contact HELPDESK 31190. "}
var E202055 = Global_error{id: "202055", eType: EXPECTED_ERROR, message: "Group-Servlet exists. "}
var E202056 = Global_error{id: "202056", eType: EXPECTED_ERROR, message: "Group-Servlet does not exist. "}
var E202057 = Global_error{id: "202057", eType: EXPECTED_ERROR, message: "Servlet exists. "}
var E202058 = Global_error{id: "202058", eType: EXPECTED_ERROR, message: "Servlet does not exist. "}
var E202059 = Global_error{id: "202059", eType: EXPECTED_ERROR, message: "Cannot delete this servlet because it exists in Group-Servlet table. "}
var E202060 = Global_error{id: "202060", eType: EXPECTED_ERROR, message: "Customer and subscriber information (%s) is not correct. "}
var E202061 = Global_error{id: "202061", eType: EXPECTED_ERROR, message: "This customer and subscriber number have already registered by another username. "}
var E202062 = Global_error{id: "202062", eType: EXPECTED_ERROR, message: "Customer and subscriber has not yet registered. "}
var E202063 = Global_error{id: "202063", eType: EXPECTED_ERROR, message: "Password should be 4-8 characters long. "}
var E202064 = Global_error{id: "202064", eType: EXPECTED_ERROR, message: "Password should not be the same as any part of username, secret question or secret answer. "}
var E202065 = Global_error{id: "202065", eType: EXPECTED_ERROR, message: "Password must be composed of A-Z, a-z, 0-9 or special characters ( +, -, $, ...). "}
var E202066 = Global_error{id: "202066", eType: EXPECTED_ERROR, message: "You can send short messages to any WorldPhone 1800 mobile only. "}
var E202067 = Global_error{id: "202067", eType: EXPECTED_ERROR, message: "Username should be 6-12 characters long. "}
var E202068 = Global_error{id: "202068", eType: EXPECTED_ERROR, message: "Username must be composed of A-Z, a-z, or 0-9. "}
var E202069 = Global_error{id: "202069", eType: EXPECTED_ERROR, message: "Username already exists. "}
var E202070 = Global_error{id: "202070", eType: EXPECTED_ERROR, message: "Username does not exist. "}
var E202071 = Global_error{id: "202071", eType: EXPECTED_ERROR, message: "Group code does not exist. "}
var E202072 = Global_error{id: "202072", eType: EXPECTED_ERROR, message: "You are IEC's customer. Please visit http://www.iec.co.th "}
var E202073 = Global_error{id: "202073", eType: EXPECTED_ERROR, message: "IMSI Group can not be overlap. "}
var E202074 = Global_error{id: "202074", eType: EXPECTED_ERROR, message: "Invalid brand code. "}
var E202075 = Global_error{id: "202075", eType: EXPECTED_ERROR, message: "This is a temporary hardware, cannot be deleted "}
var E202076 = Global_error{id: "202076", eType: EXPECTED_ERROR, message: "Prefix belongs to other product "}
var E202077 = Global_error{id: "202077", eType: EXPECTED_ERROR, message: "Invalid external hardware flag. "}
var E202078 = Global_error{id: "202078", eType: EXPECTED_ERROR, message: "Invalid hardware number. "}
var E202079 = Global_error{id: "202079", eType: EXPECTED_ERROR, message: "Length of the brand code has to be 5 digits "}
var E202080 = Global_error{id: "202080", eType: EXPECTED_ERROR, message: "Last 2 digits of brand code has to '00' "}
var E202081 = Global_error{id: "202081", eType: EXPECTED_ERROR, message: "Length of the model code has to be 5 digits "}
var E202082 = Global_error{id: "202082", eType: EXPECTED_ERROR, message: "Hardware prefix already exists, but is expired "}
var E202083 = Global_error{id: "202083", eType: EXPECTED_ERROR, message: "First 3 digits of brand code and model code should be same "}
var E202084 = Global_error{id: "202084", eType: EXPECTED_ERROR, message: "Brand and Model code has to be numeric "}
var E202085 = Global_error{id: "202085", eType: EXPECTED_ERROR, message: "Password is not correct. Your user will be locked if you type incorrect password %d times. And now you type incorrect password %d times.<br>You will be login again at <a href='/bp3/bin/Index'>here</a> "}
var E202086 = Global_error{id: "202086", eType: EXPECTED_ERROR, message: "Model already exists for different product. "}
var E202087 = Global_error{id: "202087", eType: EXPECTED_ERROR, message: "Authorization Location code does not exist "}
var E202088 = Global_error{id: "202088", eType: EXPECTED_ERROR, message: "Wild Card Search is not supported with the first character "}
var E202089 = Global_error{id: "202089", eType: EXPECTED_ERROR, message: "Wild Card Search is not supported. "}
var E202090 = Global_error{id: "202090", eType: EXPECTED_ERROR, message: "Cannot send short message more than %d messages per month. "}
var E202091 = Global_error{id: "202091", eType: EXPECTED_ERROR, message: "Message is too long. "}
var E202092 = Global_error{id: "202092", eType: EXPECTED_ERROR, message: "Location code has been expired. "}
var E202093 = Global_error{id: "202093", eType: EXPECTED_ERROR, message: "Invalid parent dealer code. "}
var E202094 = Global_error{id: "202094", eType: EXPECTED_ERROR, message: "Customer and subscriber data is incomplete as the subscriber was registered through Quick Registration. "}
var E202095 = Global_error{id: "202095", eType: EXPECTED_ERROR, message: "User is not authorized to perform Quick Registration. "}
var E202096 = Global_error{id: "202096", eType: EXPECTED_ERROR, message: "Invalid ACTV_CUST value. "}
var E202097 = Global_error{id: "202097", eType: EXPECTED_ERROR, message: "No quickly registered subscriber found for this dealer "}
var E202098 = Global_error{id: "202098", eType: EXPECTED_ERROR, message: "Can not cancel receipt that receipt date is not in currently month "}
var E202099 = Global_error{id: "202099", eType: EXPECTED_ERROR, message: "Quick registration for Prompt subscriber is not allowed "}
var E202100 = Global_error{id: "202100", eType: EXPECTED_ERROR, message: "Customer billing information does not exist. "}
var E202101 = Global_error{id: "202101", eType: EXPECTED_ERROR, message: "No authorize to get/read the information of this customer. "}
var E202102 = Global_error{id: "202102", eType: EXPECTED_ERROR, message: "Dealer and Salesman combination does not exist "}
var E202103 = Global_error{id: "202103", eType: EXPECTED_ERROR, message: "Invalid dealer address. "}
var E202104 = Global_error{id: "202104", eType: EXPECTED_ERROR, message: "Additional Credit Limit amount must be less than or equal to Maximum Credit Limit value of your privilege. "}
var E202105 = Global_error{id: "202105", eType: EXPECTED_ERROR, message: "Additional Credit Limit amount must be greater than zero value. "}
var E202106 = Global_error{id: "202106", eType: EXPECTED_ERROR, message: "Can't perform Quick Registration, as there are other subscribers with in-complete data. "}
var E202107 = Global_error{id: "202107", eType: EXPECTED_ERROR, message: "Post Code does not exist "}
var E202108 = Global_error{id: "202108", eType: EXPECTED_ERROR, message: "Post Code already exists "}
var E202109 = Global_error{id: "202109", eType: EXPECTED_ERROR, message: "This record is already loaded. "}
var E202110 = Global_error{id: "202110", eType: EXPECTED_ERROR, message: "Cannot previous stage. "}
var E202111 = Global_error{id: "202111", eType: EXPECTED_ERROR, message: "Area Code already exists but is currently not active. "}
var E202112 = Global_error{id: "202112", eType: EXPECTED_ERROR, message: "Area Code already exists but is currently active. "}
var E202113 = Global_error{id: "202113", eType: EXPECTED_ERROR, message: "Area Code is already active on Area Prefix. "}
var E202114 = Global_error{id: "202114", eType: EXPECTED_ERROR, message: "Special Type does not exist. "}
var E202115 = Global_error{id: "202115", eType: EXPECTED_ERROR, message: "Special Type already exists. "}
var E202116 = Global_error{id: "202116", eType: EXPECTED_ERROR, message: "Invalid First 3 Digits of Prefix Number. "}
var E202117 = Global_error{id: "202117", eType: EXPECTED_ERROR, message: "Prefix Number with Area Code already exists. "}
var E202118 = Global_error{id: "202118", eType: EXPECTED_ERROR, message: "Prefix Number with Area Code does not exists. "}
var E202119 = Global_error{id: "202119", eType: EXPECTED_ERROR, message: "Prefix Number with Area Code already exists but is currently active. "}
var E202120 = Global_error{id: "202120", eType: EXPECTED_ERROR, message: "Prefix Number with Area Code already exists but is currently not active. "}
var E202121 = Global_error{id: "202121", eType: EXPECTED_ERROR, message: "Prefix Number is already active. "}
var E202122 = Global_error{id: "202122", eType: EXPECTED_ERROR, message: "Invalid First 3 Digits of Telephone Group. "}
var E202123 = Global_error{id: "202123", eType: EXPECTED_ERROR, message: "Invalid length of IMSI Prefix. "}
var E202124 = Global_error{id: "202124", eType: EXPECTED_ERROR, message: "Invalid length of Telephone Group. "}
var E202125 = Global_error{id: "202125", eType: EXPECTED_ERROR, message: "Overlapping range of Telephone Group. "}
var E202126 = Global_error{id: "202126", eType: EXPECTED_ERROR, message: "IMSI Prefix with Telephone Group already exists. "}
var E202127 = Global_error{id: "202127", eType: EXPECTED_ERROR, message: "IMSI Prefix with Telephone Group does not exist. "}
var E202128 = Global_error{id: "202128", eType: EXPECTED_ERROR, message: "IMSI Prefix with Telephone Group already exists but is currently not active. "}
var E202129 = Global_error{id: "202129", eType: EXPECTED_ERROR, message: "IMSI Prefix with Telephone Group already exists but is currently active. "}
var E202130 = Global_error{id: "202130", eType: EXPECTED_ERROR, message: "Total pay amount must be at least "}
var E202131 = Global_error{id: "202131", eType: EXPECTED_ERROR, message: "Minimum telephone length is 10 digits long. "}
var E202132 = Global_error{id: "202132", eType: EXPECTED_ERROR, message: "Special type is used for 'TEL' telephone type only. "}
var E202133 = Global_error{id: "202133", eType: EXPECTED_ERROR, message: "Special type does not exist. "}
var E202134 = Global_error{id: "202134", eType: EXPECTED_ERROR, message: "Invalid file format "}
var E202135 = Global_error{id: "202135", eType: EXPECTED_ERROR, message: "Invalid number of total record "}
var E202136 = Global_error{id: "202136", eType: EXPECTED_ERROR, message: "Amount of existent record and number of total record is mismatch "}
var E202137 = Global_error{id: "202137", eType: EXPECTED_ERROR, message: "Invalid Quota Amount "}
var E202138 = Global_error{id: "202138", eType: EXPECTED_ERROR, message: "Dealer Number and Area Code combination already exists. "}
var E202139 = Global_error{id: "202139", eType: EXPECTED_ERROR, message: "Dealer Number and Area Code combination does not exist. "}
var E202140 = Global_error{id: "202140", eType: EXPECTED_ERROR, message: "Telephone exists in  dealer reservation table, Cannot Delete ! "}
var E202141 = Global_error{id: "202141", eType: EXPECTED_ERROR, message: "Area Code is already exists on Dealer Quota, Cannot Deactivate. "}
var E202142 = Global_error{id: "202142", eType: EXPECTED_ERROR, message: "Print date must be greater than or equal. "}
var E202143 = Global_error{id: "202143", eType: EXPECTED_ERROR, message: "Subscriber's deposit has been refunded already, cannot be reconnected. "}
var E202144 = Global_error{id: "202144", eType: EXPECTED_ERROR, message: "Quota must not be greater than Maximum Quota "}
var E202145 = Global_error{id: "202145", eType: EXPECTED_ERROR, message: "Telephone exists with another product. "}
var E202146 = Global_error{id: "202146", eType: EXPECTED_ERROR, message: "Telephone is already mapped with a card. "}
var E202147 = Global_error{id: "202147", eType: EXPECTED_ERROR, message: "Telephone cannot be mapped with this card as telephone group is not found in IMSI Plan. "}
var E202148 = Global_error{id: "202148", eType: EXPECTED_ERROR, message: "IMSI prefix of this card is not found / not active in IMSI Plan. "}
var E202149 = Global_error{id: "202149", eType: EXPECTED_ERROR, message: "Telephone is mapped with another card. "}
var E202150 = Global_error{id: "202150", eType: EXPECTED_ERROR, message: "Telephone to be mapped with card cannot be Null. "}
var E202151 = Global_error{id: "202151", eType: EXPECTED_ERROR, message: "Invalid allocation type. "}
var E202152 = Global_error{id: "202152", eType: EXPECTED_ERROR, message: "Card is already associated with a telephone. "}
var E202153 = Global_error{id: "202153", eType: EXPECTED_ERROR, message: "Telephone does not require card. "}
var E202154 = Global_error{id: "202154", eType: EXPECTED_ERROR, message: "To Special Type is the same as From Special Type. "}
var E202155 = Global_error{id: "202155", eType: EXPECTED_ERROR, message: "Transaction type does not found in product trade "}
var E202156 = Global_error{id: "202156", eType: EXPECTED_ERROR, message: "Transaction type is not be master transaction type "}
var E202157 = Global_error{id: "202157", eType: EXPECTED_ERROR, message: "Transaction type can not be master transaction type "}
var E202158 = Global_error{id: "202158", eType: EXPECTED_ERROR, message: "Master transaction type already exists "}
var E202159 = Global_error{id: "202159", eType: EXPECTED_ERROR, message: "Master transaction type does not exist "}
var E202160 = Global_error{id: "202160", eType: EXPECTED_ERROR, message: "Existing IMSI number and Input IMSI number are not similar. "}
var E202161 = Global_error{id: "202161", eType: EXPECTED_ERROR, message: "Invalid number of occurrence. "}
var E202162 = Global_error{id: "202162", eType: EXPECTED_ERROR, message: "Invalid mapping/revoking flag. "}
var E202163 = Global_error{id: "202163", eType: EXPECTED_ERROR, message: "Card cannot be associated with more than one telephone. "}
var E202164 = Global_error{id: "202164", eType: EXPECTED_ERROR, message: "Similar telephone numbers are not allowed. "}
var E202165 = Global_error{id: "202165", eType: EXPECTED_ERROR, message: "Dealer is associated with a product that does not require card. "}
var E202166 = Global_error{id: "202166", eType: EXPECTED_ERROR, message: "You are not authorized to allocate this card. "}
var E202167 = Global_error{id: "202167", eType: EXPECTED_ERROR, message: "Length of FROM_CARD must be equal to that of TO_CARD. "}
var E202168 = Global_error{id: "202168", eType: EXPECTED_ERROR, message: "Number of records to be processed exceed limit. "}
var E202169 = Global_error{id: "202169", eType: EXPECTED_ERROR, message: "Card has been used to reserve a telephone. "}
var E202170 = Global_error{id: "202170", eType: EXPECTED_ERROR, message: "Invalid allocate gold flag "}
var E202171 = Global_error{id: "202171", eType: EXPECTED_ERROR, message: "Card should be mapped to telephone "}
var E202172 = Global_error{id: "202172", eType: EXPECTED_ERROR, message: "Invalid card allocation type. "}
var E202173 = Global_error{id: "202173", eType: EXPECTED_ERROR, message: "Card should not be allocated to a dealer "}
var E202174 = Global_error{id: "202174", eType: EXPECTED_ERROR, message: "Telephone is already reserved by a dealer "}
var E202175 = Global_error{id: "202175", eType: EXPECTED_ERROR, message: "Dealer and allocate type of the telephone are inconsistent "}
var E202176 = Global_error{id: "202176", eType: EXPECTED_ERROR, message: "Card has been used to reserve a telephone "}
var E202177 = Global_error{id: "202177", eType: EXPECTED_ERROR, message: "Invalid Inter Roaming Credit Limit amount. "}
var E202178 = Global_error{id: "202178", eType: EXPECTED_ERROR, message: "Inter Roaming Credit Limit Plan does not exist. "}
var E202179 = Global_error{id: "202179", eType: EXPECTED_ERROR, message: "Inter Roaming Credit limit Plan already exists. "}
var E202180 = Global_error{id: "202180", eType: EXPECTED_ERROR, message: "Inter Roaming Credit Limit Plan with stage details does not exist. "}
var E202181 = Global_error{id: "202181", eType: EXPECTED_ERROR, message: "Inter Roaming Credit Limit Stage does not exist. "}
var E202182 = Global_error{id: "202182", eType: EXPECTED_ERROR, message: "No record found in Inter Roaming Credit Limit Action. "}
var E202183 = Global_error{id: "202183", eType: EXPECTED_ERROR, message: "No record to delete for Inter Roaming Credit Limit Action History. "}
var E202184 = Global_error{id: "202184", eType: EXPECTED_ERROR, message: "No record to transfer for Inter Roaming Credit Limit Action. "}
var E202185 = Global_error{id: "202185", eType: EXPECTED_ERROR, message: "Inter Roaming Credit Limit Amount must be greater than or equal to zero. "}
var E202186 = Global_error{id: "202186", eType: EXPECTED_ERROR, message: "Inter Roaming Credit Limit Extract already exist. "}
var E202187 = Global_error{id: "202187", eType: EXPECTED_ERROR, message: "Inter Roaming Credit Limit Extract does not exist. "}
var E202188 = Global_error{id: "202188", eType: EXPECTED_ERROR, message: "No Stage exist. Cannot insert Inter Roaming Credit Limit Plan data without at least one stage. "}
var E202189 = Global_error{id: "202189", eType: EXPECTED_ERROR, message: "Inter Roaming Credit Limit Stage already exist. "}
var E202190 = Global_error{id: "202190", eType: EXPECTED_ERROR, message: "Inter Roaming Credit Limit Extract exists for this extract, cannot delete. "}
var E202191 = Global_error{id: "202191", eType: EXPECTED_ERROR, message: "Inter Roaming Credit Limit Action Extract exists for this extract, cannot delete. "}
var E202192 = Global_error{id: "202192", eType: EXPECTED_ERROR, message: "Inter Roaming Credit limit information for this subscriber does not found. "}
var E202193 = Global_error{id: "202193", eType: EXPECTED_ERROR, message: "No Inter Roaming Credit Limit Action history detail exists for this customer. "}
var E202194 = Global_error{id: "202194", eType: EXPECTED_ERROR, message: "No Inter Roaming Credit Limit History found. "}
var E202195 = Global_error{id: "202195", eType: EXPECTED_ERROR, message: "No Inter Roaming Credit Limit History Details found. "}
var E202196 = Global_error{id: "202196", eType: EXPECTED_ERROR, message: "Card is in use / has been used, cannot unload. "}
var E202197 = Global_error{id: "202197", eType: EXPECTED_ERROR, message: "Card is in use / has been used, cannot unload. "}
var E202198 = Global_error{id: "202198", eType: EXPECTED_ERROR, message: "User is not authorized to perform inquiry for the particular dealer. "}
var E202199 = Global_error{id: "202199", eType: EXPECTED_ERROR, message: "Dealer doesn't have quota for the particular area. "}
var E202200 = Global_error{id: "202200", eType: EXPECTED_ERROR, message: "There are no telephone numbers reserved against the particular dealer and area code. "}
var E202201 = Global_error{id: "202201", eType: EXPECTED_ERROR, message: "You are not authorized to deallocate this card. "}
var E202202 = Global_error{id: "202202", eType: EXPECTED_ERROR, message: "Card has not yet been allocated to a dealer. "}
var E202203 = Global_error{id: "202203", eType: EXPECTED_ERROR, message: "You are not authorized to deallocate this telephone number. "}
var E202204 = Global_error{id: "202204", eType: EXPECTED_ERROR, message: "Invalid deallocate gold flag "}
var E202205 = Global_error{id: "202205", eType: EXPECTED_ERROR, message: "Telephone belongs to another dealer "}
var E202206 = Global_error{id: "202206", eType: EXPECTED_ERROR, message: "Maximum Advance must be greater than or equal to 0 "}
var E202207 = Global_error{id: "202207", eType: EXPECTED_ERROR, message: "Total Additional Days must be greater than 0 "}
var E202208 = Global_error{id: "202208", eType: EXPECTED_ERROR, message: "There are no dealer for whom user can perform the particular task. "}
var E202209 = Global_error{id: "202209", eType: EXPECTED_ERROR, message: "Telephone allocation type and telephone type are inconsistent. "}
var E202210 = Global_error{id: "202210", eType: EXPECTED_ERROR, message: "Telephone allocation type of this gold telephone is invalid. "}
var E202211 = Global_error{id: "202211", eType: EXPECTED_ERROR, message: "Telephone allocation type of this special telephone is invalid. "}
var E202212 = Global_error{id: "202212", eType: EXPECTED_ERROR, message: "Telephone allocation type and dealer are inconsistent. "}
var E202213 = Global_error{id: "202213", eType: EXPECTED_ERROR, message: "Telephone has not yet been reserved by a dealer. "}
var E202214 = Global_error{id: "202214", eType: EXPECTED_ERROR, message: "Incomplete input data "}
var E202215 = Global_error{id: "202215", eType: EXPECTED_ERROR, message: "User is not authorized to unreserve telephone for the particular dealer. "}
var E202216 = Global_error{id: "202216", eType: EXPECTED_ERROR, message: "Telephone data is inconsistent as per its allocation type. "}
var E202217 = Global_error{id: "202217", eType: EXPECTED_ERROR, message: "Card data is inconsistent as per its allocation type. "}
var E202218 = Global_error{id: "202218", eType: EXPECTED_ERROR, message: "Dealer is not the owner of the telephone. "}
var E202219 = Global_error{id: "202219", eType: EXPECTED_ERROR, message: "Telephone does not belong to the dealer. "}
var E202220 = Global_error{id: "202220", eType: EXPECTED_ERROR, message: "User is not authorized "}
var E202221 = Global_error{id: "202221", eType: EXPECTED_ERROR, message: "No area available to execute the function "}
var E202222 = Global_error{id: "202222", eType: EXPECTED_ERROR, message: "Web payment with invoice allocation does not exist "}
var E202223 = Global_error{id: "202223", eType: EXPECTED_ERROR, message: "Customer does not exist in Customer Payment Information table "}
var E202224 = Global_error{id: "202224", eType: EXPECTED_ERROR, message: "You are not authorized to book telephone. "}
var E202225 = Global_error{id: "202225", eType: EXPECTED_ERROR, message: "You are not authorized to unbook telephone. "}
var E202226 = Global_error{id: "202226", eType: EXPECTED_ERROR, message: "Telephone is not applicable for unbooking. "}
var E202227 = Global_error{id: "202227", eType: EXPECTED_ERROR, message: "Invalid unbooked reason code. "}
var E202228 = Global_error{id: "202228", eType: EXPECTED_ERROR, message: "You are not authorized to complete booking of telephone. "}
var E202229 = Global_error{id: "202229", eType: EXPECTED_ERROR, message: "Number of telephone requested to be reserved can not be zero. "}
var E202230 = Global_error{id: "202230", eType: EXPECTED_ERROR, message: "User is not authorized to reserve telephone for the particular dealer. "}
var E202231 = Global_error{id: "202231", eType: EXPECTED_ERROR, message: "Dealer is not been allocated with quota for the particular area. "}
var E202232 = Global_error{id: "202232", eType: EXPECTED_ERROR, message: "Dealer has already reserved all the telephone numbers as per its quota. "}
var E202233 = Global_error{id: "202233", eType: EXPECTED_ERROR, message: "Requested quota exceeds the numbers allowed per transaction. "}
var E202234 = Global_error{id: "202234", eType: EXPECTED_ERROR, message: "Request for the number of telephone to be reserved exceeds the dealer's balance quota. "}
var E202235 = Global_error{id: "202235", eType: EXPECTED_ERROR, message: "Can't reserve, as there are no more numbers left for the particular area. "}
var E202236 = Global_error{id: "202236", eType: EXPECTED_ERROR, message: "Only partial quota could be reserved, as the numbers for the particular area got exhausted. "}
var E202237 = Global_error{id: "202237", eType: EXPECTED_ERROR, message: "Dealer is not the owner of the card. "}
var E202238 = Global_error{id: "202238", eType: EXPECTED_ERROR, message: "Telephone is already reserved against this card number. "}
var E202239 = Global_error{id: "202239", eType: EXPECTED_ERROR, message: "No telephone group assigned for the card. "}
var E202240 = Global_error{id: "202240", eType: EXPECTED_ERROR, message: "DB Error encountered, few cards are processed, check the details for its status. "}
var E202241 = Global_error{id: "202241", eType: EXPECTED_ERROR, message: "Telephone group is not found in IMSI plan. "}
var E202242 = Global_error{id: "202242", eType: EXPECTED_ERROR, message: "Telephone's special type is not as same as FROM special type. "}
var E202243 = Global_error{id: "202243", eType: EXPECTED_ERROR, message: "Telephone's type is not as same as FROM type. "}
var E202244 = Global_error{id: "202244", eType: EXPECTED_ERROR, message: "Invalid telephone allocate type. "}
var E202245 = Global_error{id: "202245", eType: EXPECTED_ERROR, message: "Card of this telephone is currently allocated to dealer. "}
var E202246 = Global_error{id: "202246", eType: EXPECTED_ERROR, message: "Dealer associated with the card is invalid. "}
var E202247 = Global_error{id: "202247", eType: EXPECTED_ERROR, message: "Registration form of the subscriber has not yet been processed. "}
var E202248 = Global_error{id: "202248", eType: EXPECTED_ERROR, message: "Registration form for this subscriber is ready to be printed. "}
var E202249 = Global_error{id: "202249", eType: EXPECTED_ERROR, message: "Prompt subscriber is not allowed for this transaction type. "}
var E202250 = Global_error{id: "202250", eType: EXPECTED_ERROR, message: "New switch off reason is same as the Old switch off reason. "}
var E202251 = Global_error{id: "202251", eType: EXPECTED_ERROR, message: "Details of Old and New switch off reason codes are not similar. "}
var E202252 = Global_error{id: "202252", eType: EXPECTED_ERROR, message: "Current subscriber wasn't added from change owner. "}
var E202253 = Global_error{id: "202253", eType: EXPECTED_ERROR, message: "Current subscriber is already closed. "}
var E202254 = Global_error{id: "202254", eType: EXPECTED_ERROR, message: "Current subscriber has already swapped number / product. "}
var E202255 = Global_error{id: "202255", eType: EXPECTED_ERROR, message: "Current subscriber's deposit has been refunded already. "}
var E202256 = Global_error{id: "202256", eType: EXPECTED_ERROR, message: "Old subscriber is already closed. "}
var E202257 = Global_error{id: "202257", eType: EXPECTED_ERROR, message: "The old subscriber wasn't switched off by change owner. "}
var E202258 = Global_error{id: "202258", eType: EXPECTED_ERROR, message: "Old subscriber's deposit has been refunded already. "}
var E202259 = Global_error{id: "202259", eType: EXPECTED_ERROR, message: "Current subscriber has already changed switch on reason code. "}
var E202260 = Global_error{id: "202260", eType: EXPECTED_ERROR, message: "No country code is available to execute the function. "}
var E202261 = Global_error{id: "202261", eType: EXPECTED_ERROR, message: "No occupation type is available to execute the function. "}
var E202262 = Global_error{id: "202262", eType: EXPECTED_ERROR, message: "No identification type is available to execute the function. "}
var E202263 = Global_error{id: "202263", eType: EXPECTED_ERROR, message: "Add subscriber through Web is not supported for Single product. "}
var E202264 = Global_error{id: "202264", eType: EXPECTED_ERROR, message: "Customer and subscriber already have registered. "}
var E202265 = Global_error{id: "202265", eType: EXPECTED_ERROR, message: "User does not register any subscriber. "}
var E202266 = Global_error{id: "202266", eType: EXPECTED_ERROR, message: "User already registered customer-subscriber. "}
var E202267 = Global_error{id: "202267", eType: EXPECTED_ERROR, message: "Select register type and customer type are difference. "}
var E202268 = Global_error{id: "202268", eType: EXPECTED_ERROR, message: "Cannot delete detail when insert data into master table. "}
var E202269 = Global_error{id: "202269", eType: EXPECTED_ERROR, message: "Old and New switch on reason types are not similar. "}
var E202270 = Global_error{id: "202270", eType: EXPECTED_ERROR, message: "Switch on date can not later than today. "}
var E202271 = Global_error{id: "202271", eType: EXPECTED_ERROR, message: "Print Date does not exists. "}
var E202272 = Global_error{id: "202272", eType: EXPECTED_ERROR, message: "No data found for newly registered subscriber report. "}
var E202273 = Global_error{id: "202273", eType: EXPECTED_ERROR, message: "Switch on date cannot be less than First Time Report Printing Date. "}
var E202274 = Global_error{id: "202274", eType: EXPECTED_ERROR, message: "Web Group code does not exist. "}
var E202275 = Global_error{id: "202275", eType: EXPECTED_ERROR, message: "Invalid Group Type. "}
var E202276 = Global_error{id: "202276", eType: EXPECTED_ERROR, message: "User exist for this Web Group. Cannot delete. "}
var E202277 = Global_error{id: "202277", eType: EXPECTED_ERROR, message: "Group-Screen-Operation combination already exist. "}
var E202278 = Global_error{id: "202278", eType: EXPECTED_ERROR, message: "User exist for this Group. Cannot change Group Type. "}
var E202279 = Global_error{id: "202279", eType: EXPECTED_ERROR, message: "There is no telephone number reserved against the particular card number. "}
var E202280 = Global_error{id: "202280", eType: EXPECTED_ERROR, message: "Card exceeds the allowed transition period to change its live flag. "}
var E202281 = Global_error{id: "202281", eType: EXPECTED_ERROR, message: "Invalid Waive Period. "}
var E202282 = Global_error{id: "202282", eType: EXPECTED_ERROR, message: "Cannot clear switch off date from Temporary Hardware. "}
var E202283 = Global_error{id: "202283", eType: EXPECTED_ERROR, message: "Hardware is in use. "}
var E202284 = Global_error{id: "202284", eType: EXPECTED_ERROR, message: "Subscriber information is not consistent with its status. "}
var E202285 = Global_error{id: "202285", eType: EXPECTED_ERROR, message: "Failure while calculating date difference. "}
var E202286 = Global_error{id: "202286", eType: EXPECTED_ERROR, message: "Cannot clear switch off date because hardware has been used longer than allowed period. "}
var E202287 = Global_error{id: "202287", eType: EXPECTED_ERROR, message: "Date of decision can not be greater than today. "}
var E202288 = Global_error{id: "202288", eType: EXPECTED_ERROR, message: "Dealer must use TAC Hardware. "}
var E202289 = Global_error{id: "202289", eType: EXPECTED_ERROR, message: "Invalid import by. "}
var E202290 = Global_error{id: "202290", eType: EXPECTED_ERROR, message: "Invalid Source of Sales code for used hardware. "}
var E202291 = Global_error{id: "202291", eType: EXPECTED_ERROR, message: "Cannot inquire history of Temporary hardware. "}
var E202292 = Global_error{id: "202292", eType: EXPECTED_ERROR, message: "Hardware is used in many products. "}
var E202293 = Global_error{id: "202293", eType: EXPECTED_ERROR, message: "Hardware number is a reused hardware. "}
var E202294 = Global_error{id: "202294", eType: EXPECTED_ERROR, message: "Hardware is not a reused hardware. "}
var E202295 = Global_error{id: "202295", eType: EXPECTED_ERROR, message: "More than one record exists. "}
var E202296 = Global_error{id: "202296", eType: EXPECTED_ERROR, message: "AMPS switch on reason for default source of sale does not exist. "}
var E202297 = Global_error{id: "202297", eType: EXPECTED_ERROR, message: "PCN switch on reason for default source of sale does not exist. "}
var E202298 = Global_error{id: "202298", eType: EXPECTED_ERROR, message: "Telephone is not PROMPT "}
var E202299 = Global_error{id: "202299", eType: EXPECTED_ERROR, message: "Telephone number live flag is not equal to 'Y' or 'N'. "}
var E202300 = Global_error{id: "202300", eType: EXPECTED_ERROR, message: "Cannot register PROMPT is another product. "}
var E202301 = Global_error{id: "202301", eType: EXPECTED_ERROR, message: "Cannot find hardware number for this AMPS telephone number "}
var E202302 = Global_error{id: "202302", eType: EXPECTED_ERROR, message: "Cannot find hardware number for this PCN telephone number "}
var E202303 = Global_error{id: "202303", eType: EXPECTED_ERROR, message: "Unexpected error from Tuxedo. "}
var E202304 = Global_error{id: "202304", eType: EXPECTED_ERROR, message: "There are no more telephone number left for this card. "}
var E202305 = Global_error{id: "202305", eType: EXPECTED_ERROR, message: "Invalid clear call profile value. "}
var E202306 = Global_error{id: "202306", eType: EXPECTED_ERROR, message: "Company Code already expired, cannot update. "}
var E202307 = Global_error{id: "202307", eType: EXPECTED_ERROR, message: "Update CS_PMPT_SMS Failed. "}
var E202308 = Global_error{id: "202308", eType: EXPECTED_ERROR, message: "Customer number can not be NULL. "}
var E202309 = Global_error{id: "202309", eType: EXPECTED_ERROR, message: "Company already exists but is currently not effective. "}
var E202310 = Global_error{id: "202310", eType: EXPECTED_ERROR, message: "Company already exists but is currently effective. "}
var E202311 = Global_error{id: "202311", eType: EXPECTED_ERROR, message: "User name already existed. Please use another name. "}
var E202312 = Global_error{id: "202312", eType: EXPECTED_ERROR, message: "Mobile phone number or Customer account number is not correct. "}
var E202313 = Global_error{id: "202313", eType: EXPECTED_ERROR, message: "The mobile you are registering has been registered by another user. If you are the owner of the mobile phone and wish to register on another username, please call 1817 with your mobile phone to unregister the mobile number before register again. "}
var E202314 = Global_error{id: "202314", eType: EXPECTED_ERROR, message: "Post code is not correct. "}
var E202315 = Global_error{id: "202315", eType: EXPECTED_ERROR, message: "User is not authorized to use this card. "}
var E202316 = Global_error{id: "202316", eType: EXPECTED_ERROR, message: "Prefix number is with more than one active area code. "}
var E202317 = Global_error{id: "202317", eType: EXPECTED_ERROR, message: "You have not gotten Reset Code from calling 1817. Please call 1817 to acquire your Reset Code. "}
var E202318 = Global_error{id: "202318", eType: EXPECTED_ERROR, message: "Your Reset Code will be expired, if you mistype the Reset Code 5 times. Now you have mistyped the Reset Code %ld times. "}
var E202319 = Global_error{id: "202319", eType: EXPECTED_ERROR, message: "Your Reset Code has been expired because you have mistyped the Reset Code more than 5 times or have received the Reset Code code for longer than 15 minutes. Please call 1817 to acquire a new Reset Code. "}
var E202320 = Global_error{id: "202320", eType: EXPECTED_ERROR, message: "Transaction of customer marked query. "}
var E202321 = Global_error{id: "202321", eType: EXPECTED_ERROR, message: "Subscriber's deposit has been refunded already. "}
var E202322 = Global_error{id: "202322", eType: EXPECTED_ERROR, message: "Reused hardware is not allowed to use for migrate subscriber from AMPS to PCN "}
var E202323 = Global_error{id: "202323", eType: EXPECTED_ERROR, message: "Telephone types are not similar. "}
var E202324 = Global_error{id: "202324", eType: EXPECTED_ERROR, message: "No package found for migration. "}
var E202325 = Global_error{id: "202325", eType: EXPECTED_ERROR, message: "Invalid mapped package for migration. "}
var E202326 = Global_error{id: "202326", eType: EXPECTED_ERROR, message: "Clear the outstanding amount before migration "}
var E202327 = Global_error{id: "202327", eType: EXPECTED_ERROR, message: "Reason code does not exist. "}
var E202328 = Global_error{id: "202328", eType: EXPECTED_ERROR, message: "Status and reject reason does not match. "}
var E202329 = Global_error{id: "202329", eType: EXPECTED_ERROR, message: "Transaction date should be earlier than today. "}
var E202330 = Global_error{id: "202330", eType: EXPECTED_ERROR, message: "No record detail in data file. "}
var E202331 = Global_error{id: "202331", eType: EXPECTED_ERROR, message: "Account number does not exist. "}
var E202332 = Global_error{id: "202332", eType: EXPECTED_ERROR, message: "Subscriber has already changed its Base Package for the stipulated times allowed "}
var E202333 = Global_error{id: "202333", eType: EXPECTED_ERROR, message: "File format is not correct. "}
var E202334 = Global_error{id: "202334", eType: EXPECTED_ERROR, message: "Record does not send to bank. "}
var E202335 = Global_error{id: "202335", eType: EXPECTED_ERROR, message: "Transaction amount in data file is not equal to total amount in database. "}
var E202336 = Global_error{id: "202336", eType: EXPECTED_ERROR, message: "Black listed Customer is not allowed to do this transaction. "}
var E202337 = Global_error{id: "202337", eType: EXPECTED_ERROR, message: "Effective date mute be equal expr_date in last record plus 1 "}
var E202338 = Global_error{id: "202338", eType: EXPECTED_ERROR, message: "Location Access Authorization already exist "}
var E202339 = Global_error{id: "202339", eType: EXPECTED_ERROR, message: "Location Access Authorization does not exist "}
var E202340 = Global_error{id: "202340", eType: EXPECTED_ERROR, message: "Your location want to select the Deposit format 'Cust_Numb,Subr_Numb,Reference'. "}
var E202341 = Global_error{id: "202341", eType: EXPECTED_ERROR, message: "Subscriber Base Package Information does not exist. "}
var E202342 = Global_error{id: "202342", eType: EXPECTED_ERROR, message: "Reference number already exists and record status is fail. "}
var E202343 = Global_error{id: "202343", eType: EXPECTED_ERROR, message: "Prepaid subscribers are not allowed to change Base Package. "}
var E202344 = Global_error{id: "202344", eType: EXPECTED_ERROR, message: "New package should be of Base Package type. "}
var E202345 = Global_error{id: "202345", eType: EXPECTED_ERROR, message: "You have entered the wrong password for 3 times. Your user name will be locked for 1 day, please try again tomorrow. "}
var E202346 = Global_error{id: "202346", eType: EXPECTED_ERROR, message: "Invalid Marital Status. "}
var E202347 = Global_error{id: "202347", eType: EXPECTED_ERROR, message: "Number of Children must be greater or equal to zero. "}
var E202348 = Global_error{id: "202348", eType: EXPECTED_ERROR, message: "Number of Family member must be greater or equal to zero. "}
var E202349 = Global_error{id: "202349", eType: EXPECTED_ERROR, message: "Allow to publish the information should be Yes or No. "}
var E202350 = Global_error{id: "202350", eType: EXPECTED_ERROR, message: "Invalid Salary Level. "}
var E202351 = Global_error{id: "202351", eType: EXPECTED_ERROR, message: "Can't reserve, Due to high concurrency, Please try again. "}
var E202352 = Global_error{id: "202352", eType: EXPECTED_ERROR, message: "Receipt Date mute be today. "}
var E202353 = Global_error{id: "202353", eType: EXPECTED_ERROR, message: "Cycle invalided. "}
var E202354 = Global_error{id: "202354", eType: EXPECTED_ERROR, message: "Can not use this menu. "}
var E202355 = Global_error{id: "202355", eType: EXPECTED_ERROR, message: "Invalid Discount plan code. "}
var E202356 = Global_error{id: "202356", eType: EXPECTED_ERROR, message: "Can't extend the expire date of contract number. "}
var E202357 = Global_error{id: "202357", eType: EXPECTED_ERROR, message: "This Contract Number already exist. "}
var E202358 = Global_error{id: "202358", eType: EXPECTED_ERROR, message: "Child customer does not exist in Customer Debt Control information table. "}
var E202359 = Global_error{id: "202359", eType: EXPECTED_ERROR, message: "Customer does not exist in Corperate sales table. "}
var E202360 = Global_error{id: "202360", eType: EXPECTED_ERROR, message: "Occupation code already exists but is not currently active. "}
var E202361 = Global_error{id: "202361", eType: EXPECTED_ERROR, message: "Occupation code already exists but is currently active. "}
var E202362 = Global_error{id: "202362", eType: EXPECTED_ERROR, message: "Credit Limit Amount must be less than or equal to Default Maximum Credit Limit Amount. "}
var E202363 = Global_error{id: "202363", eType: EXPECTED_ERROR, message: "Telephone Number is not active. "}
var E202364 = Global_error{id: "202364", eType: EXPECTED_ERROR, message: "Customer does not exist or subscriber status is not applicable for change Credit Limit. "}
var E202365 = Global_error{id: "202365", eType: EXPECTED_ERROR, message: "Group Bill can not change Credit Limit Amount. "}
var E202366 = Global_error{id: "202366", eType: EXPECTED_ERROR, message: "Milinium Source of Sales can't increase Credit Limit Amount.�١��ҷ���� Milinium Source of Sales. "}
var E202367 = Global_error{id: "202367", eType: EXPECTED_ERROR, message: "Prepaid subscriber can't change Credit Limit amount. "}
var E202368 = Global_error{id: "202368", eType: EXPECTED_ERROR, message: "Amps product can't change Credit Limit amount. "}
var E202369 = Global_error{id: "202369", eType: EXPECTED_ERROR, message: "Single product can't change Credit Limit amount. "}
var E202370 = Global_error{id: "202370", eType: EXPECTED_ERROR, message: "Contract is null,don't allow to give discount to the corperate. "}
var E202371 = Global_error{id: "202371", eType: EXPECTED_ERROR, message: "Update CS_ADEX_PKPL failed. "}
var E202372 = Global_error{id: "202372", eType: EXPECTED_ERROR, message: "Status of the subscriber is Switch Off or Close. "}
var E202373 = Global_error{id: "202373", eType: EXPECTED_ERROR, message: "This number cannot be migrated. "}
var E202374 = Global_error{id: "202374", eType: EXPECTED_ERROR, message: "Invalid length of Subscriber Number. "}
var E202375 = Global_error{id: "202375", eType: EXPECTED_ERROR, message: "Invalid discount method. "}
var E202376 = Global_error{id: "202376", eType: EXPECTED_ERROR, message: "Invalid discount amount. "}
var E202377 = Global_error{id: "202377", eType: EXPECTED_ERROR, message: "Phone group are limited to maximum 5 groups. "}
var E202378 = Global_error{id: "202378", eType: EXPECTED_ERROR, message: "Phone book are limited to maximum 10 members. "}
var E202379 = Global_error{id: "202379", eType: EXPECTED_ERROR, message: "Message box are limited to maximum 50 messages. "}
var E202380 = Global_error{id: "202380", eType: EXPECTED_ERROR, message: "Reused hardware is not allowed for migration. "}
var E202381 = Global_error{id: "202381", eType: EXPECTED_ERROR, message: "Cannot add additional credit limit for fruad black list customers. "}
var E202382 = Global_error{id: "202382", eType: EXPECTED_ERROR, message: "Cannot change credit limit for fruad black list customers. "}
var E202383 = Global_error{id: "202383", eType: EXPECTED_ERROR, message: "Cannot add credit note for fruad black list customers. "}
var E202384 = Global_error{id: "202384", eType: EXPECTED_ERROR, message: "Leasing subscriber can not do swap product. "}
var E202385 = Global_error{id: "202385", eType: EXPECTED_ERROR, message: "Invalid BLCK_FLAG. "}
var E202386 = Global_error{id: "202386", eType: EXPECTED_ERROR, message: "Invalid Reconnection Fee Flag. "}
var E202387 = Global_error{id: "202387", eType: EXPECTED_ERROR, message: "Invalid Stop Bill Flag. "}
var E202388 = Global_error{id: "202388", eType: EXPECTED_ERROR, message: "Invalid Voluntary Flag. "}
var E202389 = Global_error{id: "202389", eType: EXPECTED_ERROR, message: "Invalid Update EIR. "}
var E202390 = Global_error{id: "202390", eType: EXPECTED_ERROR, message: "Invalid Discount Bill Flag. "}
var E202391 = Global_error{id: "202391", eType: EXPECTED_ERROR, message: "Invalid length of telephone number. "}
var E202392 = Global_error{id: "202392", eType: EXPECTED_ERROR, message: "Invalid suspend discount package. "}
var E202393 = Global_error{id: "202393", eType: EXPECTED_ERROR, message: "Leasing subscriber can not increase Credit limit. "}
var E202394 = Global_error{id: "202394", eType: EXPECTED_ERROR, message: "Invalid duration per unit. "}
var E202395 = Global_error{id: "202395", eType: EXPECTED_ERROR, message: "TO and FROM Special types must be of similar telephone types. "}
var E202396 = Global_error{id: "202396", eType: EXPECTED_ERROR, message: "Telephone type is inconsistent with special type. "}
var E202397 = Global_error{id: "202397", eType: EXPECTED_ERROR, message: "Special type of Starter and Phone Kit cannot be blank. "}
var E202398 = Global_error{id: "202398", eType: EXPECTED_ERROR, message: "Product code and telephone type are inconsistent. "}
var E202399 = Global_error{id: "202399", eType: EXPECTED_ERROR, message: "Subscriber Type already exists. "}
var E202400 = Global_error{id: "202400", eType: EXPECTED_ERROR, message: "Subscriber Type does not exist. "}
var E202401 = Global_error{id: "202401", eType: EXPECTED_ERROR, message: "Telephone Type is inconsistent with Subscriber Type. "}
var E202402 = Global_error{id: "202402", eType: EXPECTED_ERROR, message: "Subscriber Type of Dependent Package is inconsistent. "}
var E202403 = Global_error{id: "202403", eType: EXPECTED_ERROR, message: "EIS Source of Sales group does not exist. "}
var E202404 = Global_error{id: "202404", eType: EXPECTED_ERROR, message: "EIS Source of Sales group already exists. "}
var E202405 = Global_error{id: "202405", eType: EXPECTED_ERROR, message: "Invalid Subscriber Type indicator. "}
var E202406 = Global_error{id: "202406", eType: EXPECTED_ERROR, message: "You must select tranfer deposit option. "}
var E202407 = Global_error{id: "202407", eType: EXPECTED_ERROR, message: "All subscribers of customer have already been switched off. "}
var E202408 = Global_error{id: "202408", eType: EXPECTED_ERROR, message: "Invalid Subscriber Type. "}
var E202409 = Global_error{id: "202409", eType: EXPECTED_ERROR, message: "Subscriber Type must be null. "}
var E202410 = Global_error{id: "202410", eType: EXPECTED_ERROR, message: "Please view call detail from Sales Ledger / Invoice. "}
var E202411 = Global_error{id: "202411", eType: EXPECTED_ERROR, message: "Invalid Sale flag. "}
var E202412 = Global_error{id: "202412", eType: EXPECTED_ERROR, message: "Analysis Code already exists. "}
var E202413 = Global_error{id: "202413", eType: EXPECTED_ERROR, message: "Analysis Code does not exist. "}
var E202414 = Global_error{id: "202414", eType: EXPECTED_ERROR, message: "Data already exists for this transaction date. "}
var E202415 = Global_error{id: "202415", eType: EXPECTED_ERROR, message: "No data found to run EIS Accum Process. "}
var E202416 = Global_error{id: "202416", eType: EXPECTED_ERROR, message: "Invalid Payment Method Code. "}
var E202417 = Global_error{id: "202417", eType: EXPECTED_ERROR, message: "Deposit return flag must be 'M'. "}
var E202418 = Global_error{id: "202418", eType: EXPECTED_ERROR, message: "Invalid length of Account Number. "}
var E202419 = Global_error{id: "202419", eType: EXPECTED_ERROR, message: "Account detail for deposit return is not found. "}
var E202420 = Global_error{id: "202420", eType: EXPECTED_ERROR, message: "IMSI Group of this telephone can not be changed. "}
var E202421 = Global_error{id: "202421", eType: EXPECTED_ERROR, message: "IMSI Group of the telephone is not equal to FROM IMSI Group. "}
var E202422 = Global_error{id: "202422", eType: EXPECTED_ERROR, message: "FROM IMSI Group should not  be equal to TO IMSI Group. "}
var E202423 = Global_error{id: "202423", eType: EXPECTED_ERROR, message: "All telephone does not exist or All telephone are AMPS "}
var E202424 = Global_error{id: "202424", eType: EXPECTED_ERROR, message: "IMSI Prefix does not exist. "}
var E202425 = Global_error{id: "202425", eType: EXPECTED_ERROR, message: "Invalid IMSI Group. "}
var E202426 = Global_error{id: "202426", eType: EXPECTED_ERROR, message: "IMSI Group does not exist. "}
var E202427 = Global_error{id: "202427", eType: EXPECTED_ERROR, message: "Telephone exists with another IMSI Group. "}
var E202428 = Global_error{id: "202428", eType: EXPECTED_ERROR, message: "IMSI Group already exists. "}
var E202429 = Global_error{id: "202429", eType: EXPECTED_ERROR, message: "This recommendee has already been processed. "}
var E202430 = Global_error{id: "202430", eType: EXPECTED_ERROR, message: "Recommender must be switched on before recommended Subscriber. "}
var E202431 = Global_error{id: "202431", eType: EXPECTED_ERROR, message: "Recommended Subscriber must be switched on during Member get Member period. "}
var E202432 = Global_error{id: "202432", eType: EXPECTED_ERROR, message: "Recommended Subscriber might have been changed owner, swapped number or product. "}
var E202433 = Global_error{id: "202433", eType: EXPECTED_ERROR, message: "Recommender can not be IEC product. "}
var E202434 = Global_error{id: "202434", eType: EXPECTED_ERROR, message: "Area Code is already used with Telephone, Cannot Deactivate "}
var E202435 = Global_error{id: "202435", eType: EXPECTED_ERROR, message: "Recommended Subscriber does not exist. "}
var E202436 = Global_error{id: "202436", eType: EXPECTED_ERROR, message: "Account Number must be numeric. "}
var E202437 = Global_error{id: "202437", eType: EXPECTED_ERROR, message: "Telephone must be preactivated first. "}
var E202438 = Global_error{id: "202438", eType: EXPECTED_ERROR, message: "Invalid data from IN. "}
var E202439 = Global_error{id: "202439", eType: EXPECTED_ERROR, message: "Invalid promotion amount. "}
var E202440 = Global_error{id: "202440", eType: EXPECTED_ERROR, message: "Invalid action type. "}
var E202441 = Global_error{id: "202441", eType: EXPECTED_ERROR, message: "FROM_AREA should not be equal to TO_AREA. "}
var E202442 = Global_error{id: "202442", eType: EXPECTED_ERROR, message: "Area code of the telephone is not equal to FROM_AREA. "}
var E202443 = Global_error{id: "202443", eType: EXPECTED_ERROR, message: "Telephone number is currently in not switch off state. "}
var E202444 = Global_error{id: "202444", eType: EXPECTED_ERROR, message: "Subcriber number is currently in not switch off state. "}
var E202445 = Global_error{id: "202445", eType: EXPECTED_ERROR, message: "Change channel deposit return not allow as refund deposit already. "}
var E202446 = Global_error{id: "202446", eType: EXPECTED_ERROR, message: "Deposit reference number already exists. "}
var E202447 = Global_error{id: "202447", eType: EXPECTED_ERROR, message: "Invalid INFC_BANK_FLAG FLAG. "}
var E202448 = Global_error{id: "202448", eType: EXPECTED_ERROR, message: "No package is available in package group "}
var E202449 = Global_error{id: "202449", eType: EXPECTED_ERROR, message: "No Main package is found or More than one Main package is active "}
var E202450 = Global_error{id: "202450", eType: EXPECTED_ERROR, message: "Active/Authorized Package Group code is not found "}
var E202451 = Global_error{id: "202451", eType: EXPECTED_ERROR, message: "Invalid Package Group "}
var E202452 = Global_error{id: "202452", eType: EXPECTED_ERROR, message: "Invalid Package Type "}
var E202453 = Global_error{id: "202453", eType: EXPECTED_ERROR, message: "Current and New Package Group cannot be same. "}
var E202454 = Global_error{id: "202454", eType: EXPECTED_ERROR, message: "Package Group Code does not exist. "}
var E202455 = Global_error{id: "202455", eType: EXPECTED_ERROR, message: "Deposit or Connection Transaction type of new Package Group is not compatible with that of the Subscriber. "}
var E202456 = Global_error{id: "202456", eType: EXPECTED_ERROR, message: "This package type cannot be duplicated. "}
var E202457 = Global_error{id: "202457", eType: EXPECTED_ERROR, message: "You are not authorized to change switch on reason. "}
var E202458 = Global_error{id: "202458", eType: EXPECTED_ERROR, message: "Subscriber does not exist in Subscriber IMSI table. "}
var E202459 = Global_error{id: "202459", eType: EXPECTED_ERROR, message: "Subscriber IMSI is Invalid or Subscriber has more than one IMSI. "}
var E202460 = Global_error{id: "202460", eType: EXPECTED_ERROR, message: "SNGL is no more allowed for swap product. "}
var E202461 = Global_error{id: "202461", eType: EXPECTED_ERROR, message: "Package Group Type does not exist. "}
var E202462 = Global_error{id: "202462", eType: EXPECTED_ERROR, message: "Package Group Type is not Active. "}
var E202463 = Global_error{id: "202463", eType: EXPECTED_ERROR, message: "Current Package Group of the subscriber does not exist. "}
var E202464 = Global_error{id: "202464", eType: EXPECTED_ERROR, message: "Package Group Code for the Subrscriber is not found. "}
var E202465 = Global_error{id: "202465", eType: EXPECTED_ERROR, message: "Invalid New Property code for Swap Number. "}
var E202466 = Global_error{id: "202466", eType: EXPECTED_ERROR, message: "Invalid Main Package Type which maintain in Parameter table. "}
var E202467 = Global_error{id: "202467", eType: EXPECTED_ERROR, message: "Invalid Add Subscriber Package Group Type which maintain in Parameter table. "}
var E202468 = Global_error{id: "202468", eType: EXPECTED_ERROR, message: "New Property Code does not exist. "}
var E202469 = Global_error{id: "202469", eType: EXPECTED_ERROR, message: "Package group code authorization is not granted to the user. "}
var E202470 = Global_error{id: "202470", eType: EXPECTED_ERROR, message: "Package group authorization is not granted to the hardware. "}
var E202471 = Global_error{id: "202471", eType: EXPECTED_ERROR, message: "One / All package(s) under the current Package Group of the subscriber has been expired. "}
var E202472 = Global_error{id: "202472", eType: EXPECTED_ERROR, message: "Invalid Stop Bill Package. "}
var E202473 = Global_error{id: "202473", eType: EXPECTED_ERROR, message: "Rectify Package Group is not applicable as it exceeds the allowed period. "}
var E202474 = Global_error{id: "202474", eType: EXPECTED_ERROR, message: "Packager Group Type of new package group is not compatible with that of the Subscriber. "}
var E202475 = Global_error{id: "202475", eType: EXPECTED_ERROR, message: "Existing and new coverage area value can't be same. "}
var E202476 = Global_error{id: "202476", eType: EXPECTED_ERROR, message: "New property code has already been changed. "}
var E202477 = Global_error{id: "202477", eType: EXPECTED_ERROR, message: "Invalid Package Group Type. "}
var E202478 = Global_error{id: "202478", eType: EXPECTED_ERROR, message: "This Package Group code cannot be used for this used hardware. "}
var E202479 = Global_error{id: "202479", eType: EXPECTED_ERROR, message: "Package should be started today. "}
var E202480 = Global_error{id: "202480", eType: EXPECTED_ERROR, message: "More than one service code exist for Coverage/Fraud package. "}
var E202481 = Global_error{id: "202481", eType: EXPECTED_ERROR, message: "No package is available in package group. "}
var E202482 = Global_error{id: "202482", eType: EXPECTED_ERROR, message: "Amount does not matching, please specify Invoice Number. "}
var E202483 = Global_error{id: "202483", eType: EXPECTED_ERROR, message: "No main package is found. "}
var E202484 = Global_error{id: "202484", eType: EXPECTED_ERROR, message: "Current and New Switch On Reason Types are different. "}
var E202485 = Global_error{id: "202485", eType: EXPECTED_ERROR, message: "Subscriber has already changed his/herpackage group. Cannot rectify package group again. "}
var E202486 = Global_error{id: "202486", eType: EXPECTED_ERROR, message: "There is no base package for this subscriber yet. "}
var E202487 = Global_error{id: "202487", eType: EXPECTED_ERROR, message: "Base package is not yet started. Use change package group next cycle to change to this package group. "}
var E202488 = Global_error{id: "202488", eType: EXPECTED_ERROR, message: "No package is available to perform change package group. "}
var E202489 = Global_error{id: "202489", eType: EXPECTED_ERROR, message: "Invalid Base Package Information. "}
var E202490 = Global_error{id: "202490", eType: EXPECTED_ERROR, message: "Change Package Group Same Day is not applicable as it is in rectify period. "}
var E202491 = Global_error{id: "202491", eType: EXPECTED_ERROR, message: "Corporate Group already exists. "}
var E202492 = Global_error{id: "202492", eType: EXPECTED_ERROR, message: "Invalid Corporate Employee Flag. "}
var E202493 = Global_error{id: "202493", eType: EXPECTED_ERROR, message: "Invalid Payment Level Flag. "}
var E202494 = Global_error{id: "202494", eType: EXPECTED_ERROR, message: "Invalid Report Level Flag. "}
var E202495 = Global_error{id: "202495", eType: EXPECTED_ERROR, message: "Corporate Group code does not exists. "}
var E202496 = Global_error{id: "202496", eType: EXPECTED_ERROR, message: "No contract starting period for the Corporate Group. "}
var E202497 = Global_error{id: "202497", eType: EXPECTED_ERROR, message: "Employee corporate group member must pay by himself/herself. "}
var E202498 = Global_error{id: "202498", eType: EXPECTED_ERROR, message: "Invalid corporate group member information. "}
var E202499 = Global_error{id: "202499", eType: EXPECTED_ERROR, message: "Child and Parent corporate group members must have the same product. "}
var E202500 = Global_error{id: "202500", eType: EXPECTED_ERROR, message: "Invalid corporate group level. "}
var E202501 = Global_error{id: "202501", eType: EXPECTED_ERROR, message: "Parent corporate group member cannot be an Employee corporate group member. "}
var E202502 = Global_error{id: "202502", eType: EXPECTED_ERROR, message: "Inter corporate group crossing is not allowed. "}
var E202503 = Global_error{id: "202503", eType: EXPECTED_ERROR, message: "Parent corporate group member cannot be move to its child corporate group member. "}
var E202504 = Global_error{id: "202504", eType: EXPECTED_ERROR, message: "First level corporate group members must pay by himself/herself. "}
var E202505 = Global_error{id: "202505", eType: EXPECTED_ERROR, message: "Billing product code on First level of any Corporate group must not be similar. "}
var E202506 = Global_error{id: "202506", eType: EXPECTED_ERROR, message: "Number of group level is exceeding the maximum group level. "}
var E202507 = Global_error{id: "202507", eType: EXPECTED_ERROR, message: "Cannot add more than 5 telephone numbers. "}
var E202508 = Global_error{id: "202508", eType: EXPECTED_ERROR, message: "This telephone number is duplicated. "}
var E202509 = Global_error{id: "202509", eType: EXPECTED_ERROR, message: "Subscriber is not using Dpackage promotion "}
var E202510 = Global_error{id: "202510", eType: EXPECTED_ERROR, message: "This telephone number does not exist in your friend package. "}
var E202511 = Global_error{id: "202511", eType: EXPECTED_ERROR, message: "No telephone number registered. "}
var E202512 = Global_error{id: "202512", eType: EXPECTED_ERROR, message: "EIS Package Group already exists. "}
var E202513 = Global_error{id: "202513", eType: EXPECTED_ERROR, message: "EIS Package Group does not exist. "}
var E202514 = Global_error{id: "202514", eType: EXPECTED_ERROR, message: "New Property Code already exists. "}
var E202515 = Global_error{id: "202515", eType: EXPECTED_ERROR, message: "Package Group Type already exists. "}
var E202516 = Global_error{id: "202516", eType: EXPECTED_ERROR, message: "Transaction Type Code does not exists. "}
var E202517 = Global_error{id: "202517", eType: EXPECTED_ERROR, message: "Package Group Type is currently active. "}
var E202518 = Global_error{id: "202518", eType: EXPECTED_ERROR, message: "Package Group Type is already active on Package Group, Cannot Deactivate. "}
var E202519 = Global_error{id: "202519", eType: EXPECTED_ERROR, message: "Telephone number is already in Prompt Table. "}
var E202520 = Global_error{id: "202520", eType: EXPECTED_ERROR, message: "Package Type does not exist. "}
var E202521 = Global_error{id: "202521", eType: EXPECTED_ERROR, message: "Package Type already exists. "}
var E202522 = Global_error{id: "202522", eType: EXPECTED_ERROR, message: "Package Group Code already exists. "}
var E202523 = Global_error{id: "202523", eType: EXPECTED_ERROR, message: "Telephone Type of package is not similar to Telephone Type of package group. "}
var E202524 = Global_error{id: "202524", eType: EXPECTED_ERROR, message: "Subscriber Type of package is not similar to Subscriber Type of package group. "}
var E202525 = Global_error{id: "202525", eType: EXPECTED_ERROR, message: "Package Group Code authorization is granted to all hardware. "}
var E202526 = Global_error{id: "202526", eType: EXPECTED_ERROR, message: "Package Group Code authorization is granted to all user. "}
var E202527 = Global_error{id: "202527", eType: EXPECTED_ERROR, message: "Telephone type PRE is processed separetely. "}
var E202528 = Global_error{id: "202528", eType: EXPECTED_ERROR, message: "Update CS_MGTM failed. "}
var E202529 = Global_error{id: "202529", eType: EXPECTED_ERROR, message: "Package Group Code is expired. "}
var E202530 = Global_error{id: "202530", eType: EXPECTED_ERROR, message: "Package Group Code is currently effective. "}
var E202531 = Global_error{id: "202531", eType: EXPECTED_ERROR, message: "Cannot delete Main Package of Package Group. "}
var E202532 = Global_error{id: "202532", eType: EXPECTED_ERROR, message: "Package Group should have only one Main Package. "}
var E202533 = Global_error{id: "202533", eType: EXPECTED_ERROR, message: "Package Group Type of Package Group Code must have New Property Code. "}
var E202534 = Global_error{id: "202534", eType: EXPECTED_ERROR, message: "Package Group Type of Package Group Code must not have New Property Code. "}
var E202535 = Global_error{id: "202535", eType: EXPECTED_ERROR, message: "Can not change Subscriber Type of Dependent Package. "}
var E202536 = Global_error{id: "202536", eType: EXPECTED_ERROR, message: "Package telephone type is inconsistent with airtime telephone type. "}
var E202537 = Global_error{id: "202537", eType: EXPECTED_ERROR, message: "This discount code cannot be used with any package. "}
var E202538 = Global_error{id: "202538", eType: EXPECTED_ERROR, message: "Airtime code of this package type cannot be NULL. "}
var E202539 = Global_error{id: "202539", eType: EXPECTED_ERROR, message: "This Package Type cannot have airtime value. "}
var E202540 = Global_error{id: "202540", eType: EXPECTED_ERROR, message: "Package Type of Dependent Package is inconsistent. "}
var E202541 = Global_error{id: "202541", eType: EXPECTED_ERROR, message: "Drop call compensat flag must be 'Y' or 'N' only. "}
var E202542 = Global_error{id: "202542", eType: EXPECTED_ERROR, message: "Itemize CDR flag must be 'Y' or 'N' only. "}
var E202543 = Global_error{id: "202543", eType: EXPECTED_ERROR, message: "Default CDR flag must be 'Y' or 'N' only. "}
var E202544 = Global_error{id: "202544", eType: EXPECTED_ERROR, message: "Fraud flag must be 'Y' or 'N' only. "}
var E202545 = Global_error{id: "202545", eType: EXPECTED_ERROR, message: "Change flag must be 'Y' or 'N' only. "}
var E202546 = Global_error{id: "202546", eType: EXPECTED_ERROR, message: "Generate to IN flag must be 'Y' or 'N' only. "}
var E202547 = Global_error{id: "202547", eType: EXPECTED_ERROR, message: "Airtime Type already exists. "}
var E202548 = Global_error{id: "202548", eType: EXPECTED_ERROR, message: "Airtime Type does not exist. "}
var E202549 = Global_error{id: "202549", eType: EXPECTED_ERROR, message: "Pre tariff code already exists. "}
var E202550 = Global_error{id: "202550", eType: EXPECTED_ERROR, message: "Pre tariff code does not exist. "}
var E202551 = Global_error{id: "202551", eType: EXPECTED_ERROR, message: "TAC network flag must be 'Y' or 'N' only. "}
var E202552 = Global_error{id: "202552", eType: EXPECTED_ERROR, message: "Terminate Operator already exists. "}
var E202553 = Global_error{id: "202553", eType: EXPECTED_ERROR, message: "Terminate Operator does not exist. "}
var E202554 = Global_error{id: "202554", eType: EXPECTED_ERROR, message: "Analyst flag must be 'Y' or 'N' only. "}
var E202555 = Global_error{id: "202555", eType: EXPECTED_ERROR, message: "Terminate Operator flag must be 'Y' or 'N' only. "}
var E202556 = Global_error{id: "202556", eType: EXPECTED_ERROR, message: "Application ID already exists. "}
var E202557 = Global_error{id: "202557", eType: EXPECTED_ERROR, message: "Application ID does not exist. "}
var E202558 = Global_error{id: "202558", eType: EXPECTED_ERROR, message: "Airtime Detail already exists. "}
var E202559 = Global_error{id: "202559", eType: EXPECTED_ERROR, message: "Airtime Detail does not exist. "}
var E202560 = Global_error{id: "202560", eType: EXPECTED_ERROR, message: "Print detail flag must be 'Y' or 'N' only. "}
var E202561 = Global_error{id: "202561", eType: EXPECTED_ERROR, message: "Usage print flag must be 'Y' or 'N' only. "}
var E202562 = Global_error{id: "202562", eType: EXPECTED_ERROR, message: "Spend flag must be 'Y' or 'N' only. "}
var E202563 = Global_error{id: "202563", eType: EXPECTED_ERROR, message: "Corperate discount flag must be 'Y' or 'N' only. "}
var E202564 = Global_error{id: "202564", eType: EXPECTED_ERROR, message: "Package discount flag must be 'Y' or 'N' only. "}
var E202565 = Global_error{id: "202565", eType: EXPECTED_ERROR, message: "Airtime Group already exists. "}
var E202566 = Global_error{id: "202566", eType: EXPECTED_ERROR, message: "Airtime Group does not exist. "}
var E202567 = Global_error{id: "202567", eType: EXPECTED_ERROR, message: "Airtime Distance already exists. "}
var E202568 = Global_error{id: "202568", eType: EXPECTED_ERROR, message: "Airtime Distance does not exist. "}
var E202569 = Global_error{id: "202569", eType: EXPECTED_ERROR, message: "TAC Pre tariff already exist. "}
var E202570 = Global_error{id: "202570", eType: EXPECTED_ERROR, message: "TAC Pre tariff does not exists. "}
var E202571 = Global_error{id: "202571", eType: EXPECTED_ERROR, message: "Tariff Cross Reference already exists. "}
var E202572 = Global_error{id: "202572", eType: EXPECTED_ERROR, message: "Tariff Cross Reference does not exist. "}
var E202573 = Global_error{id: "202573", eType: EXPECTED_ERROR, message: "TAPOUT Airtime Service already exists. "}
var E202574 = Global_error{id: "202574", eType: EXPECTED_ERROR, message: "TAPOUT Airtime Service does not exist. "}
var E202575 = Global_error{id: "202575", eType: EXPECTED_ERROR, message: "Update RD_PRAC_ITFC failed. "}
var E202576 = Global_error{id: "202576", eType: EXPECTED_ERROR, message: "Live Flag of Telephone is not equal to 'N'. "}
var E202577 = Global_error{id: "202577", eType: EXPECTED_ERROR, message: "Special Type is not equal to starter kit or phone kit. "}
var E202578 = Global_error{id: "202578", eType: EXPECTED_ERROR, message: "Serial number of starter kit must be telephone number. "}
var E202579 = Global_error{id: "202579", eType: EXPECTED_ERROR, message: "Live Flag of Hardware is not equal to 'N'. "}
var E202580 = Global_error{id: "202580", eType: EXPECTED_ERROR, message: "Airtime Group exists in BL_ARTM_DETL. Can not delete. "}
var E202581 = Global_error{id: "202581", eType: EXPECTED_ERROR, message: "Airtime Type exists in TPOT_ARTM_SRVC. Can not delete. "}
var E202582 = Global_error{id: "202582", eType: EXPECTED_ERROR, message: "Record Type exists in TPOT_ARTM_SRVC. Can not delete. "}
var E202583 = Global_error{id: "202583", eType: EXPECTED_ERROR, message: "Local Flag must be 'Y' or 'N' only. "}
var E202584 = Global_error{id: "202584", eType: EXPECTED_ERROR, message: "Package Group used in another topping cannot be a Topping. "}
var E202585 = Global_error{id: "202585", eType: EXPECTED_ERROR, message: "Package Group and Topping of Package Group cannot be same "}
var E202586 = Global_error{id: "202586", eType: EXPECTED_ERROR, message: "Invalid package group for formulation of topping. "}
var E202587 = Global_error{id: "202587", eType: EXPECTED_ERROR, message: "User does not have authorization to switch off subscriber of corporate group member. "}
var E202588 = Global_error{id: "202588", eType: EXPECTED_ERROR, message: "Invalid citizen ID Number. "}
var E202589 = Global_error{id: "202589", eType: EXPECTED_ERROR, message: "Last name can not be null. "}
var E202590 = Global_error{id: "202590", eType: EXPECTED_ERROR, message: "Province ID of this Thai citizen card is invalid. "}
var E202591 = Global_error{id: "202591", eType: EXPECTED_ERROR, message: "Special Number is not found. "}
var E202592 = Global_error{id: "202592", eType: EXPECTED_ERROR, message: "Special Number already exists. "}
var E202593 = Global_error{id: "202593", eType: EXPECTED_ERROR, message: "Invalid length of Special Number. "}
var E202594 = Global_error{id: "202594", eType: EXPECTED_ERROR, message: "Special Number must be numeric. "}
var E202595 = Global_error{id: "202595", eType: EXPECTED_ERROR, message: "Current package is not applicable for Special Number benefit. "}
var E202596 = Global_error{id: "202596", eType: EXPECTED_ERROR, message: "At least one Special Number must be provided. "}
var E202597 = Global_error{id: "202597", eType: EXPECTED_ERROR, message: "Invalid Barring SMS flag. "}
var E202598 = Global_error{id: "202598", eType: EXPECTED_ERROR, message: "Granted allowed maximum number of Special Number. "}
var E202599 = Global_error{id: "202599", eType: EXPECTED_ERROR, message: "Conversion function fails. "}
var E202600 = Global_error{id: "202600", eType: EXPECTED_ERROR, message: "Error in calculating unbilled airtime amount. "}
var E202601 = Global_error{id: "202601", eType: EXPECTED_ERROR, message: "Dealer Billing product code conflict telephone number billing product code. "}
var E202602 = Global_error{id: "202602", eType: EXPECTED_ERROR, message: "Golden telephone number could not be allocated. "}
var E202603 = Global_error{id: "202603", eType: EXPECTED_ERROR, message: "Found more than allowed number of records. "}
var E202604 = Global_error{id: "202604", eType: EXPECTED_ERROR, message: "Credit note cannot save because adjust transaction balance is less than zero. "}
var E202605 = Global_error{id: "202605", eType: EXPECTED_ERROR, message: "Subscriber does not belong to this customer. "}
var E202606 = Global_error{id: "202606", eType: EXPECTED_ERROR, message: "Credit note must to be equal adjust transaction balance. "}
var E202607 = Global_error{id: "202607", eType: EXPECTED_ERROR, message: "Calling control does not exist. "}
var E202608 = Global_error{id: "202608", eType: EXPECTED_ERROR, message: "Calling control already exists. "}
var E202609 = Global_error{id: "202609", eType: EXPECTED_ERROR, message: "Subscriber is not found in IN system. "}
var E202610 = Global_error{id: "202610", eType: EXPECTED_ERROR, message: "Record transaction failure from IN system. "}
var E202611 = Global_error{id: "202611", eType: EXPECTED_ERROR, message: "Should have at least one value, customer or subscriber number. "}
var E202612 = Global_error{id: "202612", eType: EXPECTED_ERROR, message: "Should have at least one value, start period or selected period. "}
var E202613 = Global_error{id: "202613", eType: EXPECTED_ERROR, message: "No point movement information found. "}
var E202614 = Global_error{id: "202614", eType: EXPECTED_ERROR, message: "Should have at least 1 parameter. "}
var E202615 = Global_error{id: "202615", eType: EXPECTED_ERROR, message: "Supplier exists and is currently not effective. "}
var E202616 = Global_error{id: "202616", eType: EXPECTED_ERROR, message: "Supplier exists and is currently effective. "}
var E202617 = Global_error{id: "202617", eType: EXPECTED_ERROR, message: "Supplier code does not exist. "}
var E202618 = Global_error{id: "202618", eType: EXPECTED_ERROR, message: "Supplier exists. "}
var E202619 = Global_error{id: "202619", eType: EXPECTED_ERROR, message: "Activity code does not exist. "}
var E202620 = Global_error{id: "202620", eType: EXPECTED_ERROR, message: "Activity code exists. "}
var E202621 = Global_error{id: "202621", eType: EXPECTED_ERROR, message: "Activity group code does not exist. "}
var E202622 = Global_error{id: "202622", eType: EXPECTED_ERROR, message: "Activity group code exists. "}
var E202623 = Global_error{id: "202623", eType: EXPECTED_ERROR, message: "Subscriber does not exist in the Bonus Point system. "}
var E202624 = Global_error{id: "202624", eType: EXPECTED_ERROR, message: "Subscriber number exist but currently does not active. "}
var E202625 = Global_error{id: "202625", eType: EXPECTED_ERROR, message: "Usage Type does not exist. "}
var E202626 = Global_error{id: "202626", eType: EXPECTED_ERROR, message: "Usage Type already exist. "}
var E202627 = Global_error{id: "202627", eType: EXPECTED_ERROR, message: "Usage Type exists and is currently not effective. "}
var E202628 = Global_error{id: "202628", eType: EXPECTED_ERROR, message: "Usage Type exists and is currently effective. "}
var E202629 = Global_error{id: "202629", eType: EXPECTED_ERROR, message: "Method Code already exist. "}
var E202630 = Global_error{id: "202630", eType: EXPECTED_ERROR, message: "Method Code dose not exist. "}
var E202631 = Global_error{id: "202631", eType: EXPECTED_ERROR, message: "Method Detail dose not exist. "}
var E202632 = Global_error{id: "202632", eType: EXPECTED_ERROR, message: "Method Detail already exist. "}
var E202633 = Global_error{id: "202633", eType: EXPECTED_ERROR, message: "Point Code already exist. "}
var E202634 = Global_error{id: "202634", eType: EXPECTED_ERROR, message: "Point Code dose not exist. "}
var E202635 = Global_error{id: "202635", eType: EXPECTED_ERROR, message: "Point Code exist and currently not effective. "}
var E202636 = Global_error{id: "202636", eType: EXPECTED_ERROR, message: "Point Code exist and currently effective. "}
var E202637 = Global_error{id: "202637", eType: EXPECTED_ERROR, message: "Reward Code already exist. "}
var E202638 = Global_error{id: "202638", eType: EXPECTED_ERROR, message: "Reward Code dose not exist. "}
var E202639 = Global_error{id: "202639", eType: EXPECTED_ERROR, message: "Reward Code exist and is currently not effective. "}
var E202640 = Global_error{id: "202640", eType: EXPECTED_ERROR, message: "Reward Code exist and is currently effective. "}
var E202641 = Global_error{id: "202641", eType: EXPECTED_ERROR, message: "Telephone type code does not exist in parameter table. "}
var E202642 = Global_error{id: "202642", eType: EXPECTED_ERROR, message: "Welcome Point Code does not exist. "}
var E202643 = Global_error{id: "202643", eType: EXPECTED_ERROR, message: "Invalid Topic Flag. "}
var E202644 = Global_error{id: "202644", eType: EXPECTED_ERROR, message: "Topic Information does not exist. "}
var E202645 = Global_error{id: "202645", eType: EXPECTED_ERROR, message: "Topic Information already exists. "}
var E202646 = Global_error{id: "202646", eType: EXPECTED_ERROR, message: "Register log data already exists. "}
var E202647 = Global_error{id: "202647", eType: EXPECTED_ERROR, message: "Current account code of transaction type code is between effective or expire date, Cannot delete. "}
var E202648 = Global_error{id: "202648", eType: EXPECTED_ERROR, message: "Current account code of transaction type code is between effective or expire date, Cannot modify . "}
var E202649 = Global_error{id: "202649", eType: EXPECTED_ERROR, message: "BC outsource does not exist. "}
var E202650 = Global_error{id: "202650", eType: EXPECTED_ERROR, message: "BC outsource already exists. "}
var E202651 = Global_error{id: "202651", eType: EXPECTED_ERROR, message: "BC Payment does not exist. "}
var E202652 = Global_error{id: "202652", eType: EXPECTED_ERROR, message: "BC Payment already exists. "}
var E202653 = Global_error{id: "202653", eType: EXPECTED_ERROR, message: "BC outsource commission does not exist. "}
var E202654 = Global_error{id: "202654", eType: EXPECTED_ERROR, message: "BC outsource commission already exists. "}
var E202655 = Global_error{id: "202655", eType: EXPECTED_ERROR, message: "Account code of transaction type code does not exist. "}
var E202656 = Global_error{id: "202656", eType: EXPECTED_ERROR, message: "Account code of journal code does not exist. "}
var E202657 = Global_error{id: "202657", eType: EXPECTED_ERROR, message: "Invalid debit or credit indicator. "}
var E202658 = Global_error{id: "202658", eType: EXPECTED_ERROR, message: "Current account code of journal code is between effective or expire date, Cannot modify. "}
var E202659 = Global_error{id: "202659", eType: EXPECTED_ERROR, message: "Current account code of journal code is between effective or expire date, Cannot delete. "}
var E202660 = Global_error{id: "202660", eType: EXPECTED_ERROR, message: "Special Type is already active on telephone, cannot deactivate. "}
var E202661 = Global_error{id: "202661", eType: EXPECTED_ERROR, message: "Prompt Type of DPROMPT cannot be blank. "}
var E202662 = Global_error{id: "202662", eType: EXPECTED_ERROR, message: "Special Type is not active. "}
var E202663 = Global_error{id: "202663", eType: EXPECTED_ERROR, message: "Special Type is currently active. "}
var E202664 = Global_error{id: "202664", eType: EXPECTED_ERROR, message: "Invalid Prompt Type. "}
var E202665 = Global_error{id: "202665", eType: EXPECTED_ERROR, message: "User does not have authorization to expire current main package. "}
var E202666 = Global_error{id: "202666", eType: EXPECTED_ERROR, message: "Point can be positive or negative value. But cann't be 0. "}
var E202667 = Global_error{id: "202667", eType: EXPECTED_ERROR, message: "Cannot decrease point more than accumulate point. "}
var E202668 = Global_error{id: "202668", eType: EXPECTED_ERROR, message: "Invalid product indicator. "}
var E202669 = Global_error{id: "202669", eType: EXPECTED_ERROR, message: "Invalid Corporate flag. "}
var E202670 = Global_error{id: "202670", eType: EXPECTED_ERROR, message: "Invalid Welcome point flag. "}
var E202671 = Global_error{id: "202671", eType: EXPECTED_ERROR, message: "Topic detail does not exist. "}
var E202672 = Global_error{id: "202672", eType: EXPECTED_ERROR, message: "Subscriber Bonus Point information already exists. "}
var E202673 = Global_error{id: "202673", eType: EXPECTED_ERROR, message: "Subscriber Information does not exist. "}
var E202674 = Global_error{id: "202674", eType: EXPECTED_ERROR, message: "Subscriber already exists in Prepaid subscriber table. "}
var E202675 = Global_error{id: "202675", eType: EXPECTED_ERROR, message: "Customer already exists in Bonus Point. "}
var E202676 = Global_error{id: "202676", eType: EXPECTED_ERROR, message: "Invalid Change Owner flag. "}
var E202677 = Global_error{id: "202677", eType: EXPECTED_ERROR, message: "Customer, Subscriber, Topic code and Topic item already exists. "}
var E202678 = Global_error{id: "202678", eType: EXPECTED_ERROR, message: "Invalid point. "}
var E202679 = Global_error{id: "202679", eType: EXPECTED_ERROR, message: "Invalid Special Bonus Point flag in Transaction Type code. "}
var E202680 = Global_error{id: "202680", eType: EXPECTED_ERROR, message: "Transaction Type Point does not exist. "}
var E202681 = Global_error{id: "202681", eType: EXPECTED_ERROR, message: "Transaction Type Point exists. "}
var E202682 = Global_error{id: "202682", eType: EXPECTED_ERROR, message: "Point value cannot less than zero. "}
var E202683 = Global_error{id: "202683", eType: EXPECTED_ERROR, message: "Subscriber already exists in Bonus Point System. "}
var E202684 = Global_error{id: "202684", eType: EXPECTED_ERROR, message: "Effective date cannot be earlier than the particular date. "}
var E202685 = Global_error{id: "202685", eType: EXPECTED_ERROR, message: "New Subscriber Flag can be 'Y' or 'N' only. "}
var E202686 = Global_error{id: "202686", eType: EXPECTED_ERROR, message: "Other Interest topic can not be blank. "}
var E202687 = Global_error{id: "202687", eType: EXPECTED_ERROR, message: "Other Megazine name can not be blank. "}
var E202688 = Global_error{id: "202688", eType: EXPECTED_ERROR, message: "Telephone Type must be prepaid. "}
var E202689 = Global_error{id: "202689", eType: EXPECTED_ERROR, message: "Account  code is inconsistency. "}
var E202690 = Global_error{id: "202690", eType: EXPECTED_ERROR, message: "Invalid Activity Code. "}
var E202691 = Global_error{id: "202691", eType: EXPECTED_ERROR, message: "Invalid Activity Group Code. "}
var E202692 = Global_error{id: "202692", eType: EXPECTED_ERROR, message: "Invalid voucher balance amount. "}
var E202693 = Global_error{id: "202693", eType: EXPECTED_ERROR, message: "Invalid transaction status. "}
var E202694 = Global_error{id: "202694", eType: EXPECTED_ERROR, message: "Invalid prepaid subscriber. "}
var E202695 = Global_error{id: "202695", eType: EXPECTED_ERROR, message: "Prepaid subscriber has already been processed. "}
var E202696 = Global_error{id: "202696", eType: EXPECTED_ERROR, message: "Transaction status is inconsistent with voucher expiry date. "}
var E202697 = Global_error{id: "202697", eType: EXPECTED_ERROR, message: "Cancellation period exceeds allowed period. "}
var E202698 = Global_error{id: "202698", eType: EXPECTED_ERROR, message: "Invalid postpaid subscriber status. "}
var E202699 = Global_error{id: "202699", eType: EXPECTED_ERROR, message: "Juristiction person and package company flags are incompatible. "}
var E202700 = Global_error{id: "202700", eType: EXPECTED_ERROR, message: "Invalid customer promotion. "}
var E202701 = Global_error{id: "202701", eType: EXPECTED_ERROR, message: "Not allowed to allocate more subsciber to this customer promotion. "}
var E202702 = Global_error{id: "202702", eType: EXPECTED_ERROR, message: "This customer is not eligible for customer level promotion. "}
var E202703 = Global_error{id: "202703", eType: EXPECTED_ERROR, message: "Subscriber package end date cannot be null. "}
var E202704 = Global_error{id: "202704", eType: EXPECTED_ERROR, message: "Incompatible customer promotional codes. "}
var E202705 = Global_error{id: "202705", eType: EXPECTED_ERROR, message: "Must be a customer promotional package. "}
var E202706 = Global_error{id: "202706", eType: EXPECTED_ERROR, message: "Must not not be a customer promotional package. "}
var E202707 = Global_error{id: "202707", eType: EXPECTED_ERROR, message: "This transaction of redemption has already been cancelled. "}
var E202708 = Global_error{id: "202708", eType: EXPECTED_ERROR, message: "The accumulated point is not enough for redemption. "}
var E202709 = Global_error{id: "202709", eType: EXPECTED_ERROR, message: "The cancelled point must be equal to the redeem point. "}
var E202710 = Global_error{id: "202710", eType: EXPECTED_ERROR, message: "Cannot cancel redemption later than the given period. "}
var E202711 = Global_error{id: "202711", eType: EXPECTED_ERROR, message: "Processing, please wait for mail confirm. success or failed. "}
var E202712 = Global_error{id: "202712", eType: EXPECTED_ERROR, message: "Total point or pending point in invoice should be greater than 0. "}
var E202713 = Global_error{id: "202713", eType: EXPECTED_ERROR, message: "This screen cannot be used for customer promotion. "}
var E202714 = Global_error{id: "202714", eType: EXPECTED_ERROR, message: "Customer doesn't use customer promotion. "}
var E202715 = Global_error{id: "202715", eType: EXPECTED_ERROR, message: "Input number of subscriber is not equal to the number of subscribers under the customer. "}
var E202716 = Global_error{id: "202716", eType: EXPECTED_ERROR, message: "Number of subscriber is more than that of customer promotion. "}
var E202717 = Global_error{id: "202717", eType: EXPECTED_ERROR, message: "Customer promotions are not similar. "}
var E202718 = Global_error{id: "202718", eType: EXPECTED_ERROR, message: "Customer promotion does not have similar package end date. "}
var E202719 = Global_error{id: "202719", eType: EXPECTED_ERROR, message: "Rectification of customer promotion exceeds allowed period. "}
var E202720 = Global_error{id: "202720", eType: EXPECTED_ERROR, message: "Existing and new customer promotion cannot be same. "}
var E202721 = Global_error{id: "202721", eType: EXPECTED_ERROR, message: "The D4U date cannot be earlier than the start date of Bonus Point Project(1/1/2002). "}
var E202722 = Global_error{id: "202722", eType: EXPECTED_ERROR, message: "Expire date should not be NULL. "}
var E202723 = Global_error{id: "202723", eType: EXPECTED_ERROR, message: "Data Group must be numberic. "}
var E202724 = Global_error{id: "202724", eType: EXPECTED_ERROR, message: "Invalid fix request code for Preactivate Special. "}
var E202725 = Global_error{id: "202725", eType: EXPECTED_ERROR, message: "Invalid Subscriber MOD. "}
var E202726 = Global_error{id: "202726", eType: EXPECTED_ERROR, message: "Cannot adjust point in period that older than register period. "}
var E202727 = Global_error{id: "202727", eType: EXPECTED_ERROR, message: "Cannot adjust point in period that older than expire period. "}
var E202728 = Global_error{id: "202728", eType: EXPECTED_ERROR, message: "Subscriber already get yearly point. "}
var E202729 = Global_error{id: "202729", eType: EXPECTED_ERROR, message: "Subscriber does not in yearly duration. "}
var E202730 = Global_error{id: "202730", eType: EXPECTED_ERROR, message: "Redemption number can not be null. "}
var E202731 = Global_error{id: "202731", eType: EXPECTED_ERROR, message: "Date can not be null. "}
var E202732 = Global_error{id: "202732", eType: EXPECTED_ERROR, message: "Subscriber type is not correct, cannot redeem. "}
var E202733 = Global_error{id: "202733", eType: EXPECTED_ERROR, message: "Posting data failed. "}
var E202734 = Global_error{id: "202734", eType: EXPECTED_ERROR, message: "Group Code does not exist in this Data Group. "}
var E202735 = Global_error{id: "202735", eType: EXPECTED_ERROR, message: "Invalid format parameter of Dprompt promotion. "}
var E202736 = Global_error{id: "202736", eType: EXPECTED_ERROR, message: "Lower Level must be greater than or equal zero. "}
var E202737 = Global_error{id: "202737", eType: EXPECTED_ERROR, message: "Upper Level must be greater than Lower Level. "}
var E202738 = Global_error{id: "202738", eType: EXPECTED_ERROR, message: "Unit Ratio must be greater than zero. "}
var E202739 = Global_error{id: "202739", eType: EXPECTED_ERROR, message: "Point Ratio must be greater than zero. "}
var E202740 = Global_error{id: "202740", eType: EXPECTED_ERROR, message: "Activity group code already referenced from any table. "}
var E202741 = Global_error{id: "202741", eType: EXPECTED_ERROR, message: "Lower value must equal upper value of previous sequence. "}
var E202742 = Global_error{id: "202742", eType: EXPECTED_ERROR, message: "Must select point or point & cash for redemption criteria. "}
var E202743 = Global_error{id: "202743", eType: EXPECTED_ERROR, message: "Cannot update data group for group code without at least one group code. "}
var E202744 = Global_error{id: "202744", eType: EXPECTED_ERROR, message: "Deposit amount can be exchanged with monthly airtime amount of 200 Baht and 50 bonus points of D4U for 15 months. "}
var E202745 = Global_error{id: "202745", eType: EXPECTED_ERROR, message: "Deposit amount can be exchanged with bonus points of D4U collecting 1500 points per month for 15 months. "}
var E202746 = Global_error{id: "202746", eType: EXPECTED_ERROR, message: "Deposit amount can be exchanged with 20,000 bonus points of D4U. "}
var E202747 = Global_error{id: "202747", eType: EXPECTED_ERROR, message: "Can not modify Benefit Option. "}
var E202748 = Global_error{id: "202748", eType: EXPECTED_ERROR, message: "Benefit Option is not active or not found. "}
var E202749 = Global_error{id: "202749", eType: EXPECTED_ERROR, message: "Customer deposit benefit not found. "}
var E202750 = Global_error{id: "202750", eType: EXPECTED_ERROR, message: "Deposit benefit number does not exist. "}
var E202751 = Global_error{id: "202751", eType: EXPECTED_ERROR, message: "Deposit benefit number already exists. "}
var E202752 = Global_error{id: "202752", eType: EXPECTED_ERROR, message: "Customer Promotion does not exist. "}
var E202753 = Global_error{id: "202753", eType: EXPECTED_ERROR, message: "Customer Promotion already exists. "}
var E202754 = Global_error{id: "202754", eType: EXPECTED_ERROR, message: "Customer Promotion is inconsistent with Telephone Type. "}
var E202755 = Global_error{id: "202755", eType: EXPECTED_ERROR, message: "Customer Promotion is inconsistent with Subscriber Type. "}
var E202756 = Global_error{id: "202756", eType: EXPECTED_ERROR, message: "Customer Promotion is inconsistent with Package Type. "}
var E202757 = Global_error{id: "202757", eType: EXPECTED_ERROR, message: "EIS Package Group is inconsistent with Package Type. "}
var E202758 = Global_error{id: "202758", eType: EXPECTED_ERROR, message: "Airtime Code of Customer Promotion and Package Plan is not similar. "}
var E202759 = Global_error{id: "202759", eType: EXPECTED_ERROR, message: "Staff package already exists. "}
var E202760 = Global_error{id: "202760", eType: EXPECTED_ERROR, message: "Staff package does not exist. "}
var E202761 = Global_error{id: "202761", eType: EXPECTED_ERROR, message: "The Category does not exist. "}
var E202762 = Global_error{id: "202762", eType: EXPECTED_ERROR, message: "The Category already exists. "}
var E202763 = Global_error{id: "202763", eType: EXPECTED_ERROR, message: "The Category already exists and is currently active. "}
var E202764 = Global_error{id: "202764", eType: EXPECTED_ERROR, message: "The Category already exists but is not active. "}
var E202765 = Global_error{id: "202765", eType: EXPECTED_ERROR, message: "The Sub Category does not exist. "}
var E202766 = Global_error{id: "202766", eType: EXPECTED_ERROR, message: "The Sub Category already exists. "}
var E202767 = Global_error{id: "202767", eType: EXPECTED_ERROR, message: "The Sub Category already exists and is currently active. "}
var E202768 = Global_error{id: "202768", eType: EXPECTED_ERROR, message: "The Sub Category already exists but is not active. "}
var E202769 = Global_error{id: "202769", eType: EXPECTED_ERROR, message: "The Solution does not exist. "}
var E202770 = Global_error{id: "202770", eType: EXPECTED_ERROR, message: "The Solution already exists. "}
var E202771 = Global_error{id: "202771", eType: EXPECTED_ERROR, message: "The Solution already exists and is currently active. "}
var E202772 = Global_error{id: "202772", eType: EXPECTED_ERROR, message: "The Solution already exists but is not active. "}
var E202773 = Global_error{id: "202773", eType: EXPECTED_ERROR, message: "The Position does not exist. "}
var E202774 = Global_error{id: "202774", eType: EXPECTED_ERROR, message: "The Position already exists. "}
var E202775 = Global_error{id: "202775", eType: EXPECTED_ERROR, message: "The Position already exists and is currently active. "}
var E202776 = Global_error{id: "202776", eType: EXPECTED_ERROR, message: "The Position already exists but is not active. "}
var E202777 = Global_error{id: "202777", eType: EXPECTED_ERROR, message: "The Team does not exist. "}
var E202778 = Global_error{id: "202778", eType: EXPECTED_ERROR, message: "The Team already exists. "}
var E202779 = Global_error{id: "202779", eType: EXPECTED_ERROR, message: "The Team already exists and is currently active. "}
var E202780 = Global_error{id: "202780", eType: EXPECTED_ERROR, message: "The Team already exists but is not active. "}
var E202781 = Global_error{id: "202781", eType: EXPECTED_ERROR, message: "The Corporate Customer Service does not exist. "}
var E202782 = Global_error{id: "202782", eType: EXPECTED_ERROR, message: "The Corporate Customer Service already exists. "}
var E202783 = Global_error{id: "202783", eType: EXPECTED_ERROR, message: "The Corporate Customer Service already exists and is currently active. "}
var E202784 = Global_error{id: "202784", eType: EXPECTED_ERROR, message: "The Corporate Customer Service already exists but is not active. "}
var E202785 = Global_error{id: "202785", eType: EXPECTED_ERROR, message: "The Sales Executive does not exist. "}
var E202786 = Global_error{id: "202786", eType: EXPECTED_ERROR, message: "The Sales Executive already exists. "}
var E202787 = Global_error{id: "202787", eType: EXPECTED_ERROR, message: "The Sales Executive already exists and is currently active. "}
var E202788 = Global_error{id: "202788", eType: EXPECTED_ERROR, message: "The Sales Executive already exists but is not active. "}
var E202789 = Global_error{id: "202789", eType: EXPECTED_ERROR, message: "You are not authorized to add PROMPT subscriber. "}
var E202790 = Global_error{id: "202790", eType: EXPECTED_ERROR, message: "Corporate Group-Sub Category combination does not exist. "}
var E202791 = Global_error{id: "202791", eType: EXPECTED_ERROR, message: "Corporate Group-Solution combination does not exist. "}
var E202792 = Global_error{id: "202792", eType: EXPECTED_ERROR, message: "Corporate Group-Contact Person combination does not exist. "}
var E202793 = Global_error{id: "202793", eType: EXPECTED_ERROR, message: "Receipt number does not exist in CS_DPBN_DETL "}
var E202794 = Global_error{id: "202794", eType: EXPECTED_ERROR, message: "Corporate group does not have revenue. "}
var E202795 = Global_error{id: "202795", eType: EXPECTED_ERROR, message: "This Sub Category not allow to delete by manual. "}
var E202796 = Global_error{id: "202796", eType: EXPECTED_ERROR, message: "Minimum account no must be less than or equal maximum account no and not less than zero. "}
var E202797 = Global_error{id: "202797", eType: EXPECTED_ERROR, message: "Invalid minimum or maximum account number. "}
var E202798 = Global_error{id: "202798", eType: EXPECTED_ERROR, message: "Corporate customer is not allowed for changing from postpaid to prepaid. "}
var E202799 = Global_error{id: "202799", eType: EXPECTED_ERROR, message: "Corporate customer is not allowed for this transaction. "}
var E202800 = Global_error{id: "202800", eType: EXPECTED_ERROR, message: "Extra charge fee can only be waived for Maintenance Package Group Type. "}
var E202801 = Global_error{id: "202801", eType: EXPECTED_ERROR, message: "Extra charge fee can only be waived for Base Package Group. "}
var E202802 = Global_error{id: "202802", eType: EXPECTED_ERROR, message: "Advance Withholding Tax. cannot greater than Advance Net W/T. "}
var E202803 = Global_error{id: "202803", eType: EXPECTED_ERROR, message: "IN Service Code already exists. "}
var E202804 = Global_error{id: "202804", eType: EXPECTED_ERROR, message: "IN Service Code does not exists. "}
var E202805 = Global_error{id: "202805", eType: EXPECTED_ERROR, message: "IN Service Code is currently active. "}
var E202806 = Global_error{id: "202806", eType: EXPECTED_ERROR, message: "IN Service Code is not active. "}
var E202807 = Global_error{id: "202807", eType: EXPECTED_ERROR, message: "Please change the dummy dealer as soon as possible. "}
var E202808 = Global_error{id: "202808", eType: EXPECTED_ERROR, message: "Subscriber information should not be similar to Dealer Information. "}
var E202809 = Global_error{id: "202809", eType: EXPECTED_ERROR, message: "Customer having dealer's name cannot change prepaid package group. "}
var E202810 = Global_error{id: "202810", eType: EXPECTED_ERROR, message: "Subscriber must pay fee for changing promotion. "}
var E202811 = Global_error{id: "202811", eType: EXPECTED_ERROR, message: "Cheque Return cannot process . Because it has Advance Payment in the system. "}
var E202812 = Global_error{id: "202812", eType: EXPECTED_ERROR, message: "Rectify package group is not allowed as effective main package start datetime is different from switch on datetime. "}
var E202813 = Global_error{id: "202813", eType: EXPECTED_ERROR, message: "Can not pay advance because of debt remaining in the system. "}
var E202814 = Global_error{id: "202814", eType: EXPECTED_ERROR, message: "The invoice that you want to pay for has already been paid "}
var E202815 = Global_error{id: "202815", eType: EXPECTED_ERROR, message: "Pay amount exceeds the balance of the invoice "}
var E202816 = Global_error{id: "202816", eType: EXPECTED_ERROR, message: "You are not allowed to pay in the same invoices in 5 minutes for preventing the repeated pay "}
var E202817 = Global_error{id: "202817", eType: EXPECTED_ERROR, message: "New Package cannot be used together with the existing one. "}
var E202818 = Global_error{id: "202818", eType: EXPECTED_ERROR, message: "Package class does not exist. "}
var E202819 = Global_error{id: "202819", eType: EXPECTED_ERROR, message: "Package class already exists. "}
var E202820 = Global_error{id: "202820", eType: EXPECTED_ERROR, message: "Package class conflict does not exist. "}
var E202821 = Global_error{id: "202821", eType: EXPECTED_ERROR, message: "Telephone is already preactivated. "}
var E202822 = Global_error{id: "202822", eType: EXPECTED_ERROR, message: "Telephone is in preactivation process. "}
var E202823 = Global_error{id: "202823", eType: EXPECTED_ERROR, message: "Telephone is not yet preactivated. "}
var E202824 = Global_error{id: "202824", eType: EXPECTED_ERROR, message: "Prepaid promotion does not exist. "}
var E202825 = Global_error{id: "202825", eType: EXPECTED_ERROR, message: "Invalid prepaid promotion. "}
var E202826 = Global_error{id: "202826", eType: EXPECTED_ERROR, message: "Invalid Allow Reserve Flag. "}
var E202827 = Global_error{id: "202827", eType: EXPECTED_ERROR, message: "No preferred number to be reserved is found "}
var E202828 = Global_error{id: "202828", eType: EXPECTED_ERROR, message: "Cancellation should be performed by CI "}
var E202829 = Global_error{id: "202829", eType: EXPECTED_ERROR, message: "Corporate group is not VPN group. "}
var E202830 = Global_error{id: "202830", eType: EXPECTED_ERROR, message: "Invalid short number . "}
var E202831 = Global_error{id: "202831", eType: EXPECTED_ERROR, message: "VPN virtual member already exists but is not currently effective. "}
var E202832 = Global_error{id: "202832", eType: EXPECTED_ERROR, message: "VPN virtual member already exists but is currently effective. "}
var E202833 = Global_error{id: "202833", eType: EXPECTED_ERROR, message: "VPN virtual member does not exist. "}
var E202834 = Global_error{id: "202834", eType: EXPECTED_ERROR, message: "Time schedule already exists. "}
var E202835 = Global_error{id: "202835", eType: EXPECTED_ERROR, message: "Time schedule already exist but is not active. "}
var E202836 = Global_error{id: "202836", eType: EXPECTED_ERROR, message: "Time schedule already exist and is currently active. "}
var E202837 = Global_error{id: "202837", eType: EXPECTED_ERROR, message: "Time schedule does not exist. "}
var E202838 = Global_error{id: "202838", eType: EXPECTED_ERROR, message: "Cannot deactivate time schedule because VPN member using its. "}
var E202839 = Global_error{id: "202839", eType: EXPECTED_ERROR, message: "Customer status does not write off . "}
var E202840 = Global_error{id: "202840", eType: EXPECTED_ERROR, message: "Telephone allocation type and reserved flag are inconsistent. "}
var E202841 = Global_error{id: "202841", eType: EXPECTED_ERROR, message: "Telephone type and reserved flag are inconsistent. "}
var E202842 = Global_error{id: "202842", eType: EXPECTED_ERROR, message: "Invalid preferred number. "}
var E202843 = Global_error{id: "202843", eType: EXPECTED_ERROR, message: "This Telephone number cannot be changed to prepaid. "}
var E202844 = Global_error{id: "202844", eType: EXPECTED_ERROR, message: "Random plan code does not exist. "}
var E202845 = Global_error{id: "202845", eType: EXPECTED_ERROR, message: "Random plan code is not effective or does not exist. "}
var E202846 = Global_error{id: "202846", eType: EXPECTED_ERROR, message: "Random plan code is effective or does not exist. "}
var E202847 = Global_error{id: "202847", eType: EXPECTED_ERROR, message: "Random Plan code already exists. "}
var E202848 = Global_error{id: "202848", eType: EXPECTED_ERROR, message: "Random plan code exist for this letter, Cannot Delete. "}
var E202849 = Global_error{id: "202849", eType: EXPECTED_ERROR, message: "Expire date must be more than today. "}
var E202850 = Global_error{id: "202850", eType: EXPECTED_ERROR, message: "Only expire date can be changed. "}
var E202851 = Global_error{id: "202851", eType: EXPECTED_ERROR, message: "Customer properties are not applicable for corporate sharing. "}
var E202852 = Global_error{id: "202852", eType: EXPECTED_ERROR, message: "Start period cannot be less than customer�s next invoice period. "}
var E202853 = Global_error{id: "202853", eType: EXPECTED_ERROR, message: "End period cannot be less than start period. "}
var E202854 = Global_error{id: "202854", eType: EXPECTED_ERROR, message: "End period cannot be less than customer�s last invoice period. "}
var E202855 = Global_error{id: "202855", eType: EXPECTED_ERROR, message: "Fraud transaction already exists. "}
var E202856 = Global_error{id: "202856", eType: EXPECTED_ERROR, message: "Fraud transaction does not exist. "}
var E202857 = Global_error{id: "202857", eType: EXPECTED_ERROR, message: "Cannot proceed for corporate sharing customer. "}
var E202858 = Global_error{id: "202858", eType: EXPECTED_ERROR, message: "Invalid VPN Level. "}
var E202859 = Global_error{id: "202859", eType: EXPECTED_ERROR, message: "This number is in use for hunting. "}
var E202860 = Global_error{id: "202860", eType: EXPECTED_ERROR, message: "Invalid terminal destination code. "}
var E202861 = Global_error{id: "202861", eType: EXPECTED_ERROR, message: "MD create date already exists. "}
var E202862 = Global_error{id: "202862", eType: EXPECTED_ERROR, message: "MD create date does not exist. "}
var E202863 = Global_error{id: "202863", eType: EXPECTED_ERROR, message: "Step ID already exists. "}
var E202864 = Global_error{id: "202864", eType: EXPECTED_ERROR, message: "Step ID does not exist. "}
var E202865 = Global_error{id: "202865", eType: EXPECTED_ERROR, message: "Day diff flag must be 'N' or 'Y'. "}
var E202866 = Global_error{id: "202866", eType: EXPECTED_ERROR, message: "Tariff Type must be 'E', 'D' or 'V'. "}
var E202867 = Global_error{id: "202867", eType: EXPECTED_ERROR, message: "Header Flag is 'insert', Detail Flag must be 'insert'. "}
var E202868 = Global_error{id: "202868", eType: EXPECTED_ERROR, message: "Tariff Day can be 0..6. "}
var E202869 = Global_error{id: "202869", eType: EXPECTED_ERROR, message: "Tariff Day must 0. "}
var E202870 = Global_error{id: "202870", eType: EXPECTED_ERROR, message: "Must have detail data. "}
var E202871 = Global_error{id: "202871", eType: EXPECTED_ERROR, message: "Summary not equal. "}
var E202872 = Global_error{id: "202872", eType: EXPECTED_ERROR, message: "Transaction Type already exists. "}
var E202873 = Global_error{id: "202873", eType: EXPECTED_ERROR, message: "Transaction Type does not exist. "}
var E202874 = Global_error{id: "202874", eType: EXPECTED_ERROR, message: "Print Code already exists. "}
var E202875 = Global_error{id: "202875", eType: EXPECTED_ERROR, message: "Print Code does not exist. "}
var E202876 = Global_error{id: "202876", eType: EXPECTED_ERROR, message: "Generate Flag must be 'Y' or 'N'. "}
var E202877 = Global_error{id: "202877", eType: EXPECTED_ERROR, message: "Revenue Flag must be 'Y' or 'N'. "}
var E202878 = Global_error{id: "202878", eType: EXPECTED_ERROR, message: "Analysis Application Code does not exist. "}
var E202879 = Global_error{id: "202879", eType: EXPECTED_ERROR, message: "Credit Limit Status must be 'I'(CAT), 'O'(TOT) or 'X'. "}
var E202880 = Global_error{id: "202880", eType: EXPECTED_ERROR, message: "No debt in system.Subscriber No.,Customer No. is corporate sharing customer.You can pay advance at Online Payment For Group Bill screen. "}
var E202881 = Global_error{id: "202881", eType: EXPECTED_ERROR, message: "Analysis Provider Code does not exist. "}
var E202882 = Global_error{id: "202882", eType: EXPECTED_ERROR, message: "Cannot update end period. "}
var E202883 = Global_error{id: "202883", eType: EXPECTED_ERROR, message: "Customer must pay by �himself/herself because parent customer is corporate sharing. "}
var E202884 = Global_error{id: "202884", eType: EXPECTED_ERROR, message: "Corporate sharing customer must pay by himself/herself. "}
var E202885 = Global_error{id: "202885", eType: EXPECTED_ERROR, message: "Analysis Application Code already exists. "}
var E202886 = Global_error{id: "202886", eType: EXPECTED_ERROR, message: "Analysis Provider Code already exists. "}
var E202887 = Global_error{id: "202887", eType: EXPECTED_ERROR, message: "Message Code already exists. "}
var E202888 = Global_error{id: "202888", eType: EXPECTED_ERROR, message: "Message Code does not exist. "}
var E202889 = Global_error{id: "202889", eType: EXPECTED_ERROR, message: "Service Control Point already exists. "}
var E202890 = Global_error{id: "202890", eType: EXPECTED_ERROR, message: "Service Control Point does not exist. "}
var E202891 = Global_error{id: "202891", eType: EXPECTED_ERROR, message: "Subscriber Prefix already exists. "}
var E202892 = Global_error{id: "202892", eType: EXPECTED_ERROR, message: "Subscriber Prefix does not exist. "}
var E202893 = Global_error{id: "202893", eType: EXPECTED_ERROR, message: "IN SCP prefix number already exists. "}
var E202894 = Global_error{id: "202894", eType: EXPECTED_ERROR, message: "IN SCP prefix number does not exist. "}
var E202895 = Global_error{id: "202895", eType: EXPECTED_ERROR, message: "Reserved telephone is not allowed for this product. "}
var E202896 = Global_error{id: "202896", eType: EXPECTED_ERROR, message: "Active Flag must be Y or N. "}
var E202897 = Global_error{id: "202897", eType: EXPECTED_ERROR, message: "Share Flag must be 'Y' at least one record. "}
var E202898 = Global_error{id: "202898", eType: EXPECTED_ERROR, message: "Share Flag can by 'Y' only one record. "}
var E202899 = Global_error{id: "202899", eType: EXPECTED_ERROR, message: "Roll Over Flag can by 'Y' only one record per airtime code. "}
var E202900 = Global_error{id: "202900", eType: EXPECTED_ERROR, message: "Share Flag must be 'Y' or 'N' only. "}
var E202901 = Global_error{id: "202901", eType: EXPECTED_ERROR, message: "Roll Over Flag must be 'Y' or 'N' only. "}
var E202902 = Global_error{id: "202902", eType: EXPECTED_ERROR, message: "Airtime Code was already used. "}
var E202903 = Global_error{id: "202903", eType: EXPECTED_ERROR, message: "Transaction is not allowed at this time. "}
var E202904 = Global_error{id: "202904", eType: EXPECTED_ERROR, message: "Golden number is not allowed to de-allocate. "}
var E202905 = Global_error{id: "202905", eType: EXPECTED_ERROR, message: "Prepaid cannot process this transaction. "}
var E202906 = Global_error{id: "202906", eType: EXPECTED_ERROR, message: "Special suscriber cannot process this transaction. "}
var E202907 = Global_error{id: "202907", eType: EXPECTED_ERROR, message: "Invalid alert method. "}
var E202908 = Global_error{id: "202908", eType: EXPECTED_ERROR, message: "Alert method is not applicable for this subscriber. "}
var E202909 = Global_error{id: "202909", eType: EXPECTED_ERROR, message: "Subscriber cannot change alert amount exceed the maximum number. "}
var E202910 = Global_error{id: "202910", eType: EXPECTED_ERROR, message: "Alert amount must be greater than the current unbilled amount. "}
var E202911 = Global_error{id: "202911", eType: EXPECTED_ERROR, message: "Alert amount must be less than the customer credit limit. "}
var E202912 = Global_error{id: "202912", eType: EXPECTED_ERROR, message: "Print Amount Flag must be 'Y' or 'N' only. "}
var E202913 = Global_error{id: "202913", eType: EXPECTED_ERROR, message: "Message Flag must be 'Y' or 'N' only. "}
var E202914 = Global_error{id: "202914", eType: EXPECTED_ERROR, message: "Status of Subsriber number must active or suspend. "}
var E202915 = Global_error{id: "202915", eType: EXPECTED_ERROR, message: "Budget alert control does not exist. "}
var E202916 = Global_error{id: "202916", eType: EXPECTED_ERROR, message: "Transaction is not allowed for this subscriber as it is under transaction prohibition period. "}
var E202917 = Global_error{id: "202917", eType: EXPECTED_ERROR, message: "No voice mail service data to be process. "}
var E202918 = Global_error{id: "202918", eType: EXPECTED_ERROR, message: "Send SMS timeout failure "}
var E202919 = Global_error{id: "202919", eType: EXPECTED_ERROR, message: "Send SMS unknwon failure "}
var E202920 = Global_error{id: "202920", eType: EXPECTED_ERROR, message: "Entered old known 4 digits is wrong. "}
var E202921 = Global_error{id: "202921", eType: EXPECTED_ERROR, message: "New known 4 digits cannot be same as old known 4 digits. "}
var E202922 = Global_error{id: "202922", eType: EXPECTED_ERROR, message: "Invalid known 4 digits. "}
var E202923 = Global_error{id: "202923", eType: EXPECTED_ERROR, message: "Known 4 digits does not exists. "}
var E202924 = Global_error{id: "202924", eType: EXPECTED_ERROR, message: "Service Provider Code does not exists. "}
var E202925 = Global_error{id: "202925", eType: EXPECTED_ERROR, message: "Service Provider Code exists. "}
var E202926 = Global_error{id: "202926", eType: EXPECTED_ERROR, message: "Customer� birthday information does not exist. "}
var E202927 = Global_error{id: "202927", eType: EXPECTED_ERROR, message: "No record found in Safety Stock master "}
var E202928 = Global_error{id: "202928", eType: EXPECTED_ERROR, message: "Invalid golden type. "}
var E202929 = Global_error{id: "202929", eType: EXPECTED_ERROR, message: "Invalid dealer's golden quota. "}
var E202930 = Global_error{id: "202930", eType: EXPECTED_ERROR, message: "Golden quota for the dealer is not found. "}
var E202931 = Global_error{id: "202931", eType: EXPECTED_ERROR, message: "Customer properties are not applicable for birthday party. "}
var E202932 = Global_error{id: "202932", eType: EXPECTED_ERROR, message: "Dealer does not have DTAC mobile phone number to receive SMS. "}
var E202933 = Global_error{id: "202933", eType: EXPECTED_ERROR, message: "Golden Type Group does not exist. "}
var E202934 = Global_error{id: "202934", eType: EXPECTED_ERROR, message: "Golden Type Group already exists. "}
var E202935 = Global_error{id: "202935", eType: EXPECTED_ERROR, message: "Safety Stock does not exist. "}
var E202936 = Global_error{id: "202936", eType: EXPECTED_ERROR, message: "Safety Stock already exists. "}
var E202937 = Global_error{id: "202937", eType: EXPECTED_ERROR, message: "Gold Type Group is with more than one gold type. "}
var E202938 = Global_error{id: "202938", eType: EXPECTED_ERROR, message: "Prepaid subscriber does not have birthday information. "}
var E202939 = Global_error{id: "202939", eType: EXPECTED_ERROR, message: "Special subscriber does not have birthday information. "}
var E202940 = Global_error{id: "202940", eType: EXPECTED_ERROR, message: "Customer's birthday is blank. "}
var E202941 = Global_error{id: "202941", eType: EXPECTED_ERROR, message: "Corporate member does not have birthday information. "}
var E202942 = Global_error{id: "202942", eType: EXPECTED_ERROR, message: "Customer promotion does not have birthday information. "}
var E202943 = Global_error{id: "202943", eType: EXPECTED_ERROR, message: "Credit limit by subscriber already exists "}
var E202944 = Global_error{id: "202944", eType: EXPECTED_ERROR, message: "Credit limit by subscriber does not exists "}
var E202945 = Global_error{id: "202945", eType: EXPECTED_ERROR, message: "Value of minimum safety stock cannot be greater than that of safety stock. "}
var E202946 = Global_error{id: "202946", eType: EXPECTED_ERROR, message: "The value should not less than zero. "}
var E202947 = Global_error{id: "202947", eType: EXPECTED_ERROR, message: "Value of unit quota cannot be less than zero. "}
var E202948 = Global_error{id: "202948", eType: EXPECTED_ERROR, message: "Value of Unit Quota cannot be greater than that of Telephone sold. "}
var E202949 = Global_error{id: "202949", eType: EXPECTED_ERROR, message: "Update CS_CHNG_PKGP failed "}
var E202950 = Global_error{id: "202950", eType: EXPECTED_ERROR, message: "Update CS_CHPG_BTCH failed "}
var E202951 = Global_error{id: "202951", eType: EXPECTED_ERROR, message: "Customer use sharing promotion is not allowed for this transaction "}
var E202952 = Global_error{id: "202952", eType: EXPECTED_ERROR, message: "Credit limit by subscriber already exists but is not currently active. "}
var E202953 = Global_error{id: "202953", eType: EXPECTED_ERROR, message: "Credit limit by subscriber is  less than usage amount. "}
var E202954 = Global_error{id: "202954", eType: EXPECTED_ERROR, message: "Subscriber suspend flag is not active .(Subscriber is not suspend) "}
var E202955 = Global_error{id: "202955", eType: EXPECTED_ERROR, message: "Update CS_VMS_ITFC failed. "}
var E202956 = Global_error{id: "202956", eType: EXPECTED_ERROR, message: "Can not suspend subscriber, credit limit is greater then usage "}
var E202957 = Global_error{id: "202957", eType: EXPECTED_ERROR, message: "Suspend subscriber does not exist "}
var E202958 = Global_error{id: "202958", eType: EXPECTED_ERROR, message: "Next stage is null "}
var E202959 = Global_error{id: "202959", eType: EXPECTED_ERROR, message: "Process required to be run before this process has not started yet. "}
var E202960 = Global_error{id: "202960", eType: EXPECTED_ERROR, message: "Total credit limit by subrscriber must less than credit limit by customer "}
var E202961 = Global_error{id: "202961", eType: EXPECTED_ERROR, message: "Grade already exists. "}
var E202962 = Global_error{id: "202962", eType: EXPECTED_ERROR, message: "Grade does not exist. "}
var E202963 = Global_error{id: "202963", eType: EXPECTED_ERROR, message: "Grade already exists and is currently not active. "}
var E202964 = Global_error{id: "202964", eType: EXPECTED_ERROR, message: "Grade already exists and is currently active. "}
var E202965 = Global_error{id: "202965", eType: EXPECTED_ERROR, message: "Invalid grade value "}
var E202966 = Global_error{id: "202966", eType: EXPECTED_ERROR, message: "Update CS_CHNG_GRDE failed "}
var E202967 = Global_error{id: "202967", eType: EXPECTED_ERROR, message: "Update CS_GRDE_BTCH failed "}
var E202968 = Global_error{id: "202968", eType: EXPECTED_ERROR, message: "Card can be used to reserve only one time in a day. "}
var E202969 = Global_error{id: "202969", eType: EXPECTED_ERROR, message: "Birthday Promotion already expired. "}
var E202970 = Global_error{id: "202970", eType: EXPECTED_ERROR, message: "Update parameter failed. "}
var E202971 = Global_error{id: "202971", eType: EXPECTED_ERROR, message: "Data does not exist. "}
var E202972 = Global_error{id: "202972", eType: EXPECTED_ERROR, message: "Data already exists. "}
var E202973 = Global_error{id: "202973", eType: EXPECTED_ERROR, message: "Telephone type must be postpaid. "}
var E202974 = Global_error{id: "202974", eType: EXPECTED_ERROR, message: "Invalid Phase Number. "}
var E202975 = Global_error{id: "202975", eType: EXPECTED_ERROR, message: "Phase Number already exist. "}
var E202976 = Global_error{id: "202976", eType: EXPECTED_ERROR, message: "Phase Number does not exist. "}
var E202977 = Global_error{id: "202977", eType: EXPECTED_ERROR, message: "No row(s) found for the specified Phase Number. "}
var E202978 = Global_error{id: "202978", eType: EXPECTED_ERROR, message: "Total Day after does not Valid. "}
var E202979 = Global_error{id: "202979", eType: EXPECTED_ERROR, message: "Phase Days must less than or equal Total Days After. "}
var E202980 = Global_error{id: "202980", eType: EXPECTED_ERROR, message: "Commission Plan exists and is currently effective. "}
var E202981 = Global_error{id: "202981", eType: EXPECTED_ERROR, message: "Commission Plan Does Not Exist. "}
var E202982 = Global_error{id: "202982", eType: EXPECTED_ERROR, message: "Commission Plan Code is refered from DC_PCOM_PLAN table. Cannot be deleted. "}
var E202983 = Global_error{id: "202983", eType: EXPECTED_ERROR, message: "BCN File does not exist. "}
var E202984 = Global_error{id: "202984", eType: EXPECTED_ERROR, message: "Commission Plan already exists. "}
var E202985 = Global_error{id: "202985", eType: EXPECTED_ERROR, message: "Percentage Performance To must greater than Percentage Performance From. "}
var E202986 = Global_error{id: "202986", eType: EXPECTED_ERROR, message: "Percentage Performance To must less than or equal to 100. "}
var E202987 = Global_error{id: "202987", eType: EXPECTED_ERROR, message: "Percentage Performance To must equal to 100. "}
var E202988 = Global_error{id: "202988", eType: EXPECTED_ERROR, message: "Customer Number does not exist in Commission status = 'N'. "}
var E202989 = Global_error{id: "202989", eType: EXPECTED_ERROR, message: "Topic code does not exist. "}
var E202990 = Global_error{id: "202990", eType: EXPECTED_ERROR, message: "Topic code already exists. "}
var E202991 = Global_error{id: "202991", eType: EXPECTED_ERROR, message: "Document Type Code does not exist. "}
var E202992 = Global_error{id: "202992", eType: EXPECTED_ERROR, message: "Document Type Code already exists. "}
var E202993 = Global_error{id: "202993", eType: EXPECTED_ERROR, message: "Journal Code does not exist. "}
var E202994 = Global_error{id: "202994", eType: EXPECTED_ERROR, message: "Journal Code already exists. "}
var E202995 = Global_error{id: "202995", eType: EXPECTED_ERROR, message: "Account Code does not exist. "}
var E202996 = Global_error{id: "202996", eType: EXPECTED_ERROR, message: "Account Code already exists. "}
var E202997 = Global_error{id: "202997", eType: EXPECTED_ERROR, message: "Return Bank code does not exist. "}
var E202998 = Global_error{id: "202998", eType: EXPECTED_ERROR, message: "Return Bank code already exists. "}
var E202999 = Global_error{id: "202999", eType: EXPECTED_ERROR, message: "Product Code does not exist. "}
var E203000 = Global_error{id: "203000", eType: EXPECTED_ERROR, message: "Product Code already exists. "}
var E203001 = Global_error{id: "203001", eType: EXPECTED_ERROR, message: "Project Code does not exist. "}
var E203002 = Global_error{id: "203002", eType: EXPECTED_ERROR, message: "Project Code already exists. "}
var E203003 = Global_error{id: "203003", eType: EXPECTED_ERROR, message: "Transaction Type Mapping Code does not exist. "}
var E203004 = Global_error{id: "203004", eType: EXPECTED_ERROR, message: "Transaction Type Mapping Code already exists. "}
var E203005 = Global_error{id: "203005", eType: EXPECTED_ERROR, message: "Location Mapping Code does not exist. "}
var E203006 = Global_error{id: "203006", eType: EXPECTED_ERROR, message: "Location Mapping Code already exists. "}
var E203007 = Global_error{id: "203007", eType: EXPECTED_ERROR, message: "Account Mapping code does not exist. "}
var E203008 = Global_error{id: "203008", eType: EXPECTED_ERROR, message: "Account Mapping code already exists. "}
var E203009 = Global_error{id: "203009", eType: EXPECTED_ERROR, message: "Document Mapping Code does not exist. "}
var E203010 = Global_error{id: "203010", eType: EXPECTED_ERROR, message: "Journal Mapping Code does not exist. "}
var E203011 = Global_error{id: "203011", eType: EXPECTED_ERROR, message: "Document and Journal Mapping code does not already exist. "}
var E203012 = Global_error{id: "203012", eType: EXPECTED_ERROR, message: "Document and Journal Mapping code already exist. "}
var E203013 = Global_error{id: "203013", eType: EXPECTED_ERROR, message: "Transaction Type code does not exist. "}
var E203014 = Global_error{id: "203014", eType: EXPECTED_ERROR, message: "Transaction Type code already exists. "}
var E203015 = Global_error{id: "203015", eType: EXPECTED_ERROR, message: "Location type code does not exist. "}
var E203016 = Global_error{id: "203016", eType: EXPECTED_ERROR, message: "Location type code already exist. "}
var E203017 = Global_error{id: "203017", eType: EXPECTED_ERROR, message: "Sequence number does not exist. "}
var E203018 = Global_error{id: "203018", eType: EXPECTED_ERROR, message: "Sequence number already exists. "}
var E203019 = Global_error{id: "203019", eType: EXPECTED_ERROR, message: "Cannot Update Hold Until Date. "}
var E203020 = Global_error{id: "203020", eType: EXPECTED_ERROR, message: "Commission Plan Code is refered from DC_PCOM_PLAN table. Cannot be update. "}
var E203021 = Global_error{id: "203021", eType: EXPECTED_ERROR, message: "New Actual Sent Date Must greater than Old Actual Sent Date. "}
var E203022 = Global_error{id: "203022", eType: EXPECTED_ERROR, message: "Actual Sent Date Must less than End Date. "}
var E203023 = Global_error{id: "203023", eType: EXPECTED_ERROR, message: "End date cannot be less than TODAY. "}
var E203024 = Global_error{id: "203024", eType: EXPECTED_ERROR, message: "New Flag can be 'Y' or 'N' only "}
var E203025 = Global_error{id: "203025", eType: EXPECTED_ERROR, message: "No data found for this condition. "}
var E203026 = Global_error{id: "203026", eType: EXPECTED_ERROR, message: "SIM Validity record is not found. "}
var E203027 = Global_error{id: "203027", eType: EXPECTED_ERROR, message: "Expiry date must be null. "}
var E203028 = Global_error{id: "203028", eType: EXPECTED_ERROR, message: "Expiry date must not be null. "}
var E203029 = Global_error{id: "203029", eType: EXPECTED_ERROR, message: "Subscriber number does not exist in table rd_telp. "}
var E203030 = Global_error{id: "203030", eType: EXPECTED_ERROR, message: "Customer Type is not individual type . "}
var E203031 = Global_error{id: "203031", eType: EXPECTED_ERROR, message: "Customer is suspended Arrear. "}
var E203032 = Global_error{id: "203032", eType: EXPECTED_ERROR, message: "Customer is in Black List. "}
var E203033 = Global_error{id: "203033", eType: EXPECTED_ERROR, message: "Customer grade does not exist. "}
var E203034 = Global_error{id: "203034", eType: EXPECTED_ERROR, message: "Customer is already unlimited Credit Limit. "}
var E203035 = Global_error{id: "203035", eType: EXPECTED_ERROR, message: "Customer is Grade W (fraud), cannot change Credit Limit. "}
var E203036 = Global_error{id: "203036", eType: EXPECTED_ERROR, message: "Credit Limit Offer does not exist. "}
var E203037 = Global_error{id: "203037", eType: EXPECTED_ERROR, message: "Group code exist but currently does not active. "}
var E203038 = Global_error{id: "203038", eType: EXPECTED_ERROR, message: "Other Airtime = %.2f , Reconnect = %.2f , Penalty & Legal = %.2f. "}
var E203039 = Global_error{id: "203039", eType: EXPECTED_ERROR, message: "BC Outsource can not be NULL. "}
var E203040 = Global_error{id: "203040", eType: EXPECTED_ERROR, message: "Commission Plan Code Must Last Commission Plan Code + 1. "}
var E203041 = Global_error{id: "203041", eType: EXPECTED_ERROR, message: "SIM Card has been deleted from AUC. "}
var E203042 = Global_error{id: "203042", eType: EXPECTED_ERROR, message: "Airtime discount transaction  already exists. "}
var E203043 = Global_error{id: "203043", eType: EXPECTED_ERROR, message: "Airtime discount transaction  does not exist. "}
var E203044 = Global_error{id: "203044", eType: EXPECTED_ERROR, message: "Telephone is in transition period or SIM Validity record has been expired. "}
var E203045 = Global_error{id: "203045", eType: EXPECTED_ERROR, message: "Extended Date must less than or equal to Phase Day of next Phase. "}
var E203046 = Global_error{id: "203046", eType: EXPECTED_ERROR, message: "Subscriber does not exist in any group code. "}
var E203047 = Global_error{id: "203047", eType: EXPECTED_ERROR, message: "Balance point is not enough to decrease. "}
var E203048 = Global_error{id: "203048", eType: EXPECTED_ERROR, message: "Record is not yet expired. "}
var E203049 = Global_error{id: "203049", eType: EXPECTED_ERROR, message: "Record is already expired. "}
var E203050 = Global_error{id: "203050", eType: EXPECTED_ERROR, message: "Cycle of generate D4U statement for corporate does not exist. "}
var E203051 = Global_error{id: "203051", eType: EXPECTED_ERROR, message: "TPDC map code does not exist. "}
var E203052 = Global_error{id: "203052", eType: EXPECTED_ERROR, message: "TPDC map code already exists. "}
var E203053 = Global_error{id: "203053", eType: EXPECTED_ERROR, message: "TPJR map code does not exist. "}
var E203054 = Global_error{id: "203054", eType: EXPECTED_ERROR, message: "TPJR map code already exists. "}
var E203055 = Global_error{id: "203055", eType: EXPECTED_ERROR, message: "Subscriber Number is 'PROMPT' cannot pay "}
var E203056 = Global_error{id: "203056", eType: EXPECTED_ERROR, message: "Non-voice services for this subscriber cannot be automatically activated as the subscriber has not used them for quite a long time "}
var E203057 = Global_error{id: "203057", eType: EXPECTED_ERROR, message: "Billing product code does not exist in RD_BILL_PRDT so can not insert this code. "}
var E203058 = Global_error{id: "203058", eType: EXPECTED_ERROR, message: "Billing product code already exists. "}
var E203059 = Global_error{id: "203059", eType: EXPECTED_ERROR, message: "Can not get authorities file for refill dprompt. "}
var E203060 = Global_error{id: "203060", eType: EXPECTED_ERROR, message: "Refill Process error : "}
var E203061 = Global_error{id: "203061", eType: EXPECTED_ERROR, message: "Next package is not applicable for this package. "}
var E203062 = Global_error{id: "203062", eType: EXPECTED_ERROR, message: "Prepaid charging is not applicable for this package type. "}
var E203063 = Global_error{id: "203063", eType: EXPECTED_ERROR, message: "Prepaid charging is not applicable for this telephone type. "}
var E203064 = Global_error{id: "203064", eType: EXPECTED_ERROR, message: "Promotion Amount Fee for this package group must be zero baht. "}
var E203065 = Global_error{id: "203065", eType: EXPECTED_ERROR, message: "No IN Service Code in main package of package group. "}
var E203066 = Global_error{id: "203066", eType: EXPECTED_ERROR, message: "Credit Limit input is greater than Credit Limit Offer. "}
var E203067 = Global_error{id: "203067", eType: EXPECTED_ERROR, message: "Maximum Credit Limit Amount of Subscriber cannot be greater than that of Customer. "}
var E203068 = Global_error{id: "203068", eType: EXPECTED_ERROR, message: "IN Airtime Code Mapping already exists. "}
var E203069 = Global_error{id: "203069", eType: EXPECTED_ERROR, message: "IN Airtime Code Mapping does not exist. "}
var E203070 = Global_error{id: "203070", eType: EXPECTED_ERROR, message: "IN Tariff already exists. "}
var E203071 = Global_error{id: "203071", eType: EXPECTED_ERROR, message: "IN Tariff does not exist. "}
var E203072 = Global_error{id: "203072", eType: EXPECTED_ERROR, message: "Prepaid Event Code already existis. "}
var E203073 = Global_error{id: "203073", eType: EXPECTED_ERROR, message: "Prepaid Event Code does not exist. "}
var E203074 = Global_error{id: "203074", eType: EXPECTED_ERROR, message: "Printing Image does not exist. "}
var E203075 = Global_error{id: "203075", eType: EXPECTED_ERROR, message: "Printing Image already exists. "}
var E203076 = Global_error{id: "203076", eType: EXPECTED_ERROR, message: "Printing Group Code does not exist. "}
var E203077 = Global_error{id: "203077", eType: EXPECTED_ERROR, message: "Printing Group Code already exists. "}
var E203078 = Global_error{id: "203078", eType: EXPECTED_ERROR, message: "This package plan cannot use this customer promotion as it has already been used with another package plan. "}
var E203079 = Global_error{id: "203079", eType: EXPECTED_ERROR, message: "Warranty Date of this subscriber does not exist. "}
var E203080 = Global_error{id: "203080", eType: EXPECTED_ERROR, message: "Max. number of subscriber for customer promotion of this package cannot be greater than that of customer promotion of next package. "}
var E203081 = Global_error{id: "203081", eType: EXPECTED_ERROR, message: "Package without a customer promotion cannot have next package with customer promotion. "}
var E203082 = Global_error{id: "203082", eType: EXPECTED_ERROR, message: "Base package group cannot associate with a package having customer promotion. "}
var E203083 = Global_error{id: "203083", eType: EXPECTED_ERROR, message: "Data were not synchronized with all required databases. "}
var E203084 = Global_error{id: "203084", eType: EXPECTED_ERROR, message: "Credit Limit Amount must be greater or equal to Summary of Credit Limit by Subr. "}
var E203085 = Global_error{id: "203085", eType: EXPECTED_ERROR, message: "Invalid credit expiry days. "}
var E203086 = Global_error{id: "203086", eType: EXPECTED_ERROR, message: "Package Category is not applicable for this package type. "}
var E203087 = Global_error{id: "203087", eType: EXPECTED_ERROR, message: "Package Category cannot be blank for prepaid telephone type. "}
var E203088 = Global_error{id: "203088", eType: EXPECTED_ERROR, message: "Don't allow to change package to this package group. "}
var E203089 = Global_error{id: "203089", eType: EXPECTED_ERROR, message: "User does not have authorization to waive fee of changing prepaid package group. "}
var E203090 = Global_error{id: "203090", eType: EXPECTED_ERROR, message: "The Channel does not exist. "}
var E203091 = Global_error{id: "203091", eType: EXPECTED_ERROR, message: "The Channel already exists. "}
var E203092 = Global_error{id: "203092", eType: EXPECTED_ERROR, message: "The Prompt Voucher already exist. "}
var E203093 = Global_error{id: "203093", eType: EXPECTED_ERROR, message: "The Prompt Voucher does not exist. "}
var E203094 = Global_error{id: "203094", eType: EXPECTED_ERROR, message: "The Prompt Voucher already exists but is not active. "}
var E203095 = Global_error{id: "203095", eType: EXPECTED_ERROR, message: "The Prompt Voucher already exists and is currently active. "}
var E203096 = Global_error{id: "203096", eType: EXPECTED_ERROR, message: "Failed to connect to MD-SMI. "}
var E203097 = Global_error{id: "203097", eType: EXPECTED_ERROR, message: "Failed to add voucher at MD-SMI. "}
var E203098 = Global_error{id: "203098", eType: EXPECTED_ERROR, message: "Update Prompt Bonus table failed. "}
var E203099 = Global_error{id: "203099", eType: EXPECTED_ERROR, message: "Invalid package category. "}
var E203100 = Global_error{id: "203100", eType: EXPECTED_ERROR, message: "There must be one record whose expiry date is NULL for similar IMSI Prefix. "}
var E203101 = Global_error{id: "203101", eType: EXPECTED_ERROR, message: "The waive fee authorization does not exist. "}
var E203102 = Global_error{id: "203102", eType: EXPECTED_ERROR, message: "You have no authorization in this file. "}
var E203103 = Global_error{id: "203103", eType: EXPECTED_ERROR, message: "Commitment Amount is less than minimum allowance. "}
var E203104 = Global_error{id: "203104", eType: EXPECTED_ERROR, message: "Invalid Sequence MOD. "}
var E203105 = Global_error{id: "203105", eType: EXPECTED_ERROR, message: "Insert Prompt Bonus table failed. "}
var E203106 = Global_error{id: "203106", eType: EXPECTED_ERROR, message: "Prepaid package group cann�t be base package group. "}
var E203107 = Global_error{id: "203107", eType: EXPECTED_ERROR, message: "No record found in Adjustment Information. "}
var E203108 = Global_error{id: "203108", eType: EXPECTED_ERROR, message: "Subscriber is unsuspended but not added VAS package because it has not been used for quite a long time. "}
var E203109 = Global_error{id: "203109", eType: EXPECTED_ERROR, message: "Recurring bonus code does not exist. "}
var E203110 = Global_error{id: "203110", eType: EXPECTED_ERROR, message: "Invalid recurring sequence number. "}
var E203111 = Global_error{id: "203111", eType: EXPECTED_ERROR, message: "Invalid recurring bonus code. "}
var E203112 = Global_error{id: "203112", eType: EXPECTED_ERROR, message: "Subscriber recurring bonus is not found. "}
var E203113 = Global_error{id: "203113", eType: EXPECTED_ERROR, message: "Recurring bonus code already exists. "}
var E203114 = Global_error{id: "203114", eType: EXPECTED_ERROR, message: "Recurring bonus code is expired. "}
var E203115 = Global_error{id: "203115", eType: EXPECTED_ERROR, message: "Recurring bonus code exist and is currently effective. "}
var E203116 = Global_error{id: "203116", eType: EXPECTED_ERROR, message: "Recurring bonus voucher amount should not less than zero. "}
var E203117 = Global_error{id: "203117", eType: EXPECTED_ERROR, message: "Recurring bonus voucher days should not less than zero. "}
var E203118 = Global_error{id: "203118", eType: EXPECTED_ERROR, message: "Recurring bonus code is currently effective, cannot update. "}
var E203119 = Global_error{id: "203119", eType: EXPECTED_ERROR, message: "Please re-check subscriber's recurring bonus. "}
var E203120 = Global_error{id: "203120", eType: EXPECTED_ERROR, message: "Customer Additional record does not exist. "}
var E203121 = Global_error{id: "203121", eType: EXPECTED_ERROR, message: "Credit Limit Amount must be greater or equal to Summary of Credit Limit by Sub. "}
var E203122 = Global_error{id: "203122", eType: EXPECTED_ERROR, message: "Balance Amount is less than minimum allowance. "}
var E203123 = Global_error{id: "203123", eType: EXPECTED_ERROR, message: "The current phase must between phase 2 or 3 only. "}
var E203124 = Global_error{id: "203124", eType: EXPECTED_ERROR, message: "Invalid table indicator. "}
var E203125 = Global_error{id: "203125", eType: EXPECTED_ERROR, message: "Delete subscriber prompt recurring table failed. "}
var E203126 = Global_error{id: "203126", eType: EXPECTED_ERROR, message: "Delete MD-SMI interface table failed. "}
var E203127 = Global_error{id: "203127", eType: EXPECTED_ERROR, message: "Update MD-SMI interface table failed. "}
var E203128 = Global_error{id: "203128", eType: EXPECTED_ERROR, message: "Update subscriber prompt recurring table failed. "}
var E203129 = Global_error{id: "203129", eType: EXPECTED_ERROR, message: "Special day promotion already exists. "}
var E203130 = Global_error{id: "203130", eType: EXPECTED_ERROR, message: "Special day promotion does not exist. "}
var E203131 = Global_error{id: "203131", eType: EXPECTED_ERROR, message: "Found active same service code in subscriber service detail table. "}
var E203132 = Global_error{id: "203132", eType: EXPECTED_ERROR, message: "Subscriber is not using special day promotion. "}
var E203133 = Global_error{id: "203133", eType: EXPECTED_ERROR, message: "New special day must be different from existing special day. "}
var E203134 = Global_error{id: "203134", eType: EXPECTED_ERROR, message: "New promotion is not a special day promotion. "}
var E203135 = Global_error{id: "203135", eType: EXPECTED_ERROR, message: "Effective special day promotion is not found. "}
var E203136 = Global_error{id: "203136", eType: EXPECTED_ERROR, message: "Invalid Special Day. "}
var E203137 = Global_error{id: "203137", eType: EXPECTED_ERROR, message: "Special day promotion is already in use. "}
var E203138 = Global_error{id: "203138", eType: EXPECTED_ERROR, message: "Special day already exists. "}
var E203139 = Global_error{id: "203139", eType: EXPECTED_ERROR, message: "There must be 7 Special day options. "}
var E203140 = Global_error{id: "203140", eType: EXPECTED_ERROR, message: "The Interconection Operator already exist. "}
var E203141 = Global_error{id: "203141", eType: EXPECTED_ERROR, message: "The Interconection Operator does not exist. "}
var E203142 = Global_error{id: "203142", eType: EXPECTED_ERROR, message: "The Circuit Group already exist. "}
var E203143 = Global_error{id: "203143", eType: EXPECTED_ERROR, message: "The Circuit Group does not exist. "}
var E203144 = Global_error{id: "203144", eType: EXPECTED_ERROR, message: "Customer Additional record does not exist. "}
var E203145 = Global_error{id: "203145", eType: EXPECTED_ERROR, message: "Credit Limit Amount must be greater or equal to Summary of Credit Limit by Sub. "}
var E203146 = Global_error{id: "203146", eType: EXPECTED_ERROR, message: "This special day promotion is currently effective. Do not modify it. "}
var E203147 = Global_error{id: "203147", eType: EXPECTED_ERROR, message: "System's queue is full. Please retry again. "}
var E203148 = Global_error{id: "203148", eType: EXPECTED_ERROR, message: "Cannot credit note with transaction that balance amount less than adjust amount. Please contact accounting "}
var E203149 = Global_error{id: "203149", eType: EXPECTED_ERROR, message: "Message Group should be 'P', 'B', 'F' or 'N' only "}
var E203150 = Global_error{id: "203150", eType: EXPECTED_ERROR, message: "Send Message should be 'A', 'M', 'N' or 'S' only. "}
var E203151 = Global_error{id: "203151", eType: EXPECTED_ERROR, message: "The table name does not exist. "}
var E203152 = Global_error{id: "203152", eType: EXPECTED_ERROR, message: "The specified key does not exist in the table. "}
var E203153 = Global_error{id: "203153", eType: EXPECTED_ERROR, message: "Invalid condition for purging data. "}
var E203154 = Global_error{id: "203154", eType: EXPECTED_ERROR, message: "Purging data already exists. "}
var E203155 = Global_error{id: "203155", eType: EXPECTED_ERROR, message: "Purging data does not exist. "}
var E203156 = Global_error{id: "203156", eType: EXPECTED_ERROR, message: "Purging data already exists but is not active. "}
var E203157 = Global_error{id: "203157", eType: EXPECTED_ERROR, message: "Purging data already exists and is currently active. "}
var E203158 = Global_error{id: "203158", eType: EXPECTED_ERROR, message: "Invalid transaction level. "}
var E203159 = Global_error{id: "203159", eType: EXPECTED_ERROR, message: "This package is prerequisite of the other subscriber�s package. "}
var E203160 = Global_error{id: "203160", eType: EXPECTED_ERROR, message: "Prerequisite(s) are not exist in subscriber�s packages. "}
var E203161 = Global_error{id: "203161", eType: EXPECTED_ERROR, message: "VAS package record is not found. "}
var E203162 = Global_error{id: "203162", eType: EXPECTED_ERROR, message: "Update CS_REFR_SVOR failed. "}
var E203163 = Global_error{id: "203163", eType: EXPECTED_ERROR, message: "Update CS_REFR_BTCH failed. "}
var E203164 = Global_error{id: "203164", eType: EXPECTED_ERROR, message: "TAP Service Type & ID already exists. "}
var E203165 = Global_error{id: "203165", eType: EXPECTED_ERROR, message: "TAP Service Type & ID does not exists. "}
var E203166 = Global_error{id: "203166", eType: EXPECTED_ERROR, message: "Package plan with recurring fee is not allowed to have next package. "}
var E203167 = Global_error{id: "203167", eType: EXPECTED_ERROR, message: "There are a lot of queue to process suspend/unsuspend/switch off. "}
var E203168 = Global_error{id: "203168", eType: EXPECTED_ERROR, message: "Invalid maximum rows. "}
var E203169 = Global_error{id: "203169", eType: EXPECTED_ERROR, message: "Suspension reason property and telephone type are inconsistent. "}
var E203170 = Global_error{id: "203170", eType: EXPECTED_ERROR, message: "Update recurring fee table failed. "}
var E203171 = Global_error{id: "203171", eType: EXPECTED_ERROR, message: "Invalid recurring fee amount. "}
var E203172 = Global_error{id: "203172", eType: EXPECTED_ERROR, message: "There are a lot of queue to process suspend/unsuspend/switch off "}
var E203173 = Global_error{id: "203173", eType: EXPECTED_ERROR, message: "Invalid register amount for this process. "}
var E203174 = Global_error{id: "203174", eType: EXPECTED_ERROR, message: "Family Group Code already exists. "}
var E203175 = Global_error{id: "203175", eType: EXPECTED_ERROR, message: "Family Group Code does not exist. "}
var E203176 = Global_error{id: "203176", eType: EXPECTED_ERROR, message: "This subscriber cannot use SOS package. "}
var E203177 = Global_error{id: "203177", eType: EXPECTED_ERROR, message: "Clear outstanding amount before process this. "}
var E203178 = Global_error{id: "203178", eType: EXPECTED_ERROR, message: "Failed to deduct money by MD-SMI. "}
var E203179 = Global_error{id: "203179", eType: EXPECTED_ERROR, message: "Invalid registration period. "}
var E203180 = Global_error{id: "203180", eType: EXPECTED_ERROR, message: "Subscriber's package is not applicable to request SOS. "}
var E203181 = Global_error{id: "203181", eType: EXPECTED_ERROR, message: "Invalid SOS amount. "}
var E203182 = Global_error{id: "203182", eType: EXPECTED_ERROR, message: "Subscriber's balance is not valid for requesting SOS. "}
var E203183 = Global_error{id: "203183", eType: EXPECTED_ERROR, message: "Failed to inquire prepaid subscriber information from MD-SMI. "}
var E203184 = Global_error{id: "203184", eType: EXPECTED_ERROR, message: "Subscriber has to refill money before requesting SOS again. "}
var E203185 = Global_error{id: "203185", eType: EXPECTED_ERROR, message: "Image file name is already exist. "}
var E203186 = Global_error{id: "203186", eType: EXPECTED_ERROR, message: "Image file name dose not exist. "}
var E203187 = Global_error{id: "203187", eType: EXPECTED_ERROR, message: "Input period is less than current period. "}
var E203188 = Global_error{id: "203188", eType: EXPECTED_ERROR, message: "There is no active subscriber. "}
var E203189 = Global_error{id: "203189", eType: EXPECTED_ERROR, message: "No active subscriber registered with non Family Special package is found. "}
var E203190 = Global_error{id: "203190", eType: EXPECTED_ERROR, message: "Subcsriber registering with new account cannot use Family Special package. "}
var E203191 = Global_error{id: "203191", eType: EXPECTED_ERROR, message: "Allowed maximum number of subscriber has been registred for this Family Special package. "}
var E203192 = Global_error{id: "203192", eType: EXPECTED_ERROR, message: "Subscriber�s switch on date isn�t in period that allow for processing. "}
var E203193 = Global_error{id: "203193", eType: EXPECTED_ERROR, message: "Update CS_DVAS_ITFC failed. "}
var E203194 = Global_error{id: "203194", eType: EXPECTED_ERROR, message: "Delete record from CS_VAS_EPPK failed. "}
var E203195 = Global_error{id: "203195", eType: EXPECTED_ERROR, message: "Delete record from CS_SPKD_PCN failed. "}
var E203196 = Global_error{id: "203196", eType: EXPECTED_ERROR, message: "VAS package is requested by subscriber, Cannot delete this package. "}
var E203197 = Global_error{id: "203197", eType: EXPECTED_ERROR, message: "Package Plan code for expiring does not exist in Prompt VAS master. "}
var E203198 = Global_error{id: "203198", eType: EXPECTED_ERROR, message: "Package Plan code for expiring is not valid. "}
var E203199 = Global_error{id: "203199", eType: EXPECTED_ERROR, message: "Package Plan code for adding is not valid. "}
var E203200 = Global_error{id: "203200", eType: EXPECTED_ERROR, message: "Inquiry data does not exist. "}
var E203201 = Global_error{id: "203201", eType: EXPECTED_ERROR, message: "Inquiry data already exists but is not active. "}
var E203202 = Global_error{id: "203202", eType: EXPECTED_ERROR, message: "Inquiry data already exists and is currently active. "}
var E203203 = Global_error{id: "203203", eType: EXPECTED_ERROR, message: "Invalid minimum rows. "}
var E203204 = Global_error{id: "203204", eType: EXPECTED_ERROR, message: "Family special group code is inconsistent with telephone and package types "}
var E203205 = Global_error{id: "203205", eType: EXPECTED_ERROR, message: "Not found telephone quota analysis data. "}
var E203206 = Global_error{id: "203206", eType: EXPECTED_ERROR, message: "Not found telephone quota analysis data for current period. "}
var E203207 = Global_error{id: "203207", eType: EXPECTED_ERROR, message: "TAP Audit does not exist. "}
var E203208 = Global_error{id: "203208", eType: EXPECTED_ERROR, message: "TAP TYPE must be 'I' or 'O' only. "}
var E203209 = Global_error{id: "203209", eType: EXPECTED_ERROR, message: "File indicator must be 'C' or 'T' only. "}
var E203210 = Global_error{id: "203210", eType: EXPECTED_ERROR, message: "RAP Audit does not exist. "}
var E203211 = Global_error{id: "203211", eType: EXPECTED_ERROR, message: "RAP TYPE must be 'I' or 'O' only. "}
var E203212 = Global_error{id: "203212", eType: EXPECTED_ERROR, message: "Reject type must be 'F', 'M', 'S' or 'W' only. "}
var E203213 = Global_error{id: "203213", eType: EXPECTED_ERROR, message: "Recovery flag must be 'Y' or 'N' only. "}
var E203214 = Global_error{id: "203214", eType: EXPECTED_ERROR, message: "Cross Product already exist. "}
var E203215 = Global_error{id: "203215", eType: EXPECTED_ERROR, message: "Cross Produdt does not exist. "}
var E203216 = Global_error{id: "203216", eType: EXPECTED_ERROR, message: "Cross Product flag must be 'Y' or 'N' only. "}
var E203217 = Global_error{id: "203217", eType: EXPECTED_ERROR, message: "Revenue flag must be 'Y' or 'N' only. "}
var E203218 = Global_error{id: "203218", eType: EXPECTED_ERROR, message: "Roller over flag must be 'Y' or 'N' only. "}
var E203219 = Global_error{id: "203219", eType: EXPECTED_ERROR, message: "Shared flag must be 'Y' or 'N' only. "}
var E203220 = Global_error{id: "203220", eType: EXPECTED_ERROR, message: "Package has been cancelled before charging the recurring fee. "}
var E203221 = Global_error{id: "203221", eType: EXPECTED_ERROR, message: "Package Notification already exists. "}
var E203222 = Global_error{id: "203222", eType: EXPECTED_ERROR, message: "Package Notification does not exist. "}
var E203223 = Global_error{id: "203223", eType: EXPECTED_ERROR, message: "Input Type must be 'M','U','X','Y' or 'T' "}
var E203224 = Global_error{id: "203224", eType: EXPECTED_ERROR, message: "Discount Special Type must be 'D','T','S' or 'C' "}
var E203225 = Global_error{id: "203225", eType: EXPECTED_ERROR, message: "Discount detail already exist. "}
var E203226 = Global_error{id: "203226", eType: EXPECTED_ERROR, message: "Package cannot be Family special and customer promotional package at the same time. "}
var E203227 = Global_error{id: "203227", eType: EXPECTED_ERROR, message: "Invalid Day Category. "}
var E203228 = Global_error{id: "203228", eType: EXPECTED_ERROR, message: "Invalid Time Band. "}
var E203229 = Global_error{id: "203229", eType: EXPECTED_ERROR, message: "Subscriber�s secondary card information doesn�t exist. "}
var E203230 = Global_error{id: "203230", eType: EXPECTED_ERROR, message: "Subscriber's secondary card information already exists. "}
var E203231 = Global_error{id: "203231", eType: EXPECTED_ERROR, message: "Subscriber�s secondary card status isn�t applicable for processing. "}
var E203232 = Global_error{id: "203232", eType: EXPECTED_ERROR, message: "Secondary card is in used already. "}
var E203233 = Global_error{id: "203233", eType: EXPECTED_ERROR, message: "Subscriber change secondary card. "}
var E203234 = Global_error{id: "203234", eType: EXPECTED_ERROR, message: "Cannot cancel subscriber�s secondary card information. "}
var E203235 = Global_error{id: "203235", eType: EXPECTED_ERROR, message: "Cannot delete subscriber�s secondary card information. "}
var E203236 = Global_error{id: "203236", eType: EXPECTED_ERROR, message: "Subscriber�s secondary card is deleted. "}
var E203237 = Global_error{id: "203237", eType: EXPECTED_ERROR, message: "Invalid  Airtime Type Unit. "}
var E203238 = Global_error{id: "203238", eType: EXPECTED_ERROR, message: "Invalid  Charge Zone. "}
var E203239 = Global_error{id: "203239", eType: EXPECTED_ERROR, message: "Invalid  Network Element Type. "}
var E203240 = Global_error{id: "203240", eType: EXPECTED_ERROR, message: "Invalid  Credit Limit Status. "}
var E203241 = Global_error{id: "203241", eType: EXPECTED_ERROR, message: "Data can not change. It must be canceled the Budget Alert and Bar Service. "}
var E203242 = Global_error{id: "203242", eType: EXPECTED_ERROR, message: "Data can not change. Must be cancel the Budget Alert service before. "}
var E203243 = Global_error{id: "203243", eType: EXPECTED_ERROR, message: "Dual bill already exist "}
var E203244 = Global_error{id: "203244", eType: EXPECTED_ERROR, message: "Dual bill does not exist "}
var E203245 = Global_error{id: "203245", eType: EXPECTED_ERROR, message: "Update CS_SCND_BTCH failed. "}
var E203246 = Global_error{id: "203246", eType: EXPECTED_ERROR, message: "Transaction is not allowed for this card as it is secondary card. "}
var E203247 = Global_error{id: "203247", eType: EXPECTED_ERROR, message: "Subscriber is not authorized to use secondary card. "}
var E203248 = Global_error{id: "203248", eType: EXPECTED_ERROR, message: "Socket of SMS Gateway Server cannot be created "}
var E203249 = Global_error{id: "203249", eType: EXPECTED_ERROR, message: "Host of SMS Gateway Server cannot be  found "}
var E203250 = Global_error{id: "203250", eType: EXPECTED_ERROR, message: "Connection to SMS Gateway Server cannot be established "}
var E203251 = Global_error{id: "203251", eType: EXPECTED_ERROR, message: "Error in reading from socket of SMS Gateway Server "}
var E203252 = Global_error{id: "203252", eType: EXPECTED_ERROR, message: "Error in writing to socket of SMS Gateway Server "}
var E203253 = Global_error{id: "203253", eType: EXPECTED_ERROR, message: "User is invalid to use SMS Gateway  services "}
var E203254 = Global_error{id: "203254", eType: EXPECTED_ERROR, message: "SMS Gateway Server has  encountered session time out "}
var E203255 = Global_error{id: "203255", eType: EXPECTED_ERROR, message: "Required authentication prior to sending SMS has not yet been processed "}
var E203256 = Global_error{id: "203256", eType: EXPECTED_ERROR, message: "Error in sending SMS through SMS Gateway Server "}
var E203257 = Global_error{id: "203257", eType: EXPECTED_ERROR, message: "SMS Gateway Client has encountered reading session time out "}
var E203258 = Global_error{id: "203258", eType: EXPECTED_ERROR, message: "SMS Gateway Client has encountered writing session time out "}
var E203259 = Global_error{id: "203259", eType: EXPECTED_ERROR, message: "No response from SMSC Server "}
var E203260 = Global_error{id: "203260", eType: EXPECTED_ERROR, message: "This Customer must be a Corporate member "}
var E203261 = Global_error{id: "203261", eType: EXPECTED_ERROR, message: "Effective date can not be greater than expiry date "}
var E203262 = Global_error{id: "203262", eType: EXPECTED_ERROR, message: "Allow Negative Deduct must be 'Y' or 'N' only. "}
var E203263 = Global_error{id: "203263", eType: EXPECTED_ERROR, message: "Airtime Type of Charge Type Changed does not exist . "}
var E203264 = Global_error{id: "203264", eType: EXPECTED_ERROR, message: "Airtime Type of Charge Type Changed already exists. "}
var E203265 = Global_error{id: "203265", eType: EXPECTED_ERROR, message: "Charge Type Unit must be 'M','T' or 'X' only. "}
var E203266 = Global_error{id: "203266", eType: EXPECTED_ERROR, message: "There is no effective relationship between IMSI Group and IMSI Prefix "}
var E203267 = Global_error{id: "203267", eType: EXPECTED_ERROR, message: "Subscriber's package is not allowed to do this transaction "}
var E203268 = Global_error{id: "203268", eType: EXPECTED_ERROR, message: "Share to CAT does not exist. "}
var E203269 = Global_error{id: "203269", eType: EXPECTED_ERROR, message: "Share to CAT already exists. "}
var E203270 = Global_error{id: "203270", eType: EXPECTED_ERROR, message: "Share Information does not exist. "}
var E203271 = Global_error{id: "203271", eType: EXPECTED_ERROR, message: "Share Information already exists. "}
var E203272 = Global_error{id: "203272", eType: EXPECTED_ERROR, message: "Share Information Level does not exist. "}
var E203273 = Global_error{id: "203273", eType: EXPECTED_ERROR, message: "Share Information Level already exists. "}
var E203274 = Global_error{id: "203274", eType: EXPECTED_ERROR, message: "CAT Flag must be 'Y' or 'N' only. "}
var E203275 = Global_error{id: "203275", eType: EXPECTED_ERROR, message: "Log File Flag must be 'Y' or 'N' only. "}
var E203276 = Global_error{id: "203276", eType: EXPECTED_ERROR, message: "Share Reference Number already exists. "}
var E203277 = Global_error{id: "203277", eType: EXPECTED_ERROR, message: "Unit Share Flag must be 'M' or 'P' only. "}
var E203278 = Global_error{id: "203278", eType: EXPECTED_ERROR, message: "Telephone is of billing product AMPS or does not exist. "}
var E203279 = Global_error{id: "203279", eType: EXPECTED_ERROR, message: "Control code does not exist. "}
var E203280 = Global_error{id: "203280", eType: EXPECTED_ERROR, message: "Control code already exists but is not active. "}
var E203281 = Global_error{id: "203281", eType: EXPECTED_ERROR, message: "Control code already exists and is currently active. "}
var E203282 = Global_error{id: "203282", eType: EXPECTED_ERROR, message: "Control code already exists. "}
var E203283 = Global_error{id: "203283", eType: EXPECTED_ERROR, message: "Invalid Usage Days "}
var E203284 = Global_error{id: "203284", eType: EXPECTED_ERROR, message: "Dial Digit does not exist. "}
var E203285 = Global_error{id: "203285", eType: EXPECTED_ERROR, message: "Dial Digit already exists. "}
var E203286 = Global_error{id: "203286", eType: EXPECTED_ERROR, message: "Dial Digit Detail does not exist. "}
var E203287 = Global_error{id: "203287", eType: EXPECTED_ERROR, message: "Dial Digit Detail already exists. "}
var E203288 = Global_error{id: "203288", eType: EXPECTED_ERROR, message: "Wild Card Flag must be 'Y' or 'N' only. "}
var E203289 = Global_error{id: "203289", eType: EXPECTED_ERROR, message: "Revise Flag must be 'Y' or 'N' only. "}
var E203290 = Global_error{id: "203290", eType: EXPECTED_ERROR, message: "Package SMS already exists. "}
var E203291 = Global_error{id: "203291", eType: EXPECTED_ERROR, message: "Package SMS does not exist. "}
var E203292 = Global_error{id: "203292", eType: EXPECTED_ERROR, message: "At least one message must have a value. "}
var E203293 = Global_error{id: "203293", eType: EXPECTED_ERROR, message: "Expired prompt VAS is not allowed to send SMS. "}
var E203294 = Global_error{id: "203294", eType: EXPECTED_ERROR, message: "Exchange Transaction already exists. "}
var E203295 = Global_error{id: "203295", eType: EXPECTED_ERROR, message: "Exchange Transaction does not exists. "}
var E203296 = Global_error{id: "203296", eType: EXPECTED_ERROR, message: "Request Type and Day does not exists "}
var E203297 = Global_error{id: "203297", eType: EXPECTED_ERROR, message: "Request Type is invalid. "}
var E203298 = Global_error{id: "203298", eType: EXPECTED_ERROR, message: "TRNS_STTS from ChckSOSExst is NULL. "}
var E203299 = Global_error{id: "203299", eType: EXPECTED_ERROR, message: "Subscriber have SOS balance more than 0 "}
var E203300 = Global_error{id: "203300", eType: EXPECTED_ERROR, message: "Cannot delete record active. "}
var E203301 = Global_error{id: "203301", eType: EXPECTED_ERROR, message: "Save flag detail must be INST "}
var E203302 = Global_error{id: "203302", eType: EXPECTED_ERROR, message: "Can not insert/update active record. "}
var E203303 = Global_error{id: "203303", eType: EXPECTED_ERROR, message: "Error in deleting data. "}
var E203304 = Global_error{id: "203304", eType: EXPECTED_ERROR, message: "Timeout to active service. "}
var E203305 = Global_error{id: "203305", eType: EXPECTED_ERROR, message: "Not found data in Parameter Table. "}
var E203306 = Global_error{id: "203306", eType: EXPECTED_ERROR, message: "TRNS_PERD must null when FROM_DATE / TO_DATE have value. "}
var E203307 = Global_error{id: "203307", eType: EXPECTED_ERROR, message: "The current time exceeds transaction end date/time. "}
var E203308 = Global_error{id: "203308", eType: EXPECTED_ERROR, message: "Update SMS interface table failed. "}
var E203309 = Global_error{id: "203309", eType: EXPECTED_ERROR, message: "Package for sending SMS has already been canceled. "}
var E203310 = Global_error{id: "203310", eType: EXPECTED_ERROR, message: "Start or end date/time of package has already been changed. "}
var E203311 = Global_error{id: "203311", eType: EXPECTED_ERROR, message: "Please Input XCHG_PMTN for check. "}
var E203312 = Global_error{id: "203312", eType: EXPECTED_ERROR, message: "Exchange Promotion should not be null. "}
var E203313 = Global_error{id: "203313", eType: EXPECTED_ERROR, message: "Request Type should not be null. "}
var E203314 = Global_error{id: "203314", eType: EXPECTED_ERROR, message: "Channel Code should not be null. "}
var E203315 = Global_error{id: "203315", eType: EXPECTED_ERROR, message: "Start called Date Time should not be null. "}
var E203316 = Global_error{id: "203316", eType: EXPECTED_ERROR, message: "Allowance Flag must be 'Y' or 'N' only. "}
var E203317 = Global_error{id: "203317", eType: EXPECTED_ERROR, message: "Allowance Amount must be greater than or equal to 0 "}
var E203318 = Global_error{id: "203318", eType: EXPECTED_ERROR, message: "Total credit limit by subscriber must be less than credit limit by customer. "}
var E203319 = Global_error{id: "203319", eType: EXPECTED_ERROR, message: "Data can not change. The budget alert amount must be set within 50% of Credit Limit by customer. "}
var E203320 = Global_error{id: "203320", eType: EXPECTED_ERROR, message: "The service has been updated via IVR more than 5 times. "}
var E203321 = Global_error{id: "203321", eType: EXPECTED_ERROR, message: "IMSI Group is not set for IMSI Prefix relationship or relationship is expired. "}
var E203322 = Global_error{id: "203322", eType: EXPECTED_ERROR, message: "Input is invalid "}
var E203323 = Global_error{id: "203323", eType: EXPECTED_ERROR, message: "Subscriber is not found "}
var E203324 = Global_error{id: "203324", eType: EXPECTED_ERROR, message: "Subscriber's state is invalid "}
var E203325 = Global_error{id: "203325", eType: EXPECTED_ERROR, message: "Subscriber's credit is inadequate "}
var E203326 = Global_error{id: "203326", eType: EXPECTED_ERROR, message: "Subscriber's expiry date is inadequate "}
var E203327 = Global_error{id: "203327", eType: EXPECTED_ERROR, message: "Amount of accumulated day is over the limit "}
var E203328 = Global_error{id: "203328", eType: EXPECTED_ERROR, message: "Fee is greater than or equal to exchange money "}
var E203329 = Global_error{id: "203329", eType: EXPECTED_ERROR, message: "System Error (IN/SMI/SMP/SCP) "}
var E203330 = Global_error{id: "203330", eType: EXPECTED_ERROR, message: "Number of rows in input data file exceeds allowed maximum limit. "}
var E203331 = Global_error{id: "203331", eType: EXPECTED_ERROR, message: "Input data has to be numeric. "}
var E203332 = Global_error{id: "203332", eType: EXPECTED_ERROR, message: "Reset with charge cannot be processed on switch on date. "}
var E203333 = Global_error{id: "203333", eType: EXPECTED_ERROR, message: "Balance transfer money value must more than 0. "}
var E203334 = Global_error{id: "203334", eType: EXPECTED_ERROR, message: "Parameter data not available. "}
var E203335 = Global_error{id: "203335", eType: EXPECTED_ERROR, message: "Balance Transfer Money not in specify interval. "}
var E203336 = Global_error{id: "203336", eType: EXPECTED_ERROR, message: "SUBR_NUMB must be Null when CUST_NUMB is NULL. "}
var E203337 = Global_error{id: "203337", eType: EXPECTED_ERROR, message: "Recipient Mobile is not Prepaid and/or not Active. "}
var E203338 = Global_error{id: "203338", eType: EXPECTED_ERROR, message: "Originator Mobile and Recipient mobile must not be the same number. "}
var E203339 = Global_error{id: "203339", eType: EXPECTED_ERROR, message: "Invalid CAMEL flag. "}
var E203340 = Global_error{id: "203340", eType: EXPECTED_ERROR, message: "Customer Type must be 'N' or 'R' only. "}
var E203341 = Global_error{id: "203341", eType: EXPECTED_ERROR, message: "Charge Type must be 'A','B' or 'P' only. "}
var E203342 = Global_error{id: "203342", eType: EXPECTED_ERROR, message: "Charge Type has value only for Charge Type is 'A'. "}
var E203343 = Global_error{id: "203343", eType: EXPECTED_ERROR, message: "Surcharge Unit must be 'M' or 'P' only. "}
var E203344 = Global_error{id: "203344", eType: EXPECTED_ERROR, message: "Charge ID2 must be 1 when Charge Type is 'B' or 'P'. "}
var E203345 = Global_error{id: "203345", eType: EXPECTED_ERROR, message: "Surcharge Amount can not greater than Charge Amount. "}
var E203346 = Global_error{id: "203346", eType: EXPECTED_ERROR, message: "The Rest of Share Unit must be 'P'. "}
var E203347 = Global_error{id: "203347", eType: EXPECTED_ERROR, message: "Share Level Number can not greater than 4. "}
var E203348 = Global_error{id: "203348", eType: EXPECTED_ERROR, message: "Violate Unique Constraint. "}
var E203349 = Global_error{id: "203349", eType: EXPECTED_ERROR, message: "Can not Update Share Information. "}
var E203350 = Global_error{id: "203350", eType: EXPECTED_ERROR, message: "Can not Update Share Information Level. "}
var E203351 = Global_error{id: "203351", eType: EXPECTED_ERROR, message: "Can not Update Share Information Detail. "}
var E203352 = Global_error{id: "203352", eType: EXPECTED_ERROR, message: "Can not Delete Share Information. "}
var E203353 = Global_error{id: "203353", eType: EXPECTED_ERROR, message: "Can not Delete Share Information Level. "}
var E203354 = Global_error{id: "203354", eType: EXPECTED_ERROR, message: "Can not Delete Share Information Detail. "}
var E203355 = Global_error{id: "203355", eType: EXPECTED_ERROR, message: "Share Information Detail does not exist. "}
var E203356 = Global_error{id: "203356", eType: EXPECTED_ERROR, message: "Share Unit must be 'P' When Surcharge Unit is 'P'. "}
var E203357 = Global_error{id: "203357", eType: EXPECTED_ERROR, message: "Your  password has been expired because you have mistyped the  password more than 3 times or have received the  password code for longer than 30 minutes. "}
var E203358 = Global_error{id: "203358", eType: EXPECTED_ERROR, message: "CAMEL package is not allowed to have next package. "}
var E203359 = Global_error{id: "203359", eType: EXPECTED_ERROR, message: "Child deactivation service code does not exist. "}
var E203360 = Global_error{id: "203360", eType: EXPECTED_ERROR, message: "Parent and child deactivation service codes cannot be similar. "}
var E203361 = Global_error{id: "203361", eType: EXPECTED_ERROR, message: "Can not change Share Information that is currently effective. "}
var E203362 = Global_error{id: "203362", eType: EXPECTED_ERROR, message: "Summary of Percent Value must equal to 100. "}
var E203363 = Global_error{id: "203363", eType: EXPECTED_ERROR, message: "Summary of Money Value must equal to Money Value of the upper level. "}
var E203364 = Global_error{id: "203364", eType: EXPECTED_ERROR, message: "Number of SUBR_NUMB and CUST_NUMB are not matching. "}
var E203365 = Global_error{id: "203365", eType: EXPECTED_ERROR, message: "Message Code is in used. Can not delete master. "}
var E203366 = Global_error{id: "203366", eType: EXPECTED_ERROR, message: "Detail message code must be same value to Master message code. "}
var E203367 = Global_error{id: "203367", eType: EXPECTED_ERROR, message: "Insert, Update and Delete Detail can perform only in Master's mode is Update. "}
var E203368 = Global_error{id: "203368", eType: EXPECTED_ERROR, message: "This telephone type conflict with Extra-Expire/Extra-Add/Block package "}
var E203369 = Global_error{id: "203369", eType: EXPECTED_ERROR, message: "This package group type must not have Extra-Expire package "}
var E203370 = Global_error{id: "203370", eType: EXPECTED_ERROR, message: "Package type of the Extra-Expire/Extra-Add/Block package is invalid. "}
var E203371 = Global_error{id: "203371", eType: EXPECTED_ERROR, message: "This telephone type must not have Extra-Expire and Extra-Add package "}
var E203372 = Global_error{id: "203372", eType: EXPECTED_ERROR, message: "This package group type must not have Extra-Expire package "}
var E203373 = Global_error{id: "203373", eType: EXPECTED_ERROR, message: "Package type of the extra package is invalid "}
var E203374 = Global_error{id: "203374", eType: EXPECTED_ERROR, message: "Effective date of the package plan should be earlier or equal to that of package group "}
var E203375 = Global_error{id: "203375", eType: EXPECTED_ERROR, message: "Telephone type of the package plan is inconsistent with that of package group "}
var E203376 = Global_error{id: "203376", eType: EXPECTED_ERROR, message: "Start date cannot be less than package's start date "}
var E203377 = Global_error{id: "203377", eType: EXPECTED_ERROR, message: "End date cannot be greater than package's end date "}
var E203378 = Global_error{id: "203378", eType: EXPECTED_ERROR, message: "Extra add package must not have the dependent package. "}
var E203379 = Global_error{id: "203379", eType: EXPECTED_ERROR, message: "Flag must be 'Y' or 'N' only. "}
var E203380 = Global_error{id: "203380", eType: EXPECTED_ERROR, message: "Would you like to send SMS to the customer? "}
var E203381 = Global_error{id: "203381", eType: EXPECTED_ERROR, message: "Update CS_SMS_BTCH table failed. "}
var E203382 = Global_error{id: "203382", eType: EXPECTED_ERROR, message: "Cannot send message to subscriber as it exceed the allowed period. "}
var E203383 = Global_error{id: "203383", eType: EXPECTED_ERROR, message: "System could not send short message to the subscriber. "}
var E203384 = Global_error{id: "203384", eType: EXPECTED_ERROR, message: "CACEL Charge Flag must be Y or N only "}
var E203385 = Global_error{id: "203385", eType: EXPECTED_ERROR, message: "CAMEL Invocation fee does not exist "}
var E203386 = Global_error{id: "203386", eType: EXPECTED_ERROR, message: "CAMEL Invocation fee already exists. "}
var E203387 = Global_error{id: "203387", eType: EXPECTED_ERROR, message: "SMS ID already exists. "}
var E203388 = Global_error{id: "203388", eType: EXPECTED_ERROR, message: "SMS ID does not exist. "}
var E203389 = Global_error{id: "203389", eType: EXPECTED_ERROR, message: "SMS ID already exists but is not active. "}
var E203390 = Global_error{id: "203390", eType: EXPECTED_ERROR, message: "SMS ID already exists and is currently active. "}
var E203391 = Global_error{id: "203391", eType: EXPECTED_ERROR, message: "Screen Code already exists in Screen sending SMS table "}
var E203392 = Global_error{id: "203392", eType: EXPECTED_ERROR, message: "Screen Code does not exist in Screen sending SMS table "}
var E203393 = Global_error{id: "203393", eType: EXPECTED_ERROR, message: "Invalid Screen Code "}
var E203394 = Global_error{id: "203394", eType: EXPECTED_ERROR, message: "Balance Transfer time over limit to use per day. "}
var E203395 = Global_error{id: "203395", eType: EXPECTED_ERROR, message: "SMS group already exists. "}
var E203396 = Global_error{id: "203396", eType: EXPECTED_ERROR, message: "SMS group does not exist. "}
var E203397 = Global_error{id: "203397", eType: EXPECTED_ERROR, message: "SMS group already exists but is currently not active. "}
var E203398 = Global_error{id: "203398", eType: EXPECTED_ERROR, message: "SMS group already exists and is currently active. "}
var E203399 = Global_error{id: "203399", eType: EXPECTED_ERROR, message: "Front-end: SOS, can not insert IN_INPT. "}
var E203400 = Global_error{id: "203400", eType: EXPECTED_ERROR, message: "Front-end: Error occur when access database. "}
var E203401 = Global_error{id: "203401", eType: EXPECTED_ERROR, message: "Front-end: Balance amount is not enough. "}
var E203402 = Global_error{id: "203402", eType: EXPECTED_ERROR, message: "Front-end: Input is invalid. "}
var E203403 = Global_error{id: "203403", eType: EXPECTED_ERROR, message: "Front-end: Invalid money format for operating. "}
var E203404 = Global_error{id: "203404", eType: EXPECTED_ERROR, message: "Front-end: Subscriber's state is invalid. "}
var E203405 = Global_error{id: "203405", eType: EXPECTED_ERROR, message: "Dual Bill can not pay on web. "}
var E203406 = Global_error{id: "203406", eType: EXPECTED_ERROR, message: "Roll Over Limit must be more than zero. "}
var E203407 = Global_error{id: "203407", eType: EXPECTED_ERROR, message: "Update CS_RWRD_BTCH failed. "}
var E203408 = Global_error{id: "203408", eType: EXPECTED_ERROR, message: "Update CS_PTRW_BTCH failed. "}
var E203409 = Global_error{id: "203409", eType: EXPECTED_ERROR, message: "Update CS_PTRW_SMS failed. "}
var E203410 = Global_error{id: "203410", eType: EXPECTED_ERROR, message: "User does not have authorization to waive fee. "}
var E203411 = Global_error{id: "203411", eType: EXPECTED_ERROR, message: "Subscriber has effective prepaid reward information already. "}
var E203412 = Global_error{id: "203412", eType: EXPECTED_ERROR, message: "Subscriber does't have effective prepaid reward information. "}
var E203413 = Global_error{id: "203413", eType: EXPECTED_ERROR, message: "Total number of VPN Virtual member exceeds grand total of subscribers in the group. "}
var E203414 = Global_error{id: "203414", eType: EXPECTED_ERROR, message: "Service and SMS Group already exists. "}
var E203415 = Global_error{id: "203415", eType: EXPECTED_ERROR, message: "Service and SMS Group does not exist. "}
var E203416 = Global_error{id: "203416", eType: EXPECTED_ERROR, message: "Environtment variables are not set. "}
var E203417 = Global_error{id: "203417", eType: EXPECTED_ERROR, message: "Subscriber does not exist in IACC system. "}
var E203418 = Global_error{id: "203418", eType: EXPECTED_ERROR, message: "Change package group is not applicable as it exceeds the allowed period. "}
var E203419 = Global_error{id: "203419", eType: EXPECTED_ERROR, message: "Credit Limit Plan cannot be changed because Subscriber number was suspended. "}
var E203420 = Global_error{id: "203420", eType: EXPECTED_ERROR, message: "Credit Limit Plan cannot be changed because Customer number was suspended. "}
var E203421 = Global_error{id: "203421", eType: EXPECTED_ERROR, message: "Dbox service group already exists. "}
var E203422 = Global_error{id: "203422", eType: EXPECTED_ERROR, message: "Dbox service group does not exist. "}
var E203423 = Global_error{id: "203423", eType: EXPECTED_ERROR, message: "Dbox service code already exists. "}
var E203424 = Global_error{id: "203424", eType: EXPECTED_ERROR, message: "Dbox service code does not exist. "}
var E203425 = Global_error{id: "203425", eType: EXPECTED_ERROR, message: "Dbox action code already exists. "}
var E203426 = Global_error{id: "203426", eType: EXPECTED_ERROR, message: "Dbox action code does not exist. "}
var E203427 = Global_error{id: "203427", eType: EXPECTED_ERROR, message: "Voucher Airtime Group already exists. "}
var E203428 = Global_error{id: "203428", eType: EXPECTED_ERROR, message: "Voucher Airtime Group does not exist. "}
var E203429 = Global_error{id: "203429", eType: EXPECTED_ERROR, message: "Voucher Airtime Group (Detail) already exists. "}
var E203430 = Global_error{id: "203430", eType: EXPECTED_ERROR, message: "Voucher Airtime Group (Detail) does not exist. "}
var E203431 = Global_error{id: "203431", eType: EXPECTED_ERROR, message: "Voucher Package already exists. "}
var E203432 = Global_error{id: "203432", eType: EXPECTED_ERROR, message: "Voucher Package does not exist. "}
var E203433 = Global_error{id: "203433", eType: EXPECTED_ERROR, message: "Voucher Package (Detail) already exists. "}
var E203434 = Global_error{id: "203434", eType: EXPECTED_ERROR, message: "Voucher Package (Detail) does not exist. "}
var E203435 = Global_error{id: "203435", eType: EXPECTED_ERROR, message: "VAS Instance already exists. "}
var E203436 = Global_error{id: "203436", eType: EXPECTED_ERROR, message: "VAS Instance does not exist. "}
var E203437 = Global_error{id: "203437", eType: EXPECTED_ERROR, message: "VAS Function ID already exists. "}
var E203438 = Global_error{id: "203438", eType: EXPECTED_ERROR, message: "VAS Function ID does not exist. "}
var E203439 = Global_error{id: "203439", eType: EXPECTED_ERROR, message: "VAS User already exists. "}
var E203440 = Global_error{id: "203440", eType: EXPECTED_ERROR, message: "VAS User does not exist. "}
var E203441 = Global_error{id: "203441", eType: EXPECTED_ERROR, message: "VAS User Access already exists. "}
var E203442 = Global_error{id: "203442", eType: EXPECTED_ERROR, message: "VAS User Access does not exist. "}
var E203443 = Global_error{id: "203443", eType: EXPECTED_ERROR, message: "Master Detail Used Status must be 'M', 'D' or 'A' only. "}
var E203444 = Global_error{id: "203444", eType: EXPECTED_ERROR, message: "Start Offset Unit must be null, 'D' or 'M' only. "}
var E203445 = Global_error{id: "203445", eType: EXPECTED_ERROR, message: "End Offset Unit must be null, 'D' or 'M' only. "}
var E203446 = Global_error{id: "203446", eType: EXPECTED_ERROR, message: "Amount Unit must be 'T','D','X' or 'M' only. "}
var E203447 = Global_error{id: "203447", eType: EXPECTED_ERROR, message: "Additional Credit Limit by Subscriber cannot be added ,while Credit Limit by Subscriber is still deactive. "}
var E203448 = Global_error{id: "203448", eType: EXPECTED_ERROR, message: "Invalid Special Number type. "}
var E203449 = Global_error{id: "203449", eType: EXPECTED_ERROR, message: "Top-Up Reward Channel does not exist. "}
var E203450 = Global_error{id: "203450", eType: EXPECTED_ERROR, message: "Top-Up Reward Channel already exists. "}
var E203451 = Global_error{id: "203451", eType: EXPECTED_ERROR, message: "Top-Up Reward Channel already exists but is not active. "}
var E203452 = Global_error{id: "203452", eType: EXPECTED_ERROR, message: "Top-Up Reward Channel already exists and is currently active. "}
var E203453 = Global_error{id: "203453", eType: EXPECTED_ERROR, message: "Voucher Channel already exists. "}
var E203454 = Global_error{id: "203454", eType: EXPECTED_ERROR, message: "Voucher Channel does not exist. "}
var E203455 = Global_error{id: "203455", eType: EXPECTED_ERROR, message: "Tax Flag must be 'Y' or 'N' only. "}
var E203456 = Global_error{id: "203456", eType: EXPECTED_ERROR, message: "Bonus Flag must be 'Y' or 'N' only. "}
var E203457 = Global_error{id: "203457", eType: EXPECTED_ERROR, message: "There are some hardware in use / has been used, cannot unload "}
var E203458 = Global_error{id: "203458", eType: EXPECTED_ERROR, message: "This batch number is in loading process, cannot unload "}
var E203459 = Global_error{id: "203459", eType: EXPECTED_ERROR, message: "Remark does not exist. "}
var E203460 = Global_error{id: "203460", eType: EXPECTED_ERROR, message: "Insert Top-Up Reward table failed. "}
var E203461 = Global_error{id: "203461", eType: EXPECTED_ERROR, message: "Update Top-Up Reward table failed. "}
var E203462 = Global_error{id: "203462", eType: EXPECTED_ERROR, message: "Customer is not Individual or Family special (main number) type. "}
var E203463 = Global_error{id: "203463", eType: EXPECTED_ERROR, message: "Exceeded credit limit change via IVR in this period "}
var E203464 = Global_error{id: "203464", eType: EXPECTED_ERROR, message: "Customer has been suspended "}
var E203465 = Global_error{id: "203465", eType: EXPECTED_ERROR, message: "Credit Limit amount must not be greater than Maximum Credit Limit amount. "}
var E203466 = Global_error{id: "203466", eType: EXPECTED_ERROR, message: "Credit Limit amount must not be less than Minimum Credit Limit amount. "}
var E203467 = Global_error{id: "203467", eType: EXPECTED_ERROR, message: "Can not process transaction. "}
var E203468 = Global_error{id: "203468", eType: EXPECTED_ERROR, message: "Invalid validity for package which has next package. "}
var E203469 = Global_error{id: "203469", eType: EXPECTED_ERROR, message: "Invalid minimum balance allowed after deduction. "}
var E203470 = Global_error{id: "203470", eType: EXPECTED_ERROR, message: "Expire Status must be 'N' or 'B' only. "}
var E203471 = Global_error{id: "203471", eType: EXPECTED_ERROR, message: "Can not bar voucher because this voucher is used or expire. "}
var E203472 = Global_error{id: "203472", eType: EXPECTED_ERROR, message: "Welcome SMS does not exist "}
var E203473 = Global_error{id: "203473", eType: EXPECTED_ERROR, message: "Welcome SMS already exists "}
var E203474 = Global_error{id: "203474", eType: EXPECTED_ERROR, message: "External message already exists. "}
var E203475 = Global_error{id: "203475", eType: EXPECTED_ERROR, message: "External message does not exist. "}
var E203476 = Global_error{id: "203476", eType: EXPECTED_ERROR, message: "External type does not exist. "}
var E203477 = Global_error{id: "203477", eType: EXPECTED_ERROR, message: "Invalid Refill Flag. "}
var E203478 = Global_error{id: "203478", eType: EXPECTED_ERROR, message: "Time Out must be greater than zero. "}
var E203479 = Global_error{id: "203479", eType: EXPECTED_ERROR, message: "User already exists. "}
var E203480 = Global_error{id: "203480", eType: EXPECTED_ERROR, message: "User does not exist. "}
var E203481 = Global_error{id: "203481", eType: EXPECTED_ERROR, message: "User Authorization already exists. "}
var E203482 = Global_error{id: "203482", eType: EXPECTED_ERROR, message: "User Authorization does not exist. "}
var E203483 = Global_error{id: "203483", eType: EXPECTED_ERROR, message: "Permission denies for subscriber number. "}
var E203484 = Global_error{id: "203484", eType: EXPECTED_ERROR, message: "Corporate customer using customer promotion must pay by himself/herself. "}
var E203485 = Global_error{id: "203485", eType: EXPECTED_ERROR, message: "Customer must pay by himself/herself because parent customer is using customer promotion. "}
var E203486 = Global_error{id: "203486", eType: EXPECTED_ERROR, message: "Customer properties are not applicable for dual bill. "}
var E203487 = Global_error{id: "203487", eType: EXPECTED_ERROR, message: "Process is deducting customer's money, please wait. "}
var E203488 = Global_error{id: "203488", eType: EXPECTED_ERROR, message: "Update MD-SMI deduction detail table failed. "}
var E203489 = Global_error{id: "203489", eType: EXPECTED_ERROR, message: "Update recurring fee detail table failed. "}
var E203490 = Global_error{id: "203490", eType: EXPECTED_ERROR, message: "Cannot get money. "}
var E203491 = Global_error{id: "203491", eType: EXPECTED_ERROR, message: "Cannot get subscriber time information. "}
var E203492 = Global_error{id: "203492", eType: EXPECTED_ERROR, message: "Cannot reply to client. "}
var E203493 = Global_error{id: "203493", eType: EXPECTED_ERROR, message: "SMI Gateway is timeout. "}
var E203494 = Global_error{id: "203494", eType: EXPECTED_ERROR, message: "Error while sending data. "}
var E203495 = Global_error{id: "203495", eType: EXPECTED_ERROR, message: "Error while reading data. "}
var E203496 = Global_error{id: "203496", eType: EXPECTED_ERROR, message: "Connection is lost while sending data. "}
var E203497 = Global_error{id: "203497", eType: EXPECTED_ERROR, message: "Connection is lost while reading data. "}
var E203498 = Global_error{id: "203498", eType: EXPECTED_ERROR, message: "Money is exceed. "}
var E203499 = Global_error{id: "203499", eType: EXPECTED_ERROR, message: "Subscription has no credit buffer. "}
var E203500 = Global_error{id: "203500", eType: EXPECTED_ERROR, message: "Voucher is expired. "}
var E203501 = Global_error{id: "203501", eType: EXPECTED_ERROR, message: "Voucher is used. "}
var E203502 = Global_error{id: "203502", eType: EXPECTED_ERROR, message: "Voucher is barred. "}
var E203503 = Global_error{id: "203503", eType: EXPECTED_ERROR, message: "Voucher is not found. "}
var E203504 = Global_error{id: "203504", eType: EXPECTED_ERROR, message: "Invalid money format for operating. "}
var E203505 = Global_error{id: "203505", eType: EXPECTED_ERROR, message: "Subscription is already exists. "}
var E203506 = Global_error{id: "203506", eType: EXPECTED_ERROR, message: "Expiry Service is not found. "}
var E203507 = Global_error{id: "203507", eType: EXPECTED_ERROR, message: "Expiry Profile is not found. "}
var E203508 = Global_error{id: "203508", eType: EXPECTED_ERROR, message: "Subscriber is not allowed. "}
var E203509 = Global_error{id: "203509", eType: EXPECTED_ERROR, message: "Session Number is invalid. "}
var E203510 = Global_error{id: "203510", eType: EXPECTED_ERROR, message: "Queue is full. "}
var E203511 = Global_error{id: "203511", eType: EXPECTED_ERROR, message: "Permission denies for function. "}
var E203512 = Global_error{id: "203512", eType: EXPECTED_ERROR, message: "Voucher number was dupplicate. "}
var E203513 = Global_error{id: "203513", eType: EXPECTED_ERROR, message: "Invalid voucher number. "}
var E203514 = Global_error{id: "203514", eType: EXPECTED_ERROR, message: "Provision existing Subscription. "}
var E203515 = Global_error{id: "203515", eType: EXPECTED_ERROR, message: "Could not find commercial service. "}
var E203516 = Global_error{id: "203516", eType: EXPECTED_ERROR, message: "Unable to invalidate,Voucher record not found. "}
var E203517 = Global_error{id: "203517", eType: EXPECTED_ERROR, message: "Subscriber's no. of day is inadequate. "}
var E203518 = Global_error{id: "203518", eType: EXPECTED_ERROR, message: "Can't cancel the add voucher. "}
var E203519 = Global_error{id: "203519", eType: EXPECTED_ERROR, message: "Can't cancel the deduct money. "}
var E203520 = Global_error{id: "203520", eType: EXPECTED_ERROR, message: "Cannot generate the voucher number. "}
var E203521 = Global_error{id: "203521", eType: EXPECTED_ERROR, message: "SOS existed. "}
var E203522 = Global_error{id: "203522", eType: EXPECTED_ERROR, message: "SOS config is not found. "}
var E203523 = Global_error{id: "203523", eType: EXPECTED_ERROR, message: "Cannot get outstanding amount. "}
var E203524 = Global_error{id: "203524", eType: EXPECTED_ERROR, message: "Can't cancel the deduct money with check outstanding. "}
var E203525 = Global_error{id: "203525", eType: EXPECTED_ERROR, message: "Access denied to invoke operation. "}
var E203526 = Global_error{id: "203526", eType: EXPECTED_ERROR, message: "Internal database is failed for operation. "}
var E203527 = Global_error{id: "203527", eType: EXPECTED_ERROR, message: "Internal database profile is not found. "}
var E203528 = Global_error{id: "203528", eType: EXPECTED_ERROR, message: "Internal database is error. "}
var E203529 = Global_error{id: "203529", eType: EXPECTED_ERROR, message: "General IN-Server error. "}
var E203530 = Global_error{id: "203530", eType: EXPECTED_ERROR, message: "General IN-Database error. "}
var E203531 = Global_error{id: "203531", eType: EXPECTED_ERROR, message: "Internal IN-Application error. "}
var E203532 = Global_error{id: "203532", eType: EXPECTED_ERROR, message: "Error in date value. "}
var E203533 = Global_error{id: "203533", eType: EXPECTED_ERROR, message: "SMI is busy or not enough transactions. "}
var E203534 = Global_error{id: "203534", eType: EXPECTED_ERROR, message: "Memory Allocation is fail. "}
var E203535 = Global_error{id: "203535", eType: EXPECTED_ERROR, message: "Invaild SMI Command. "}
var E203536 = Global_error{id: "203536", eType: EXPECTED_ERROR, message: "Subscriber recurring bonus 5 months is found , can not be processed. "}
var E203537 = Global_error{id: "203537", eType: EXPECTED_ERROR, message: "Subscriber recurring bonus 10 months is found , can not be processed. "}
var E203538 = Global_error{id: "203538", eType: EXPECTED_ERROR, message: "Subscriber recurring bonus is found, can not be processed. "}
var E203539 = Global_error{id: "203539", eType: EXPECTED_ERROR, message: "Start period cannot be less than customer�s future invoice period. "}
var E203540 = Global_error{id: "203540", eType: EXPECTED_ERROR, message: "Invalid Friend and Family Discount Type "}
var E203541 = Global_error{id: "203541", eType: EXPECTED_ERROR, message: "Invalid Friend and Family Type "}
var E203542 = Global_error{id: "203542", eType: EXPECTED_ERROR, message: "Invalid Discount Special Type "}
var E203543 = Global_error{id: "203543", eType: EXPECTED_ERROR, message: "Retailer code already exists. "}
var E203544 = Global_error{id: "203544", eType: EXPECTED_ERROR, message: "Retailer code does not exist. "}
var E203545 = Global_error{id: "203545", eType: EXPECTED_ERROR, message: "Existing customer cannot be prepaid customer "}
var E203546 = Global_error{id: "203546", eType: EXPECTED_ERROR, message: "Retailer is not active. "}
var E203547 = Global_error{id: "203547", eType: EXPECTED_ERROR, message: "Invalid retailer status. "}
var E203548 = Global_error{id: "203548", eType: EXPECTED_ERROR, message: "End date must not be greater than postpaid switch on date over number of travel period. "}
var E203549 = Global_error{id: "203549", eType: EXPECTED_ERROR, message: "End date must not be greater than credit expiry date. "}
var E203550 = Global_error{id: "203550", eType: EXPECTED_ERROR, message: "Number of date must not be greater than number of travel period. "}
var E203551 = Global_error{id: "203551", eType: EXPECTED_ERROR, message: "Number of date must not be greater than number of reconnect period. "}
var E203552 = Global_error{id: "203552", eType: EXPECTED_ERROR, message: "Subscriber�s Prepaid Go Inter information does not exist. "}
var E203553 = Global_error{id: "203553", eType: EXPECTED_ERROR, message: "Expiry period of credit card is not applicable for travelling. "}
var E203554 = Global_error{id: "203554", eType: EXPECTED_ERROR, message: "Duration Amount must be greater than or equal zero. "}
var E203555 = Global_error{id: "203555", eType: EXPECTED_ERROR, message: "Amount and Duration must be either positive or negative in both value. "}
var E203556 = Global_error{id: "203556", eType: EXPECTED_ERROR, message: "Prefix number of the Credit Card not match in the master. "}
var E203557 = Global_error{id: "203557", eType: EXPECTED_ERROR, message: "Credit Card Expiry Date is less than 3 months. "}
var E203558 = Global_error{id: "203558", eType: EXPECTED_ERROR, message: "Can not find other branch. "}
var E203559 = Global_error{id: "203559", eType: EXPECTED_ERROR, message: "Subscriber's prepaid reward birthday does not exist. "}
var E203560 = Global_error{id: "203560", eType: EXPECTED_ERROR, message: "Pending subscriber number while migrating SCP. "}
var E203561 = Global_error{id: "203561", eType: EXPECTED_ERROR, message: "Front-end:Pending subr_numb cause migrating SCP. "}
var E203562 = Global_error{id: "203562", eType: EXPECTED_ERROR, message: "VPN hunting information is not found. "}
var E203563 = Global_error{id: "203563", eType: EXPECTED_ERROR, message: "EDR Amount connot overlap with EDR Amount of previous record. "}
var E203564 = Global_error{id: "203564", eType: EXPECTED_ERROR, message: "Subscriber recurring bonus 600 Bahts is found , can not be processed. "}
var E203565 = Global_error{id: "203565", eType: EXPECTED_ERROR, message: "Subscriber recurring bonus 10 months is found , can not be processed. "}
var E203566 = Global_error{id: "203566", eType: EXPECTED_ERROR, message: "Subscriber recurring bonus 50B11M,100B5M & 50B5M is found , can not be processed. "}
var E203567 = Global_error{id: "203567", eType: EXPECTED_ERROR, message: "Subscriber recurring bonus is found , can not be processed. "}
var E203568 = Global_error{id: "203568", eType: EXPECTED_ERROR, message: "EIS Group already exist. "}
var E203569 = Global_error{id: "203569", eType: EXPECTED_ERROR, message: "EIS Group does not  exist. "}
var E203570 = Global_error{id: "203570", eType: EXPECTED_ERROR, message: "Update prompt regional roaming transaction table failed. "}
var E203571 = Global_error{id: "203571", eType: EXPECTED_ERROR, message: "Property of special number of dependent package is inconsistent "}
var E203572 = Global_error{id: "203572", eType: EXPECTED_ERROR, message: "Total of special number of this package and that of dependent package are not equal. "}
var E203573 = Global_error{id: "203573", eType: EXPECTED_ERROR, message: "Retailer is not applicable for this transaction. "}
var E203574 = Global_error{id: "203574", eType: EXPECTED_ERROR, message: "Prepaid registration regional roaming is not currently effective. "}
var E203575 = Global_error{id: "203575", eType: EXPECTED_ERROR, message: "Prepaid registration regional roaming is currently effective. "}
var E203576 = Global_error{id: "203576", eType: EXPECTED_ERROR, message: "Retailer is not applicable for this transaction. "}
var E203577 = Global_error{id: "203577", eType: EXPECTED_ERROR, message: "Prepaid registration regional roaming is not currently effective. "}
var E203578 = Global_error{id: "203578", eType: EXPECTED_ERROR, message: "Prepaid registration regional roaming is currently effective. "}
var E203579 = Global_error{id: "203579", eType: EXPECTED_ERROR, message: "Prepaid Business already exists. "}
var E203580 = Global_error{id: "203580", eType: EXPECTED_ERROR, message: "Prepaid Business does not exist. "}
var E203581 = Global_error{id: "203581", eType: EXPECTED_ERROR, message: "Prepaid Business Channel already exists. "}
var E203582 = Global_error{id: "203582", eType: EXPECTED_ERROR, message: "Prepaid Business Channel does not exist. "}
var E203583 = Global_error{id: "203583", eType: EXPECTED_ERROR, message: "Prepaid Business Group already exists. "}
var E203584 = Global_error{id: "203584", eType: EXPECTED_ERROR, message: "Prepaid Business Group does not exist. "}
var E203585 = Global_error{id: "203585", eType: EXPECTED_ERROR, message: "Prepaid Business Promotion already exists. "}
var E203586 = Global_error{id: "203586", eType: EXPECTED_ERROR, message: "Prepaid Business Promotion does not exist. "}
var E203587 = Global_error{id: "203587", eType: EXPECTED_ERROR, message: "Prepaid Business Promotion Detail already exists. "}
var E203588 = Global_error{id: "203588", eType: EXPECTED_ERROR, message: "Prepaid Business Promotion Detail does not exist. "}
var E203589 = Global_error{id: "203589", eType: EXPECTED_ERROR, message: "Prepaid Business Schedule already exists. "}
var E203590 = Global_error{id: "203590", eType: EXPECTED_ERROR, message: "Prepaid Business Schedule does not exist. "}
var E203591 = Global_error{id: "203591", eType: EXPECTED_ERROR, message: "Process Type already exists. "}
var E203592 = Global_error{id: "203592", eType: EXPECTED_ERROR, message: "Process Type does not exist. "}
var E203593 = Global_error{id: "203593", eType: EXPECTED_ERROR, message: "Invalid Money Tariff Type "}
var E203594 = Global_error{id: "203594", eType: EXPECTED_ERROR, message: "Invalid Day Tariff Type "}
var E203595 = Global_error{id: "203595", eType: EXPECTED_ERROR, message: "Special number benefit is not applicable for maintenance package. "}
var E203596 = Global_error{id: "203596", eType: EXPECTED_ERROR, message: "Trial package has already been granted. "}
var E203597 = Global_error{id: "203597", eType: EXPECTED_ERROR, message: "Trial Flag must be 'Y' or 'N' only. "}
var E203598 = Global_error{id: "203598", eType: EXPECTED_ERROR, message: "This channel cannot proceed the transaction. "}
var E203599 = Global_error{id: "203599", eType: EXPECTED_ERROR, message: "Subscriber registered prepaid regional roaming before switch on date. "}
var E203600 = Global_error{id: "203600", eType: EXPECTED_ERROR, message: "Update prepaid regional roaming loading information table failed. "}
var E203601 = Global_error{id: "203601", eType: EXPECTED_ERROR, message: "Special type of telephone isn't applicable for the transaction. "}
var E203602 = Global_error{id: "203602", eType: EXPECTED_ERROR, message: "Update refresh preactivation loading information table failed. "}
var E203603 = Global_error{id: "203603", eType: EXPECTED_ERROR, message: "Update prepaid regional roaming interface table failed. "}
var E203604 = Global_error{id: "203604", eType: EXPECTED_ERROR, message: "Record was cancelled before adding service to subscriber. "}
var E203605 = Global_error{id: "203605", eType: EXPECTED_ERROR, message: "Batch number format is invalid "}
var E203606 = Global_error{id: "203606", eType: EXPECTED_ERROR, message: "This batch number is already processed, cannot reload "}
var E203607 = Global_error{id: "203607", eType: EXPECTED_ERROR, message: "SIM validity status and reserved flag are inconsistent. "}
var E203608 = Global_error{id: "203608", eType: EXPECTED_ERROR, message: "Expiry date is inconsistent. "}
var E203609 = Global_error{id: "203609", eType: EXPECTED_ERROR, message: "Paypoint Branch Code does not exists. "}
var E203610 = Global_error{id: "203610", eType: EXPECTED_ERROR, message: "Invalid address type "}
var E203611 = Global_error{id: "203611", eType: EXPECTED_ERROR, message: "Please make a payment for Overdue with Reconnection. "}
var E203612 = Global_error{id: "203612", eType: EXPECTED_ERROR, message: "Allocate Plan Code does not exist. "}
var E203613 = Global_error{id: "203613", eType: EXPECTED_ERROR, message: "Allocate Plan Code already exist. "}
var E203614 = Global_error{id: "203614", eType: EXPECTED_ERROR, message: "Round Number must Greater than 0. "}
var E203615 = Global_error{id: "203615", eType: EXPECTED_ERROR, message: "Round Number does not exist. "}
var E203616 = Global_error{id: "203616", eType: EXPECTED_ERROR, message: "Round Number already exist. "}
var E203617 = Global_error{id: "203617", eType: EXPECTED_ERROR, message: "Write Off Reason Code does not exist. "}
var E203618 = Global_error{id: "203618", eType: EXPECTED_ERROR, message: "Write Off Reason Code already exist. "}
var E203619 = Global_error{id: "203619", eType: EXPECTED_ERROR, message: "Allocate TO BC Outsource Does Not Exist. "}
var E203620 = Global_error{id: "203620", eType: EXPECTED_ERROR, message: "Percent Sharing Of BC Outsource Does Not Exist. "}
var E203621 = Global_error{id: "203621", eType: EXPECTED_ERROR, message: "Percent Sharing Must less than or equal than 100. "}
var E203622 = Global_error{id: "203622", eType: EXPECTED_ERROR, message: "Percent Sharing already exist. "}
var E203623 = Global_error{id: "203623", eType: EXPECTED_ERROR, message: "BCW Name already exist. "}
var E203624 = Global_error{id: "203624", eType: EXPECTED_ERROR, message: "BCW Name does not exist. "}
var E203625 = Global_error{id: "203625", eType: EXPECTED_ERROR, message: "Round Set Up already exist. "}
var E203626 = Global_error{id: "203626", eType: EXPECTED_ERROR, message: "Minimun Amount Greater than 0. "}
var E203627 = Global_error{id: "203627", eType: EXPECTED_ERROR, message: "Switch Off Reason Code Does Not Exist. "}
var E203628 = Global_error{id: "203628", eType: EXPECTED_ERROR, message: "Switch Off Reason Code already exist. "}
var E203629 = Global_error{id: "203629", eType: EXPECTED_ERROR, message: "Write Off Sales Ledger Transaction does not exist. "}
var E203630 = Global_error{id: "203630", eType: EXPECTED_ERROR, message: "Write Off Sales Ledger Transaction already exist. "}
var E203631 = Global_error{id: "203631", eType: EXPECTED_ERROR, message: "Telephone exists on HLR already. "}
var E203632 = Global_error{id: "203632", eType: EXPECTED_ERROR, message: "Prepaid Business Tariff does not exist. "}
var E203633 = Global_error{id: "203633", eType: EXPECTED_ERROR, message: "Prepaid Business Tariff already exists. "}
var E203634 = Global_error{id: "203634", eType: EXPECTED_ERROR, message: "Prepaid Business Reward Group does not exist. "}
var E203635 = Global_error{id: "203635", eType: EXPECTED_ERROR, message: "Prepaid Business Reward Group already exists. "}
var E203636 = Global_error{id: "203636", eType: EXPECTED_ERROR, message: "Prepaid Business Parameter does not exist. "}
var E203637 = Global_error{id: "203637", eType: EXPECTED_ERROR, message: "Prepaid Business Parameter already exists. "}
var E203638 = Global_error{id: "203638", eType: EXPECTED_ERROR, message: "Prepaid Business Cross Referance does not exist. "}
var E203639 = Global_error{id: "203639", eType: EXPECTED_ERROR, message: "Prepaid Business Cross Referance already exists. "}
var E203640 = Global_error{id: "203640", eType: EXPECTED_ERROR, message: "Bonus Type must be 'I' or 'O' only. "}
var E203641 = Global_error{id: "203641", eType: EXPECTED_ERROR, message: "Reward Group Type must be 'I', 'O' or 'N' only. "}
var E203642 = Global_error{id: "203642", eType: EXPECTED_ERROR, message: "To Round Number must Greater than From Round Number. "}
var E203643 = Global_error{id: "203643", eType: EXPECTED_ERROR, message: "Commission Plan Already Exist and Not Effective. "}
var E203644 = Global_error{id: "203644", eType: EXPECTED_ERROR, message: "BC Outsource Code Already Exist and Not Effective. "}
var E203645 = Global_error{id: "203645", eType: EXPECTED_ERROR, message: "Recommender must be different from recommended subscriber. "}
var E203646 = Global_error{id: "203646", eType: EXPECTED_ERROR, message: "New Recommender must be different from old recommender. "}
var E203647 = Global_error{id: "203647", eType: EXPECTED_ERROR, message: "User is not authorized to perform Member Get Member transaction. "}
var E203648 = Global_error{id: "203648", eType: EXPECTED_ERROR, message: "Subscriber has ever been granted Member Get Member benefit. "}
var E203649 = Global_error{id: "203649", eType: EXPECTED_ERROR, message: "Benefit period and amount must be greater than or equal to 0. "}
var E203650 = Global_error{id: "203650", eType: EXPECTED_ERROR, message: "Benefit period of Recommended Subscriber and Recommender cannot be 0 at the same time. "}
var E203651 = Global_error{id: "203651", eType: EXPECTED_ERROR, message: "Benefit period and amount are inconsistent. "}
var E203652 = Global_error{id: "203652", eType: EXPECTED_ERROR, message: "Recommender does not exist. "}
var E203653 = Global_error{id: "203653", eType: EXPECTED_ERROR, message: "Recommended Subscriber must be switched on after cut off date. "}
var E203654 = Global_error{id: "203654", eType: EXPECTED_ERROR, message: "Member get Member benefit amount and period master data are not found. "}
var E203655 = Global_error{id: "203655", eType: EXPECTED_ERROR, message: "Subscriber's expiry date must be less than today. "}
var E203656 = Global_error{id: "203656", eType: EXPECTED_ERROR, message: "Update prompt switch off interface table failed. "}
var E203657 = Global_error{id: "203657", eType: EXPECTED_ERROR, message: "Invalid clear fraud bill flag "}
var E203658 = Global_error{id: "203658", eType: EXPECTED_ERROR, message: "Invalid add delay reason flag "}
var E203659 = Global_error{id: "203659", eType: EXPECTED_ERROR, message: "Update delay interface table failed "}
var E203660 = Global_error{id: "203660", eType: EXPECTED_ERROR, message: "Invalid clear fraud bill package "}
var E203661 = Global_error{id: "203661", eType: EXPECTED_ERROR, message: "Invalid the number of days. "}
var E203662 = Global_error{id: "203662", eType: EXPECTED_ERROR, message: "Vas Package already exists "}
var E203663 = Global_error{id: "203663", eType: EXPECTED_ERROR, message: "Vas Package does not exist "}
var E203664 = Global_error{id: "203664", eType: EXPECTED_ERROR, message: "Vas Package Detail already exists "}
var E203665 = Global_error{id: "203665", eType: EXPECTED_ERROR, message: "Vas Package Detail does not exist "}
var E203666 = Global_error{id: "203666", eType: EXPECTED_ERROR, message: "Vas Package Type already exists "}
var E203667 = Global_error{id: "203667", eType: EXPECTED_ERROR, message: "Vas Package Type does not exist "}
var E203668 = Global_error{id: "203668", eType: EXPECTED_ERROR, message: "Vas Airtime Service Overlaping already exists "}
var E203669 = Global_error{id: "203669", eType: EXPECTED_ERROR, message: "Vas Airtime Service Overlaping does not exist "}
var E203670 = Global_error{id: "203670", eType: EXPECTED_ERROR, message: "Vas Airtime Service already exists "}
var E203671 = Global_error{id: "203671", eType: EXPECTED_ERROR, message: "Vas Airtime Service does not exist "}
var E203672 = Global_error{id: "203672", eType: EXPECTED_ERROR, message: "Overlaping State must be 'O' or 'N' only "}
var E203673 = Global_error{id: "203673", eType: EXPECTED_ERROR, message: "Shop profile does not exist "}
var E203674 = Global_error{id: "203674", eType: EXPECTED_ERROR, message: "Shop profile already exist "}
var E203675 = Global_error{id: "203675", eType: EXPECTED_ERROR, message: "Customer type must be individual or group bill customer. "}
var E203676 = Global_error{id: "203676", eType: EXPECTED_ERROR, message: "Recommender must be switched on longer than %d days. "}
var E203677 = Global_error{id: "203677", eType: EXPECTED_ERROR, message: "Subscriber isn't allow to add package within the specified period. "}
var E203678 = Global_error{id: "203678", eType: EXPECTED_ERROR, message: "VAS Service Code already exists "}
var E203679 = Global_error{id: "203679", eType: EXPECTED_ERROR, message: "VAS Service Code does not exist "}
var E203680 = Global_error{id: "203680", eType: EXPECTED_ERROR, message: "Reverse Arrear Stage control does not exist. "}
var E203681 = Global_error{id: "203681", eType: EXPECTED_ERROR, message: "subscriber has requested SOS, please refill money first and try again. "}
var E203682 = Global_error{id: "203682", eType: EXPECTED_ERROR, message: "Failed to connect to MD-VDS. "}
var E203683 = Global_error{id: "203683", eType: EXPECTED_ERROR, message: "Data cannot be processed as MD-VDS is having some problem. "}
var E203684 = Global_error{id: "203684", eType: EXPECTED_ERROR, message: "Invalid recurring day. "}
var E203685 = Global_error{id: "203685", eType: EXPECTED_ERROR, message: "VAS benefit already exists, can't apply this VAS. "}
var E203686 = Global_error{id: "203686", eType: EXPECTED_ERROR, message: "Update VAS voucher loading information table failed. "}
var E203687 = Global_error{id: "203687", eType: EXPECTED_ERROR, message: "Airtime type of package cannot be blank. "}
var E203688 = Global_error{id: "203688", eType: EXPECTED_ERROR, message: "Delete CS and VAS charging interface table failed. "}
var E203689 = Global_error{id: "203689", eType: EXPECTED_ERROR, message: "Update CS and VAS charging interface table failed. "}
var E203690 = Global_error{id: "203690", eType: EXPECTED_ERROR, message: "Failed to deduct money by VAS charging. "}
var E203691 = Global_error{id: "203691", eType: EXPECTED_ERROR, message: "Cannot deduct money in the specified period. "}
var E203692 = Global_error{id: "203692", eType: EXPECTED_ERROR, message: "Effective can not be over than 7 cycle. "}
var E203693 = Global_error{id: "203693", eType: EXPECTED_ERROR, message: "Telephone group does not exist. "}
var E203694 = Global_error{id: "203694", eType: EXPECTED_ERROR, message: "Telephone group already exists. "}
var E203695 = Global_error{id: "203695", eType: EXPECTED_ERROR, message: "Event Type already exist. "}
var E203696 = Global_error{id: "203696", eType: EXPECTED_ERROR, message: "Event Type does not exist. "}
var E203697 = Global_error{id: "203697", eType: EXPECTED_ERROR, message: "The Segment does not exist. "}
var E203698 = Global_error{id: "203698", eType: EXPECTED_ERROR, message: "The Segment already exists. "}
var E203699 = Global_error{id: "203699", eType: EXPECTED_ERROR, message: "The Segment already exists and is currently active. "}
var E203700 = Global_error{id: "203700", eType: EXPECTED_ERROR, message: "The Segment already exists but is not active. "}
var E203701 = Global_error{id: "203701", eType: EXPECTED_ERROR, message: "The Corporate Customer Service Type does not exist. "}
var E203702 = Global_error{id: "203702", eType: EXPECTED_ERROR, message: "The Corporate Customer Service Type already exists. "}
var E203703 = Global_error{id: "203703", eType: EXPECTED_ERROR, message: "The Corporate Customer Service Type already exists and is currently active. "}
var E203704 = Global_error{id: "203704", eType: EXPECTED_ERROR, message: "The Corporate Customer Service Type already exists but is not active. "}
var E203705 = Global_error{id: "203705", eType: EXPECTED_ERROR, message: "The Business Type does not exist. "}
var E203706 = Global_error{id: "203706", eType: EXPECTED_ERROR, message: "The Business Type already exists. "}
var E203707 = Global_error{id: "203707", eType: EXPECTED_ERROR, message: "The Business Type already exists and is currently active. "}
var E203708 = Global_error{id: "203708", eType: EXPECTED_ERROR, message: "The Business Type already exists but is not active. "}
var E203709 = Global_error{id: "203709", eType: EXPECTED_ERROR, message: "The Corporate Customer Service  Chief does not exist. "}
var E203710 = Global_error{id: "203710", eType: EXPECTED_ERROR, message: "The Corporate Customer Service Chief already exists but is not active. "}
var E203711 = Global_error{id: "203711", eType: EXPECTED_ERROR, message: "This Corporate Customer Service is not a chief. "}
var E203712 = Global_error{id: "203712", eType: EXPECTED_ERROR, message: "The Corporate Customer Service Chief cannot have its chief. "}
var E203713 = Global_error{id: "203713", eType: EXPECTED_ERROR, message: "This Corporate Customer Service Chief still has other child Corporate Customer Service(s). "}
var E203714 = Global_error{id: "203714", eType: EXPECTED_ERROR, message: "Subscriber's additional credit limit amount is greater than customer's additional credit limit amount. "}
var E203715 = Global_error{id: "203715", eType: EXPECTED_ERROR, message: "Subscriber's credit limit amount is greater than customer's credit limit amount. "}
var E203716 = Global_error{id: "203716", eType: EXPECTED_ERROR, message: "Trial package is not applicable for this transaction. "}
var E203717 = Global_error{id: "203717", eType: EXPECTED_ERROR, message: "Not found cancelled recommender data. "}
var E203718 = Global_error{id: "203718", eType: EXPECTED_ERROR, message: "Undo cancel recommender is not allowed as period exceeds. "}
var E203719 = Global_error{id: "203719", eType: EXPECTED_ERROR, message: "User is not authorized to perform Complete Quick Registration. "}
var E203720 = Global_error{id: "203720", eType: EXPECTED_ERROR, message: "Payment Channel is currently deactivate or does not exist. "}
var E203721 = Global_error{id: "203721", eType: EXPECTED_ERROR, message: "Payment Channel does not exist. "}
var E203722 = Global_error{id: "203722", eType: EXPECTED_ERROR, message: "Payment Channel detail cannot be retrieved. "}
var E203723 = Global_error{id: "203723", eType: EXPECTED_ERROR, message: "Payment Channel is currently deactive. "}
var E203724 = Global_error{id: "203724", eType: EXPECTED_ERROR, message: "Payment Channel is currently active. "}
var E203725 = Global_error{id: "203725", eType: EXPECTED_ERROR, message: "Payment channel already exist. "}
var E203726 = Global_error{id: "203726", eType: EXPECTED_ERROR, message: "Payment Channel is referred from Transaction Type table, cannot deactive "}
var E203727 = Global_error{id: "203727", eType: EXPECTED_ERROR, message: "Duplicate Entry in Payment Channel "}
var E203728 = Global_error{id: "203728", eType: EXPECTED_ERROR, message: "Invalid Payment Channel Code "}
var E203729 = Global_error{id: "203729", eType: EXPECTED_ERROR, message: "Debt Type Code already exist. "}
var E203730 = Global_error{id: "203730", eType: EXPECTED_ERROR, message: "Debt Type Code does not exist. "}
var E203731 = Global_error{id: "203731", eType: EXPECTED_ERROR, message: "Invalid e-Refill type "}
var E203732 = Global_error{id: "203732", eType: EXPECTED_ERROR, message: "Failed to update IMSI to e-Refill service "}
var E203733 = Global_error{id: "203733", eType: EXPECTED_ERROR, message: "Suspend reason group does not exist. "}
var E203734 = Global_error{id: "203734", eType: EXPECTED_ERROR, message: "Suspend reason group already exists. "}
var E203735 = Global_error{id: "203735", eType: EXPECTED_ERROR, message: "Suspend reason type does not exist. "}
var E203736 = Global_error{id: "203736", eType: EXPECTED_ERROR, message: "Suspend reason type already exists. "}
var E203737 = Global_error{id: "203737", eType: EXPECTED_ERROR, message: "IMSI number has to be numeric "}
var E203738 = Global_error{id: "203738", eType: EXPECTED_ERROR, message: "E-Refill funtion is return Time out "}
var E203739 = Global_error{id: "203739", eType: EXPECTED_ERROR, message: "Telephone number is not set active on eRefill database "}
var E203740 = Global_error{id: "203740", eType: EXPECTED_ERROR, message: "IMSI number is not available to use on SDM database "}
var E203741 = Global_error{id: "203741", eType: EXPECTED_ERROR, message: "Telephone number is already set active on eRefill database "}
var E203742 = Global_error{id: "203742", eType: EXPECTED_ERROR, message: "Specified Telephone number does not exist on SDM database "}
var E203743 = Global_error{id: "203743", eType: EXPECTED_ERROR, message: "Not found - Record not found when read the information "}
var E203744 = Global_error{id: "203744", eType: EXPECTED_ERROR, message: "Telephone number#2 is already set active on eRefill database "}
var E203745 = Global_error{id: "203745", eType: EXPECTED_ERROR, message: "IMSI number does not exist. "}
var E203746 = Global_error{id: "203746", eType: EXPECTED_ERROR, message: "Recurring Offset Unit can be 'D' or 'M' only. "}
var E203747 = Global_error{id: "203747", eType: EXPECTED_ERROR, message: "Special Number must be DTAC mobile number only "}
var E203748 = Global_error{id: "203748", eType: EXPECTED_ERROR, message: "Request action code does not exist. "}
var E203749 = Global_error{id: "203749", eType: EXPECTED_ERROR, message: "Request action code already exists. "}
var E203750 = Global_error{id: "203750", eType: EXPECTED_ERROR, message: "Request action code already exists but is not active. "}
var E203751 = Global_error{id: "203751", eType: EXPECTED_ERROR, message: "Request action code already exists and is currently active. "}
var E203752 = Global_error{id: "203752", eType: EXPECTED_ERROR, message: "Recurring offset period must be greater than zero. "}
var E203753 = Global_error{id: "203753", eType: EXPECTED_ERROR, message: "Invalid IN Service Code "}
var E203754 = Global_error{id: "203754", eType: EXPECTED_ERROR, message: "Same number of subscriber does not exist "}
var E203755 = Global_error{id: "203755", eType: EXPECTED_ERROR, message: "Same number of subscriber already exist "}
var E203756 = Global_error{id: "203756", eType: EXPECTED_ERROR, message: "Invalid Friend and Family Dtac Number Flag. "}
var E203757 = Global_error{id: "203757", eType: EXPECTED_ERROR, message: "The recurring will be lost immediately right after package has been successfully changed. Do you want to continue? "}
var E203758 = Global_error{id: "203758", eType: EXPECTED_ERROR, message: "Subscriber status is not active, Can not suspend subscriber with sleep mode. "}
var E203759 = Global_error{id: "203759", eType: EXPECTED_ERROR, message: "Invalid telephone type for Sleep mode suspension. "}
var E203760 = Global_error{id: "203760", eType: EXPECTED_ERROR, message: "Sleep Mode package is already exist. "}
var E203761 = Global_error{id: "203761", eType: EXPECTED_ERROR, message: "Invalid sleep mode package. "}
var E203762 = Global_error{id: "203762", eType: EXPECTED_ERROR, message: "Update sleep mode interface table failed. "}
var E203763 = Global_error{id: "203763", eType: EXPECTED_ERROR, message: "Can not suspend subscriber that already in Sleep mode suspension. "}
var E203764 = Global_error{id: "203764", eType: EXPECTED_ERROR, message: "Update extend SIM expiry loading information table failed. "}
var E203765 = Global_error{id: "203765", eType: EXPECTED_ERROR, message: "Update extend SIM expiry batch master table failed. "}
var E203766 = Global_error{id: "203766", eType: EXPECTED_ERROR, message: "Subscriber using Secondary SIM is not allowed to apply for Corporate Member "}
var E203767 = Global_error{id: "203767", eType: EXPECTED_ERROR, message: "Same Number subscriber is not allowed for this transaction "}
var E203768 = Global_error{id: "203768", eType: EXPECTED_ERROR, message: "Secondary SIM data are not found "}
var E203769 = Global_error{id: "203769", eType: EXPECTED_ERROR, message: "Granted allowed maximum number of Secondary SIM "}
var E203770 = Global_error{id: "203770", eType: EXPECTED_ERROR, message: "Main Card Number is same as the Secondary Card Number "}
var E203771 = Global_error{id: "203771", eType: EXPECTED_ERROR, message: "Invalid Request code type "}
var E203772 = Global_error{id: "203772", eType: EXPECTED_ERROR, message: "Request code used with another request code. Cannot be deactivated "}
var E203773 = Global_error{id: "203773", eType: EXPECTED_ERROR, message: "Main subscriber number is not allowed for this transaction. "}
var E203774 = Global_error{id: "203774", eType: EXPECTED_ERROR, message: "Subscriber using Secondary SIM is not allowed for this transaction "}
var E203775 = Global_error{id: "203775", eType: EXPECTED_ERROR, message: "Your password is not correct or it might have already expired. Please click on Get Password to get a new one. "}
var E203776 = Global_error{id: "203776", eType: EXPECTED_ERROR, message: "Start time can not be greater than or equal to end time. "}
var E203777 = Global_error{id: "203777", eType: EXPECTED_ERROR, message: "Telephone is already mapped with an IMSI on eRefill database "}
var E203778 = Global_error{id: "203778", eType: EXPECTED_ERROR, message: "Prepaid Business Type must be 'O' or 'R' Only. "}
var E203779 = Global_error{id: "203779", eType: EXPECTED_ERROR, message: "Bonus One time & Recurring Type must be 'O' or 'R' only. "}
var E203780 = Global_error{id: "203780", eType: EXPECTED_ERROR, message: "Bonus Recurring Type must be 'T' or 'U' only. "}
var E203781 = Global_error{id: "203781", eType: EXPECTED_ERROR, message: "Bonus Recurring Unit must be 'D','W' or 'M' only. "}
var E203782 = Global_error{id: "203782", eType: EXPECTED_ERROR, message: "One time & Recurring Bonus does not exist. "}
var E203783 = Global_error{id: "203783", eType: EXPECTED_ERROR, message: "One time & Recurring Bonus already exists. "}
var E203784 = Global_error{id: "203784", eType: EXPECTED_ERROR, message: "Prepaid Campaign Group does not exist. "}
var E203785 = Global_error{id: "203785", eType: EXPECTED_ERROR, message: "Prepaid Campaign Group already exists. "}
var E203786 = Global_error{id: "203786", eType: EXPECTED_ERROR, message: "Call Type must be 'M' or 'U' only "}
var E203787 = Global_error{id: "203787", eType: EXPECTED_ERROR, message: "Online Negative Deduct must 'N' or 'Y' only "}
var E203788 = Global_error{id: "203788", eType: EXPECTED_ERROR, message: "Commercial Zone does not exist "}
var E203789 = Global_error{id: "203789", eType: EXPECTED_ERROR, message: "Commercial Zone already exists "}
var E203790 = Global_error{id: "203790", eType: EXPECTED_ERROR, message: "Province does not exist "}
var E203791 = Global_error{id: "203791", eType: EXPECTED_ERROR, message: "Province already exists "}
var E203792 = Global_error{id: "203792", eType: EXPECTED_ERROR, message: "Amphur does not exist "}
var E203793 = Global_error{id: "203793", eType: EXPECTED_ERROR, message: "Amphur already exists "}
var E203794 = Global_error{id: "203794", eType: EXPECTED_ERROR, message: "Commercial Province does not exist "}
var E203795 = Global_error{id: "203795", eType: EXPECTED_ERROR, message: "Commercial Province already exists "}
var E203796 = Global_error{id: "203796", eType: EXPECTED_ERROR, message: "Minimum age of usage days should not be less than zero. "}
var E203797 = Global_error{id: "203797", eType: EXPECTED_ERROR, message: "Subscriber number must be activated for more than %d days to change to this promotion. "}
var E203798 = Global_error{id: "203798", eType: EXPECTED_ERROR, message: "Subscriber number has been activated less than or equal to %d days to change to other promotion. Do you want to continue? "}
var E203799 = Global_error{id: "203799", eType: EXPECTED_ERROR, message: "Invalid charge amount for adding or changing special numbers. "}
var E203800 = Global_error{id: "203800", eType: EXPECTED_ERROR, message: "Duplicate special number is found. "}
var E203801 = Global_error{id: "203801", eType: EXPECTED_ERROR, message: "Error in reading default parameter. Special character can not be specified for this field. "}
var E203802 = Global_error{id: "203802", eType: EXPECTED_ERROR, message: "Special character can not be specified for this field. "}
var E203803 = Global_error{id: "203803", eType: EXPECTED_ERROR, message: "User does not have authorization to allow age of usage of changing prepaid package. "}
var E203804 = Global_error{id: "203804", eType: EXPECTED_ERROR, message: "Subscriber number must be activated for more than %d days to change to this promotion. Do you want to continue? "}
var E203805 = Global_error{id: "203805", eType: EXPECTED_ERROR, message: "Invalid start period "}
var E203806 = Global_error{id: "203806", eType: EXPECTED_ERROR, message: "The age of usage authorization does not exist. "}
var E203807 = Global_error{id: "203807", eType: EXPECTED_ERROR, message: "You cannot use this Thai Citizen ID Number now. "}
var E203808 = Global_error{id: "203808", eType: EXPECTED_ERROR, message: "Current subscriber package group is changed, cannot change package group. "}
var E203809 = Global_error{id: "203809", eType: EXPECTED_ERROR, message: "Record does not exist in Mail & Service master table. "}
var E203810 = Global_error{id: "203810", eType: EXPECTED_ERROR, message: "Record already exists in Mail & Service master table. "}
var E203811 = Global_error{id: "203811", eType: EXPECTED_ERROR, message: "Charge Flag must be Y or N "}
var E203812 = Global_error{id: "203812", eType: EXPECTED_ERROR, message: "Payment Category does not exist. "}
var E203813 = Global_error{id: "203813", eType: EXPECTED_ERROR, message: "Cannot change or delete special number for this subscriber promotion. "}
var E203814 = Global_error{id: "203814", eType: EXPECTED_ERROR, message: "This number is not applicable to this promotion due to not in promoted region. "}
var E203815 = Global_error{id: "203815", eType: EXPECTED_ERROR, message: "Subscriber has already changed promotion "}
var E203816 = Global_error{id: "203816", eType: EXPECTED_ERROR, message: "Payment Promotion Code does not exist. "}
var E203817 = Global_error{id: "203817", eType: EXPECTED_ERROR, message: "Payment Promotion Code already exist. "}
var E203818 = Global_error{id: "203818", eType: EXPECTED_ERROR, message: "Time Band Header does not exist. "}
var E203819 = Global_error{id: "203819", eType: EXPECTED_ERROR, message: "Time Band Detail does not exist. "}
var E203820 = Global_error{id: "203820", eType: EXPECTED_ERROR, message: "Day Band Header does not exist. "}
var E203821 = Global_error{id: "203821", eType: EXPECTED_ERROR, message: "Day Band Detail does not exist. "}
var E203822 = Global_error{id: "203822", eType: EXPECTED_ERROR, message: "Invalid value entered for Start Day. "}
var E203823 = Global_error{id: "203823", eType: EXPECTED_ERROR, message: "Invalid value entered for End Day. "}
var E203824 = Global_error{id: "203824", eType: EXPECTED_ERROR, message: "Rounding Method must be 'U' or 'N'. "}
var E203825 = Global_error{id: "203825", eType: EXPECTED_ERROR, message: "Airtime Cell already exists. "}
var E203826 = Global_error{id: "203826", eType: EXPECTED_ERROR, message: "Airtime Cell does not exist. "}
var E203827 = Global_error{id: "203827", eType: EXPECTED_ERROR, message: "Rate Option already exists. "}
var E203828 = Global_error{id: "203828", eType: EXPECTED_ERROR, message: "Rate Option does not exist. "}
var E203829 = Global_error{id: "203829", eType: EXPECTED_ERROR, message: "This airtime type can be under default airtime group only. "}
var E203830 = Global_error{id: "203830", eType: EXPECTED_ERROR, message: "Analysis Group Code already exists. "}
var E203831 = Global_error{id: "203831", eType: EXPECTED_ERROR, message: "Analysis Group Code does not exist. "}
var E203832 = Global_error{id: "203832", eType: EXPECTED_ERROR, message: "Screen Type must be 'A', 'I' or 'V'. "}
var E203833 = Global_error{id: "203833", eType: EXPECTED_ERROR, message: "Plan Setup Flag must be 'Y' or 'N'. "}
var E203834 = Global_error{id: "203834", eType: EXPECTED_ERROR, message: "Airtime Rate Option must be 'V', 'S' or 'M'. "}
var E203835 = Global_error{id: "203835", eType: EXPECTED_ERROR, message: "Plan name already exists. "}
var E203836 = Global_error{id: "203836", eType: EXPECTED_ERROR, message: "This plan cannot support Airtime Cell Site "}
var E203837 = Global_error{id: "203837", eType: EXPECTED_ERROR, message: "Main Airtime has Invoice Airtime Type incompleted. "}
var E203838 = Global_error{id: "203838", eType: EXPECTED_ERROR, message: "Not allow for Write off customer. "}
var E203839 = Global_error{id: "203839", eType: EXPECTED_ERROR, message: "Can not pay advance because cust_stts or subr_stts is close "}
var E203840 = Global_error{id: "203840", eType: EXPECTED_ERROR, message: "Can not operate payment level customer "}
var E203841 = Global_error{id: "203841", eType: EXPECTED_ERROR, message: "Special Type does not exist "}
var E203842 = Global_error{id: "203842", eType: EXPECTED_ERROR, message: "Invalid Rounding method. "}
var E203843 = Global_error{id: "203843", eType: EXPECTED_ERROR, message: "Invalid Tariff type. "}
var E203844 = Global_error{id: "203844", eType: EXPECTED_ERROR, message: "Invalid Tariff charge type. "}
var E203845 = Global_error{id: "203845", eType: EXPECTED_ERROR, message: "Invalid Airtime group date flag. "}
var E203846 = Global_error{id: "203846", eType: EXPECTED_ERROR, message: "Invalid Airtime reward flag. "}
var E203847 = Global_error{id: "203847", eType: EXPECTED_ERROR, message: "Invalid Airtime source flag. "}
var E203848 = Global_error{id: "203848", eType: EXPECTED_ERROR, message: "Invalid Analysis provisioning code. "}
var E203849 = Global_error{id: "203849", eType: EXPECTED_ERROR, message: "Invalid Inovice flag. "}
var E203850 = Global_error{id: "203850", eType: EXPECTED_ERROR, message: "This subscriber has already registered VAS UP. "}
var E203851 = Global_error{id: "203851", eType: EXPECTED_ERROR, message: "Invalid Registered Channel. "}
var E203852 = Global_error{id: "203852", eType: EXPECTED_ERROR, message: "VAS bonus already exists. "}
var E203853 = Global_error{id: "203853", eType: EXPECTED_ERROR, message: "VAS bonus does not exists. "}
var E203854 = Global_error{id: "203854", eType: EXPECTED_ERROR, message: "Document Type already exists. "}
var E203855 = Global_error{id: "203855", eType: EXPECTED_ERROR, message: "Document Type does not exist. "}
var E203856 = Global_error{id: "203856", eType: EXPECTED_ERROR, message: "Document Type already exists and is currently effective. "}
var E203857 = Global_error{id: "203857", eType: EXPECTED_ERROR, message: "Document Type already exists but is not currently effective. "}
var E203858 = Global_error{id: "203858", eType: EXPECTED_ERROR, message: "Invalid amount "}
var E203859 = Global_error{id: "203859", eType: EXPECTED_ERROR, message: "Invalid bank branch code "}
var E203860 = Global_error{id: "203860", eType: EXPECTED_ERROR, message: "Invalid data format "}
var E203861 = Global_error{id: "203861", eType: EXPECTED_ERROR, message: "Bank Referrence Number  already exist "}
var E203862 = Global_error{id: "203862", eType: EXPECTED_ERROR, message: "Invalid payment channel "}
var E203863 = Global_error{id: "203863", eType: EXPECTED_ERROR, message: "No effective VAS Bonus or VAS Bonus is active more than 1 records. "}
var E203864 = Global_error{id: "203864", eType: EXPECTED_ERROR, message: "Education level already exists. "}
var E203865 = Global_error{id: "203865", eType: EXPECTED_ERROR, message: "Education level does not exists. "}
var E203866 = Global_error{id: "203866", eType: EXPECTED_ERROR, message: "Education level already exists and is currently effective. "}
var E203867 = Global_error{id: "203867", eType: EXPECTED_ERROR, message: "Education level already exists but is not currently effective. "}
var E203868 = Global_error{id: "203868", eType: EXPECTED_ERROR, message: "Hobby already exists. "}
var E203869 = Global_error{id: "203869", eType: EXPECTED_ERROR, message: "Hobby does not exists. "}
var E203870 = Global_error{id: "203870", eType: EXPECTED_ERROR, message: "Hobby already exists and is currently effective. "}
var E203871 = Global_error{id: "203871", eType: EXPECTED_ERROR, message: "Hobby already exists but is not currently effective. "}
var E203872 = Global_error{id: "203872", eType: EXPECTED_ERROR, message: "Hobby is required specific value. "}
var E203873 = Global_error{id: "203873", eType: EXPECTED_ERROR, message: "Start Time cannot overlap with End Time of previous record. "}
var E203874 = Global_error{id: "203874", eType: EXPECTED_ERROR, message: "Time Band must completed '00:00:00' - '23:59:59' "}
var E203875 = Global_error{id: "203875", eType: EXPECTED_ERROR, message: "Start Day connot overlop with End Day of previous record. "}
var E203876 = Global_error{id: "203876", eType: EXPECTED_ERROR, message: "Day Band must completed 'Sunday' - 'Saturday' "}
var E203877 = Global_error{id: "203877", eType: EXPECTED_ERROR, message: "Cannot register at non payment level customer. "}
var E203878 = Global_error{id: "203878", eType: EXPECTED_ERROR, message: "Cannot cancel bank account at non payment level customer. "}
var E203879 = Global_error{id: "203879", eType: EXPECTED_ERROR, message: "This mobile number is suspended.Please re-check. "}
var E203880 = Global_error{id: "203880", eType: EXPECTED_ERROR, message: "Invalid pocket type. "}
var E203881 = Global_error{id: "203881", eType: EXPECTED_ERROR, message: "Please should have at least one hobby. "}
var E203882 = Global_error{id: "203882", eType: EXPECTED_ERROR, message: "Can't apply this VAS package because subscriber has applied this unlimited VAS service over number of times allowed. "}
var E203883 = Global_error{id: "203883", eType: EXPECTED_ERROR, message: "Balance Amount is less than minimum allowance. "}
var E203884 = Global_error{id: "203884", eType: EXPECTED_ERROR, message: "Exceed maximum mail return, cannot save mail return. "}
var E203885 = Global_error{id: "203885", eType: EXPECTED_ERROR, message: "IN Pocket ID already exists. "}
var E203886 = Global_error{id: "203886", eType: EXPECTED_ERROR, message: "IN Pocket ID does not exist. "}
var E203887 = Global_error{id: "203887", eType: EXPECTED_ERROR, message: "Prepaid Service Code already exists. "}
var E203888 = Global_error{id: "203888", eType: EXPECTED_ERROR, message: "Prepaid Service Code does not exist. "}
var E203889 = Global_error{id: "203889", eType: EXPECTED_ERROR, message: "Sequence Number already exists. "}
var E203890 = Global_error{id: "203890", eType: EXPECTED_ERROR, message: "Sequence Number does not exist. "}
var E203891 = Global_error{id: "203891", eType: EXPECTED_ERROR, message: "Maximum value of Sequence Number cannot be greater than 99,999. "}
var E203892 = Global_error{id: "203892", eType: EXPECTED_ERROR, message: "Period of Special Type in each Business Promotion should not overlap. "}
var E203893 = Global_error{id: "203893", eType: EXPECTED_ERROR, message: "Transform Transaction id fail "}
var E203894 = Global_error{id: "203894", eType: EXPECTED_ERROR, message: "prepare Statement Transaction id fail "}
var E203895 = Global_error{id: "203895", eType: EXPECTED_ERROR, message: "Transaction id setup fail "}
var E203896 = Global_error{id: "203896", eType: EXPECTED_ERROR, message: "Max balance limit "}
var E203897 = Global_error{id: "203897", eType: EXPECTED_ERROR, message: "Max date limit "}
var E203898 = Global_error{id: "203898", eType: EXPECTED_ERROR, message: "Account not support "}
var E203899 = Global_error{id: "203899", eType: EXPECTED_ERROR, message: "Max bonus limit "}
var E203900 = Global_error{id: "203900", eType: EXPECTED_ERROR, message: "OPCI: Recharge rule not found "}
var E203901 = Global_error{id: "203901", eType: EXPECTED_ERROR, message: "OPCI: PP_RuleMapping not found "}
var E203902 = Global_error{id: "203902", eType: EXPECTED_ERROR, message: "OPCI: Prepaid profile not found for the subscriber "}
var E203903 = Global_error{id: "203903", eType: EXPECTED_ERROR, message: "OPCI: Subscriber in wrong state "}
var E203904 = Global_error{id: "203904", eType: EXPECTED_ERROR, message: "OPCI: MaxCreditLimit exceeded "}
var E203905 = Global_error{id: "203905", eType: EXPECTED_ERROR, message: "OPCI: Provider not found "}
var E203906 = Global_error{id: "203906", eType: EXPECTED_ERROR, message: "OPCI: ReductionId incorrect "}
var E203907 = Global_error{id: "203907", eType: EXPECTED_ERROR, message: "OPCI: Negative recharge amount "}
var E203908 = Global_error{id: "203908", eType: EXPECTED_ERROR, message: "OPCI: Invalid voucher "}
var E203909 = Global_error{id: "203909", eType: EXPECTED_ERROR, message: "OPCI: Voucher expired "}
var E203910 = Global_error{id: "203910", eType: EXPECTED_ERROR, message: "OPCI: Voucher used "}
var E203911 = Global_error{id: "203911", eType: EXPECTED_ERROR, message: "OPCI: Voucher barred "}
var E203912 = Global_error{id: "203912", eType: EXPECTED_ERROR, message: "OPCI: Failed recharge attempts exceeded "}
var E203913 = Global_error{id: "203913", eType: EXPECTED_ERROR, message: "OPCI: Voucher not usable "}
var E203914 = Global_error{id: "203914", eType: EXPECTED_ERROR, message: "OPCI: Platform not found "}
var E203915 = Global_error{id: "203915", eType: EXPECTED_ERROR, message: "OPCI: Illegal property "}
var E203916 = Global_error{id: "203916", eType: EXPECTED_ERROR, message: "OPCI: Illegal operation "}
var E203917 = Global_error{id: "203917", eType: EXPECTED_ERROR, message: "OPCI: Access denied "}
var E203918 = Global_error{id: "203918", eType: EXPECTED_ERROR, message: "Prepaid Business IN Pocket Id does not exist "}
var E203919 = Global_error{id: "203919", eType: EXPECTED_ERROR, message: "Main cannot set up more than one pocket ID, Already exist. "}
var E203920 = Global_error{id: "203920", eType: EXPECTED_ERROR, message: "Charge priority for compound (M to B) use only pocket for Main "}
var E203921 = Global_error{id: "203921", eType: EXPECTED_ERROR, message: "Charge priority for compound (B to M) use only pocket for Bonus "}
var E203922 = Global_error{id: "203922", eType: EXPECTED_ERROR, message: "Charge priority pocket cannot be the same as IN Pocket ID "}
var E203923 = Global_error{id: "203923", eType: EXPECTED_ERROR, message: "Not an existing pocket ID for this Charge Priority pocket "}
var E203924 = Global_error{id: "203924", eType: EXPECTED_ERROR, message: "Compound (M to B) cannot set up more than one pocket ID, Already exist. "}
var E203925 = Global_error{id: "203925", eType: EXPECTED_ERROR, message: "Compound (B to M) cannot set up more than one pocket ID, Already exist. "}
var E203926 = Global_error{id: "203926", eType: EXPECTED_ERROR, message: "Charge priority for compound (B to M) use only pocket for Bonus "}
var E203927 = Global_error{id: "203927", eType: EXPECTED_ERROR, message: "CPA Refund fail "}
var E203928 = Global_error{id: "203928", eType: EXPECTED_ERROR, message: "CPA Refund duplicate "}
var E203929 = Global_error{id: "203929", eType: EXPECTED_ERROR, message: "CPA Refund not found "}
var E203930 = Global_error{id: "203930", eType: EXPECTED_ERROR, message: "CPA Refund not found for cancel "}
var E203931 = Global_error{id: "203931", eType: EXPECTED_ERROR, message: "CPA Refund amount not equal charge amount "}
var E203932 = Global_error{id: "203932", eType: EXPECTED_ERROR, message: "CPA:CalcOnline() fail "}
var E203933 = Global_error{id: "203933", eType: EXPECTED_ERROR, message: "CPA:CalcOnline() database fail "}
var E203934 = Global_error{id: "203934", eType: EXPECTED_ERROR, message: "CPA:CalcOnline() Service Not found "}
var E203935 = Global_error{id: "203935", eType: EXPECTED_ERROR, message: "CPA:CalcOnline() Price Not found "}
var E203936 = Global_error{id: "203936", eType: EXPECTED_ERROR, message: "SMI: Corba Exception Error "}
var E203937 = Global_error{id: "203937", eType: EXPECTED_ERROR, message: "SMI: Unspecified Application Error from SMI "}
var E203938 = Global_error{id: "203938", eType: EXPECTED_ERROR, message: "Back-end: Unexpected Error "}
var E203939 = Global_error{id: "203939", eType: EXPECTED_ERROR, message: "Front-end: Unexpected Error "}
var E203940 = Global_error{id: "203940", eType: EXPECTED_ERROR, message: "Front-end: Access denied for function operation "}
var E203941 = Global_error{id: "203941", eType: EXPECTED_ERROR, message: "Client: Error reading the response from MD-SMI "}
var E203942 = Global_error{id: "203942", eType: EXPECTED_ERROR, message: "Client: Connection was lost from MD-SMI "}
var E203943 = Global_error{id: "203943", eType: EXPECTED_ERROR, message: "Client: No response from MD-SMI "}
var E203944 = Global_error{id: "203944", eType: EXPECTED_ERROR, message: "Client: Invalid value for input command "}
var E203945 = Global_error{id: "203945", eType: EXPECTED_ERROR, message: "Client: Invalid response from MD Smi Gateway "}
var E203946 = Global_error{id: "203946", eType: EXPECTED_ERROR, message: "Invalid integer format "}
var E203947 = Global_error{id: "203947", eType: EXPECTED_ERROR, message: "Separate bill collector rule no. already exists. "}
var E203948 = Global_error{id: "203948", eType: EXPECTED_ERROR, message: "Separate bill collector rule no. does not exist. "}
var E203949 = Global_error{id: "203949", eType: EXPECTED_ERROR, message: "Separate type code already exist. "}
var E203950 = Global_error{id: "203950", eType: EXPECTED_ERROR, message: "Separate type code does not exist. "}
var E203951 = Global_error{id: "203951", eType: EXPECTED_ERROR, message: "None of special number is transferred. "}
var E203952 = Global_error{id: "203952", eType: EXPECTED_ERROR, message: "%d Special numbers are transferred to new package. "}
var E203953 = Global_error{id: "203953", eType: EXPECTED_ERROR, message: "Connection to API IL cannot be established. "}
var E203954 = Global_error{id: "203954", eType: EXPECTED_ERROR, message: "Connection to API IL cannot be established. "}
var E203955 = Global_error{id: "203955", eType: EXPECTED_ERROR, message: "Retailer address not found, please contact retailer. "}
var E203956 = Global_error{id: "203956", eType: EXPECTED_ERROR, message: "Retailer address length error, please contact retailer. "}
var E203957 = Global_error{id: "203957", eType: EXPECTED_ERROR, message: "Process eRefill was success but receipt fail. "}
var E203958 = Global_error{id: "203958", eType: EXPECTED_ERROR, message: "Subscriber has already subscribed prepaid special number package. "}
var E203959 = Global_error{id: "203959", eType: EXPECTED_ERROR, message: "Special number property of package is not consistent with previous one. "}
var E203960 = Global_error{id: "203960", eType: EXPECTED_ERROR, message: "Subscriber has never had special number. "}
var E203961 = Global_error{id: "203961", eType: EXPECTED_ERROR, message: "Your special number will be cancelled. "}
var E203962 = Global_error{id: "203962", eType: EXPECTED_ERROR, message: "Alert Service already exist. "}
var E203963 = Global_error{id: "203963", eType: EXPECTED_ERROR, message: "Alert Service does not exist. "}
var E203964 = Global_error{id: "203964", eType: EXPECTED_ERROR, message: "Credit Limit Plan is currently not effective. "}
var E203965 = Global_error{id: "203965", eType: EXPECTED_ERROR, message: "Credit Limit Plan is currently effective. "}
var E203966 = Global_error{id: "203966", eType: EXPECTED_ERROR, message: "Credit Limit Amount TO must be greater than Credit Limit Amount FROM. "}
var E203967 = Global_error{id: "203967", eType: EXPECTED_ERROR, message: "Credit Limit Reminder Amount  must be less than Credit Limit Amount TO. "}
var E203968 = Global_error{id: "203968", eType: EXPECTED_ERROR, message: "Connection to API IL cannot be established. "}
var E203969 = Global_error{id: "203969", eType: EXPECTED_ERROR, message: "This is not dtac prepaid number. Please check the number again. "}
var E203970 = Global_error{id: "203970", eType: EXPECTED_ERROR, message: "Unable to transfer to SIM D "}
var E203971 = Global_error{id: "203971", eType: EXPECTED_ERROR, message: "This dtac prepaid number is currently disabled. Credit top-up cannot be complete. Please contact *1840. "}
var E203972 = Global_error{id: "203972", eType: EXPECTED_ERROR, message: "ERFL: Transaction is duplicate "}
var E203973 = Global_error{id: "203973", eType: EXPECTED_ERROR, message: "Address not found. Please input before save "}
var E203974 = Global_error{id: "203974", eType: EXPECTED_ERROR, message: "Function ID and Opposite  Function ID can not be same. "}
var E203975 = Global_error{id: "203975", eType: EXPECTED_ERROR, message: "Function ID already exists. "}
var E203976 = Global_error{id: "203976", eType: EXPECTED_ERROR, message: "Function ID does not exists. "}
var E203977 = Global_error{id: "203977", eType: EXPECTED_ERROR, message: "Invalid Alert Type. "}
var E203978 = Global_error{id: "203978", eType: EXPECTED_ERROR, message: "Alert Type is not applicable for this subscriber. "}
var E203979 = Global_error{id: "203979", eType: EXPECTED_ERROR, message: "Cannot update table dc_wrof_trns "}
var E203980 = Global_error{id: "203980", eType: EXPECTED_ERROR, message: "Debt amount blank not allowed "}
var E203981 = Global_error{id: "203981", eType: EXPECTED_ERROR, message: "Write off code does not exist "}
var E203982 = Global_error{id: "203982", eType: EXPECTED_ERROR, message: "Cort amount must be greater than "}
var E203983 = Global_error{id: "203983", eType: EXPECTED_ERROR, message: "Customer write off transaction does not exist "}
var E203984 = Global_error{id: "203984", eType: EXPECTED_ERROR, message: "Customer write off transaction already exists "}
var E203985 = Global_error{id: "203985", eType: EXPECTED_ERROR, message: "Invalid case no required flag "}
var E203986 = Global_error{id: "203986", eType: EXPECTED_ERROR, message: "Invalid write off mapping type "}
var E203987 = Global_error{id: "203987", eType: EXPECTED_ERROR, message: "Invalid account mapping code "}
var E203988 = Global_error{id: "203988", eType: EXPECTED_ERROR, message: "Write off code already exists "}
var E203989 = Global_error{id: "203989", eType: EXPECTED_ERROR, message: "Cannot do this transaction, it is over limit (by Month). "}
var E203990 = Global_error{id: "203990", eType: EXPECTED_ERROR, message: "Cannot do this transaction, it is over limit (by Day). "}
var E203991 = Global_error{id: "203991", eType: EXPECTED_ERROR, message: "Ur accumulation validity is >365days "}
var E203992 = Global_error{id: "203992", eType: EXPECTED_ERROR, message: "Customer Sue do not exits. "}
var E203993 = Global_error{id: "203993", eType: EXPECTED_ERROR, message: "Customer Sue already exists. "}
var E203994 = Global_error{id: "203994", eType: EXPECTED_ERROR, message: "Customer had been written off "}
var E203995 = Global_error{id: "203995", eType: EXPECTED_ERROR, message: "Customer must has black number or red number "}
var E203996 = Global_error{id: "203996", eType: EXPECTED_ERROR, message: "Customer must has black number and red number "}
var E203997 = Global_error{id: "203997", eType: EXPECTED_ERROR, message: "Black number is null "}
var E203998 = Global_error{id: "203998", eType: EXPECTED_ERROR, message: "Red number is null "}
var E203999 = Global_error{id: "203999", eType: EXPECTED_ERROR, message: "Dr amount is not equal to Cr amount "}
var E204000 = Global_error{id: "204000", eType: EXPECTED_ERROR, message: "Customer already exist in write off interface table "}
var E204001 = Global_error{id: "204001", eType: EXPECTED_ERROR, message: "Invalid type of subscriber in community. "}
var E204002 = Global_error{id: "204002", eType: EXPECTED_ERROR, message: "You can apply for this promotion. But you will be no longer enjoy the special call rate and unable to change back to this package. Do you want to continue? "}
var E204003 = Global_error{id: "204003", eType: EXPECTED_ERROR, message: "Subscriber is not in community. "}
var E204004 = Global_error{id: "204004", eType: EXPECTED_ERROR, message: "Destination number is not in community. "}
var E204005 = Global_error{id: "204005", eType: EXPECTED_ERROR, message: "This Subscriber number is not applicable for Friends and Family benefit "}
var E204006 = Global_error{id: "204006", eType: EXPECTED_ERROR, message: "Numbers of Special number must be greater than or equal to 0. "}
var E204007 = Global_error{id: "204007", eType: EXPECTED_ERROR, message: "Invalid Benefit Type. "}
var E204008 = Global_error{id: "204008", eType: EXPECTED_ERROR, message: "Benefit period and Numbers of Special Number are inconsistent. "}
var E204009 = Global_error{id: "204009", eType: EXPECTED_ERROR, message: "Max. Special Number must be greater than 0. "}
var E204010 = Global_error{id: "204010", eType: EXPECTED_ERROR, message: "Subscriber is not applicable for MGM Special Number Benefit. "}
var E204011 = Global_error{id: "204011", eType: EXPECTED_ERROR, message: "Sorry you have exceed the maximum number of recommenders. "}
var E204012 = Global_error{id: "204012", eType: EXPECTED_ERROR, message: "Sorry. You have not yet returned credit of %s Baht from Jaidee HaiYuem or Vaccine service. Please refill before using the service. "}
var E204013 = Global_error{id: "204013", eType: EXPECTED_ERROR, message: "Number of months for SIM expiry date extension must not greater than the specified parameter value. "}
var E204014 = Global_error{id: "204014", eType: EXPECTED_ERROR, message: "The specified SIM expiry date must less than current expiry date. "}
var E204015 = Global_error{id: "204015", eType: EXPECTED_ERROR, message: "You can apply for this promotion.But you will be no longer enjoy virus SIM benefit and unable to change back to this package. Do you want to continue? "}
var E204016 = Global_error{id: "204016", eType: EXPECTED_ERROR, message: "VAS is not allowed for this product. "}
var E204017 = Global_error{id: "204017", eType: EXPECTED_ERROR, message: "System Error (IN/VDS). "}
var E204018 = Global_error{id: "204018", eType: EXPECTED_ERROR, message: "SIM Card has been expired. "}
var E204019 = Global_error{id: "204019", eType: EXPECTED_ERROR, message: "Update Set SIM expiry date batch master table failed. "}
var E204020 = Global_error{id: "204020", eType: EXPECTED_ERROR, message: "Update Set SIM expiry date loading information table failed. "}
var E204021 = Global_error{id: "204021", eType: EXPECTED_ERROR, message: "Subscriber have Vaccine balance more than 0. (Vaccine) "}
var E204022 = Global_error{id: "204022", eType: EXPECTED_ERROR, message: "Communication channel code does not exist. "}
var E204023 = Global_error{id: "204023", eType: EXPECTED_ERROR, message: "Communication channel code already exists. "}
var E204024 = Global_error{id: "204024", eType: EXPECTED_ERROR, message: "Communication channel code already exists but is not active. "}
var E204025 = Global_error{id: "204025", eType: EXPECTED_ERROR, message: "Communication channel code already exists and is currently active. "}
var E204026 = Global_error{id: "204026", eType: EXPECTED_ERROR, message: "Content does not exist. "}
var E204027 = Global_error{id: "204027", eType: EXPECTED_ERROR, message: "Content already exists. "}
var E204028 = Global_error{id: "204028", eType: EXPECTED_ERROR, message: "Content already exists but is not active. "}
var E204029 = Global_error{id: "204029", eType: EXPECTED_ERROR, message: "Content already exists and is currently active. "}
var E204030 = Global_error{id: "204030", eType: EXPECTED_ERROR, message: "Invalid Execute Mode "}
var E204031 = Global_error{id: "204031", eType: EXPECTED_ERROR, message: "Benefit is already expired. "}
var E204032 = Global_error{id: "204032", eType: EXPECTED_ERROR, message: "Data SIM package does not exist. "}
var E204033 = Global_error{id: "204033", eType: EXPECTED_ERROR, message: "Data SIM package already exist. "}
var E204034 = Global_error{id: "204034", eType: EXPECTED_ERROR, message: "Service already exist. "}
var E204035 = Global_error{id: "204035", eType: EXPECTED_ERROR, message: "Product Hierarchy already exist. "}
var E204036 = Global_error{id: "204036", eType: EXPECTED_ERROR, message: "Product Hierarchy does not exist. "}
var E204037 = Global_error{id: "204037", eType: EXPECTED_ERROR, message: "Product Hierarchy is referred from Service, Cannot be deleted. "}
var E204038 = Global_error{id: "204038", eType: EXPECTED_ERROR, message: "DTAC Portal already exist. "}
var E204039 = Global_error{id: "204039", eType: EXPECTED_ERROR, message: "DTAC Portal does not exist. "}
var E204040 = Global_error{id: "204040", eType: EXPECTED_ERROR, message: "DTAC Portal is referred from Service, Cannot be deleted. "}
var E204041 = Global_error{id: "204041", eType: EXPECTED_ERROR, message: "CPA Sharing already exist. "}
var E204042 = Global_error{id: "204042", eType: EXPECTED_ERROR, message: "CPA Sharing does not exist. "}
var E204043 = Global_error{id: "204043", eType: EXPECTED_ERROR, message: "Product Category already exist. "}
var E204044 = Global_error{id: "204044", eType: EXPECTED_ERROR, message: "Product Category does not exist. "}
var E204045 = Global_error{id: "204045", eType: EXPECTED_ERROR, message: "Product Category is referred from Product Hierarchy, Cannot be deleted. "}
var E204046 = Global_error{id: "204046", eType: EXPECTED_ERROR, message: "Product Group already exist. "}
var E204047 = Global_error{id: "204047", eType: EXPECTED_ERROR, message: "Product Group does not exist. "}
var E204048 = Global_error{id: "204048", eType: EXPECTED_ERROR, message: "Product Group is referred from Product Hierarchy, Cannot be deleted. "}
var E204049 = Global_error{id: "204049", eType: EXPECTED_ERROR, message: "Product Type already exist. "}
var E204050 = Global_error{id: "204050", eType: EXPECTED_ERROR, message: "Product Type does not exist. "}
var E204051 = Global_error{id: "204051", eType: EXPECTED_ERROR, message: "Product Type is referred from Product Hierarchy, Cannot be deleted. "}
var E204052 = Global_error{id: "204052", eType: EXPECTED_ERROR, message: "Voucher number not match with Voucher package code. "}
var E204053 = Global_error{id: "204053", eType: EXPECTED_ERROR, message: "Voucher package is not in effective period. "}
var E204054 = Global_error{id: "204054", eType: EXPECTED_ERROR, message: "Response time out from VDS. "}
var E204055 = Global_error{id: "204055", eType: EXPECTED_ERROR, message: "Response failure from VDS. "}
var E204056 = Global_error{id: "204056", eType: EXPECTED_ERROR, message: "Data for Change of Package will be lost. Do you want to continue ? "}
var E204057 = Global_error{id: "204057", eType: EXPECTED_ERROR, message: "Change package plan is allowed only for active package plan. "}
var E204058 = Global_error{id: "204058", eType: EXPECTED_ERROR, message: "This package plan cannot be expired. Please use Change package plan option. "}
var E204059 = Global_error{id: "204059", eType: EXPECTED_ERROR, message: "This package plan cannot be changed. Please use Expire package plan option. "}
var E204060 = Global_error{id: "204060", eType: EXPECTED_ERROR, message: "Update prompt cross category batch master table failed. "}
var E204061 = Global_error{id: "204061", eType: EXPECTED_ERROR, message: "Update Prompt cross category loading information table failed. "}
var E204062 = Global_error{id: "204062", eType: EXPECTED_ERROR, message: "Date must not be less than package effective date. "}
var E204063 = Global_error{id: "204063", eType: EXPECTED_ERROR, message: "Record is cancelled. "}
var E204064 = Global_error{id: "204064", eType: EXPECTED_ERROR, message: "Subscriber has already changed additional package.Cannot rectify package group. "}
var E204065 = Global_error{id: "204065", eType: EXPECTED_ERROR, message: "Project number does not exist. "}
var E204066 = Global_error{id: "204066", eType: EXPECTED_ERROR, message: "Project number already exists. "}
var E204067 = Global_error{id: "204067", eType: EXPECTED_ERROR, message: "Project number already exists but is not active. "}
var E204068 = Global_error{id: "204068", eType: EXPECTED_ERROR, message: "Project number already exists and is currently active. "}
var E204069 = Global_error{id: "204069", eType: EXPECTED_ERROR, message: "This telephone is not allowed to change to New Special Type. "}
var E204070 = Global_error{id: "204070", eType: EXPECTED_ERROR, message: "This telephone is not allowed to change to New Telephone Type. "}
var E204071 = Global_error{id: "204071", eType: EXPECTED_ERROR, message: "Invalid E-Refill Flag "}
var E204072 = Global_error{id: "204072", eType: EXPECTED_ERROR, message: "Your request could not be completed because data is updating "}
var E204073 = Global_error{id: "204073", eType: EXPECTED_ERROR, message: "Effective user authorization for package does not exist. "}
var E204074 = Global_error{id: "204074", eType: EXPECTED_ERROR, message: "Sorry. The special number you have selected is not active (Pre activate or switch off). "}
var E204075 = Global_error{id: "204075", eType: EXPECTED_ERROR, message: "Sorry. The special number you have selected is temporary suspended. "}
var E204076 = Global_error{id: "204076", eType: EXPECTED_ERROR, message: "VAS Package add successfully. Please check provisioning package after refill money. "}
var E204077 = Global_error{id: "204077", eType: EXPECTED_ERROR, message: "You cannot do this transaction because current profile is already prepaid. "}
var E204078 = Global_error{id: "204078", eType: EXPECTED_ERROR, message: "You cannot do this transaction because current profile is already postpaid. "}
var E204079 = Global_error{id: "204079", eType: EXPECTED_ERROR, message: "You cannot do this transaction because the system is changing your profile. "}
var E204080 = Global_error{id: "204080", eType: EXPECTED_ERROR, message: "Time Band Detail exists in other table, cannot delete. "}
var E204081 = Global_error{id: "204081", eType: EXPECTED_ERROR, message: "Time Band exists in other table, cannot delete. "}
var E204082 = Global_error{id: "204082", eType: EXPECTED_ERROR, message: "Day Band Detail exists in other table, cannot delete. "}
var E204083 = Global_error{id: "204083", eType: EXPECTED_ERROR, message: "Day Band exists in other table, cannot delete. "}
var E204084 = Global_error{id: "204084", eType: EXPECTED_ERROR, message: "Prepaid subscriber balance amount is not enough for withdraw "}
var E204085 = Global_error{id: "204085", eType: EXPECTED_ERROR, message: "Prepaid subscriber balance days is not enough for withdraw "}
var E204086 = Global_error{id: "204086", eType: EXPECTED_ERROR, message: "Withdraw Amount must not be negative. "}
var E204087 = Global_error{id: "204087", eType: EXPECTED_ERROR, message: "Expected Amount must not be negative. "}
var E204088 = Global_error{id: "204088", eType: EXPECTED_ERROR, message: "Extra Amount must not be negative. "}
var E204089 = Global_error{id: "204089", eType: EXPECTED_ERROR, message: "Withdraw Amount must greater than or equal to Expected Amount. "}
var E204090 = Global_error{id: "204090", eType: EXPECTED_ERROR, message: "Extra Amount must be zero. "}
var E204091 = Global_error{id: "204091", eType: EXPECTED_ERROR, message: "Invalid quota unit. "}
var E204092 = Global_error{id: "204092", eType: EXPECTED_ERROR, message: "Invalid call back DTAC number. "}
var E204093 = Global_error{id: "204093", eType: EXPECTED_ERROR, message: "Call back code already exists. "}
var E204094 = Global_error{id: "204094", eType: EXPECTED_ERROR, message: "Call back code does not exist. "}
var E204095 = Global_error{id: "204095", eType: EXPECTED_ERROR, message: "Call back code already exists and is currently effective. "}
var E204096 = Global_error{id: "204096", eType: EXPECTED_ERROR, message: "Call back code already exists but is not currently effective. "}
var E204097 = Global_error{id: "204097", eType: EXPECTED_ERROR, message: "You cannot activate this call back code as there already exists an active call back code. "}
var E204098 = Global_error{id: "204098", eType: EXPECTED_ERROR, message: "Expire package plan is allowed only for active package plan. "}
var E204099 = Global_error{id: "204099", eType: EXPECTED_ERROR, message: "Do you confirm to expire the package(s) ? "}
var E204100 = Global_error{id: "204100", eType: EXPECTED_ERROR, message: "Debt Code is not active "}
var E204101 = Global_error{id: "204101", eType: EXPECTED_ERROR, message: "Debt Code is currently active "}
var E204102 = Global_error{id: "204102", eType: EXPECTED_ERROR, message: "Debt Code does not exist "}
var E204103 = Global_error{id: "204103", eType: EXPECTED_ERROR, message: "Debt Code is already exist "}
var E204104 = Global_error{id: "204104", eType: EXPECTED_ERROR, message: "Special Service Code is not active "}
var E204105 = Global_error{id: "204105", eType: EXPECTED_ERROR, message: "Special Service Code is currently active "}
var E204106 = Global_error{id: "204106", eType: EXPECTED_ERROR, message: "Special Service Code does not exist "}
var E204107 = Global_error{id: "204107", eType: EXPECTED_ERROR, message: "Special Service Code is already exist "}
var E204108 = Global_error{id: "204108", eType: EXPECTED_ERROR, message: "Service Agreement Code is not active "}
var E204109 = Global_error{id: "204109", eType: EXPECTED_ERROR, message: "Service Agreement Code is currently active "}
var E204110 = Global_error{id: "204110", eType: EXPECTED_ERROR, message: "Service Agreement Code does not exist "}
var E204111 = Global_error{id: "204111", eType: EXPECTED_ERROR, message: "Service Agreement Code is already exist "}
var E204112 = Global_error{id: "204112", eType: EXPECTED_ERROR, message: "Sub Business Type is not active "}
var E204113 = Global_error{id: "204113", eType: EXPECTED_ERROR, message: "Sub Business Type is currently active "}
var E204114 = Global_error{id: "204114", eType: EXPECTED_ERROR, message: "Sub Business Type does not exist "}
var E204115 = Global_error{id: "204115", eType: EXPECTED_ERROR, message: "Sub Business Type is already exist "}
var E204116 = Global_error{id: "204116", eType: EXPECTED_ERROR, message: "Additional package isn't applicable to use with the main package. "}
var E204117 = Global_error{id: "204117", eType: EXPECTED_ERROR, message: "The specified package isn't allowed package type for this transaction. "}
var E204118 = Global_error{id: "204118", eType: EXPECTED_ERROR, message: "Percentage should be greater than 0 and less than or equal to 100. "}
var E204119 = Global_error{id: "204119", eType: EXPECTED_ERROR, message: "Summary of Percent Value must not be greater than 100. "}
var E204120 = Global_error{id: "204120", eType: EXPECTED_ERROR, message: "VIP Number does not exist "}
var E204121 = Global_error{id: "204121", eType: EXPECTED_ERROR, message: "Extra Service does not exist "}
var E204122 = Global_error{id: "204122", eType: EXPECTED_ERROR, message: "Package Group Profile already exist. "}
var E204123 = Global_error{id: "204123", eType: EXPECTED_ERROR, message: "Package Group Profile does not exist. "}
var E204124 = Global_error{id: "204124", eType: EXPECTED_ERROR, message: "Package Group Profile Detail does not exist. "}
var E204125 = Global_error{id: "204125", eType: EXPECTED_ERROR, message: "Package Group Profile Detail already exist. "}
var E204126 = Global_error{id: "204126", eType: EXPECTED_ERROR, message: "The refill rate does not exist. "}
var E204127 = Global_error{id: "204127", eType: EXPECTED_ERROR, message: "Can not refill because it exceeded the maximum refill amount for this bill cycle. "}
var E204128 = Global_error{id: "204128", eType: EXPECTED_ERROR, message: "The refill rate is not set up in the Master Refill. "}
var E204129 = Global_error{id: "204129", eType: EXPECTED_ERROR, message: "Maximum refill amount for all subscriber is not set up in the system. "}
var E204130 = Global_error{id: "204130", eType: EXPECTED_ERROR, message: "Please reduce the refill amount and try again. "}
var E204131 = Global_error{id: "204131", eType: EXPECTED_ERROR, message: "Can not change the maximum refill amount because it exceeded the credit limit by customer. "}
var E204132 = Global_error{id: "204132", eType: EXPECTED_ERROR, message: "The maximum refill amount should not exceed %.2f baht. "}
var E204133 = Global_error{id: "204133", eType: EXPECTED_ERROR, message: "Can not refill because the refill amount exceeded the maximum refill rate for this subscriber. "}
var E204134 = Global_error{id: "204134", eType: EXPECTED_ERROR, message: "Airtime already existing, can't be duplicated. "}
var E204135 = Global_error{id: "204135", eType: EXPECTED_ERROR, message: "Telephone special type is not loaded preactivation special type. "}
var E204136 = Global_error{id: "204136", eType: EXPECTED_ERROR, message: "SIM expiry date must not be blank. "}
var E204137 = Global_error{id: "204137", eType: EXPECTED_ERROR, message: "Update loading information table failed. "}
var E204138 = Global_error{id: "204138", eType: EXPECTED_ERROR, message: "Update batch master table failed. "}
var E204139 = Global_error{id: "204139", eType: EXPECTED_ERROR, message: "Refill amount into Main Pocket should not be less than paid amount. "}
var E204140 = Global_error{id: "204140", eType: EXPECTED_ERROR, message: "Package with Start Date validity is not allowed for adding package next cycle. "}
var E204141 = Global_error{id: "204141", eType: EXPECTED_ERROR, message: "Time Band already existing, can't be duplicated. "}
var E204142 = Global_error{id: "204142", eType: EXPECTED_ERROR, message: "Day Band already existing, can't be duplicated. "}
var E204143 = Global_error{id: "204143", eType: EXPECTED_ERROR, message: "Invalid ID Type for Corporate Customer. "}
var E204144 = Global_error{id: "204144", eType: EXPECTED_ERROR, message: "Invalid Business register number. "}
var E204145 = Global_error{id: "204145", eType: EXPECTED_ERROR, message: "This is an active telephone number. "}
var E204146 = Global_error{id: "204146", eType: EXPECTED_ERROR, message: "CRM Subscriber number should not be null. "}
var E204147 = Global_error{id: "204147", eType: EXPECTED_ERROR, message: "Subscriber is inprogress wait 3 minutes "}
var E204148 = Global_error{id: "204148", eType: EXPECTED_ERROR, message: "DB Lock Subr Error. "}
var E204149 = Global_error{id: "204149", eType: EXPECTED_ERROR, message: "OPCI: Locking error. "}
var E204150 = Global_error{id: "204150", eType: EXPECTED_ERROR, message: "OPCI: Unknown error. "}
var E204151 = Global_error{id: "204151", eType: EXPECTED_ERROR, message: "OPCI: Corba Unknow. "}
var E204152 = Global_error{id: "204152", eType: EXPECTED_ERROR, message: "Minimum Telephone dummy length is 15 digits long "}
var E204153 = Global_error{id: "204153", eType: EXPECTED_ERROR, message: "Accessories does not exist "}
var E204154 = Global_error{id: "204154", eType: EXPECTED_ERROR, message: "Accessories already exists "}
var E204155 = Global_error{id: "204155", eType: EXPECTED_ERROR, message: "Mobile does not exist "}
var E204156 = Global_error{id: "204156", eType: EXPECTED_ERROR, message: "Mobile already exists "}
var E204157 = Global_error{id: "204157", eType: EXPECTED_ERROR, message: "Pay type does not exist "}
var E204158 = Global_error{id: "204158", eType: EXPECTED_ERROR, message: "Pay type already exists "}
var E204159 = Global_error{id: "204159", eType: EXPECTED_ERROR, message: "Mobile Series does not exist "}
var E204160 = Global_error{id: "204160", eType: EXPECTED_ERROR, message: "Mobile Series already exists "}
var E204161 = Global_error{id: "204161", eType: EXPECTED_ERROR, message: "Brand does not exist "}
var E204162 = Global_error{id: "204162", eType: EXPECTED_ERROR, message: "Brand already exists "}
var E204163 = Global_error{id: "204163", eType: EXPECTED_ERROR, message: "Continents does not exist "}
var E204164 = Global_error{id: "204164", eType: EXPECTED_ERROR, message: "Continents already exists "}
var E204165 = Global_error{id: "204165", eType: EXPECTED_ERROR, message: "Country does not exist "}
var E204166 = Global_error{id: "204166", eType: EXPECTED_ERROR, message: "Country already exists "}
var E204167 = Global_error{id: "204167", eType: EXPECTED_ERROR, message: "Inventory does not exist "}
var E204168 = Global_error{id: "204168", eType: EXPECTED_ERROR, message: "Inventory already exists "}
var E204169 = Global_error{id: "204169", eType: EXPECTED_ERROR, message: "Division Code is not active "}
var E204170 = Global_error{id: "204170", eType: EXPECTED_ERROR, message: "Division Code is currently active "}
var E204171 = Global_error{id: "204171", eType: EXPECTED_ERROR, message: "Division Code does not exist "}
var E204172 = Global_error{id: "204172", eType: EXPECTED_ERROR, message: "Division  Code is already exist "}
var E204173 = Global_error{id: "204173", eType: EXPECTED_ERROR, message: "Division Type is not active "}
var E204174 = Global_error{id: "204174", eType: EXPECTED_ERROR, message: "Division Type is currently active "}
var E204175 = Global_error{id: "204175", eType: EXPECTED_ERROR, message: "Division Type does not exist "}
var E204176 = Global_error{id: "204176", eType: EXPECTED_ERROR, message: "Division Type is already exist "}
var E204177 = Global_error{id: "204177", eType: EXPECTED_ERROR, message: "Card has been mapped with a telephone dummy. "}
var E204178 = Global_error{id: "204178", eType: EXPECTED_ERROR, message: "Card has not been mapped with a telephone dummy. "}
var E204179 = Global_error{id: "204179", eType: EXPECTED_ERROR, message: "Invalid telephone dummy status. "}
var E204180 = Global_error{id: "204180", eType: EXPECTED_ERROR, message: "Cannot update subscriber infromation because the system has error. "}
var E204181 = Global_error{id: "204181", eType: EXPECTED_ERROR, message: "Contact Person Type is not active "}
var E204182 = Global_error{id: "204182", eType: EXPECTED_ERROR, message: "Contact Person Type is currently active "}
var E204183 = Global_error{id: "204183", eType: EXPECTED_ERROR, message: "Contact Person Type does not exist "}
var E204184 = Global_error{id: "204184", eType: EXPECTED_ERROR, message: "Contact Person Type is already exist "}
var E204185 = Global_error{id: "204185", eType: EXPECTED_ERROR, message: "Subscriber is not a Postpaid Ready SIM. "}
var E204186 = Global_error{id: "204186", eType: EXPECTED_ERROR, message: "This telephone already used for create telephone dummy. "}
var E204187 = Global_error{id: "204187", eType: EXPECTED_ERROR, message: "Subscriber has changed promotion for allowed maximum number of request. "}
var E204188 = Global_error{id: "204188", eType: EXPECTED_ERROR, message: "Subscriber has already completed Postpaid Ready SIM registration process. "}
var E204189 = Global_error{id: "204189", eType: EXPECTED_ERROR, message: "Telephone type of telephone is not prepaid dummy. "}
var E204190 = Global_error{id: "204190", eType: EXPECTED_ERROR, message: "HLR of telephone dummy is not same as telephone. "}
var E204191 = Global_error{id: "204191", eType: EXPECTED_ERROR, message: "Adjustment amount cannot be less than Minimum balance. "}
var E204192 = Global_error{id: "204192", eType: EXPECTED_ERROR, message: "Destination number does not exist. "}
var E204193 = Global_error{id: "204193", eType: EXPECTED_ERROR, message: "Status of destination number is invalid. "}
var E204194 = Global_error{id: "204194", eType: EXPECTED_ERROR, message: "Telephone dummy number does not exist. "}
var E204195 = Global_error{id: "204195", eType: EXPECTED_ERROR, message: "Telephone dummy number is not yet preactivated. "}
var E204196 = Global_error{id: "204196", eType: EXPECTED_ERROR, message: "Factor Code cannot be null. "}
var E204197 = Global_error{id: "204197", eType: EXPECTED_ERROR, message: "Description cannot be null. "}
var E204198 = Global_error{id: "204198", eType: EXPECTED_ERROR, message: "Select cannot be null. "}
var E204199 = Global_error{id: "204199", eType: EXPECTED_ERROR, message: "From cannot be null. "}
var E204200 = Global_error{id: "204200", eType: EXPECTED_ERROR, message: "Customer number or Subscriber number cannot be null. "}
var E204201 = Global_error{id: "204201", eType: EXPECTED_ERROR, message: "Customer number length less than 9 Characters. "}
var E204202 = Global_error{id: "204202", eType: EXPECTED_ERROR, message: "Factor Code should not be % "}
var E204203 = Global_error{id: "204203", eType: EXPECTED_ERROR, message: "Cannot copy suspend code. "}
var E204204 = Global_error{id: "204204", eType: EXPECTED_ERROR, message: "Cannot set negative values. "}
var E204205 = Global_error{id: "204205", eType: EXPECTED_ERROR, message: "Cannot set non-active parameter for factor is non-active. "}
var E204206 = Global_error{id: "204206", eType: EXPECTED_ERROR, message: "Cannot set non-active parameter to be default type. "}
var E204207 = Global_error{id: "204207", eType: EXPECTED_ERROR, message: "Cannot set value more than 100% "}
var E204208 = Global_error{id: "204208", eType: EXPECTED_ERROR, message: "Cannot set value more than 0 "}
var E204209 = Global_error{id: "204209", eType: EXPECTED_ERROR, message: "Suspend Code is Active. "}
var E204210 = Global_error{id: "204210", eType: EXPECTED_ERROR, message: "Suspend Code is Deactivate. "}
var E204211 = Global_error{id: "204211", eType: EXPECTED_ERROR, message: "Suspend Code should not be % "}
var E204212 = Global_error{id: "204212", eType: EXPECTED_ERROR, message: "Parameter Code can not be null "}
var E204213 = Global_error{id: "204213", eType: EXPECTED_ERROR, message: "Factor Code less than 1 row. "}
var E204214 = Global_error{id: "204214", eType: EXPECTED_ERROR, message: "Factor Code less more than 1 row is Active. "}
var E204215 = Global_error{id: "204215", eType: EXPECTED_ERROR, message: "Sub Condition can not be null. "}
var E204216 = Global_error{id: "204216", eType: EXPECTED_ERROR, message: "Factor Code and Type already existing, can't be duplicated. "}
var E204217 = Global_error{id: "204217", eType: EXPECTED_ERROR, message: "Calculate Condition Less than 1 Item {%,0,B,X} "}
var E204218 = Global_error{id: "204218", eType: EXPECTED_ERROR, message: "Factor Code is in use, can not Deactivate. "}
var E204219 = Global_error{id: "204219", eType: EXPECTED_ERROR, message: "Data cannot be processed due to Pooling problem. "}
var E204220 = Global_error{id: "204220", eType: EXPECTED_ERROR, message: "Interconnection Call Type does not exists. "}
var E204221 = Global_error{id: "204221", eType: EXPECTED_ERROR, message: "Interconnection Call Type already exists. "}
var E204222 = Global_error{id: "204222", eType: EXPECTED_ERROR, message: "Interconnection Report Description does not exists. "}
var E204223 = Global_error{id: "204223", eType: EXPECTED_ERROR, message: "Interconnection Report Description already exists. "}
var E204224 = Global_error{id: "204224", eType: EXPECTED_ERROR, message: "Charge Type must be 'N','T' or 'R' only. "}
var E204225 = Global_error{id: "204225", eType: EXPECTED_ERROR, message: "Interconnection Rate Header does not exist. "}
var E204226 = Global_error{id: "204226", eType: EXPECTED_ERROR, message: "Interconnection Rate Detail does not exist. "}
var E204227 = Global_error{id: "204227", eType: EXPECTED_ERROR, message: "Interconnection Rate Header already exist. "}
var E204228 = Global_error{id: "204228", eType: EXPECTED_ERROR, message: "Interconnection Rate Detail already exist. "}
var E204229 = Global_error{id: "204229", eType: EXPECTED_ERROR, message: "Telephone is not prepaid pooling. "}
var E204230 = Global_error{id: "204230", eType: EXPECTED_ERROR, message: "Subscriber is a dtac Double Ready SIM. "}
var E204231 = Global_error{id: "204231", eType: EXPECTED_ERROR, message: "SIM card reader's driver is not installed. "}
var E204232 = Global_error{id: "204232", eType: EXPECTED_ERROR, message: "Failed to connect to the SIM card. Please insert SIM card in the SIM card reader "}
var E204233 = Global_error{id: "204233", eType: EXPECTED_ERROR, message: "Failed to connect to the SIM card "}
var E204234 = Global_error{id: "204234", eType: EXPECTED_ERROR, message: "Failed to disconnect SIM card "}
var E204235 = Global_error{id: "204235", eType: EXPECTED_ERROR, message: "Invalid ADM key "}
var E204236 = Global_error{id: "204236", eType: EXPECTED_ERROR, message: "Update IMSI number into SIM card successful. "}
var E204237 = Global_error{id: "204237", eType: EXPECTED_ERROR, message: "Card number is inconsistent with the one in the card reader "}
var E204238 = Global_error{id: "204238", eType: EXPECTED_ERROR, message: "Invalid dummy IMSI flag. "}
var E204239 = Global_error{id: "204239", eType: EXPECTED_ERROR, message: "Dummy IMSI must not be E-refill. "}
var E204240 = Global_error{id: "204240", eType: EXPECTED_ERROR, message: "Invalid encrypt KI or encrypt ADM. "}
var E204241 = Global_error{id: "204241", eType: EXPECTED_ERROR, message: "Dummy IMSI is not allowed for this transaction. "}
var E204242 = Global_error{id: "204242", eType: EXPECTED_ERROR, message: "Invalid dummy allow flag. "}
var E204243 = Global_error{id: "204243", eType: EXPECTED_ERROR, message: "Transaction cannot be completed because this selected special number is not using the defined package. "}
var E204244 = Global_error{id: "204244", eType: EXPECTED_ERROR, message: "AMPS customers is not allowed for this transaction. "}
var E204245 = Global_error{id: "204245", eType: EXPECTED_ERROR, message: "Only normal customer is allowed. "}
var E204246 = Global_error{id: "204246", eType: EXPECTED_ERROR, message: "Only active subscriber status is allowed. "}
var E204247 = Global_error{id: "204247", eType: EXPECTED_ERROR, message: "Inquiry page is allowed for members only. "}
var E204248 = Global_error{id: "204248", eType: EXPECTED_ERROR, message: "Special type is used for prepaid telephone type only. "}
var E204249 = Global_error{id: "204249", eType: EXPECTED_ERROR, message: "Granted allowed maximum number of ATM SIM "}
var E204250 = Global_error{id: "204250", eType: EXPECTED_ERROR, message: "Subscriber have age of usage and usage amount which are not applicable to do this transaction. "}
var E204251 = Global_error{id: "204251", eType: EXPECTED_ERROR, message: "Airtime Rate Option is not valid. "}
var E204252 = Global_error{id: "204252", eType: EXPECTED_ERROR, message: "You are not allowed to change member grade, Please proceed change grade request to your supervisor. "}
var E204253 = Global_error{id: "204253", eType: EXPECTED_ERROR, message: "Balance Transfer time over limit to use per month. "}
var E204254 = Global_error{id: "204254", eType: EXPECTED_ERROR, message: "Balance Transfer money over limit to use per month. "}
var E204255 = Global_error{id: "204255", eType: EXPECTED_ERROR, message: "Sorry, the maximum Balance Transfer is limit to 999 transactions per month. "}
var E204256 = Global_error{id: "204256", eType: EXPECTED_ERROR, message: "Sorry, the maximum Balance Transfer is limit to 400 Baht per month. "}
var E204257 = Global_error{id: "204257", eType: EXPECTED_ERROR, message: "If package displayed on e-service, marketing description with value is mandatory. "}
var E204258 = Global_error{id: "204258", eType: EXPECTED_ERROR, message: "Invalid Maketing Description. "}
var E204259 = Global_error{id: "204259", eType: EXPECTED_ERROR, message: "Card is Dummy IMSI . Please use Fixing SIM Card screen "}
var E204260 = Global_error{id: "204260", eType: EXPECTED_ERROR, message: "Card is Fix IMSI . Please use Change SIM Card screen "}
var E204261 = Global_error{id: "204261", eType: EXPECTED_ERROR, message: "Card status is invalid "}
var E204262 = Global_error{id: "204262", eType: EXPECTED_ERROR, message: "Please use Fix IMSI SIM "}
var E204263 = Global_error{id: "204263", eType: EXPECTED_ERROR, message: "Card is invalid due to no KI "}
var E204264 = Global_error{id: "204264", eType: EXPECTED_ERROR, message: "Update retailer dealer interface table failed. "}
var E204265 = Global_error{id: "204265", eType: EXPECTED_ERROR, message: "MATM cannot change notification language.  To change language, please cancel and register with new language "}
var E204266 = Global_error{id: "204266", eType: EXPECTED_ERROR, message: "Customer has already registered for Push Bill "}
var E204267 = Global_error{id: "204267", eType: EXPECTED_ERROR, message: "Customer has never registered for Push Bill "}
var E204268 = Global_error{id: "204268", eType: EXPECTED_ERROR, message: "Cancellation was not completed "}
var E204269 = Global_error{id: "204269", eType: EXPECTED_ERROR, message: "Sorry, the maximum Balance Transfer is limit to 400Baht per month. Pls input new amount of credit "}
var E204270 = Global_error{id: "204270", eType: EXPECTED_ERROR, message: "You don't have authorization  to use this cancel reason code "}
var E204271 = Global_error{id: "204271", eType: EXPECTED_ERROR, message: "You don't have authorization  to used this cancel reason code "}
var E204272 = Global_error{id: "204272", eType: EXPECTED_ERROR, message: "has been deactivated "}
var E204273 = Global_error{id: "204273", eType: EXPECTED_ERROR, message: "Ringtone Voucher Number must start with 5 and must have 8 digits. "}
var E204274 = Global_error{id: "204274", eType: EXPECTED_ERROR, message: "Package Code is not found. "}
var E204275 = Global_error{id: "204275", eType: EXPECTED_ERROR, message: "The Voucher Number is not available. "}
var E204276 = Global_error{id: "204276", eType: EXPECTED_ERROR, message: "System Error. Please try again later. "}
var E204277 = Global_error{id: "204277", eType: EXPECTED_ERROR, message: "Voucher Number is not matched with the Package Code. "}
var E204278 = Global_error{id: "204278", eType: EXPECTED_ERROR, message: "Please input song name at lease 2 characters. "}
var E204279 = Global_error{id: "204279", eType: EXPECTED_ERROR, message: "Package Code must be numeric. "}
var E204280 = Global_error{id: "204280", eType: EXPECTED_ERROR, message: "Song Name not found. "}
var E204281 = Global_error{id: "204281", eType: EXPECTED_ERROR, message: "Number of charging packages should not be less than MGM special numbers allowed. "}
var E204282 = Global_error{id: "204282", eType: EXPECTED_ERROR, message: "Recommended subscriber might have been changed from prepaid to postpaid. "}
var E204283 = Global_error{id: "204283", eType: EXPECTED_ERROR, message: "It does not follow criteria, the transaction is not allow. "}
var E204284 = Global_error{id: "204284", eType: EXPECTED_ERROR, message: "MGM charging package does not exist. "}
var E204285 = Global_error{id: "204285", eType: EXPECTED_ERROR, message: "EIS group is not applicable for This Transaction. "}
var E204286 = Global_error{id: "204286", eType: EXPECTED_ERROR, message: "Bonus Pocket Code already exist "}
var E204287 = Global_error{id: "204287", eType: EXPECTED_ERROR, message: "Bonus Pocket Code does not exist "}
var E204288 = Global_error{id: "204288", eType: EXPECTED_ERROR, message: "Expiration pocket already exist "}
var E204289 = Global_error{id: "204289", eType: EXPECTED_ERROR, message: "Expiration pocket does not exist "}
var E204290 = Global_error{id: "204290", eType: EXPECTED_ERROR, message: "Spending Services already exist "}
var E204291 = Global_error{id: "204291", eType: EXPECTED_ERROR, message: "Spending Times already exist "}
var E204292 = Global_error{id: "204292", eType: EXPECTED_ERROR, message: "Business Code already exist "}
var E204293 = Global_error{id: "204293", eType: EXPECTED_ERROR, message: "Business Code does not exist "}
var E204294 = Global_error{id: "204294", eType: EXPECTED_ERROR, message: "Business Group already exist "}
var E204295 = Global_error{id: "204295", eType: EXPECTED_ERROR, message: "Business Group does not exist "}
var E204296 = Global_error{id: "204296", eType: EXPECTED_ERROR, message: "Your price plan has been successfully changed.  However, since your selected plan is not included in the SIMforUS offer, the special call rate to your special number has to be cancelled. "}
var E204297 = Global_error{id: "204297", eType: EXPECTED_ERROR, message: "Posting amount must greater than zero "}
var E204298 = Global_error{id: "204298", eType: EXPECTED_ERROR, message: "Group master profile transaction not found "}
var E204299 = Global_error{id: "204299", eType: EXPECTED_ERROR, message: "Usage transaction already exist "}
var E204300 = Global_error{id: "204300", eType: EXPECTED_ERROR, message: "Header record not found "}
var E204301 = Global_error{id: "204301", eType: EXPECTED_ERROR, message: "Duplicate service call "}
var E204302 = Global_error{id: "204302", eType: EXPECTED_ERROR, message: "Detail record not found or less then expected "}
var E204303 = Global_error{id: "204303", eType: EXPECTED_ERROR, message: "Fail to create service call log "}
var E204304 = Global_error{id: "204304", eType: EXPECTED_ERROR, message: "No active group master profile for invoke "}
var E204305 = Global_error{id: "204305", eType: EXPECTED_ERROR, message: "No active group master profile for add additional package "}
var E204306 = Global_error{id: "204306", eType: EXPECTED_ERROR, message: "Invalid package type "}
var E204307 = Global_error{id: "204307", eType: EXPECTED_ERROR, message: "Switch off date time cannot be null value "}
var E204308 = Global_error{id: "204308", eType: EXPECTED_ERROR, message: "No active group master profile for switch off "}
var E204309 = Global_error{id: "204309", eType: EXPECTED_ERROR, message: "No active group master profile for reconnect "}
var E204310 = Global_error{id: "204310", eType: EXPECTED_ERROR, message: "No active group master profile for change package "}
var E204311 = Global_error{id: "204311", eType: EXPECTED_ERROR, message: "No active group master profile for rectify "}
var E204312 = Global_error{id: "204312", eType: EXPECTED_ERROR, message: "Other exception while doing change package/rectify "}
var E204313 = Global_error{id: "204313", eType: EXPECTED_ERROR, message: "No active group master profile for expire package "}
var E204314 = Global_error{id: "204314", eType: EXPECTED_ERROR, message: "No active group master profile for revoke "}
var E204315 = Global_error{id: "204315", eType: EXPECTED_ERROR, message: "Other exception(TE1012). "}
var E204316 = Global_error{id: "204316", eType: EXPECTED_ERROR, message: "Cannot find active bill code from table bl_bill_code "}
var E204317 = Global_error{id: "204317", eType: EXPECTED_ERROR, message: "Cannot find active bill code from table bl_bill_effc "}
var E204318 = Global_error{id: "204318", eType: EXPECTED_ERROR, message: "Parameter not found "}
var E204319 = Global_error{id: "204319", eType: EXPECTED_ERROR, message: "Fail to create refill transaction "}
var E204320 = Global_error{id: "204320", eType: EXPECTED_ERROR, message: "Group master balance transaction not found "}
var E204321 = Global_error{id: "204321", eType: EXPECTED_ERROR, message: "Group master package not allow to change (one time package) "}
var E204322 = Global_error{id: "204322", eType: EXPECTED_ERROR, message: "Duplicate transactions are not allowed within the same day "}
var E204323 = Global_error{id: "204323", eType: EXPECTED_ERROR, message: "Location code is invalid "}
var E204324 = Global_error{id: "204324", eType: EXPECTED_ERROR, message: "Bar voice package cannot be add as a next package "}
var E204325 = Global_error{id: "204325", eType: EXPECTED_ERROR, message: "Dummy Telephone Request Method already exists. "}
var E204326 = Global_error{id: "204326", eType: EXPECTED_ERROR, message: "Dummy Telephone Request Method does not exist. "}
var E204327 = Global_error{id: "204327", eType: EXPECTED_ERROR, message: "VAS plan code does not exist. "}
var E204328 = Global_error{id: "204328", eType: EXPECTED_ERROR, message: "Invalid VAS plan code. "}
var E204329 = Global_error{id: "204329", eType: EXPECTED_ERROR, message: "Method Code already exists and is currently not active "}
var E204330 = Global_error{id: "204330", eType: EXPECTED_ERROR, message: "Method Code already exists and is currently effective "}
var E204331 = Global_error{id: "204331", eType: EXPECTED_ERROR, message: "User Authorization does not exist for this data group "}
var E204332 = Global_error{id: "204332", eType: EXPECTED_ERROR, message: "Authorization is not granted to user "}
var E204333 = Global_error{id: "204333", eType: EXPECTED_ERROR, message: "No other authorized for invoice alert method exists "}
var E204334 = Global_error{id: "204334", eType: EXPECTED_ERROR, message: "Customer has never registered for Push Bill with this bank code "}
var E204335 = Global_error{id: "204335", eType: EXPECTED_ERROR, message: "Golden quota must be equal or greater than the minimum quota limit "}
var E204336 = Global_error{id: "204336", eType: EXPECTED_ERROR, message: "This SIM Card is restricted to request Golden Number via *1005 only. "}
var E204337 = Global_error{id: "204337", eType: EXPECTED_ERROR, message: "This is a last time for customer to choose a number, or else system will generate number for customer automatically. "}
var E204338 = Global_error{id: "204338", eType: EXPECTED_ERROR, message: "This is dtac prepaid number that you chose. "}
var E204339 = Global_error{id: "204339", eType: EXPECTED_ERROR, message: "(Warning) Golden quota is greater than the maximum quota limit ( %ld ) "}
var E204340 = Global_error{id: "204340", eType: EXPECTED_ERROR, message: "(Warning)The value of new golden quota is  less than used quota. "}
var E204341 = Global_error{id: "204341", eType: EXPECTED_ERROR, message: "Currently unbilled is over than credit limit by subscriber. If cancel an additional by subscriber, this number will be barred. "}
var E204342 = Global_error{id: "204342", eType: EXPECTED_ERROR, message: "This SIM Card has been assigned telephone number. "}
var E204343 = Global_error{id: "204343", eType: EXPECTED_ERROR, message: "Invalid dummy telephone request method. "}
var E204344 = Global_error{id: "204344", eType: EXPECTED_ERROR, message: "Invalid special type. "}
var E204345 = Global_error{id: "204345", eType: EXPECTED_ERROR, message: "Sorry, this SIM has been requested phone number exeed the limit per SIM. System is automatically selecting phone number and activating your SIM card. "}
var E204346 = Global_error{id: "204346", eType: EXPECTED_ERROR, message: "Sorry, this SIM has been requested phone number exeed the limit per day. Please try again on tomorrow. "}
var E204347 = Global_error{id: "204347", eType: EXPECTED_ERROR, message: "Telephone number was not reserved by this Dummy Number. "}
var E204348 = Global_error{id: "204348", eType: EXPECTED_ERROR, message: "Sorry, this SIM has been requested phone number exeed the limit per day. Please try again on tomorrow. "}
var E204349 = Global_error{id: "204349", eType: EXPECTED_ERROR, message: "Sorry, this SIM is not allowed to select phone number now. Please wait and try again later. "}
var E204350 = Global_error{id: "204350", eType: EXPECTED_ERROR, message: "This method is required value. "}
var E204351 = Global_error{id: "204351", eType: EXPECTED_ERROR, message: "Total number of preferred caller number applicable must be greater than or equal to zero. "}
var E204352 = Global_error{id: "204352", eType: EXPECTED_ERROR, message: "Invalid charge amount for adding or changing preferred caller numbers. "}
var E204353 = Global_error{id: "204353", eType: EXPECTED_ERROR, message: "Total number of preferred caller number of this package and that of dependent package are not equal. "}
var E204354 = Global_error{id: "204354", eType: EXPECTED_ERROR, message: "IN service of dependent package is inconsistent. "}
var E204355 = Global_error{id: "204355", eType: EXPECTED_ERROR, message: "Preferred caller number must be numeric. "}
var E204356 = Global_error{id: "204356", eType: EXPECTED_ERROR, message: "Invalid length of preferred caller number. Pls try again. "}
var E204357 = Global_error{id: "204357", eType: EXPECTED_ERROR, message: "The specified caller number is not dtac prepaid number. Please enter again. "}
var E204358 = Global_error{id: "204358", eType: EXPECTED_ERROR, message: "Preferred caller number must be Prepaid 1800 only. Pls try again. "}
var E204359 = Global_error{id: "204359", eType: EXPECTED_ERROR, message: "Sorry, the preferred caller number is as same as existing one. Pls try again. "}
var E204360 = Global_error{id: "204360", eType: EXPECTED_ERROR, message: "Preferred caller number you input is not active (Pre-act or switch off). Pls try again. "}
var E204361 = Global_error{id: "204361", eType: EXPECTED_ERROR, message: "Sorry. The preferred caller number you have selected is temporary suspended. "}
var E204362 = Global_error{id: "204362", eType: EXPECTED_ERROR, message: "Preferred caller number you input is SIM For Us/TwinSIM/MaunOakMuanJai. Pls try again. "}
var E204363 = Global_error{id: "204363", eType: EXPECTED_ERROR, message: "Sorry, the preferred caller number is as same as sponsor's number. Pls try again. "}
var E204364 = Global_error{id: "204364", eType: EXPECTED_ERROR, message: "Request fails as the preferred caller will not eligible to enjoy special rate when calling to the sponsor. "}
var E204365 = Global_error{id: "204365", eType: EXPECTED_ERROR, message: "Preferred caller number is not effective. "}
var E204366 = Global_error{id: "204366", eType: EXPECTED_ERROR, message: "Sorry, the current package is not applicable for Jaidee Jao Boon Toom - Call Me Free Service. "}
var E204367 = Global_error{id: "204367", eType: EXPECTED_ERROR, message: "Jaidee Jao Boon Toom - Call Me Free Service has been cancelled. "}
var E204368 = Global_error{id: "204368", eType: EXPECTED_ERROR, message: "Sorry. Subscriber has already applied for Jaidee Jao Boon Toom - Call Me Free Service. "}
var E204369 = Global_error{id: "204369", eType: EXPECTED_ERROR, message: "Corporate subscriber cannot subscribe to Jaidee Jao Boon Toom - Call Me Free Service. "}
var E204370 = Global_error{id: "204370", eType: EXPECTED_ERROR, message: "Subscriber, who has applied for Jaidee Jao Boon Toom - Call Me Free Service, cannot join to Corporate/SME member. "}
var E204371 = Global_error{id: "204371", eType: EXPECTED_ERROR, message: "Prefer caller number is not found. "}
var E204372 = Global_error{id: "204372", eType: EXPECTED_ERROR, message: "Sorry, Sponsor has reached a maximum limit of total preferred caller numbers. "}
var E204373 = Global_error{id: "204373", eType: EXPECTED_ERROR, message: "Preferred caller number has total sponsor numbers equal to maximum limit. "}
var E204374 = Global_error{id: "204374", eType: EXPECTED_ERROR, message: "Preferred caller number you input has no validity period (CE/NSE). Pls try again. "}
var E204375 = Global_error{id: "204375", eType: EXPECTED_ERROR, message: "Subscriber has never had preferred caller number. "}
var E204376 = Global_error{id: "204376", eType: EXPECTED_ERROR, message: "Subscriber has no sponsor number now. "}
var E204377 = Global_error{id: "204377", eType: EXPECTED_ERROR, message: "Friend & Family flag is conflict with Jaidee Jao Boon Toom flag. "}
var E204378 = Global_error{id: "204378", eType: EXPECTED_ERROR, message: "Same number flag is conflict with Jaidee Jao Boon Toom flag. "}
var E204379 = Global_error{id: "204379", eType: EXPECTED_ERROR, message: "Invoice alert information already exists in dc_invc_sms table. "}
var E204380 = Global_error{id: "204380", eType: EXPECTED_ERROR, message: "Invoice alert information dose not exists in dc_invc_sms table. "}
var E204381 = Global_error{id: "204381", eType: EXPECTED_ERROR, message: "Data cannot be processed due to Pooling problem. (Error in JMS Queue) "}
var E204382 = Global_error{id: "204382", eType: EXPECTED_ERROR, message: "Telephone number is currently lock. Cannot be modified. "}
var E204383 = Global_error{id: "204383", eType: EXPECTED_ERROR, message: "You request phone number that not matched with dummy request type (Push/Pull). Please check at menu (Inquiry SIM Validity) "}
var E204384 = Global_error{id: "204384", eType: EXPECTED_ERROR, message: "Dummy telephone request special type does not exist. "}
var E204385 = Global_error{id: "204385", eType: EXPECTED_ERROR, message: "SIM is not up to date. Update failed. Please refresh data and try again. "}
var E204386 = Global_error{id: "204386", eType: EXPECTED_ERROR, message: "Existing supplementary/additional package does not allow to do this transaction. "}
var E204387 = Global_error{id: "204387", eType: EXPECTED_ERROR, message: "Existing supplementary/additional package does not allow to change this package group. "}
var E204388 = Global_error{id: "204388", eType: EXPECTED_ERROR, message: "Duration Amount should be greater than zero "}
var E204389 = Global_error{id: "204389", eType: EXPECTED_ERROR, message: "Total Amount should be greater than or equal Paid Amount "}
var E204390 = Global_error{id: "204390", eType: EXPECTED_ERROR, message: "Can not allow new insert record, please update expire date first "}
var E204391 = Global_error{id: "204391", eType: EXPECTED_ERROR, message: "Campaign Code already exist. "}
var E204392 = Global_error{id: "204392", eType: EXPECTED_ERROR, message: "Campaign code does not exist. "}
var E204393 = Global_error{id: "204393", eType: EXPECTED_ERROR, message: "Campaign code is currently active. "}
var E204394 = Global_error{id: "204394", eType: EXPECTED_ERROR, message: "Campaign code is not active. "}
var E204395 = Global_error{id: "204395", eType: EXPECTED_ERROR, message: "Offering script already exists. "}
var E204396 = Global_error{id: "204396", eType: EXPECTED_ERROR, message: "Offering script does not exist. "}
var E204397 = Global_error{id: "204397", eType: EXPECTED_ERROR, message: "Loading and existing current main package are inconsistent. "}
var E204398 = Global_error{id: "204398", eType: EXPECTED_ERROR, message: "Invalid offering result. "}
var E204399 = Global_error{id: "204399", eType: EXPECTED_ERROR, message: "Sorry, You do not have voice pass left in your pocket. "}
var E204400 = Global_error{id: "204400", eType: EXPECTED_ERROR, message: "Invalid Campaign Code. "}
var E204401 = Global_error{id: "204401", eType: EXPECTED_ERROR, message: "Offering Period can not overlap. "}
var E204402 = Global_error{id: "204402", eType: EXPECTED_ERROR, message: "This type of offer is allowed only once at time. "}
var E204403 = Global_error{id: "204403", eType: EXPECTED_ERROR, message: "Invalid input value for this method. "}
var E204404 = Global_error{id: "204404", eType: EXPECTED_ERROR, message: "You cannot do this transaction because the system is changing subscriber package end date for this package. "}
var E204405 = Global_error{id: "204405", eType: EXPECTED_ERROR, message: "Subscriber is not found in recurring fee table or transaction status of subscriber is not applicable "}
var E204406 = Global_error{id: "204406", eType: EXPECTED_ERROR, message: "Cannot getting days after for customer. "}
var E204407 = Global_error{id: "204407", eType: EXPECTED_ERROR, message: "Invalid calculating date. "}
var E204408 = Global_error{id: "204408", eType: EXPECTED_ERROR, message: "Cannot reading next stage for customer number. "}
var E204409 = Global_error{id: "204409", eType: EXPECTED_ERROR, message: "Cannot reading dc_arrr_stge for customer number. "}
var E204410 = Global_error{id: "204410", eType: EXPECTED_ERROR, message: "Hold until date of stage is not null. "}
var E204411 = Global_error{id: "204411", eType: EXPECTED_ERROR, message: "The customer number isn't moved to the next stage. "}
var E204412 = Global_error{id: "204412", eType: EXPECTED_ERROR, message: "Next Arrear Date dc_arrr_trns is not equal Next Arrear Date cs_csdi. "}
var E204413 = Global_error{id: "204413", eType: EXPECTED_ERROR, message: "Subscriber doesn't have the specified package. "}
var E204414 = Global_error{id: "204414", eType: EXPECTED_ERROR, message: "Subscriber package end date greater than or equal to new package end date. "}
var E204415 = Global_error{id: "204415", eType: EXPECTED_ERROR, message: "Invalid expiry day "}
var E204416 = Global_error{id: "204416", eType: EXPECTED_ERROR, message: "Package Relationship already exists. "}
var E204417 = Global_error{id: "204417", eType: EXPECTED_ERROR, message: "Package Relationship does not exist. "}
var E204418 = Global_error{id: "204418", eType: EXPECTED_ERROR, message: "This package isn't applicable to offer with the main package "}
var E204419 = Global_error{id: "204419", eType: EXPECTED_ERROR, message: "No Package Offering data found. "}
var E204420 = Global_error{id: "204420", eType: EXPECTED_ERROR, message: "Card reader/writer does not work properly, please try again. "}
var E204421 = Global_error{id: "204421", eType: EXPECTED_ERROR, message: "Invalid Recurring Type "}
var E204422 = Global_error{id: "204422", eType: EXPECTED_ERROR, message: "Can not recurring because it is exceeded the maximum recurring amount "}
var E204423 = Global_error{id: "204423", eType: EXPECTED_ERROR, message: "Does not set up the maximum recurring amount for all subscribers in the system "}
var E204424 = Global_error{id: "204424", eType: EXPECTED_ERROR, message: "Day values of week must start from 1(Monday) to 7(Sunday) "}
var E204425 = Global_error{id: "204425", eType: EXPECTED_ERROR, message: "Day period code already exists but is not active. "}
var E204426 = Global_error{id: "204426", eType: EXPECTED_ERROR, message: "Day period code already exists and is currently active. "}
var E204427 = Global_error{id: "204427", eType: EXPECTED_ERROR, message: "Day period code does not exist. "}
var E204428 = Global_error{id: "204428", eType: EXPECTED_ERROR, message: "Day period code already exists. "}
var E204429 = Global_error{id: "204429", eType: EXPECTED_ERROR, message: "Time period code already exists but is not active. "}
var E204430 = Global_error{id: "204430", eType: EXPECTED_ERROR, message: "Time period code already exists and is currently active. "}
var E204431 = Global_error{id: "204431", eType: EXPECTED_ERROR, message: "Time period code does not exist. "}
var E204432 = Global_error{id: "204432", eType: EXPECTED_ERROR, message: "Time period code already exists. "}
var E204433 = Global_error{id: "204433", eType: EXPECTED_ERROR, message: "Invalid Communication Channel Type. "}
var E204434 = Global_error{id: "204434", eType: EXPECTED_ERROR, message: "This Transaction ID have been already rectified and transfered to retailer "}
var E204435 = Global_error{id: "204435", eType: EXPECTED_ERROR, message: "Destination authorization does not exist for this package plan "}
var E204436 = Global_error{id: "204436", eType: EXPECTED_ERROR, message: "Revenue multi value for this provider is exceeded the revenue multi value for all sharing "}
var E204437 = Global_error{id: "204437", eType: EXPECTED_ERROR, message: "Sharing revenue of this package does not exist "}
var E204438 = Global_error{id: "204438", eType: EXPECTED_ERROR, message: "Sharing revenue of this package already exists "}
var E204439 = Global_error{id: "204439", eType: EXPECTED_ERROR, message: "Sharing revenue of this package already exists but is not currently effective "}
var E204440 = Global_error{id: "204440", eType: EXPECTED_ERROR, message: "Sharing revenue of this package already exists and is currently effective "}
var E204441 = Global_error{id: "204441", eType: EXPECTED_ERROR, message: "Revenue multi value for this provider is exceeded the revenue multi value for all sharing "}
var E204442 = Global_error{id: "204442", eType: EXPECTED_ERROR, message: "Sharing revenue of this package does not exist "}
var E204443 = Global_error{id: "204443", eType: EXPECTED_ERROR, message: "Sharing revenue of this package already exists "}
var E204444 = Global_error{id: "204444", eType: EXPECTED_ERROR, message: "Sharing revenue of this package already exists but is not currently effective "}
var E204445 = Global_error{id: "204445", eType: EXPECTED_ERROR, message: "Sharing revenue of this package already exists and is currently effective "}
var E204446 = Global_error{id: "204446", eType: EXPECTED_ERROR, message: "Provider code does not exist "}
var E204447 = Global_error{id: "204447", eType: EXPECTED_ERROR, message: "Destination authorization does not exist for this package plan "}
var E204448 = Global_error{id: "204448", eType: EXPECTED_ERROR, message: "PhysicalDataMode&Requestform4DBA "}
var E204449 = Global_error{id: "204449", eType: EXPECTED_ERROR, message: "Invalid country code "}
var E204450 = Global_error{id: "204450", eType: EXPECTED_ERROR, message: "Package code with this country code is currently effective "}
var E204451 = Global_error{id: "204451", eType: EXPECTED_ERROR, message: "Package code with this country code is not currently effective "}
var E204452 = Global_error{id: "204452", eType: EXPECTED_ERROR, message: "Number of country code must be less than or equal to specify maximum default country "}
var E204453 = Global_error{id: "204453", eType: EXPECTED_ERROR, message: "Allow for IDD package only "}
var E204454 = Global_error{id: "204454", eType: EXPECTED_ERROR, message: "Maximum number of country code must be greater than zero "}
var E204455 = Global_error{id: "204455", eType: EXPECTED_ERROR, message: "Maximum number of country code allow for IDD package only "}
var E204456 = Global_error{id: "204456", eType: EXPECTED_ERROR, message: "IDD flag is not applicable for this package type "}
var E204457 = Global_error{id: "204457", eType: EXPECTED_ERROR, message: "OTA type already exists but is not active. "}
var E204458 = Global_error{id: "204458", eType: EXPECTED_ERROR, message: "OTA type already exists and is currently active. "}
var E204459 = Global_error{id: "204459", eType: EXPECTED_ERROR, message: "OTA type does not exist. "}
var E204460 = Global_error{id: "204460", eType: EXPECTED_ERROR, message: "OTA type already exists. "}
var E204461 = Global_error{id: "204461", eType: EXPECTED_ERROR, message: "Customer paid. ( trns_blnc <= 0 ) "}
var E204462 = Global_error{id: "204462", eType: EXPECTED_ERROR, message: "Customer is purged from BCN phase 2. "}
var E204463 = Global_error{id: "204463", eType: EXPECTED_ERROR, message: "Invoice is more than or equal 2 years. "}
var E204464 = Global_error{id: "204464", eType: EXPECTED_ERROR, message: "Parent and child re-provisioning service code cannot be similar. "}
var E204465 = Global_error{id: "204465", eType: EXPECTED_ERROR, message: "Subscriber number does not match with subscriber contact. "}
var E204466 = Global_error{id: "204466", eType: EXPECTED_ERROR, message: "Waiting confirmation from Bank and you can not set up threshod on this stage. "}
var E204467 = Global_error{id: "204467", eType: EXPECTED_ERROR, message: "Threshold amount should be greater than zero. "}
var E204468 = Global_error{id: "204468", eType: EXPECTED_ERROR, message: "You can not do this transaction because number of transaction is over limit on this month. "}
var E204469 = Global_error{id: "204469", eType: EXPECTED_ERROR, message: "Number of country code must be greater than or equal to 1 "}
var E204470 = Global_error{id: "204470", eType: EXPECTED_ERROR, message: "Cannot register and cancelled at the same day for the same package "}
var E204471 = Global_error{id: "204471", eType: EXPECTED_ERROR, message: "Cannot register with the same package class "}
var E204472 = Global_error{id: "204472", eType: EXPECTED_ERROR, message: "Invalid Select Destination ID "}
var E204473 = Global_error{id: "204473", eType: EXPECTED_ERROR, message: "Subscriber Number not found in iSMS information table. "}
var E204474 = Global_error{id: "204474", eType: EXPECTED_ERROR, message: "Cannot access cause of iSMS Invoice Alert period. "}
var E204475 = Global_error{id: "204475", eType: EXPECTED_ERROR, message: "Invalid time to time flag. "}
var E204476 = Global_error{id: "204476", eType: EXPECTED_ERROR, message: "Time to time flag is inconsistent with telephone or package types. "}
var E204477 = Global_error{id: "204477", eType: EXPECTED_ERROR, message: "Time to time flag of Dependent Package is inconsistent. "}
var E204478 = Global_error{id: "204478", eType: EXPECTED_ERROR, message: "Profile name and Maximum accumulation validity date must have a value at the same time. "}
var E204479 = Global_error{id: "204479", eType: EXPECTED_ERROR, message: "Voice/VAS pass flag is conflict with other flags. "}
var E204480 = Global_error{id: "204480", eType: EXPECTED_ERROR, message: "Community code does not exist. "}
var E204481 = Global_error{id: "204481", eType: EXPECTED_ERROR, message: "Community Code already exists. "}
var E204482 = Global_error{id: "204482", eType: EXPECTED_ERROR, message: "Invalid age of usage. "}
var E204483 = Global_error{id: "204483", eType: EXPECTED_ERROR, message: "Invalid maximum number of subscribers. "}
var E204484 = Global_error{id: "204484", eType: EXPECTED_ERROR, message: "Package code cannot use for community. "}
var E204485 = Global_error{id: "204485", eType: EXPECTED_ERROR, message: "Subscriber has already subscribed this prepaid community group. "}
var E204486 = Global_error{id: "204486", eType: EXPECTED_ERROR, message: "The subscriber has total community groups equal to maximum limit. "}
var E204487 = Global_error{id: "204487", eType: EXPECTED_ERROR, message: "The community group has total subscribers equal to maximum limit. "}
var E204488 = Global_error{id: "204488", eType: EXPECTED_ERROR, message: "Subscriber must be DTAC mobile number. "}
var E204489 = Global_error{id: "204489", eType: EXPECTED_ERROR, message: "Subscriber is not active( Pre activate or switch off ). "}
var E204490 = Global_error{id: "204490", eType: EXPECTED_ERROR, message: "Invalid IN status of subscriber. "}
var E204491 = Global_error{id: "204491", eType: EXPECTED_ERROR, message: "Subscriber is temporary suspended. "}
var E204492 = Global_error{id: "204492", eType: EXPECTED_ERROR, message: "Community code does not have community package. "}
var E204493 = Global_error{id: "204493", eType: EXPECTED_ERROR, message: "Invalid charge amount for apply community. "}
var E204494 = Global_error{id: "204494", eType: EXPECTED_ERROR, message: "Invalid community code. "}
var E204495 = Global_error{id: "204495", eType: EXPECTED_ERROR, message: "Subscriber cannot  applied or cancelled community package. "}
var E204496 = Global_error{id: "204496", eType: EXPECTED_ERROR, message: "Active/Authorized community code is not found. "}
var E204497 = Global_error{id: "204497", eType: EXPECTED_ERROR, message: "IN service of community is conflict with other flags. "}
var E204498 = Global_error{id: "204498", eType: EXPECTED_ERROR, message: "Registration and recurring fee amount can not use with community package. "}
var E204499 = Global_error{id: "204499", eType: EXPECTED_ERROR, message: "Telephone is not available. "}
var E204500 = Global_error{id: "204500", eType: EXPECTED_ERROR, message: "Card is already mapped with another Telephone. "}
var E204501 = Global_error{id: "204501", eType: EXPECTED_ERROR, message: "Card is not available. "}
var E204502 = Global_error{id: "204502", eType: EXPECTED_ERROR, message: "Minimum telephone length is 11 digits long. "}
var E204503 = Global_error{id: "204503", eType: EXPECTED_ERROR, message: "Granted allowed maximum Number of Special Numbers for additional Voice Service. "}
var E204504 = Global_error{id: "204504", eType: EXPECTED_ERROR, message: "Duplicate Special Number for Voice Service is found. "}
var E204505 = Global_error{id: "204505", eType: EXPECTED_ERROR, message: "Community code for this subscriber number will be expired. Do you want to continue ? "}
var E204506 = Global_error{id: "204506", eType: EXPECTED_ERROR, message: "SIM Card with normal allocation type is not allowed. "}
var E204507 = Global_error{id: "204507", eType: EXPECTED_ERROR, message: "User Channel is not Active. "}
var E204508 = Global_error{id: "204508", eType: EXPECTED_ERROR, message: "User Channel is currently active. "}
var E204509 = Global_error{id: "204509", eType: EXPECTED_ERROR, message: "User Channel does not exist. "}
var E204510 = Global_error{id: "204510", eType: EXPECTED_ERROR, message: "User Channel already exists. "}
var E204511 = Global_error{id: "204511", eType: EXPECTED_ERROR, message: "Package Product Type is not Active. "}
var E204512 = Global_error{id: "204512", eType: EXPECTED_ERROR, message: "Package Product Type is currently active. "}
var E204513 = Global_error{id: "204513", eType: EXPECTED_ERROR, message: "Package Product Type does not exist. "}
var E204514 = Global_error{id: "204514", eType: EXPECTED_ERROR, message: "Package Product Type already exists. "}
var E204515 = Global_error{id: "204515", eType: EXPECTED_ERROR, message: "User Channel is not Active. "}
var E204516 = Global_error{id: "204516", eType: EXPECTED_ERROR, message: "User Channel is currently active. "}
var E204517 = Global_error{id: "204517", eType: EXPECTED_ERROR, message: "User Channel does not exist. "}
var E204518 = Global_error{id: "204518", eType: EXPECTED_ERROR, message: "User Channel already exists. "}
var E204519 = Global_error{id: "204519", eType: EXPECTED_ERROR, message: "Package Product Type is not Active. "}
var E204520 = Global_error{id: "204520", eType: EXPECTED_ERROR, message: "Package Product Type is currently active. "}
var E204521 = Global_error{id: "204521", eType: EXPECTED_ERROR, message: "Package Product Type does not exist. "}
var E204522 = Global_error{id: "204522", eType: EXPECTED_ERROR, message: "Package Product Type already exists. "}
var E204523 = Global_error{id: "204523", eType: EXPECTED_ERROR, message: "User Channel is not Active. "}
var E204524 = Global_error{id: "204524", eType: EXPECTED_ERROR, message: "User Channel is currently active. "}
var E204525 = Global_error{id: "204525", eType: EXPECTED_ERROR, message: "User Channel does not exist. "}
var E204526 = Global_error{id: "204526", eType: EXPECTED_ERROR, message: "User Channel already exists. "}
var E204527 = Global_error{id: "204527", eType: EXPECTED_ERROR, message: "Package Product Type is not Active. "}
var E204528 = Global_error{id: "204528", eType: EXPECTED_ERROR, message: "Package Product Type is currently active. "}
var E204529 = Global_error{id: "204529", eType: EXPECTED_ERROR, message: "Package Product Type does not exist. "}
var E204530 = Global_error{id: "204530", eType: EXPECTED_ERROR, message: "Package Product Type already exists. "}
var E204531 = Global_error{id: "204531", eType: EXPECTED_ERROR, message: "@customer@ type can't entry W/T. "}
var E204532 = Global_error{id: "204532", eType: EXPECTED_ERROR, message: "Customer type prompt can not register withholding tax. "}
var E204533 = Global_error{id: "204533", eType: EXPECTED_ERROR, message: "End period can not greather than current period. "}
var E204534 = Global_error{id: "204534", eType: EXPECTED_ERROR, message: "Invalid Address "}
var E204535 = Global_error{id: "204535", eType: EXPECTED_ERROR, message: "Invalid Amount Per Unit "}
var E204536 = Global_error{id: "204536", eType: EXPECTED_ERROR, message: "Invalid em_unitprice "}
var E204537 = Global_error{id: "204537", eType: EXPECTED_ERROR, message: "Invalid Paid Amount "}
var E204538 = Global_error{id: "204538", eType: EXPECTED_ERROR, message: "Invalid Payment Type "}
var E204539 = Global_error{id: "204539", eType: EXPECTED_ERROR, message: "Invalid Post Code "}
var E204540 = Global_error{id: "204540", eType: EXPECTED_ERROR, message: "Invalid Received Amount "}
var E204541 = Global_error{id: "204541", eType: EXPECTED_ERROR, message: "Invalid sle_trns_code "}
var E204542 = Global_error{id: "204542", eType: EXPECTED_ERROR, message: "Number of result exceeds the limit (30,000 records). Please choose a new search condition. "}
var E204543 = Global_error{id: "204543", eType: EXPECTED_ERROR, message: "Number of rows found exceeds buffer size provide some more conditions.<br/>Number of rows displayed = @ItemCount@ "}
var E204544 = Global_error{id: "204544", eType: EXPECTED_ERROR, message: "Start Date and End Date cannot be different more than 1 month "}
var E204545 = Global_error{id: "204545", eType: EXPECTED_ERROR, message: "Start Period and End Period can not be different more than 1 period. "}
var E204546 = Global_error{id: "204546", eType: EXPECTED_ERROR, message: "Start Period can not greather than current period. "}
var E204547 = Global_error{id: "204547", eType: EXPECTED_ERROR, message: "The Amount of money/balance to be transferred must be between the ranges from minimum to maximum. "}
var E204548 = Global_error{id: "204548", eType: EXPECTED_ERROR, message: "This user has more than one company code "}
var E204549 = Global_error{id: "204549", eType: EXPECTED_ERROR, message: "Trans Type Code does not exist "}
var E204550 = Global_error{id: "204550", eType: EXPECTED_ERROR, message: "Trans Type Code does not exist or Do not have privilege using Trans Type Code. "}
var E204551 = Global_error{id: "204551", eType: EXPECTED_ERROR, message: "Trans Type Code does not Paid. "}
var E204552 = Global_error{id: "204552", eType: EXPECTED_ERROR, message: "Invalid Bill Cycle "}
var E204553 = Global_error{id: "204553", eType: EXPECTED_ERROR, message: "E-Refill Subscriber No cannot be null. "}
var E204554 = Global_error{id: "204554", eType: EXPECTED_ERROR, message: "Expiry Date cant less than Effective Date "}
var E204555 = Global_error{id: "204555", eType: EXPECTED_ERROR, message: "Extra Amount cannot be null. "}
var E204556 = Global_error{id: "204556", eType: EXPECTED_ERROR, message: "File name or batch number or laod date can not null "}
var E204557 = Global_error{id: "204557", eType: EXPECTED_ERROR, message: "Job Scratchpad No. can not be null. "}
var E204558 = Global_error{id: "204558", eType: EXPECTED_ERROR, message: "Duplicate entry found.:Customer number = @CustNumb@ Subscriber number = @SubrNumb@ REF.no = @InvRef@ "}
var E204559 = Global_error{id: "204559", eType: EXPECTED_ERROR, message: "Account Mapping Code : @AcctMappCode@ "}
var E204560 = Global_error{id: "204560", eType: EXPECTED_ERROR, message: "Min Debt Amount can not more than Max Debt Amount. "}
var E204561 = Global_error{id: "204561", eType: EXPECTED_ERROR, message: "Invalid Period "}
var E204562 = Global_error{id: "204562", eType: EXPECTED_ERROR, message: "Prepaid Subscriber No cannot be null. "}
var E204563 = Global_error{id: "204563", eType: EXPECTED_ERROR, message: "Prepaid subscriber removed day is incorrect. "}
var E204564 = Global_error{id: "204564", eType: EXPECTED_ERROR, message: "Prepaid Subscriber Removed Days cannot be null. "}
var E204565 = Global_error{id: "204565", eType: EXPECTED_ERROR, message: "Prepaid Subscriber Withdraw Amount cannot be null. "}
var E204566 = Global_error{id: "204566", eType: EXPECTED_ERROR, message: "Product Code does not match. "}
var E204567 = Global_error{id: "204567", eType: EXPECTED_ERROR, message: "Receipt Code does not exist. "}
var E204568 = Global_error{id: "204568", eType: EXPECTED_ERROR, message: "Receipt Date To cant less than Receipt Date From "}
var E204569 = Global_error{id: "204569", eType: EXPECTED_ERROR, message: "RTR Expected Amount cannot be null. "}
var E204570 = Global_error{id: "204570", eType: EXPECTED_ERROR, message: "Invalid Receipt Status "}
var E204571 = Global_error{id: "204571", eType: EXPECTED_ERROR, message: "Transaction ID already rectify. "}
var E204572 = Global_error{id: "204572", eType: EXPECTED_ERROR, message: "Transaction ID is incorrect. "}
var E204573 = Global_error{id: "204573", eType: EXPECTED_ERROR, message: "Transaction ID cannot be null. "}
var E204574 = Global_error{id: "204574", eType: EXPECTED_ERROR, message: "Voucher Type is not Physical. "}
var E204575 = Global_error{id: "204575", eType: EXPECTED_ERROR, message: "Please input Minute. "}
var E204576 = Global_error{id: "204576", eType: EXPECTED_ERROR, message: "Please input package code. "}
var E204577 = Global_error{id: "204577", eType: EXPECTED_ERROR, message: "Please enter Period or Tax Invoice Number "}
var E204578 = Global_error{id: "204578", eType: EXPECTED_ERROR, message: "Blank is not allow. "}
var E204579 = Global_error{id: "204579", eType: EXPECTED_ERROR, message: "Please entry date. "}
var E204580 = Global_error{id: "204580", eType: EXPECTED_ERROR, message: "Duplicate Data Cant Mapping "}
var E204581 = Global_error{id: "204581", eType: EXPECTED_ERROR, message: "Data not modified. Nothing to save. "}
var E204582 = Global_error{id: "204582", eType: EXPECTED_ERROR, message: "Bonus Amount over maximum. "}
var E204583 = Global_error{id: "204583", eType: EXPECTED_ERROR, message: "Main Amount over maximum. "}
var E204584 = Global_error{id: "204584", eType: EXPECTED_ERROR, message: "Refund W/T amount can not greater than amount value. "}
var E204585 = Global_error{id: "204585", eType: EXPECTED_ERROR, message: "Extra Amount value should be zero. "}
var E204586 = Global_error{id: "204586", eType: EXPECTED_ERROR, message: "Extra Amount should be greater than or equal zero. "}
var E204587 = Global_error{id: "204587", eType: EXPECTED_ERROR, message: "Job Scratchpad No. should be greater than zero. "}
var E204588 = Global_error{id: "204588", eType: EXPECTED_ERROR, message: "Maximum value of range cannot be less than Mininum value "}
var E204589 = Global_error{id: "204589", eType: EXPECTED_ERROR, message: "Prepaid Subscriber Removed Days must be greater than or equal zero. "}
var E204590 = Global_error{id: "204590", eType: EXPECTED_ERROR, message: "Prepaid Subscriber Withdraw Amount be greater than or equal zero. "}
var E204591 = Global_error{id: "204591", eType: EXPECTED_ERROR, message: "RTR Deposit Amount should be greater than or equal to zero. "}
var E204592 = Global_error{id: "204592", eType: EXPECTED_ERROR, message: "RTR Expected Amount cannot greater than Prepaid Subscriber Withdraw Amount. "}
var E204593 = Global_error{id: "204593", eType: EXPECTED_ERROR, message: "RTR Expected Amount should be greater than or equal zero. "}
var E204594 = Global_error{id: "204594", eType: EXPECTED_ERROR, message: "Prepare to send SMS ready. "}
var E204595 = Global_error{id: "204595", eType: EXPECTED_ERROR, message: "Data is successfully saved. "}
var E204596 = Global_error{id: "204596", eType: EXPECTED_ERROR, message: "Invalid transaction type. "}
var E204597 = Global_error{id: "204597", eType: EXPECTED_ERROR, message: "Please Enter Customer Number Or Group Code "}
var E204598 = Global_error{id: "204598", eType: EXPECTED_ERROR, message: "Group does not exist! "}
var E204599 = Global_error{id: "204599", eType: EXPECTED_ERROR, message: "Data not found. "}
var E204600 = Global_error{id: "204600", eType: EXPECTED_ERROR, message: "Does not found data history reconnect advance. "}
var E204601 = Global_error{id: "204601", eType: EXPECTED_ERROR, message: "Does not found data reconnect. "}
var E204602 = Global_error{id: "204602", eType: EXPECTED_ERROR, message: "Mapping Number does not exist. "}
var E204603 = Global_error{id: "204603", eType: EXPECTED_ERROR, message: "No outstanding. "}
var E204604 = Global_error{id: "204604", eType: EXPECTED_ERROR, message: "Tax Id does not exist. "}
var E204605 = Global_error{id: "204605", eType: EXPECTED_ERROR, message: "Can't less than 3 year. "}
var E204606 = Global_error{id: "204606", eType: EXPECTED_ERROR, message: "Can not find data differrence year. "}
var E204607 = Global_error{id: "204607", eType: EXPECTED_ERROR, message: "Range of From Date and To Date cant greater than 3 months. "}
var E204608 = Global_error{id: "204608", eType: EXPECTED_ERROR, message: "Can not pay because of debt remaining in the system. "}
var E204609 = Global_error{id: "204609", eType: EXPECTED_ERROR, message: "Can not entry W/T greater than balance. "}
var E204610 = Global_error{id: "204610", eType: EXPECTED_ERROR, message: "Can not entry W/T greater than W/T balance. "}
var E204611 = Global_error{id: "204611", eType: EXPECTED_ERROR, message: "Duplicate Account Code "}
var E204612 = Global_error{id: "204612", eType: EXPECTED_ERROR, message: "Customer is written off. "}
var E204613 = Global_error{id: "204613", eType: EXPECTED_ERROR, message: "Customer number does not Payment Level "}
var E204614 = Global_error{id: "204614", eType: EXPECTED_ERROR, message: "Start date cannot more than End Date. "}
var E204615 = Global_error{id: "204615", eType: EXPECTED_ERROR, message: "Start date can not be null. "}
var E204616 = Global_error{id: "204616", eType: EXPECTED_ERROR, message: "End Date cannot more than Today. "}
var E204617 = Global_error{id: "204617", eType: EXPECTED_ERROR, message: "End date cannot be less than Start date. "}
var E204618 = Global_error{id: "204618", eType: EXPECTED_ERROR, message: "End date can not be null. "}
var E204619 = Global_error{id: "204619", eType: EXPECTED_ERROR, message: "Date cannot be less than the current Time. "}
var E204620 = Global_error{id: "204620", eType: EXPECTED_ERROR, message: "The statement has no advance amount "}
var E204621 = Global_error{id: "204621", eType: EXPECTED_ERROR, message: "Trans Type Mapping Code: @Value@ "}
var E204622 = Global_error{id: "204622", eType: EXPECTED_ERROR, message: "Please Specify Group Code , Subscriber No. or Customer No. "}
var E204623 = Global_error{id: "204623", eType: EXPECTED_ERROR, message: "��� �к� Receipt No. , Group Code , Subscriber No. , Customer No. "}
var E204624 = Global_error{id: "204624", eType: EXPECTED_ERROR, message: "Receipt Date �к���ú. "}
var E204625 = Global_error{id: "204625", eType: EXPECTED_ERROR, message: "Please enter criteria "}
var E204626 = Global_error{id: "204626", eType: EXPECTED_ERROR, message: "Receipt No. selection must be specified "}
var E204627 = Global_error{id: "204627", eType: EXPECTED_ERROR, message: "Change amount have remnant of satang ,process can not round up. Please input advance amount again "}
var E204628 = Global_error{id: "204628", eType: EXPECTED_ERROR, message: "Type mismatch "}
var E204629 = Global_error{id: "204629", eType: EXPECTED_ERROR, message: "Invalid input of receipt date range "}
var E204630 = Global_error{id: "204630", eType: EXPECTED_ERROR, message: "Data must be greater than 0 "}
var E204631 = Global_error{id: "204631", eType: EXPECTED_ERROR, message: "Effective and expire date time has a gap time. Do you want to continue? "}
var E204632 = Global_error{id: "204632", eType: EXPECTED_ERROR, message: "Customer Code does not exist. "}
var E204633 = Global_error{id: "204633", eType: EXPECTED_ERROR, message: "Subscriber No Code does not exist. "}
var E204634 = Global_error{id: "204634", eType: EXPECTED_ERROR, message: "No rows in the FML buffer. "}
var E204635 = Global_error{id: "204635", eType: EXPECTED_ERROR, message: "The outstanding debt has remained "}
var E204636 = Global_error{id: "204636", eType: EXPECTED_ERROR, message: "Unknown Error Message. Contact the System Adminintrator. "}
var E204637 = Global_error{id: "204637", eType: EXPECTED_ERROR, message: "Invalid input of receipt Stop date range "}
var E204638 = Global_error{id: "204638", eType: EXPECTED_ERROR, message: "This customer @Cust@ assign Dtac to generate withholding tax certificate. Please confirm this payment (Yes or No) ? "}
var E204639 = Global_error{id: "204639", eType: EXPECTED_ERROR, message: "Choose Only one Receipt No. To Create File "}
var E204640 = Global_error{id: "204640", eType: EXPECTED_ERROR, message: "Access channel parameter cannot be blank, Please contact service desk "}
var E204641 = Global_error{id: "204641", eType: EXPECTED_ERROR, message: "Destination Screen Code can not be blank, Please contact service desk "}
var E204642 = Global_error{id: "204642", eType: EXPECTED_ERROR, message: "You are not allowed to access the system because this user name has already logged in from another machine by using IP: @Ip@ , Please contct service desk "}
var E204643 = Global_error{id: "204643", eType: EXPECTED_ERROR, message: "Failed to upload file from client to web server, Please contact service desk "}
var E204644 = Global_error{id: "204644", eType: EXPECTED_ERROR, message: "Failed to transfer file from web server to CCB server: Authorization Failed, Please contact service desk "}
var E204645 = Global_error{id: "204645", eType: EXPECTED_ERROR, message: "Failed to transfer file from web server to CCB server: Error occurred during transfer, Please contact service desk "}
var E204646 = Global_error{id: "204646", eType: EXPECTED_ERROR, message: "Transfer file completed: File size @Size@ bytes, Time @Time@ seconds "}
var E204647 = Global_error{id: "204647", eType: EXPECTED_ERROR, message: "Channel Type is not Active. "}
var E204648 = Global_error{id: "204648", eType: EXPECTED_ERROR, message: "Channel Type is currently active. "}
var E204649 = Global_error{id: "204649", eType: EXPECTED_ERROR, message: "Channel Type does not exist. "}
var E204650 = Global_error{id: "204650", eType: EXPECTED_ERROR, message: "Channel Type already exists. "}
var E204651 = Global_error{id: "204651", eType: EXPECTED_ERROR, message: "Date must be greater than or equal to package effective date. "}
var E204652 = Global_error{id: "204652", eType: EXPECTED_ERROR, message: "Date must be less than or equal to package expire date. "}
var E204653 = Global_error{id: "204653", eType: EXPECTED_ERROR, message: "Do you want to reduce reconnection debt for @adjAmnt@ Baht? "}
var E204654 = Global_error{id: "204654", eType: EXPECTED_ERROR, message: "Invalid Effective Date "}
var E204655 = Global_error{id: "204655", eType: EXPECTED_ERROR, message: "Invalid Expired Date "}
var E204656 = Global_error{id: "204656", eType: EXPECTED_ERROR, message: "Duplicate value not allowed for @DwoName@ "}
var E204657 = Global_error{id: "204657", eType: EXPECTED_ERROR, message: "Successfully Exported "}
var E204658 = Global_error{id: "204658", eType: EXPECTED_ERROR, message: "Receipt allocate WHTX. = @RcptAllcWht@ "}
var E204659 = Global_error{id: "204659", eType: EXPECTED_ERROR, message: "Receipt amount = @RcptAllcAmnt@ "}
var E204660 = Global_error{id: "204660", eType: EXPECTED_ERROR, message: "Please enter a data for Billing Level "}
var E204661 = Global_error{id: "204661", eType: EXPECTED_ERROR, message: "Please enter a data for Corporate State "}
var E204662 = Global_error{id: "204662", eType: EXPECTED_ERROR, message: "Please select Subscriber Number "}
var E204663 = Global_error{id: "204663", eType: EXPECTED_ERROR, message: "There is no data for export "}
var E204664 = Global_error{id: "204664", eType: EXPECTED_ERROR, message: "There is no data for generate "}
var E204665 = Global_error{id: "204665", eType: EXPECTED_ERROR, message: "Cannot export data "}
var E204666 = Global_error{id: "204666", eType: EXPECTED_ERROR, message: "Receipt No. Not Found "}
var E204667 = Global_error{id: "204667", eType: EXPECTED_ERROR, message: "No data found "}
var E204668 = Global_error{id: "204668", eType: EXPECTED_ERROR, message: "Sorry, Preferred caller number has reached a maximum limit of total sponsor numbers. "}
var E204669 = Global_error{id: "204669", eType: EXPECTED_ERROR, message: "Package Product Type of package cannot be blank. "}
var E204670 = Global_error{id: "204670", eType: EXPECTED_ERROR, message: "Please input tax id. "}
var E204671 = Global_error{id: "204671", eType: EXPECTED_ERROR, message: "Please input effective date. "}
var E204672 = Global_error{id: "204672", eType: EXPECTED_ERROR, message: "Please insert tax id 10 Digit. "}
var E204673 = Global_error{id: "204673", eType: EXPECTED_ERROR, message: "Password parameter cannot be blank, Please contact service desk "}
var E204674 = Global_error{id: "204674", eType: EXPECTED_ERROR, message: "Please check the email for the result "}
var E204675 = Global_error{id: "204675", eType: EXPECTED_ERROR, message: "Event type already exists but is not active. "}
var E204676 = Global_error{id: "204676", eType: EXPECTED_ERROR, message: "Event type already exists and is currently active. "}
var E204677 = Global_error{id: "204677", eType: EXPECTED_ERROR, message: "You choose register with corporate customer. Please add corporate hierarchy. "}
var E204678 = Global_error{id: "204678", eType: EXPECTED_ERROR, message: "Data for new service code will be lost. Do you want to continue ? "}
var E204679 = Global_error{id: "204679", eType: EXPECTED_ERROR, message: "SMS Circuit Group does not exists. "}
var E204680 = Global_error{id: "204680", eType: EXPECTED_ERROR, message: "SMS Circuit Group already exists. "}
var E204681 = Global_error{id: "204681", eType: EXPECTED_ERROR, message: "Invalid reapply type "}
var E204682 = Global_error{id: "204682", eType: EXPECTED_ERROR, message: "This Value should not be greater than maximum value "}
var E204683 = Global_error{id: "204683", eType: EXPECTED_ERROR, message: "Message sequence does not exist "}
var E204684 = Global_error{id: "204684", eType: EXPECTED_ERROR, message: "Message sequence already exists but is not currently effective "}
var E204685 = Global_error{id: "204685", eType: EXPECTED_ERROR, message: "Invalid message sequence "}
var E204686 = Global_error{id: "204686", eType: EXPECTED_ERROR, message: "User Authorization does not exist for this message sequence "}
var E204687 = Global_error{id: "204687", eType: EXPECTED_ERROR, message: "Warning and blocking message control code does not exist "}
var E204688 = Global_error{id: "204688", eType: EXPECTED_ERROR, message: "Only cancel can be allowed "}
var E204689 = Global_error{id: "204689", eType: EXPECTED_ERROR, message: "Blocking Message has authorization, Please update cancel authorization to DATA Group "}
var E204690 = Global_error{id: "204690", eType: EXPECTED_ERROR, message: "Please select Group Flag. "}
var E204691 = Global_error{id: "204691", eType: EXPECTED_ERROR, message: "Not suggest to exchange because free airtime will be lost, Request fail, please call 1678 "}
var E204692 = Global_error{id: "204692", eType: EXPECTED_ERROR, message: "Please check the data in Report Web Site "}
var E204693 = Global_error{id: "204693", eType: EXPECTED_ERROR, message: "(Load fail!) E-mail will be sent to acknowledge the completion of this process. "}
var E204694 = Global_error{id: "204694", eType: EXPECTED_ERROR, message: "(Load successful) E-mail will be sent to acknowledge the completion of this process. "}
var E204695 = Global_error{id: "204695", eType: EXPECTED_ERROR, message: "Problem writing the local file or in communication. Please contact service desk. "}
var E204696 = Global_error{id: "204696", eType: EXPECTED_ERROR, message: "Not allow to set threshold amount for customer who used Go Inter Package "}
var E204697 = Global_error{id: "204697", eType: EXPECTED_ERROR, message: "Telephone is not yet mapped with an IMSI on E-Refill database. "}
var E204698 = Global_error{id: "204698", eType: EXPECTED_ERROR, message: "Connection to E-Refill Server cannot be established. "}
var E204699 = Global_error{id: "204699", eType: EXPECTED_ERROR, message: "Granted allowed maximum Number of Special Numbers for additional VAS Service. "}
var E204700 = Global_error{id: "204700", eType: EXPECTED_ERROR, message: "Duplicate Special Number for VAS Service is found. "}
var E204701 = Global_error{id: "204701", eType: EXPECTED_ERROR, message: "This message should be granted user authorization on Maintain Super User Authorization menu "}
var E204702 = Global_error{id: "204702", eType: EXPECTED_ERROR, message: "Ki for the SIM Card is not yet created into AuC. "}
var E204703 = Global_error{id: "204703", eType: EXPECTED_ERROR, message: "SIM Card is in use or has been used. "}
var E204704 = Global_error{id: "204704", eType: EXPECTED_ERROR, message: "SIM Card status must be normal. "}
var E204705 = Global_error{id: "204705", eType: EXPECTED_ERROR, message: "SIM Card has already been allocated to a dealer. "}
var E204706 = Global_error{id: "204706", eType: EXPECTED_ERROR, message: "Invalid message type. "}
var E204707 = Global_error{id: "204707", eType: EXPECTED_ERROR, message: "Priority should not be less than 1 or greater than maximum value. "}
var E204708 = Global_error{id: "204708", eType: EXPECTED_ERROR, message: "Not allowed to enter TO information. "}
var E204709 = Global_error{id: "204709", eType: EXPECTED_ERROR, message: "Invalid Check Package Status "}
var E204710 = Global_error{id: "204710", eType: EXPECTED_ERROR, message: "Invalid except flag. "}
var E204711 = Global_error{id: "204711", eType: EXPECTED_ERROR, message: "Re apply data can not be blank. "}
var E204712 = Global_error{id: "204712", eType: EXPECTED_ERROR, message: "Invalid property type. "}
var E204713 = Global_error{id: "204713", eType: EXPECTED_ERROR, message: "Check Package Status must be Expire only for this transaction type. "}
var E204714 = Global_error{id: "204714", eType: EXPECTED_ERROR, message: "Not allowed package group, package category and main package for this transaction type in To Package. "}
var E204715 = Global_error{id: "204715", eType: EXPECTED_ERROR, message: "This transaction type is allowed to use for blocking message only. "}
var E204716 = Global_error{id: "204716", eType: EXPECTED_ERROR, message: "Next package is not allowed for IDD Package. "}
var E204717 = Global_error{id: "204717", eType: EXPECTED_ERROR, message: "Not allowed next package for this transaction type. "}
var E204718 = Global_error{id: "204718", eType: EXPECTED_ERROR, message: "IN service code is not applicable for other package. "}
var E204719 = Global_error{id: "204719", eType: EXPECTED_ERROR, message: "Package category is not applicable for package group and main package. "}
var E204720 = Global_error{id: "204720", eType: EXPECTED_ERROR, message: "This transaction type is allowed either Additional or Supplementary Package. "}
var E204721 = Global_error{id: "204721", eType: EXPECTED_ERROR, message: "From pacakge and To package must be equal or greater than 1 record for this transaction type. "}
var E204722 = Global_error{id: "204722", eType: EXPECTED_ERROR, message: "Super user message cannot be blank. "}
var E204723 = Global_error{id: "204723", eType: EXPECTED_ERROR, message: "Next package cannot be blank for this transaction type. "}
var E204724 = Global_error{id: "204724", eType: EXPECTED_ERROR, message: "Reapply Package type must be additional or supplementary for this transaction type. "}
var E204725 = Global_error{id: "204725", eType: EXPECTED_ERROR, message: "Re apply data is not applicable for this transaction type. "}
var E204726 = Global_error{id: "204726", eType: EXPECTED_ERROR, message: "IN service code is not applicable for package category. "}
var E204727 = Global_error{id: "204727", eType: EXPECTED_ERROR, message: "Check Package Status can not be blank. "}
var E204728 = Global_error{id: "204728", eType: EXPECTED_ERROR, message: "This message sequence has authorization, Super user message cannot be blank. "}
var E204729 = Global_error{id: "204729", eType: EXPECTED_ERROR, message: "This message sequence has authorization, Not allowed for warning message type. "}
var E204730 = Global_error{id: "204730", eType: EXPECTED_ERROR, message: "Check Package Status must be active status only for this transaction type. "}
var E204731 = Global_error{id: "204731", eType: EXPECTED_ERROR, message: "Holiday Band already existing, can't be duplicated. "}
var E204732 = Global_error{id: "204732", eType: EXPECTED_ERROR, message: "Holiday Band does not exists. "}
var E204733 = Global_error{id: "204733", eType: EXPECTED_ERROR, message: "Holiday Band exists in other table, cannot delete. "}
var E204734 = Global_error{id: "204734", eType: EXPECTED_ERROR, message: "Holiday Detail data does not exist. "}
var E204735 = Global_error{id: "204735", eType: EXPECTED_ERROR, message: "Airtime Operator does not exist. "}
var E204736 = Global_error{id: "204736", eType: EXPECTED_ERROR, message: "Airtime Operator already exists. "}
var E204737 = Global_error{id: "204737", eType: EXPECTED_ERROR, message: "Airtime Service does not exist. "}
var E204738 = Global_error{id: "204738", eType: EXPECTED_ERROR, message: "Airtime Service already exists. "}
var E204739 = Global_error{id: "204739", eType: EXPECTED_ERROR, message: "IN service code is allowed for Prepaid. "}
var E204740 = Global_error{id: "204740", eType: EXPECTED_ERROR, message: "Duplicate Voice Special Number with MGM Special Number. "}
var E204741 = Global_error{id: "204741", eType: EXPECTED_ERROR, message: "CCB user code does not exist or it has not been associated with this LAN user code. "}
var E204742 = Global_error{id: "204742", eType: EXPECTED_ERROR, message: "Subscriber has already subscribed this benefit. "}
var E204743 = Global_error{id: "204743", eType: EXPECTED_ERROR, message: "Subscriber doesn't have effective benefit. "}
var E204744 = Global_error{id: "204744", eType: EXPECTED_ERROR, message: "Subscriber doesn't have benefit period information. "}
var E204745 = Global_error{id: "204745", eType: EXPECTED_ERROR, message: "You cannot offer benefit to subscriber in previous offer benefit period. "}
var E204746 = Global_error{id: "204746", eType: EXPECTED_ERROR, message: "Customer's age is over benefit limitation. "}
var E204747 = Global_error{id: "204747", eType: EXPECTED_ERROR, message: "This except flag is allowed to entry only same column "}
var E204748 = Global_error{id: "204748", eType: EXPECTED_ERROR, message: "Except flag of From package is allowed to enter 1 more value for this message sequence "}
var E204749 = Global_error{id: "204749", eType: EXPECTED_ERROR, message: "Except flag must be 'N' for this transaction type. "}
var E204750 = Global_error{id: "204750", eType: EXPECTED_ERROR, message: "Not allowed to update except flag "}
var E204751 = Global_error{id: "204751", eType: EXPECTED_ERROR, message: "Please specify username and password "}
var E204752 = Global_error{id: "204752", eType: EXPECTED_ERROR, message: "username parameter cannot be blank, Please contact service desk "}
var E204753 = Global_error{id: "204753", eType: EXPECTED_ERROR, message: "The user name or password is incorrect. Please try again "}
var E204754 = Global_error{id: "204754", eType: EXPECTED_ERROR, message: "Cannot get Current IP Address from the system "}
var E204755 = Global_error{id: "204755", eType: EXPECTED_ERROR, message: "Cannot get Session ID from the system "}
var E204756 = Global_error{id: "204756", eType: EXPECTED_ERROR, message: "This except flag is allowed to entry only same Check Package Status "}
var E204757 = Global_error{id: "204757", eType: EXPECTED_ERROR, message: "Invalid next package code. "}
var E204758 = Global_error{id: "204758", eType: EXPECTED_ERROR, message: "Either Additional or Supplementary package in From package can not be blank "}
var E204759 = Global_error{id: "204759", eType: EXPECTED_ERROR, message: "RIM Service Code is not active "}
var E204760 = Global_error{id: "204760", eType: EXPECTED_ERROR, message: "RIM Service Code is currently active "}
var E204761 = Global_error{id: "204761", eType: EXPECTED_ERROR, message: "RIM Service Code does not exist "}
var E204762 = Global_error{id: "204762", eType: EXPECTED_ERROR, message: "RIM Service Code already exist "}
var E204763 = Global_error{id: "204763", eType: EXPECTED_ERROR, message: "Invalid End period validity for last package. "}
var E204764 = Global_error{id: "204764", eType: EXPECTED_ERROR, message: "User does not have authorization to do transaction. "}
var E204765 = Global_error{id: "204765", eType: EXPECTED_ERROR, message: " Adding secondary SIM was cancelled. "}
var E204766 = Global_error{id: "204766", eType: EXPECTED_ERROR, message: "Cancelling secondary SIM was aborted. "}
var E204767 = Global_error{id: "204767", eType: EXPECTED_ERROR, message: "Cannot complete transaction due to more than 1 package available. Please recheck and try again. "}
var E204768 = Global_error{id: "204768", eType: EXPECTED_ERROR, message: "This package is not allowed for Multi SIM. "}
var E204769 = Global_error{id: "204769", eType: EXPECTED_ERROR, message: "Number of secondary SIM for the selected package is different from that of customer. "}
var E204770 = Global_error{id: "204770", eType: EXPECTED_ERROR, message: "Reapply period must not be greater than 84 days or 3 months "}
var E204771 = Global_error{id: "204771", eType: EXPECTED_ERROR, message: "BlackBerry customer is not allowed to apply MultiSIM. "}
var E204772 = Global_error{id: "204772", eType: EXPECTED_ERROR, message: "Total Secondary SIM of dependent package is inconsistent. "}
var E204773 = Global_error{id: "204773", eType: EXPECTED_ERROR, message: "Secondary SIM flag of dependent package is inconsistent. "}
var E204774 = Global_error{id: "204774", eType: EXPECTED_ERROR, message: "Bill code does not exist in Package Billing Detail. "}
var E204775 = Global_error{id: "204775", eType: EXPECTED_ERROR, message: "Trans Type Code does not exist "}
var E204776 = Global_error{id: "204776", eType: EXPECTED_ERROR, message: "There is error when uploading display message "}
var E204777 = Global_error{id: "204777", eType: EXPECTED_ERROR, message: "Blank is not allow. "}
var E204778 = Global_error{id: "204778", eType: EXPECTED_ERROR, message: "Failed to inquire RTR information. "}
var E204779 = Global_error{id: "204779", eType: EXPECTED_ERROR, message: "Top-up Transaction does not exist "}
var E204780 = Global_error{id: "204780", eType: EXPECTED_ERROR, message: "The Self e-Refill Rectify Rate does not exist "}
var E204781 = Global_error{id: "204781", eType: EXPECTED_ERROR, message: "Invalid Balance Checking message . "}
var E204782 = Global_error{id: "204782", eType: EXPECTED_ERROR, message: "Customer Status Close can not register withholding tax. "}
var E204783 = Global_error{id: "204783", eType: EXPECTED_ERROR, message: "Invalid Group Code. "}
var E204784 = Global_error{id: "204784", eType: EXPECTED_ERROR, message: "Start date time must be greater than or equal to current date time. "}
var E204785 = Global_error{id: "204785", eType: EXPECTED_ERROR, message: "End date time cannot be less than Start date time. "}
var E204786 = Global_error{id: "204786", eType: EXPECTED_ERROR, message: "End date time cannot be less than current date time. "}
var E204787 = Global_error{id: "204787", eType: EXPECTED_ERROR, message: "Your session has expired. Please login again "}
var E204788 = Global_error{id: "204788", eType: EXPECTED_ERROR, message: "Your session has expired. Please open this screen again in Portal screen "}
var E204789 = Global_error{id: "204789", eType: EXPECTED_ERROR, message: "Subscriber is not Retailer "}
var E204790 = Global_error{id: "204790", eType: EXPECTED_ERROR, message: "Company is disable by MD eRefill "}
var E204791 = Global_error{id: "204791", eType: EXPECTED_ERROR, message: "Hardware Number has received this benefit. "}
var E204792 = Global_error{id: "204792", eType: EXPECTED_ERROR, message: "This VAS Package need IMEI to relate. "}
var E204793 = Global_error{id: "204793", eType: EXPECTED_ERROR, message: "This VAS Plan need IMEI to relate. "}
var E204794 = Global_error{id: "204794", eType: EXPECTED_ERROR, message: "IMEI used count is invalid format. "}
var E204795 = Global_error{id: "204795", eType: EXPECTED_ERROR, message: "Interconnection Charge Plan already exists. "}
var E204796 = Global_error{id: "204796", eType: EXPECTED_ERROR, message: "Interconnection Charge Plan does not exist. "}
var E204797 = Global_error{id: "204797", eType: EXPECTED_ERROR, message: "Interconnection Charge Plan Detail already exists. "}
var E204798 = Global_error{id: "204798", eType: EXPECTED_ERROR, message: "Interconnection Charge Plan Detail does not exist. "}
var E204799 = Global_error{id: "204799", eType: EXPECTED_ERROR, message: "IC Type does not exists. "}
var E204800 = Global_error{id: "204800", eType: EXPECTED_ERROR, message: "IC Type already exists. "}
var E204801 = Global_error{id: "204801", eType: EXPECTED_ERROR, message: "Cannot reset apply package counter because the benefit is still available. "}
var E204802 = Global_error{id: "204802", eType: EXPECTED_ERROR, message: "Leasing subscriber cannot do this transaction. "}
var E204803 = Global_error{id: "204803", eType: EXPECTED_ERROR, message: "This number is in our service condition. "}
var E204804 = Global_error{id: "204804", eType: EXPECTED_ERROR, message: "Transaction is not allowed as Number is in porting out process. "}
var E204805 = Global_error{id: "204805", eType: EXPECTED_ERROR, message: "Effective and expire date of second vas package must cover effective and expire date of first vas package. "}
var E204806 = Global_error{id: "204806", eType: EXPECTED_ERROR, message: "VAS Package type/airtime service of second package can not overlap with the first vas package type/airtime service. "}
var E204807 = Global_error{id: "204807", eType: EXPECTED_ERROR, message: "Prepaid Business Code must be specified. "}
var E204808 = Global_error{id: "204808", eType: EXPECTED_ERROR, message: "Period Code already exists. "}
var E204809 = Global_error{id: "204809", eType: EXPECTED_ERROR, message: "Period Code does not exist. "}
var E204810 = Global_error{id: "204810", eType: EXPECTED_ERROR, message: "Period Code already exists but is currently not active. "}
var E204811 = Global_error{id: "204811", eType: EXPECTED_ERROR, message: "Period Code already exists and is currently effective. "}
var E204812 = Global_error{id: "204812", eType: EXPECTED_ERROR, message: "Invalid Day values of week. "}
var E204813 = Global_error{id: "204813", eType: EXPECTED_ERROR, message: "Invalid Message Frequency. "}
var E204814 = Global_error{id: "204814", eType: EXPECTED_ERROR, message: "Prepaid Service Group exists in Prepaid Service Description table.Can not delete. "}
var E204815 = Global_error{id: "204815", eType: EXPECTED_ERROR, message: "Dealer of user is not the dealer of this Card number. "}
var E204816 = Global_error{id: "204816", eType: EXPECTED_ERROR, message: "NPDB operator already exists in Other Interconnection Operator. "}
var E204817 = Global_error{id: "204817", eType: EXPECTED_ERROR, message: "NPDB Operator does not exist. "}
var E204818 = Global_error{id: "204818", eType: EXPECTED_ERROR, message: "NPDB Operator already exists. "}
var E204819 = Global_error{id: "204819", eType: EXPECTED_ERROR, message: "Invalid Budget Control Amount. "}
var E204820 = Global_error{id: "204820", eType: EXPECTED_ERROR, message: "Budget Control Amount must be greater than or equal to zero. "}
var E204821 = Global_error{id: "204821", eType: EXPECTED_ERROR, message: "This subscriber numb has Bar IDD package, Not allowed for IDD service. "}
var E204822 = Global_error{id: "204822", eType: EXPECTED_ERROR, message: "This subscriber number has not IR package, Not allowed for IR service . "}
var E204823 = Global_error{id: "204823", eType: EXPECTED_ERROR, message: "Budget amount of Subscriber must be greater than summary of service budget amount "}
var E204824 = Global_error{id: "204824", eType: EXPECTED_ERROR, message: "The ported number has Pre-to-Post international service activated. The service needs to be canceled in order to proceed further. "}
var E204825 = Global_error{id: "204825", eType: EXPECTED_ERROR, message: "The ported number is the number of online dtac prepaid top-up service retailer. "}
var E204826 = Global_error{id: "204826", eType: EXPECTED_ERROR, message: "Invalid Reference Subscriber. "}
var E204827 = Global_error{id: "204827", eType: EXPECTED_ERROR, message: "Not allowed budget amount for %s. "}
var E204828 = Global_error{id: "204828", eType: EXPECTED_ERROR, message: "Cannot get customer's latest Top-up date. "}
var E204829 = Global_error{id: "204829", eType: EXPECTED_ERROR, message: "Cannot get customer's latest bonus receiving date. "}
var E204830 = Global_error{id: "204830", eType: EXPECTED_ERROR, message: "Failed to connect to Web Service. "}
var E204831 = Global_error{id: "204831", eType: EXPECTED_ERROR, message: "Failed to inquiry or validate budget control from Web Service "}
var E204832 = Global_error{id: "204832", eType: EXPECTED_ERROR, message: "Your number has been successfully cancelled for internet usage alert service. "}
var E204833 = Global_error{id: "204833", eType: EXPECTED_ERROR, message: "Sorry, this number has never been requested Data Alert service. "}
var E204834 = Global_error{id: "204834", eType: EXPECTED_ERROR, message: "Your number has been successfully activated for Data Alert service. "}
var E204835 = Global_error{id: "204835", eType: EXPECTED_ERROR, message: "Sorry, your number cannot apply for this service. "}
var E204836 = Global_error{id: "204836", eType: EXPECTED_ERROR, message: "Sorry, this number cannot be activated Data Alert Service because it is not applied for dtac internet service. "}
var E204837 = Global_error{id: "204837", eType: EXPECTED_ERROR, message: "Sorry, all service lines are engaged, please try again later. "}
var E204838 = Global_error{id: "204838", eType: EXPECTED_ERROR, message: "Sorry, this number has never been requested Data Roaming Alert service. "}
var E204839 = Global_error{id: "204839", eType: EXPECTED_ERROR, message: "Your number has been successfully activated for Data Roaming Alert service. "}
var E204840 = Global_error{id: "204840", eType: EXPECTED_ERROR, message: "Sorry, this number cannot be activated because it is not applied for International Roaming service. "}
var E204841 = Global_error{id: "204841", eType: EXPECTED_ERROR, message: "Sorry, this number cannot request the service via this channel. "}
var E204842 = Global_error{id: "204842", eType: EXPECTED_ERROR, message: "This package group type must have CAMEL package. "}
var E204843 = Global_error{id: "204843", eType: EXPECTED_ERROR, message: "Your number has been successfully canceled for Data Roaming Alert service. "}
var E204844 = Global_error{id: "204844", eType: EXPECTED_ERROR, message: "The verified email is not matched with the email in the system. "}
var E204845 = Global_error{id: "204845", eType: EXPECTED_ERROR, message: "Transaction is not allowed for porting out number. "}
var E204846 = Global_error{id: "204846", eType: EXPECTED_ERROR, message: "Transaction is not allowed for non porting out number. "}
var E204847 = Global_error{id: "204847", eType: EXPECTED_ERROR, message: "First name or last name do not match with registered information. "}
var E204848 = Global_error{id: "204848", eType: EXPECTED_ERROR, message: "National ID number does not match with registered information. "}
var E204849 = Global_error{id: "204849", eType: EXPECTED_ERROR, message: "The porting number is already switched off. "}
var E204850 = Global_error{id: "204850", eType: EXPECTED_ERROR, message: "The porting number has been suspended due to no validity day (Prepaid status CE/NSE). "}
var E204851 = Global_error{id: "204851", eType: EXPECTED_ERROR, message: "The porting number has been suspended. Please check suspend code for more information. "}
var E204852 = Global_error{id: "204852", eType: EXPECTED_ERROR, message: "The porting number has not been registered. "}
var E204853 = Global_error{id: "204853", eType: EXPECTED_ERROR, message: "The porting number is in registration process (status = Q). "}
var E204854 = Global_error{id: "204854", eType: EXPECTED_ERROR, message: "Registration of porting number has not been verified (not receive 'CG approved'). "}
var E204855 = Global_error{id: "204855", eType: EXPECTED_ERROR, message: "The porting number (Prepaid) has pending service charges. Please check 'to be charged' amount from services such as Ring4U etc. "}
var E204856 = Global_error{id: "204856", eType: EXPECTED_ERROR, message: "The porting number (Prepaid) has pending charges from Jaidee HaiYuem or Vaccine services. "}
var E204857 = Global_error{id: "204857", eType: EXPECTED_ERROR, message: "The porting number (Prepaid) has negative balance. "}
var E204858 = Global_error{id: "204858", eType: EXPECTED_ERROR, message: "The porting number (Postpaid) has an outstanding balance. Please check details on NCCA Invoice screen and Invoice -> Other Charges "}
var E204859 = Global_error{id: "204859", eType: EXPECTED_ERROR, message: "The porting number is using promotion package which its contract term has not yet expired. "}
var E204860 = Global_error{id: "204860", eType: EXPECTED_ERROR, message: "The porting number is using Staff package. "}
var E204861 = Global_error{id: "204861", eType: EXPECTED_ERROR, message: "You cannot apply this supplementary package because you does not have main supplementary package. "}
var E204862 = Global_error{id: "204862", eType: EXPECTED_ERROR, message: "Charging money is canceled because service of supplementary is suspended. "}
var E204863 = Global_error{id: "204863", eType: EXPECTED_ERROR, message: "This telephone is not allowed to reuse. "}
var E204864 = Global_error{id: "204864", eType: EXPECTED_ERROR, message: "No Authorized to receive MNP Payment Fee. "}
var E204865 = Global_error{id: "204865", eType: EXPECTED_ERROR, message: "Unable to use print feature. Please sign out system and restart internet explorer for install security certificate .If you still found this message ,Please contact helpdesk. "}
var E204866 = Global_error{id: "204866", eType: EXPECTED_ERROR, message: "Airtime VAS does not exists. "}
var E204867 = Global_error{id: "204867", eType: EXPECTED_ERROR, message: "Airtime VAS already exists. "}
var E204868 = Global_error{id: "204868", eType: EXPECTED_ERROR, message: "Airtime VAS Detail does not exists. "}
var E204869 = Global_error{id: "204869", eType: EXPECTED_ERROR, message: "Airtime VAS Detail already exists. "}
var E204870 = Global_error{id: "204870", eType: EXPECTED_ERROR, message: "This service is no longer use.Please load text with waive fee instread. "}
var E204871 = Global_error{id: "204871", eType: EXPECTED_ERROR, message: "Sorry, your number cannot be use to this service. "}
var E204872 = Global_error{id: "204872", eType: EXPECTED_ERROR, message: "Corporate group code in Affiliated Group does not exist. "}
var E204873 = Global_error{id: "204873", eType: EXPECTED_ERROR, message: "Invalid Time Schedule. "}
var E204874 = Global_error{id: "204874", eType: EXPECTED_ERROR, message: "Duplicate Ranking value. "}
var E204875 = Global_error{id: "204875", eType: EXPECTED_ERROR, message: "Invalid Policy Category. "}
var E204876 = Global_error{id: "204876", eType: EXPECTED_ERROR, message: "Invalid Screening Priority. "}
var E204877 = Global_error{id: "204877", eType: EXPECTED_ERROR, message: "Invalid Hunting type. "}
var E204878 = Global_error{id: "204878", eType: EXPECTED_ERROR, message: "Category policy code already exists "}
var E204879 = Global_error{id: "204879", eType: EXPECTED_ERROR, message: "Category policy code does not exist "}
var E204880 = Global_error{id: "204880", eType: EXPECTED_ERROR, message: "Category policy already exists but is not currently effective "}
var E204881 = Global_error{id: "204881", eType: EXPECTED_ERROR, message: "Invalid time flag value "}
var E204882 = Global_error{id: "204882", eType: EXPECTED_ERROR, message: "Each category policy must contain at least one week day constrain "}
var E204883 = Global_error{id: "204883", eType: EXPECTED_ERROR, message: "This category policy code is in used, not allow for expire "}
var E204884 = Global_error{id: "204884", eType: EXPECTED_ERROR, message: "Not allow to specify Level for business list category policy "}
var E204885 = Global_error{id: "204885", eType: EXPECTED_ERROR, message: "One time segment must be composed of Level, Start Time and End Time "}
var E204886 = Global_error{id: "204886", eType: EXPECTED_ERROR, message: "One time segment must be composed of Start Time and End Time "}
var E204887 = Global_error{id: "204887", eType: EXPECTED_ERROR, message: "Not allow to duplicate Week day value in the same category policy code "}
var E204888 = Global_error{id: "204888", eType: EXPECTED_ERROR, message: "Business number already exist "}
var E204889 = Global_error{id: "204889", eType: EXPECTED_ERROR, message: "Business number does not exist "}
var E204890 = Global_error{id: "204890", eType: EXPECTED_ERROR, message: "Business number exist but is not currently effective "}
var E204891 = Global_error{id: "204891", eType: EXPECTED_ERROR, message: "No effective business list number of this group code found for expire "}
var E204892 = Global_error{id: "204892", eType: EXPECTED_ERROR, message: "Failed to inquiry Budget Alert history from Web service "}
var E204893 = Global_error{id: "204893", eType: EXPECTED_ERROR, message: "The previous time segment must be not null "}
var E204894 = Global_error{id: "204894", eType: EXPECTED_ERROR, message: "Each week day must contain at least one time segment constrain "}
var E204895 = Global_error{id: "204895", eType: EXPECTED_ERROR, message: "From VPN Group code and To VPN Group code cannot be same "}
var E204896 = Global_error{id: "204896", eType: EXPECTED_ERROR, message: "Request transaction time has exceeded timeout limit. "}
var E204897 = Global_error{id: "204897", eType: EXPECTED_ERROR, message: "Telephone is already mapped and activated with this card. "}
var E204898 = Global_error{id: "204898", eType: EXPECTED_ERROR, message: "Sorry, this number cannot be cancelled because it is not applied for IR. "}
var E204899 = Global_error{id: "204899", eType: EXPECTED_ERROR, message: "Period of effective date overlap with other effective date. "}
var E204900 = Global_error{id: "204900", eType: EXPECTED_ERROR, message: "SGSN address overlap with existing data. "}
var E204901 = Global_error{id: "204901", eType: EXPECTED_ERROR, message: "Airtime Charge already exists. "}
var E204902 = Global_error{id: "204902", eType: EXPECTED_ERROR, message: "E-mail address can not be blank. "}
var E204903 = Global_error{id: "204903", eType: EXPECTED_ERROR, message: "Not allow to change E-mail. Customer is registering invoice alert via E-mail and Letter & e-mail method. Please use Maintain Invoice Alert screen to change E-mail address instead. "}
var E204904 = Global_error{id: "204904", eType: EXPECTED_ERROR, message: "Invalid End period validity of package. "}
var E204905 = Global_error{id: "204905", eType: EXPECTED_ERROR, message: "Threshold Code already exist. "}
var E204906 = Global_error{id: "204906", eType: EXPECTED_ERROR, message: "Threshold Code dose not exist. "}
var E204907 = Global_error{id: "204907", eType: EXPECTED_ERROR, message: "Invalid Customer Type. "}
var E204908 = Global_error{id: "204908", eType: EXPECTED_ERROR, message: "Invalid Service flag. "}
var E204909 = Global_error{id: "204909", eType: EXPECTED_ERROR, message: "Invalid Postpaid Pocket Low Balance Alert. "}
var E204910 = Global_error{id: "204910", eType: EXPECTED_ERROR, message: "MNP Porting fee receipt is not allowed to be canceled. "}
var E204911 = Global_error{id: "204911", eType: EXPECTED_ERROR, message: "Balance amount is not enough. "}
var E204912 = Global_error{id: "204912", eType: EXPECTED_ERROR, message: "Airtime balance has reached the maximum limit. "}
var E204913 = Global_error{id: "204913", eType: EXPECTED_ERROR, message: "Bonus Pocket Type and Service Group should not have in condition at the same time. "}
var E204914 = Global_error{id: "204914", eType: EXPECTED_ERROR, message: "RIM Service Code is already in use. "}
var E204915 = Global_error{id: "204915", eType: EXPECTED_ERROR, message: "You already subscribed to BlackBerry package. "}
var E204916 = Global_error{id: "204916", eType: EXPECTED_ERROR, message: "Airtime Charge does not exist. "}
var E204917 = Global_error{id: "204917", eType: EXPECTED_ERROR, message: "Charge Mode does not define. "}
var E204918 = Global_error{id: "204918", eType: EXPECTED_ERROR, message: "Reference number already exists and record status is success. "}
var E204919 = Global_error{id: "204919", eType: EXPECTED_ERROR, message: "Subscriber has to refill money for SOS BB before requesting SOS again. "}
var E204920 = Global_error{id: "204920", eType: EXPECTED_ERROR, message: "Subscriber has to refill money for SOS before requesting SOS again. "}
var E204921 = Global_error{id: "204921", eType: EXPECTED_ERROR, message: "Subscriber has to refill money for Vaccine before requesting SOS again. "}
var E204922 = Global_error{id: "204922", eType: EXPECTED_ERROR, message: "Subscriber has maximum request 4 times per month. "}
var E204923 = Global_error{id: "204923", eType: EXPECTED_ERROR, message: "Not allow post debt to Billing. "}
var E204924 = Global_error{id: "204924", eType: EXPECTED_ERROR, message: "Setup recurring charge failed. "}
var E204925 = Global_error{id: "204925", eType: EXPECTED_ERROR, message: "Remove recurring service  failed. "}
var E204926 = Global_error{id: "204926", eType: EXPECTED_ERROR, message: "Add VAS Poket failed. "}
var E204927 = Global_error{id: "204927", eType: EXPECTED_ERROR, message: "Cancel VAS Pocket failed. "}
var E204928 = Global_error{id: "204928", eType: EXPECTED_ERROR, message: "Add VAS Poket Plan failed. "}
var E204929 = Global_error{id: "204929", eType: EXPECTED_ERROR, message: "Cancel VAS Pocket Plan failed. "}
var E204930 = Global_error{id: "204930", eType: EXPECTED_ERROR, message: "Add prepaid recurring bonus failed. "}
var E204931 = Global_error{id: "204931", eType: EXPECTED_ERROR, message: "Add Back recurring bonus failed. "}
var E204932 = Global_error{id: "204932", eType: EXPECTED_ERROR, message: "Cancel bonus request  failed. "}
var E204933 = Global_error{id: "204933", eType: EXPECTED_ERROR, message: "Invalid SQL statement, this service only support INSERT, UPDATE, DELETE statements. "}
var E204934 = Global_error{id: "204934", eType: EXPECTED_ERROR, message: "Multi rows affected by UPDATE or DELETE statement, this service only support one row affected. "}
var E204935 = Global_error{id: "204935", eType: EXPECTED_ERROR, message: "0 row affected by UPDATE or DELETE statement. "}
var E204936 = Global_error{id: "204936", eType: EXPECTED_ERROR, message: "Airtime Recuring does not exists. "}
var E204937 = Global_error{id: "204937", eType: EXPECTED_ERROR, message: "Airtime Recuring already exists. "}
var E204938 = Global_error{id: "204938", eType: EXPECTED_ERROR, message: "Invalid SQL statement. "}
var E204939 = Global_error{id: "204939", eType: EXPECTED_ERROR, message: "Subscriber has to refill money for SOS BB. "}
var E204940 = Global_error{id: "204940", eType: EXPECTED_ERROR, message: "Sorry. You have not yet returned credit of %s Baht from Jaidee HaiYuem BB service. Please refill before using the service. "}
var E204941 = Global_error{id: "204941", eType: EXPECTED_ERROR, message: "Subscriber has maximum request 1 times per month. "}
var E204942 = Global_error{id: "204942", eType: EXPECTED_ERROR, message: "Subscriber's validity period is not valid for requesting Trading Validity. "}
var E204943 = Global_error{id: "204943", eType: EXPECTED_ERROR, message: "Subscriber has Jaidee Jeakwan service history. "}
var E204944 = Global_error{id: "204944", eType: EXPECTED_ERROR, message: "Subscriber has Jaidee Haileak service. "}
var E204945 = Global_error{id: "204945", eType: EXPECTED_ERROR, message: "Thai character can not be specified for this field. "}
var E204946 = Global_error{id: "204946", eType: EXPECTED_ERROR, message: "System Error (OSB/NEO). "}
var E204947 = Global_error{id: "204947", eType: EXPECTED_ERROR, message: "The monthly recurring bonus will be lost immediately right after JaiDeeHaiLeak has been successfully changed. Do you want to continue? "}
var E204948 = Global_error{id: "204948", eType: EXPECTED_ERROR, message: "Multiple Wifi package is found. "}
var E204949 = Global_error{id: "204949", eType: EXPECTED_ERROR, message: "TRNS_NUMB does not exist. "}
var E204950 = Global_error{id: "204950", eType: EXPECTED_ERROR, message: "Invalid TRNS_TYPE. "}
var E204951 = Global_error{id: "204951", eType: EXPECTED_ERROR, message: "Invalid TRNS_STTS. "}
var E204952 = Global_error{id: "204952", eType: EXPECTED_ERROR, message: "Invalid TRNS_RESN. "}
var E204953 = Global_error{id: "204953", eType: EXPECTED_ERROR, message: "Invalid date format of EVNT_DTTM. "}
var E204954 = Global_error{id: "204954", eType: EXPECTED_ERROR, message: "Invalid length of error code. "}
var E204955 = Global_error{id: "204955", eType: EXPECTED_ERROR, message: "Error code is required. "}
var E204956 = Global_error{id: "204956", eType: EXPECTED_ERROR, message: "Error description is required. "}
var E204957 = Global_error{id: "204957", eType: EXPECTED_ERROR, message: "TRNS_STTS does not match with error code or description. "}
var E204958 = Global_error{id: "204958", eType: EXPECTED_ERROR, message: "Error code is missing "}
var E204959 = Global_error{id: "204959", eType: EXPECTED_ERROR, message: "Error code must be blank "}
var E204960 = Global_error{id: "204960", eType: EXPECTED_ERROR, message: "Invalid SQL statement, this service only support INSERT, UPDATE statements. "}
var E204961 = Global_error{id: "204961", eType: EXPECTED_ERROR, message: "Invalid CG/CI Approval Type. "}
var E204962 = Global_error{id: "204962", eType: EXPECTED_ERROR, message: "Invalid CG/CI Approval Status. "}
var E204963 = Global_error{id: "204963", eType: EXPECTED_ERROR, message: "CGCI approval name is required. "}
var E204964 = Global_error{id: "204964", eType: EXPECTED_ERROR, message: "Duplicate  Flag: Already CG approval Flag was done. "}
var E204965 = Global_error{id: "204965", eType: EXPECTED_ERROR, message: "Duplicate  Flag: Already CI approval Flag was done. "}
var E204966 = Global_error{id: "204966", eType: EXPECTED_ERROR, message: "The credit limit amount are already 100% of the chosen promotional package. "}
var E204967 = Global_error{id: "204967", eType: EXPECTED_ERROR, message: "Invalid SQL statement, this service only support SELECT statements. "}
var E204968 = Global_error{id: "204968", eType: EXPECTED_ERROR, message: "Start date must be greater than today. "}
var E204969 = Global_error{id: "204969", eType: EXPECTED_ERROR, message: "UPDATE and DELETE statement must be alway use with WHERE condition. "}
var E204970 = Global_error{id: "204970", eType: EXPECTED_ERROR, message: "Duplicate Alert Threshold. "}
var E204971 = Global_error{id: "204971", eType: EXPECTED_ERROR, message: "Auto register pay by phone failed. "}
var E204972 = Global_error{id: "204972", eType: EXPECTED_ERROR, message: "Add new credit card failed. "}
var E204973 = Global_error{id: "204973", eType: EXPECTED_ERROR, message: "No FUP for this Subscriber Number. "}
var E204974 = Global_error{id: "204974", eType: EXPECTED_ERROR, message: "You already subscribed to Music streaming package. "}
var E204975 = Global_error{id: "204975", eType: EXPECTED_ERROR, message: "Rate amount from input is not equal to rate amount in database. "}
var E204976 = Global_error{id: "204976", eType: EXPECTED_ERROR, message: "Invalid Network type. "}
var E204977 = Global_error{id: "204977", eType: EXPECTED_ERROR, message: "Invalid Card style. "}
var E204978 = Global_error{id: "204978", eType: EXPECTED_ERROR, message: "Maximum age of usage days should be greater than minimum age of usage days. "}
var E204979 = Global_error{id: "204979", eType: EXPECTED_ERROR, message: "Maximum age of usage days should not be less than zero. "}
var E204980 = Global_error{id: "204980", eType: EXPECTED_ERROR, message: "Subscriber number must be activated for less  than maximum age of usage to change to other promotion. "}
var E204981 = Global_error{id: "204981", eType: EXPECTED_ERROR, message: "Customers must have the same company codes. "}
var E204982 = Global_error{id: "204982", eType: EXPECTED_ERROR, message: "Time out from submission to OTA(TE1008). "}
var E204983 = Global_error{id: "204983", eType: EXPECTED_ERROR, message: "Time out from OTA response(TE1011). "}
var E204984 = Global_error{id: "204984", eType: EXPECTED_ERROR, message: "Time out from submission to SMSC (TE1007). "}
var E204985 = Global_error{id: "204985", eType: EXPECTED_ERROR, message: "Prepaid subscriber is allowed with new customer only. "}
var E204986 = Global_error{id: "204986", eType: EXPECTED_ERROR, message: "No consensus data found. "}
var E204987 = Global_error{id: "204987", eType: EXPECTED_ERROR, message: "Migration status is invalid. "}
var E204988 = Global_error{id: "204988", eType: EXPECTED_ERROR, message: "Customer in dtac TriNet migration process is not allowed. "}
var E204989 = Global_error{id: "204989", eType: EXPECTED_ERROR, message: "The porting number is in internal porting process. "}
var E204990 = Global_error{id: "204990", eType: EXPECTED_ERROR, message: "Invalid dtac flag. "}
var E204991 = Global_error{id: "204991", eType: EXPECTED_ERROR, message: "Invalid E-mail address format "}
var E204992 = Global_error{id: "204992", eType: EXPECTED_ERROR, message: "No Card Found in OTA DB (TE1001). "}
var E204993 = Global_error{id: "204993", eType: EXPECTED_ERROR, message: "Incomplete input data (TE1002). "}
var E204994 = Global_error{id: "204994", eType: EXPECTED_ERROR, message: "Invalid Service Name (TE1003). "}
var E204995 = Global_error{id: "204995", eType: EXPECTED_ERROR, message: "Authentication Failed (TE1004). "}
var E204996 = Global_error{id: "204996", eType: EXPECTED_ERROR, message: "RFM request to OTA failed (TE1005). "}
var E204997 = Global_error{id: "204997", eType: EXPECTED_ERROR, message: "Unexpected Error from OTA (TE1006). "}
var E204998 = Global_error{id: "204998", eType: EXPECTED_ERROR, message: "OTA request is expired (RCA-38, TE1009). "}
var E204999 = Global_error{id: "204999", eType: EXPECTED_ERROR, message: "SMSC request is expired (RCA-733-736). "}
var E205000 = Global_error{id: "205000", eType: EXPECTED_ERROR, message: "CBS Offer ID does not exist. "}
var E205001 = Global_error{id: "205001", eType: EXPECTED_ERROR, message: "CBS Offer ID already exists. "}
var E205002 = Global_error{id: "205002", eType: EXPECTED_ERROR, message: "Task code does not exist. "}
var E205003 = Global_error{id: "205003", eType: EXPECTED_ERROR, message: "Task code already exists. "}
var E205004 = Global_error{id: "205004", eType: EXPECTED_ERROR, message: "External Success does not exist. "}
var E205005 = Global_error{id: "205005", eType: EXPECTED_ERROR, message: "Offer of Main package is invalid. "}
var E205006 = Global_error{id: "205006", eType: EXPECTED_ERROR, message: "Offer of Additional package is invalid. "}
var E205007 = Global_error{id: "205007", eType: EXPECTED_ERROR, message: "CBS Offer ID does not exist. "}
var E205008 = Global_error{id: "205008", eType: EXPECTED_ERROR, message: "CBS Offer ID does not exist. "}
var E205009 = Global_error{id: "205009", eType: EXPECTED_ERROR, message: "CBS Offer ID already exists. "}
var E205010 = Global_error{id: "205010", eType: EXPECTED_ERROR, message: "Task code does not exist. "}
var E205011 = Global_error{id: "205011", eType: EXPECTED_ERROR, message: "Task code already exists. "}
var E205012 = Global_error{id: "205012", eType: EXPECTED_ERROR, message: "External Success does not exist. "}
var E205013 = Global_error{id: "205013", eType: EXPECTED_ERROR, message: "Offer of Main package is invalid. "}
var E205014 = Global_error{id: "205014", eType: EXPECTED_ERROR, message: "Offer of Additional package is invalid. "}
var E205015 = Global_error{id: "205015", eType: EXPECTED_ERROR, message: "CBS Offer ID does not exist. "}
var E205016 = Global_error{id: "205016", eType: EXPECTED_ERROR, message: "CBS Offer ID already exists. "}
var E205017 = Global_error{id: "205017", eType: EXPECTED_ERROR, message: "Task code does not exist. "}
var E205018 = Global_error{id: "205018", eType: EXPECTED_ERROR, message: "Task code already exists. "}
var E205019 = Global_error{id: "205019", eType: EXPECTED_ERROR, message: "External Success does not exist. "}
var E205020 = Global_error{id: "205020", eType: EXPECTED_ERROR, message: "Offer of Main package is invalid. "}
var E205021 = Global_error{id: "205021", eType: EXPECTED_ERROR, message: "Offer of Additional package is invalid. "}
var E205022 = Global_error{id: "205022", eType: EXPECTED_ERROR, message: "Subrsciber has migrated to CBS. "}
var E205023 = Global_error{id: "205023", eType: EXPECTED_ERROR, message: "Please refer to corresponding debt for credit adjustment. "}
var E205024 = Global_error{id: "205024", eType: EXPECTED_ERROR, message: "Sorry, request fails due to your remaining balance must be greater than 0 Baht "}
var E205025 = Global_error{id: "205025", eType: EXPECTED_ERROR, message: "Sorry, request fails due to you don't have enough validity to use service. "}
var E205026 = Global_error{id: "205026", eType: EXPECTED_ERROR, message: "Can not use this delay suspend reason code because it's related with another delay suspend reason code. "}
var E205027 = Global_error{id: "205027", eType: EXPECTED_ERROR, message: "Invalid parameter value. "}
var E205028 = Global_error{id: "205028", eType: EXPECTED_ERROR, message: "Incorrect password. "}
var E205029 = Global_error{id: "205029", eType: EXPECTED_ERROR, message: "The recharge failed. "}
var E205030 = Global_error{id: "205030", eType: EXPECTED_ERROR, message: "Maintaining the system... Try later. "}
var E205031 = Global_error{id: "205031", eType: EXPECTED_ERROR, message: "An error occurred in the recharge system. "}
var E205032 = Global_error{id: "205032", eType: EXPECTED_ERROR, message: "The recharge system is not connected. "}
var E205033 = Global_error{id: "205033", eType: EXPECTED_ERROR, message: "The recharge system has no response. "}
var E205034 = Global_error{id: "205034", eType: EXPECTED_ERROR, message: "Failed to query the SDP. "}
var E205035 = Global_error{id: "205035", eType: EXPECTED_ERROR, message: "Failed to query the encrypted file. "}
var E205036 = Global_error{id: "205036", eType: EXPECTED_ERROR, message: "Encryption failed. "}
var E205037 = Global_error{id: "205037", eType: EXPECTED_ERROR, message: "The recharge card has expired. "}
var E205038 = Global_error{id: "205038", eType: EXPECTED_ERROR, message: "The recharge card is invalid or recharge card does not exist. "}
var E205039 = Global_error{id: "205039", eType: EXPECTED_ERROR, message: "The recharge card is not found in the VC. "}
var E205040 = Global_error{id: "205040", eType: EXPECTED_ERROR, message: "The subscriber is in the Pool state. "}
var E205041 = Global_error{id: "205041", eType: EXPECTED_ERROR, message: "The recharge amount exceeds the maximum. "}
var E205042 = Global_error{id: "205042", eType: EXPECTED_ERROR, message: "The subscriber is not activated or is invalid. "}
var E205043 = Global_error{id: "205043", eType: EXPECTED_ERROR, message: "Invalid subscriber. "}
var E205044 = Global_error{id: "205044", eType: EXPECTED_ERROR, message: "The service information is lost. "}
var E205045 = Global_error{id: "205045", eType: EXPECTED_ERROR, message: "Incorrect subscriber type. "}
var E205046 = Global_error{id: "205046", eType: EXPECTED_ERROR, message: "The validity period exceeds the maximum. "}
var E205047 = Global_error{id: "205047", eType: EXPECTED_ERROR, message: "Failed to modify the subscriber information. "}
var E205048 = Global_error{id: "205048", eType: EXPECTED_ERROR, message: "Failed to modify the recharge card information. "}
var E205049 = Global_error{id: "205049", eType: EXPECTED_ERROR, message: "Recharge succeeded, but failed to query subscriber information after recharge. "}
var E205050 = Global_error{id: "205050", eType: EXPECTED_ERROR, message: "The subscriber is blacklisted because the number of recharge attempts exceeds the maximum. "}
var E205051 = Global_error{id: "205051", eType: EXPECTED_ERROR, message: "Incorrect recharge card face value. "}
var E205052 = Global_error{id: "205052", eType: EXPECTED_ERROR, message: "Recharge is not allowed because the subscriber is in the barring state. "}
var E205053 = Global_error{id: "205053", eType: EXPECTED_ERROR, message: "Recharge is not allowed because the subscriber is in the suspend state. "}
var E205054 = Global_error{id: "205054", eType: EXPECTED_ERROR, message: "The recharge card is already used. "}
var E205055 = Global_error{id: "205055", eType: EXPECTED_ERROR, message: "The recharge card is already locked. "}
var E205056 = Global_error{id: "205056", eType: EXPECTED_ERROR, message: "The recharge amount is less than the penalty. "}
var E205057 = Global_error{id: "205057", eType: EXPECTED_ERROR, message: "Incorrect length of the recharge card number. "}
var E205058 = Global_error{id: "205058", eType: EXPECTED_ERROR, message: "The recharge card is not activated. "}
var E205059 = Global_error{id: "205059", eType: EXPECTED_ERROR, message: "The recharge card type is not supported. "}
var E205060 = Global_error{id: "205060", eType: EXPECTED_ERROR, message: "The recharge amount is less than the sum of the loan amount and loan charge. "}
var E205061 = Global_error{id: "205061", eType: EXPECTED_ERROR, message: "The scratch card is lost. "}
var E205062 = Global_error{id: "205062", eType: EXPECTED_ERROR, message: "The scratch card is busy. "}
var E205063 = Global_error{id: "205063", eType: EXPECTED_ERROR, message: "The length of remarks cannot exceed 128 characters. "}
var E205064 = Global_error{id: "205064", eType: EXPECTED_ERROR, message: "The request source does not exist. "}
var E205065 = Global_error{id: "205065", eType: EXPECTED_ERROR, message: "Incorrect operator or department. "}
var E205066 = Global_error{id: "205066", eType: EXPECTED_ERROR, message: "The cash register has expired. "}
var E205067 = Global_error{id: "205067", eType: EXPECTED_ERROR, message: "The operator is not authorized. "}
var E205068 = Global_error{id: "205068", eType: EXPECTED_ERROR, message: "The operator does not exist. "}
var E205069 = Global_error{id: "205069", eType: EXPECTED_ERROR, message: "The refund deposit is insufficient, and the refund request is not approved. "}
var E205070 = Global_error{id: "205070", eType: EXPECTED_ERROR, message: "Failed to update the refund deposit. "}
var E205071 = Global_error{id: "205071", eType: EXPECTED_ERROR, message: "The account balance is insufficient, and the refund is failed. "}
var E205072 = Global_error{id: "205072", eType: EXPECTED_ERROR, message: "Invalid input parameter. "}
var E205073 = Global_error{id: "205073", eType: EXPECTED_ERROR, message: "The account has been written off, and other service operations cannot be performed on it. "}
var E205074 = Global_error{id: "205074", eType: EXPECTED_ERROR, message: "The card type does not exist. "}
var E205075 = Global_error{id: "205075", eType: EXPECTED_ERROR, message: "The amount paid by a subscriber must be greater than or equal to the outstanding business fee. "}
var E205076 = Global_error{id: "205076", eType: EXPECTED_ERROR, message: "The amount paid must be equal to the outstanding business fee. "}
var E205077 = Global_error{id: "205077", eType: EXPECTED_ERROR, message: "The adjusted amount is greater than the amount of a consumption record in the bill details. "}
var E205078 = Global_error{id: "205078", eType: EXPECTED_ERROR, message: "The cash that you store into the safe is exceed or equal to the total amount. "}
var E205079 = Global_error{id: "205079", eType: EXPECTED_ERROR, message: "The log ID cannot be empty. "}
var E205080 = Global_error{id: "205080", eType: EXPECTED_ERROR, message: "No transaction log found. "}
var E205081 = Global_error{id: "205081", eType: EXPECTED_ERROR, message: "Verify that the payment corresponding to the log ID has not been transferred or refunded. "}
var E205082 = Global_error{id: "205082", eType: EXPECTED_ERROR, message: "No transaction log is found or the payment has been voided. "}
var E205083 = Global_error{id: "205083", eType: EXPECTED_ERROR, message: "No payment record corresponds to the transaction. "}
var E205084 = Global_error{id: "205084", eType: EXPECTED_ERROR, message: "The cash register is not opened. "}
var E205085 = Global_error{id: "205085", eType: EXPECTED_ERROR, message: "Failed to query customer-account-subscriber information by MSISDN. "}
var E205086 = Global_error{id: "205086", eType: EXPECTED_ERROR, message: "Failed to query customer-account-subscriber information by customer code. "}
var E205087 = Global_error{id: "205087", eType: EXPECTED_ERROR, message: "Failed to query customer-account-subscriber information by account code. "}
var E205088 = Global_error{id: "205088", eType: EXPECTED_ERROR, message: "Failed to write off the debt because the account has advance amt. or deposit amt.. "}
var E205089 = Global_error{id: "205089", eType: EXPECTED_ERROR, message: "The write-off operation cannot be performed on prepaid subscribers. "}
var E205090 = Global_error{id: "205090", eType: EXPECTED_ERROR, message: "The department does not exist. "}
var E205091 = Global_error{id: "205091", eType: EXPECTED_ERROR, message: "The unapply operation cannot be performed on the voided records. "}
var E205092 = Global_error{id: "205092", eType: EXPECTED_ERROR, message: "The transfer type is not supported. "}
var E205093 = Global_error{id: "205093", eType: EXPECTED_ERROR, message: "Invalid transfer amount. "}
var E205094 = Global_error{id: "205094", eType: EXPECTED_ERROR, message: "Insufficient transferable balance of the transferor. "}
var E205095 = Global_error{id: "205095", eType: EXPECTED_ERROR, message: "The transfer amount is greater than the each single maximum transferable amount specified in the system. "}
var E205096 = Global_error{id: "205096", eType: EXPECTED_ERROR, message: "Parameters in the payment request are left empty. "}
var E205097 = Global_error{id: "205097", eType: EXPECTED_ERROR, message: "CreditType is not set for the current transaction type. "}
var E205098 = Global_error{id: "205098", eType: EXPECTED_ERROR, message: "The account ID or subscriber number is left empty. "}
var E205099 = Global_error{id: "205099", eType: EXPECTED_ERROR, message: "The payment type and payment method fail to be verified. "}
var E205100 = Global_error{id: "205100", eType: EXPECTED_ERROR, message: "The payment interface does not support prepaid subscribers. "}
var E205101 = Global_error{id: "205101", eType: EXPECTED_ERROR, message: "The account ID does not exist. "}
var E205102 = Global_error{id: "205102", eType: EXPECTED_ERROR, message: "The subscriber number does not exist. "}
var E205103 = Global_error{id: "205103", eType: EXPECTED_ERROR, message: "The adjustment request is empty. "}
var E205104 = Global_error{id: "205104", eType: EXPECTED_ERROR, message: "The adjustment interface does not support prepaid subscribers. "}
var E205105 = Global_error{id: "205105", eType: EXPECTED_ERROR, message: "The tax code and tax amount cannot be empty. "}
var E205106 = Global_error{id: "205106", eType: EXPECTED_ERROR, message: "The acctId field does not exist or is empty. "}
var E205107 = Global_error{id: "205107", eType: EXPECTED_ERROR, message: "The operation type must be QueryOS. "}
var E205108 = Global_error{id: "205108", eType: EXPECTED_ERROR, message: "The due_date value cannot be smaller than 1. "}
var E205109 = Global_error{id: "205109", eType: EXPECTED_ERROR, message: "The refund audit is rejected or canceled. "}
var E205110 = Global_error{id: "205110", eType: EXPECTED_ERROR, message: "Audit does not pass. "}
var E205111 = Global_error{id: "205111", eType: EXPECTED_ERROR, message: "Some of the refund requests are not approved. "}
var E205112 = Global_error{id: "205112", eType: EXPECTED_ERROR, message: "Lock time-out "}
var E205113 = Global_error{id: "205113", eType: EXPECTED_ERROR, message: "Failed to query the refund deposit. "}
var E205114 = Global_error{id: "205114", eType: EXPECTED_ERROR, message: "The subscriber does not have any outstanding amount. "}
var E205115 = Global_error{id: "205115", eType: EXPECTED_ERROR, message: "Incorrect pagination parameter settings. "}
var E205116 = Global_error{id: "205116", eType: EXPECTED_ERROR, message: "An MSISDN is required for adjusting free resources. "}
var E205117 = Global_error{id: "205117", eType: EXPECTED_ERROR, message: "The outstanding amount is smaller than the sum of the tax amount and discount amount. "}
var E205118 = Global_error{id: "205118", eType: EXPECTED_ERROR, message: "The ForfeitType value must be 0. "}
var E205119 = Global_error{id: "205119", eType: EXPECTED_ERROR, message: "The Src value must be 1. "}
var E205120 = Global_error{id: "205120", eType: EXPECTED_ERROR, message: "The length of remarks must not exceed 32 characters. "}
var E205121 = Global_error{id: "205121", eType: EXPECTED_ERROR, message: "Neither SeqId nor Amount can be left empty. "}
var E205122 = Global_error{id: "205122", eType: EXPECTED_ERROR, message: "The SeqId value must be unique. "}
var E205123 = Global_error{id: "205123", eType: EXPECTED_ERROR, message: "The sum of amounts in seqList must equal the amount value in forfeitList. "}
var E205124 = Global_error{id: "205124", eType: EXPECTED_ERROR, message: "The value of AMOUNT in the batch file must be larger than 0. "}
var E205125 = Global_error{id: "205125", eType: EXPECTED_ERROR, message: "The reason code is incorrect. "}
var E205126 = Global_error{id: "205126", eType: EXPECTED_ERROR, message: "The account does not owe fees and the write-off operation cannot be performed on it. "}
var E205127 = Global_error{id: "205127", eType: EXPECTED_ERROR, message: "The write-off amount must be equal to the outstanding amount. "}
var E205128 = Global_error{id: "205128", eType: EXPECTED_ERROR, message: "The PaymentMethod value does not exist. "}
var E205129 = Global_error{id: "205129", eType: EXPECTED_ERROR, message: "In the request, invoiceNo cannot be empty. "}
var E205130 = Global_error{id: "205130", eType: EXPECTED_ERROR, message: "The account ID, account code, and MSISDN cannot be left empty at the same time in the WebService message. "}
var E205131 = Global_error{id: "205131", eType: EXPECTED_ERROR, message: "Incorrect time format. "}
var E205132 = Global_error{id: "205132", eType: EXPECTED_ERROR, message: "Failed to query prepaid subscribers' balances. "}
var E205133 = Global_error{id: "205133", eType: EXPECTED_ERROR, message: "Login times out "}
var E205134 = Global_error{id: "205134", eType: EXPECTED_ERROR, message: "Adjustment cannot be rolled back. "}
var E205135 = Global_error{id: "205135", eType: EXPECTED_ERROR, message: "The invoice ID must be a number. "}
var E205136 = Global_error{id: "205136", eType: EXPECTED_ERROR, message: "Failed to import the batch file. "}
var E205137 = Global_error{id: "205137", eType: EXPECTED_ERROR, message: "No transaction log corresponds to the log ID. "}
var E205138 = Global_error{id: "205138", eType: EXPECTED_ERROR, message: "The voided amount must be equal to the payment amount. "}
var E205139 = Global_error{id: "205139", eType: EXPECTED_ERROR, message: "The account code is empty or does not exist. "}
var E205140 = Global_error{id: "205140", eType: EXPECTED_ERROR, message: "Failed to parse the file. "}
var E205141 = Global_error{id: "205141", eType: EXPECTED_ERROR, message: "Operations performed on prepaid subscribers cannot be rolled back. "}
var E205142 = Global_error{id: "205142", eType: EXPECTED_ERROR, message: "The amount must be a positive integer. "}
var E205143 = Global_error{id: "205143", eType: EXPECTED_ERROR, message: "Failed to upload the batch file to the temporary directory. "}
var E205144 = Global_error{id: "205144", eType: EXPECTED_ERROR, message: "Incorrect batch file format. "}
var E205145 = Global_error{id: "205145", eType: EXPECTED_ERROR, message: "The batch file exists. "}
var E205146 = Global_error{id: "205146", eType: EXPECTED_ERROR, message: "The batch file has been processed. "}
var E205147 = Global_error{id: "205147", eType: EXPECTED_ERROR, message: "The size of the batch file exceeds the maximum. "}
var E205148 = Global_error{id: "205148", eType: EXPECTED_ERROR, message: "All settled amounts at the invoice details level must be greater than 0. "}
var E205149 = Global_error{id: "205149", eType: EXPECTED_ERROR, message: "The adjustment direction does not exist. "}
var E205150 = Global_error{id: "205150", eType: EXPECTED_ERROR, message: "Incorrect bill cycle ID. "}
var E205151 = Global_error{id: "205151", eType: EXPECTED_ERROR, message: "The expiration date must be later than the current date and earlier than or equal to the default expiration date. "}
var E205152 = Global_error{id: "205152", eType: EXPECTED_ERROR, message: "Failed to query the balance information of the account for which a refund request is initiated. "}
var E205153 = Global_error{id: "205153", eType: EXPECTED_ERROR, message: "No cash register corresponds to the current operator. "}
var E205154 = Global_error{id: "205154", eType: EXPECTED_ERROR, message: "The account ID and account code cannot be empty at the same time. "}
var E205155 = Global_error{id: "205155", eType: EXPECTED_ERROR, message: "The account code does not match the subscriber number in the batch request file. "}
var E205156 = Global_error{id: "205156", eType: EXPECTED_ERROR, message: "The busiNo or acctId field is left empty. "}
var E205157 = Global_error{id: "205157", eType: EXPECTED_ERROR, message: "The balance type does not exist. "}
var E205158 = Global_error{id: "205158", eType: EXPECTED_ERROR, message: "The subscriber number is incorrect or empty. "}
var E205159 = Global_error{id: "205159", eType: EXPECTED_ERROR, message: "The payment amount must be equal to or greater than the sum of the owed business fee and outstanding amount. "}
var E205160 = Global_error{id: "205160", eType: EXPECTED_ERROR, message: "Incorrect feeType value. "}
var E205161 = Global_error{id: "205161", eType: EXPECTED_ERROR, message: "Incorrect refundType value. "}
var E205162 = Global_error{id: "205162", eType: EXPECTED_ERROR, message: "Incorrect bankBranchNumber value. "}
var E205163 = Global_error{id: "205163", eType: EXPECTED_ERROR, message: "Incorrect status. "}
var E205164 = Global_error{id: "205164", eType: EXPECTED_ERROR, message: "Failed to approve the request. "}
var E205165 = Global_error{id: "205165", eType: EXPECTED_ERROR, message: "Amounts cannot be paid for prepaid subscribers in batches. "}
var E205166 = Global_error{id: "205166", eType: EXPECTED_ERROR, message: "The payment method exists. "}
var E205167 = Global_error{id: "205167", eType: EXPECTED_ERROR, message: "The reason code exists. "}
var E205168 = Global_error{id: "205168", eType: EXPECTED_ERROR, message: "The currency type exists. "}
var E205169 = Global_error{id: "205169", eType: EXPECTED_ERROR, message: "The invoiceNo does not exist. "}
var E205170 = Global_error{id: "205170", eType: EXPECTED_ERROR, message: "The file or directory does not exist. "}
var E205171 = Global_error{id: "205171", eType: EXPECTED_ERROR, message: "Either Startdate or Enddate is empty. "}
var E205172 = Global_error{id: "205172", eType: EXPECTED_ERROR, message: "Incorrect AdjustFlag value. "}
var E205173 = Global_error{id: "205173", eType: EXPECTED_ERROR, message: "Fees cannot be refunded for prepaid subscribers. "}
var E205174 = Global_error{id: "205174", eType: EXPECTED_ERROR, message: "Incorrect src_trans_id value. "}
var E205175 = Global_error{id: "205175", eType: EXPECTED_ERROR, message: "Incorrect parameter value in the request. "}
var E205176 = Global_error{id: "205176", eType: EXPECTED_ERROR, message: "Invalid BankAcctType value. "}
var E205177 = Global_error{id: "205177", eType: EXPECTED_ERROR, message: "Invalid BankAcctNo value. "}
var E205178 = Global_error{id: "205178", eType: EXPECTED_ERROR, message: "Invalid CreditCardNo value. "}
var E205179 = Global_error{id: "205179", eType: EXPECTED_ERROR, message: "The refund amount is greater than the balance in the cash register. "}
var E205180 = Global_error{id: "205180", eType: EXPECTED_ERROR, message: "Batch cash recharge is unavailable to postpaid subscribers. "}
var E205181 = Global_error{id: "205181", eType: EXPECTED_ERROR, message: "The RequestFrom value in the request header is invalid. "}
var E205182 = Global_error{id: "205182", eType: EXPECTED_ERROR, message: "This interface cannot be used to query prepaid subscribers' account balances. "}
var E205183 = Global_error{id: "205183", eType: EXPECTED_ERROR, message: "No data is found in the ar_log_trx_detail table. "}
var E205184 = Global_error{id: "205184", eType: EXPECTED_ERROR, message: "No data is found in the ar_log_trx table. "}
var E205185 = Global_error{id: "205185", eType: EXPECTED_ERROR, message: "No data corresponding to the tenant ID is found in the journal segment define table. "}
var E205186 = Global_error{id: "205186", eType: EXPECTED_ERROR, message: "The value of is_gl_account is empty in the jnl_segment table. "}
var E205187 = Global_error{id: "205187", eType: EXPECTED_ERROR, message: "The value of is_gl_account is incorrect in the jnl_segment table. "}
var E205188 = Global_error{id: "205188", eType: EXPECTED_ERROR, message: "The value of SPID is blank for the current login user. "}
var E205189 = Global_error{id: "205189", eType: EXPECTED_ERROR, message: "The log ID does not exist. "}
var E205190 = Global_error{id: "205190", eType: EXPECTED_ERROR, message: "The transaction type is blank. "}
var E205191 = Global_error{id: "205191", eType: EXPECTED_ERROR, message: "The top-level directory of the financial activities corresponding to the transaction type is not found. "}
var E205192 = Global_error{id: "205192", eType: EXPECTED_ERROR, message: "No financial activity matches transaction data. "}
var E205193 = Global_error{id: "205193", eType: EXPECTED_ERROR, message: "Multiple jnl_summary records with the same value of fin_glacode are found in the same batch of scheduled tasks. "}
var E205194 = Global_error{id: "205194", eType: EXPECTED_ERROR, message: "The GL post task failed to generate a file. "}
var E205195 = Global_error{id: "205195", eType: EXPECTED_ERROR, message: "The parameters of the GL post task are set incorrectly. "}
var E205196 = Global_error{id: "205196", eType: EXPECTED_ERROR, message: "Failed to obtain GL code for account settlement in the CR direction. "}
var E205197 = Global_error{id: "205197", eType: EXPECTED_ERROR, message: "Failed to query the journal table. "}
var E205198 = Global_error{id: "205198", eType: EXPECTED_ERROR, message: "Failed to query the journal summary table. "}
var E205199 = Global_error{id: "205199", eType: EXPECTED_ERROR, message: "The account balance is insufficient. "}
var E205200 = Global_error{id: "205200", eType: EXPECTED_ERROR, message: "Only CR and DR adjustments are available to prepaid subscribers. "}
var E205201 = Global_error{id: "205201", eType: EXPECTED_ERROR, message: "The subscriber does not exist. "}
var E205202 = Global_error{id: "205202", eType: EXPECTED_ERROR, message: "Free resources cannot be adjusted for groups. "}
var E205203 = Global_error{id: "205203", eType: EXPECTED_ERROR, message: "The account does not exist. "}
var E205204 = Global_error{id: "205204", eType: EXPECTED_ERROR, message: "The approval process or service handling process failed. "}
var E205205 = Global_error{id: "205205", eType: EXPECTED_ERROR, message: "Insufficient balance in the cash register. "}
var E205206 = Global_error{id: "205206", eType: EXPECTED_ERROR, message: "The subscriber has been deregistered. "}
var E205207 = Global_error{id: "205207", eType: EXPECTED_ERROR, message: "The status of the refund request shows that the request is not approved. "}
var E205208 = Global_error{id: "205208", eType: EXPECTED_ERROR, message: "The service handling process failed. "}
var E205209 = Global_error{id: "205209", eType: EXPECTED_ERROR, message: "The transferee account has been written off. "}
var E205210 = Global_error{id: "205210", eType: EXPECTED_ERROR, message: "The format of TotalRowNum,BeginRowNum and FetchRowNum is incorrect. "}
var E205211 = Global_error{id: "205211", eType: EXPECTED_ERROR, message: "The value of the amount exceeds the maximum. "}
var E205212 = Global_error{id: "205212", eType: EXPECTED_ERROR, message: "The outstanding amount is changed to a value smaller than the settlement amount. "}
var E205213 = Global_error{id: "205213", eType: EXPECTED_ERROR, message: "Failed to resume services for the subscriber. "}
var E205214 = Global_error{id: "205214", eType: EXPECTED_ERROR, message: "Failed to move the file. "}
var E205215 = Global_error{id: "205215", eType: EXPECTED_ERROR, message: "The value of payControlFlag is incorrect. "}
var E205216 = Global_error{id: "205216", eType: EXPECTED_ERROR, message: "Failed to move data. "}
var E205217 = Global_error{id: "205217", eType: EXPECTED_ERROR, message: "Failed to invoke the recharge interface. "}
var E205218 = Global_error{id: "205218", eType: EXPECTED_ERROR, message: "The adjusted amount cannot be greater than the current account balance if the value of Adjust Direction is DR. "}
var E205219 = Global_error{id: "205219", eType: EXPECTED_ERROR, message: "Failed to send a WebService message. "}
var E205220 = Global_error{id: "205220", eType: EXPECTED_ERROR, message: "The account does not match the sub_id or MSISDN. "}
var E205221 = Global_error{id: "205221", eType: EXPECTED_ERROR, message: "The current task cannot be executed repeatedly. "}
var E205222 = Global_error{id: "205222", eType: EXPECTED_ERROR, message: "No available AR node. "}
var E205223 = Global_error{id: "205223", eType: EXPECTED_ERROR, message: "Incorrect record status. "}
var E205224 = Global_error{id: "205224", eType: EXPECTED_ERROR, message: "No file found. "}
var E205225 = Global_error{id: "205225", eType: EXPECTED_ERROR, message: "No account information found based on acctid and msisdn. "}
var E205226 = Global_error{id: "205226", eType: EXPECTED_ERROR, message: "Failed to perform write-off because the deposit under account is not paid. "}
var E205227 = Global_error{id: "205227", eType: EXPECTED_ERROR, message: "Failed to perform write-off because the account has a dispute invoice. "}
var E205228 = Global_error{id: "205228", eType: EXPECTED_ERROR, message: "Failed to perform write-off because the account has an autopay amount. "}
var E205229 = Global_error{id: "205229", eType: EXPECTED_ERROR, message: "The record is not in the initial state and cannot be approved. "}
var E205230 = Global_error{id: "205230", eType: EXPECTED_ERROR, message: "The approved amount is greater than the requested amount. "}
var E205231 = Global_error{id: "205231", eType: EXPECTED_ERROR, message: "The disputed amount cannot be greater than the invoice amount minus the autopay amount. "}
var E205232 = Global_error{id: "205232", eType: EXPECTED_ERROR, message: "Incorrect dispute level. "}
var E205233 = Global_error{id: "205233", eType: EXPECTED_ERROR, message: "The reversal operation is not allowed due to incorrect record status. "}
var E205234 = Global_error{id: "205234", eType: EXPECTED_ERROR, message: "The invoice has been disputed and cannot be disputed again. "}
var E205235 = Global_error{id: "205235", eType: EXPECTED_ERROR, message: "No dispute transaction found. "}
var E205236 = Global_error{id: "205236", eType: EXPECTED_ERROR, message: "Failed to parse the XML file. "}
var E205237 = Global_error{id: "205237", eType: EXPECTED_ERROR, message: "The late fee calculation module is configured incorrectly. "}
var E205238 = Global_error{id: "205238", eType: EXPECTED_ERROR, message: "No Java class found. "}
var E205239 = Global_error{id: "205239", eType: EXPECTED_ERROR, message: "Failed to invoke the action. "}
var E205240 = Global_error{id: "205240", eType: EXPECTED_ERROR, message: "The maximum length of the autopay request file content is configured incorrectly. "}
var E205241 = Global_error{id: "205241", eType: EXPECTED_ERROR, message: "The minimum autopay amount is configured incorrectly. "}
var E205242 = Global_error{id: "205242", eType: EXPECTED_ERROR, message: "No outstanding amount found in the autopay account. "}
var E205243 = Global_error{id: "205243", eType: EXPECTED_ERROR, message: "The autopay request amount is smaller than the minimum autopay amount. "}
var E205244 = Global_error{id: "205244", eType: EXPECTED_ERROR, message: "The autopay level is configured incorrectly. "}
var E205245 = Global_error{id: "205245", eType: EXPECTED_ERROR, message: "No invoice information found based on invoiceNo. "}
var E205246 = Global_error{id: "205246", eType: EXPECTED_ERROR, message: "Invalid adjustType value. "}
var E205247 = Global_error{id: "205247", eType: EXPECTED_ERROR, message: "Invalid CRDR value. "}
var E205248 = Global_error{id: "205248", eType: EXPECTED_ERROR, message: "The adjustFlag and adjustType parameters are empty at the same time. "}
var E205249 = Global_error{id: "205249", eType: EXPECTED_ERROR, message: "Invalid autoSettle value. "}
var E205250 = Global_error{id: "205250", eType: EXPECTED_ERROR, message: "The credit card type already exists. "}
var E205251 = Global_error{id: "205251", eType: EXPECTED_ERROR, message: "The adjustReason and reasonCode parameters are empty at the same time. "}
var E205252 = Global_error{id: "205252", eType: EXPECTED_ERROR, message: "The adjustment amount cannot be greater than the invoice outstanding amount. "}
var E205253 = Global_error{id: "205253", eType: EXPECTED_ERROR, message: "A valid appended deposit request is found during deposit request rollback. "}
var E205254 = Global_error{id: "205254", eType: EXPECTED_ERROR, message: "The deposit involved in the original deposit request is not generated or the deposit invoice is not settled when a sub-deposit request is appended. "}
var E205255 = Global_error{id: "205255", eType: EXPECTED_ERROR, message: "During deposit release, the invoice generated for the associated deposit request must be settled. "}
var E205256 = Global_error{id: "205256", eType: EXPECTED_ERROR, message: "The deposit type already exists. "}
var E205257 = Global_error{id: "205257", eType: EXPECTED_ERROR, message: "You cannot append a deposit to the appended deposit request. "}
var E205258 = Global_error{id: "205258", eType: EXPECTED_ERROR, message: "This invoice does not need to be settled. "}
var E205259 = Global_error{id: "205259", eType: EXPECTED_ERROR, message: "The CR2Billing adjustment is not supported. "}
var E205260 = Global_error{id: "205260", eType: EXPECTED_ERROR, message: "The acctid and msisdn cannot be empty at the same time. "}
var E205261 = Global_error{id: "205261", eType: EXPECTED_ERROR, message: "Autopay is being executed on the payment, and the payment cannot be reversed. "}
var E205262 = Global_error{id: "205262", eType: EXPECTED_ERROR, message: "No bank response file corresponds to the autopay request file. "}
var E205263 = Global_error{id: "205263", eType: EXPECTED_ERROR, message: "Incorrect format of the bank response file. "}
var E205264 = Global_error{id: "205264", eType: EXPECTED_ERROR, message: "No autopay request file corresponds to the bank response file. "}
var E205265 = Global_error{id: "205265", eType: EXPECTED_ERROR, message: "Max. Operation Quota has been configured for the same operator and same transaction type. "}
var E205266 = Global_error{id: "205266", eType: EXPECTED_ERROR, message: "The operator information does not exist in the system. "}
var E205267 = Global_error{id: "205267", eType: EXPECTED_ERROR, message: "The outstanding business fee cannot be adjusted. "}
var E205268 = Global_error{id: "205268", eType: EXPECTED_ERROR, message: "Max. Operation Quota cannot be negative. "}
var E205269 = Global_error{id: "205269", eType: EXPECTED_ERROR, message: "The write-off amount is greater than the operation quota. "}
var E205270 = Global_error{id: "205270", eType: EXPECTED_ERROR, message: "The adjusted amount is greater than the operation quota. "}
var E205271 = Global_error{id: "205271", eType: EXPECTED_ERROR, message: "The required Credit data is not found during the reversal. "}
var E205272 = Global_error{id: "205272", eType: EXPECTED_ERROR, message: "The audited amount must be larger than 0. "}
var E205273 = Global_error{id: "205273", eType: EXPECTED_ERROR, message: "Failed to find the no-owner account corresponding to the autopay. "}
var E205274 = Global_error{id: "205274", eType: EXPECTED_ERROR, message: "The unallocated payment has been used and cannot be transferred. "}
var E205275 = Global_error{id: "205275", eType: EXPECTED_ERROR, message: "No prepayment record corresponds to the no-owner account. "}
var E205276 = Global_error{id: "205276", eType: EXPECTED_ERROR, message: "The autopay has been cancelled. "}
var E205277 = Global_error{id: "205277", eType: EXPECTED_ERROR, message: "Neither the dispute amount nor the invoice amount cannot be empty. "}
var E205278 = Global_error{id: "205278", eType: EXPECTED_ERROR, message: "The record is not in the initial state and cannot be rejected. "}
var E205279 = Global_error{id: "205279", eType: EXPECTED_ERROR, message: "The record is not in the initial state and cannot be cancelled. "}
var E205280 = Global_error{id: "205280", eType: EXPECTED_ERROR, message: "The record is not in the approved state and cannot be executed. "}
var E205281 = Global_error{id: "205281", eType: EXPECTED_ERROR, message: "The status of the request has changed, and the operation failed. "}
var E205282 = Global_error{id: "205282", eType: EXPECTED_ERROR, message: "The outstanding amount has changed, and the operation failed. "}
var E205283 = Global_error{id: "205283", eType: EXPECTED_ERROR, message: "The credit card type which is same to the payment method id cannot be added. "}
var E205284 = Global_error{id: "205284", eType: EXPECTED_ERROR, message: "The total late fee is changed to a value smaller than settlement amount. "}
var E205285 = Global_error{id: "205285", eType: EXPECTED_ERROR, message: "The current task is in failed status and cannot be executed. "}
var E205286 = Global_error{id: "205286", eType: EXPECTED_ERROR, message: "The order task execution retry times out. "}
var E205287 = Global_error{id: "205287", eType: EXPECTED_ERROR, message: "The task execution failed due to system error. Please retry after the system error is rectified. "}
var E205288 = Global_error{id: "205288", eType: EXPECTED_ERROR, message: "The message is sent successfully and a callback is expected. "}
var E205289 = Global_error{id: "205289", eType: EXPECTED_ERROR, message: "Duplicate sequence number. "}
var E205290 = Global_error{id: "205290", eType: EXPECTED_ERROR, message: "The service is being processed. Try later. "}
var E205291 = Global_error{id: "205291", eType: EXPECTED_ERROR, message: "Failed to invoke the CHG payment bonus interface after the postpaid subscriber makes a payment. "}
var E205292 = Global_error{id: "205292", eType: EXPECTED_ERROR, message: "The PaidFlag value is incorrect. "}
var E205293 = Global_error{id: "205293", eType: EXPECTED_ERROR, message: "The AcctId does not match AcctCode. "}
var E205294 = Global_error{id: "205294", eType: EXPECTED_ERROR, message: "Failed to synchronize AR transaction information to DC. "}
var E205295 = Global_error{id: "205295", eType: EXPECTED_ERROR, message: "The account has been automatically settled and does not have any outstanding amount. "}
var E205296 = Global_error{id: "205296", eType: EXPECTED_ERROR, message: "The total amount in installments value is not equal to the sum of each installment. Solution: Correct data in the installment request. "}
var E205297 = Global_error{id: "205297", eType: EXPECTED_ERROR, message: "The installment bill cannot be disputed. "}
var E205298 = Global_error{id: "205298", eType: EXPECTED_ERROR, message: "Invalid date. "}
var E205299 = Global_error{id: "205299", eType: EXPECTED_ERROR, message: "In the installment request, the amount that the subscriber promises to pay in installments is not equal to the outstanding amount of a bill. Solution: Correct data in the installment request. "}
var E205300 = Global_error{id: "205300", eType: EXPECTED_ERROR, message: "Some installments under the account have not been paid off and therefore the account cannot be written off. "}
var E205301 = Global_error{id: "205301", eType: EXPECTED_ERROR, message: "Account settlement executed before installment payment cannot be rolled back. "}
var E205302 = Global_error{id: "205302", eType: EXPECTED_ERROR, message: "The minimum Start Age exists. "}
var E205303 = Global_error{id: "205303", eType: EXPECTED_ERROR, message: "The maximum End Age exists. "}
var E205304 = Global_error{id: "205304", eType: EXPECTED_ERROR, message: "The Start Age must be smaller than the End Age. "}
var E205305 = Global_error{id: "205305", eType: EXPECTED_ERROR, message: "The Start Age or End Age must be both a numeric string. "}
var E205306 = Global_error{id: "205306", eType: EXPECTED_ERROR, message: "Bucket cannot be empty. "}
var E205307 = Global_error{id: "205307", eType: EXPECTED_ERROR, message: "The Start Age must be a positive integer. "}
var E205308 = Global_error{id: "205308", eType: EXPECTED_ERROR, message: "The End Age must be a positive integer. "}
var E205309 = Global_error{id: "205309", eType: EXPECTED_ERROR, message: "The bucket cannot exceed 64 digits. "}
var E205310 = Global_error{id: "205310", eType: EXPECTED_ERROR, message: "The operator name does not match the department name. "}
var E205311 = Global_error{id: "205311", eType: EXPECTED_ERROR, message: "Invalid PAtype value. "}
var E205312 = Global_error{id: "205312", eType: EXPECTED_ERROR, message: "Incorrect request type. "}
var E205313 = Global_error{id: "205313", eType: EXPECTED_ERROR, message: "The subscriber has applied for the installment service and cannot apply for it again. Solution: The transaction will be automatically canceled. "}
var E205314 = Global_error{id: "205314", eType: EXPECTED_ERROR, message: "The installment service has been canceled and cannot be canceled again. Solution: The transaction will be automatically canceled. "}
var E205315 = Global_error{id: "205315", eType: EXPECTED_ERROR, message: "The installment record to be canceled does not exist under the account. "}
var E205316 = Global_error{id: "205316", eType: EXPECTED_ERROR, message: "AR fails to use the SHR protocol to invoke the C++ service of CBM. "}
var E205317 = Global_error{id: "205317", eType: EXPECTED_ERROR, message: "The bank response file has been processed. "}
var E205318 = Global_error{id: "205318", eType: EXPECTED_ERROR, message: "Failed to query customer-account-subscriber information by the group number. "}
var E205319 = Global_error{id: "205319", eType: EXPECTED_ERROR, message: "The amount in the cash register has changed, and the cash register is closed without re-printing cash register information. "}
var E205320 = Global_error{id: "205320", eType: EXPECTED_ERROR, message: "The number of lines in the batch file exceeds the maximum. "}
var E205321 = Global_error{id: "205321", eType: EXPECTED_ERROR, message: "Subscribers who have no autopay channel cannot apply for autopaid installments. Solution: Select another payment mode. "}
var E205322 = Global_error{id: "205322", eType: EXPECTED_ERROR, message: "Tenant does not match the operator. "}
var E205323 = Global_error{id: "205323", eType: EXPECTED_ERROR, message: "Failed to upload the batch file. "}
var E205324 = Global_error{id: "205324", eType: EXPECTED_ERROR, message: "The batch file contains invalid data. "}
var E205325 = Global_error{id: "205325", eType: EXPECTED_ERROR, message: "The external transaction ID does not exist. "}
var E205326 = Global_error{id: "205326", eType: EXPECTED_ERROR, message: "The adjusted amount cannot be larger than the invoice amount minus the pending amount. "}
var E205327 = Global_error{id: "205327", eType: EXPECTED_ERROR, message: "The installment in each invoice in the installment request is different from the value of outstanding amount minus the pending amount.  Solution: Click Back to go to the previous page and re-apply for installment. "}
var E205328 = Global_error{id: "205328", eType: EXPECTED_ERROR, message: "Unallocated payment cannot be voided. "}
var E205329 = Global_error{id: "205329", eType: EXPECTED_ERROR, message: "The PTP date of installments in non-cash mode cannot be a holiday. Solution: Enter another payment date. "}
var E205330 = Global_error{id: "205330", eType: EXPECTED_ERROR, message: "The MSISDN in the batch payment reversal file does not match the external transaction ID. "}
var E205331 = Global_error{id: "205331", eType: EXPECTED_ERROR, message: "The payment corresponding to the log ID has been reversed. "}
var E205332 = Global_error{id: "205332", eType: EXPECTED_ERROR, message: "The account in the batch payment reversal file does not match the external transaction ID. "}
var E205333 = Global_error{id: "205333", eType: EXPECTED_ERROR, message: "Customer-account-subscriber information is incorrect, and the bill cannot be found. "}
var E205334 = Global_error{id: "205334", eType: EXPECTED_ERROR, message: "Failed to query subscriber information based on the external transaction ID in the batch payment reversal file. "}
var E205335 = Global_error{id: "205335", eType: EXPECTED_ERROR, message: "SCP does not process service handling requested by special subscribers. "}
var E205336 = Global_error{id: "205336", eType: EXPECTED_ERROR, message: "Failed to obtain the RCOMM response. "}
var E205337 = Global_error{id: "205337", eType: EXPECTED_ERROR, message: "The deposit type does not exist. "}
var E205338 = Global_error{id: "205338", eType: EXPECTED_ERROR, message: "The payment method is incorrect in the batch deposit payment file. "}
var E205339 = Global_error{id: "205339", eType: EXPECTED_ERROR, message: "Card information cannot be empty when the deposit is paid by credit card, debit card, or cheque. "}
var E205340 = Global_error{id: "205340", eType: EXPECTED_ERROR, message: "Prepaid subscribers cannot pay deposits. "}
var E205341 = Global_error{id: "205341", eType: EXPECTED_ERROR, message: "The payment transaction has been reversed. "}
var E205342 = Global_error{id: "205342", eType: EXPECTED_ERROR, message: "No file is found. "}
var E205343 = Global_error{id: "205343", eType: EXPECTED_ERROR, message: "The number of transfer times has exceeded the daily maximum number of transfer times. "}
var E205344 = Global_error{id: "205344", eType: EXPECTED_ERROR, message: "The system does not allow the transfer from a prepaid account to a postpaid account. "}
var E205345 = Global_error{id: "205345", eType: EXPECTED_ERROR, message: "Failed to encrypt the text or decrypt the ciphertext. "}
var E205346 = Global_error{id: "205346", eType: EXPECTED_ERROR, message: "The subscriber's available credit is insufficient and payment reversal failed. "}
var E205347 = Global_error{id: "205347", eType: EXPECTED_ERROR, message: "Failed to query the customer-account-subscriber information of the transferor party. "}
var E205348 = Global_error{id: "205348", eType: EXPECTED_ERROR, message: "Failed to query the customer-account-subscriber information of the transferee party. "}
var E205349 = Global_error{id: "205349", eType: EXPECTED_ERROR, message: "The transfer amount is smaller than the minimum limit. "}
var E205350 = Global_error{id: "205350", eType: EXPECTED_ERROR, message: "Failed to convert the data into XML character string. "}
var E205351 = Global_error{id: "205351", eType: EXPECTED_ERROR, message: "Failed to convert BaseValue into String. "}
var E205352 = Global_error{id: "205352", eType: EXPECTED_ERROR, message: "Failed to build the mapping. "}
var E205353 = Global_error{id: "205353", eType: EXPECTED_ERROR, message: "Failed to export the date. "}
var E205354 = Global_error{id: "205354", eType: EXPECTED_ERROR, message: "Failed to generate the autopay task. "}
var E205355 = Global_error{id: "205355", eType: EXPECTED_ERROR, message: "Failed to compress the file. "}
var E205356 = Global_error{id: "205356", eType: EXPECTED_ERROR, message: "Failed to roll back the process of generating autopay request data. "}
var E205357 = Global_error{id: "205357", eType: EXPECTED_ERROR, message: "Failed to preprocess the autopay response file. "}
var E205358 = Global_error{id: "205358", eType: EXPECTED_ERROR, message: "No instance of the response file is found. "}
var E205359 = Global_error{id: "205359", eType: EXPECTED_ERROR, message: "Failed to create the SMS content. "}
var E205360 = Global_error{id: "205360", eType: EXPECTED_ERROR, message: "Failed to create the Email content. "}
var E205361 = Global_error{id: "205361", eType: EXPECTED_ERROR, message: "Failed to process the service in batches. "}
var E205362 = Global_error{id: "205362", eType: EXPECTED_ERROR, message: "Failed to import the autopay request preprocessing information into the database. "}
var E205363 = Global_error{id: "205363", eType: EXPECTED_ERROR, message: "Failed to convert the resultset into paramlist. "}
var E205364 = Global_error{id: "205364", eType: EXPECTED_ERROR, message: "Failed to move the autopay request file to the success directory. "}
var E205365 = Global_error{id: "205365", eType: EXPECTED_ERROR, message: "Failed to move the file to the specified directory. "}
var E205366 = Global_error{id: "205366", eType: EXPECTED_ERROR, message: "The file to parse is not found. "}
var E205367 = Global_error{id: "205367", eType: EXPECTED_ERROR, message: "Failed to obtain BeInfo based on BeId. "}
var E205368 = Global_error{id: "205368", eType: EXPECTED_ERROR, message: "Failed to get the process node by flowId. "}
var E205369 = Global_error{id: "205369", eType: EXPECTED_ERROR, message: "Failed to get the instance by beanId. "}
var E205370 = Global_error{id: "205370", eType: EXPECTED_ERROR, message: "RCOMM error code conversion exception. "}
var E205371 = Global_error{id: "205371", eType: EXPECTED_ERROR, message: "Failed to reduce credit because of insufficient balance. "}
var E205372 = Global_error{id: "205372", eType: EXPECTED_ERROR, message: "The reduced amount is larger than the sum of creditlists amount. "}
var E205373 = Global_error{id: "205373", eType: EXPECTED_ERROR, message: "Failed to export files from the database. "}
var E205374 = Global_error{id: "205374", eType: EXPECTED_ERROR, message: "Failed to open the cash register. "}
var E205375 = Global_error{id: "205375", eType: EXPECTED_ERROR, message: "Failed to close the cash register. "}
var E205376 = Global_error{id: "205376", eType: EXPECTED_ERROR, message: "Failed to adjust the cash register. "}
var E205377 = Global_error{id: "205377", eType: EXPECTED_ERROR, message: "Failed to get the system template by template Id. "}
var E205378 = Global_error{id: "205378", eType: EXPECTED_ERROR, message: "Failed to get method by service name. "}
var E205379 = Global_error{id: "205379", eType: EXPECTED_ERROR, message: "The session entity sent from WebService is null. "}
var E205380 = Global_error{id: "205380", eType: EXPECTED_ERROR, message: "Failed to send the Idle request message. "}
var E205381 = Global_error{id: "205381", eType: EXPECTED_ERROR, message: "The path of new file is incorrect. "}
var E205382 = Global_error{id: "205382", eType: EXPECTED_ERROR, message: "Failed to parse file. "}
var E205383 = Global_error{id: "205383", eType: EXPECTED_ERROR, message: "Failed to collect the data. "}
var E205384 = Global_error{id: "205384", eType: EXPECTED_ERROR, message: "Incorrect area. "}
var E205385 = Global_error{id: "205385", eType: EXPECTED_ERROR, message: "Failed to update the job instance. "}
var E205386 = Global_error{id: "205386", eType: EXPECTED_ERROR, message: "Failed to process the scheduled task of batch files. "}
var E205387 = Global_error{id: "205387", eType: EXPECTED_ERROR, message: "The instance Id of flowtask is null. "}
var E205388 = Global_error{id: "205388", eType: EXPECTED_ERROR, message: "Incorrect transaction of environment parameter. "}
var E205389 = Global_error{id: "205389", eType: EXPECTED_ERROR, message: "Failed to paginate for multiple data sources. "}
var E205390 = Global_error{id: "205390", eType: EXPECTED_ERROR, message: "Incorrect work order status. "}
var E205391 = Global_error{id: "205391", eType: EXPECTED_ERROR, message: "Failed to execute the resultset. "}
var E205392 = Global_error{id: "205392", eType: EXPECTED_ERROR, message: "Incorrect date format conversion. "}
var E205393 = Global_error{id: "205393", eType: EXPECTED_ERROR, message: "Failed to execute single journal log. "}
var E205394 = Global_error{id: "205394", eType: EXPECTED_ERROR, message: "Failed to preprocess the autopay request file. "}
var E205395 = Global_error{id: "205395", eType: EXPECTED_ERROR, message: "Failed to build stub. "}
var E205396 = Global_error{id: "205396", eType: EXPECTED_ERROR, message: "Failed to execute the single service. "}
var E205397 = Global_error{id: "205397", eType: EXPECTED_ERROR, message: "Failed to import the data form database to the file. "}
var E205398 = Global_error{id: "205398", eType: EXPECTED_ERROR, message: "Incorrect object anti-sequence. "}
var E205399 = Global_error{id: "205399", eType: EXPECTED_ERROR, message: "Incorrect character string anti-sequence. "}
var E205400 = Global_error{id: "205400", eType: EXPECTED_ERROR, message: "Template is incorrect. "}
var E205401 = Global_error{id: "205401", eType: EXPECTED_ERROR, message: "Incorrect template format. "}
var E205402 = Global_error{id: "205402", eType: EXPECTED_ERROR, message: "The user name does not match the supervisor of the operator. "}
var E205403 = Global_error{id: "205403", eType: EXPECTED_ERROR, message: "Bill run is never executed for the account and adjustment in DR direction is not allowed. "}
var E205404 = Global_error{id: "205404", eType: EXPECTED_ERROR, message: "The supervisor does not exist. "}
var E205405 = Global_error{id: "205405", eType: EXPECTED_ERROR, message: "The PIN password is incorrect. "}
var E205406 = Global_error{id: "205406", eType: EXPECTED_ERROR, message: "The transferee is not in active state. "}
var E205407 = Global_error{id: "205407", eType: EXPECTED_ERROR, message: "The credit card number cannot be empty in refund by credit card. "}
var E205408 = Global_error{id: "205408", eType: EXPECTED_ERROR, message: "BANK_ACCT_NO and BANK_CODE cannot be empty in refund by debit card. "}
var E205409 = Global_error{id: "205409", eType: EXPECTED_ERROR, message: "This interface is not applicable to prepaid accounts. "}
var E205410 = Global_error{id: "205410", eType: EXPECTED_ERROR, message: "Prepaid subscribers cannot request DEP or ADV fees. "}
var E205411 = Global_error{id: "205411", eType: EXPECTED_ERROR, message: "The refund must be performed using cash, debit card, or credit card. "}
var E205412 = Global_error{id: "205412", eType: EXPECTED_ERROR, message: "The outstanding business fee of the deposit type cannot contain a tax. "}
var E205413 = Global_error{id: "205413", eType: EXPECTED_ERROR, message: "The account has no deposit. "}
var E205414 = Global_error{id: "205414", eType: EXPECTED_ERROR, message: "The adjustment amount cannot be larger than the net outstanding amount in CR adjustment. "}
var E205415 = Global_error{id: "205415", eType: EXPECTED_ERROR, message: "The dispute amount cannot be larger than the net outstanding amount. "}
var E205416 = Global_error{id: "205416", eType: EXPECTED_ERROR, message: "The record is not in the finished state and cannot be reversed. "}
var E205417 = Global_error{id: "205417", eType: EXPECTED_ERROR, message: "The payment batch number already exists. "}
var E205418 = Global_error{id: "205418", eType: EXPECTED_ERROR, message: "The number of payment records is different from the number in the file header. "}
var E205419 = Global_error{id: "205419", eType: EXPECTED_ERROR, message: "The total payment amount in the payment records is different from the amount in the file tail. "}
var E205420 = Global_error{id: "205420", eType: EXPECTED_ERROR, message: "The deposit payment amount must be the same as the deposit invoice amount. "}
var E205421 = Global_error{id: "205421", eType: EXPECTED_ERROR, message: "The value of Transfer Amt. cannot be greater than that of Max. Available Amt.. "}
var E205422 = Global_error{id: "205422", eType: EXPECTED_ERROR, message: "No invoice whose DueDate is the current date. "}
var E205423 = Global_error{id: "205423", eType: EXPECTED_ERROR, message: "Payment reversal cannot be executed across month. "}
var E205424 = Global_error{id: "205424", eType: EXPECTED_ERROR, message: "Autopay does not apply to accounts in CASH-ONLY state. "}
var E205425 = Global_error{id: "205425", eType: EXPECTED_ERROR, message: "Business fee payment does not support payment transfer. "}
var E205426 = Global_error{id: "205426", eType: EXPECTED_ERROR, message: "Invalid transfer type. "}
var E205427 = Global_error{id: "205427", eType: EXPECTED_ERROR, message: "Handed Over file payment cannot be reversed. "}
var E205428 = Global_error{id: "205428", eType: EXPECTED_ERROR, message: "The AcctId value is invalid or the AcctId value does not match the Msisdn value. "}
var E205429 = Global_error{id: "205429", eType: EXPECTED_ERROR, message: "The account information and subscriber information cannot be both empty. "}
var E205430 = Global_error{id: "205430", eType: EXPECTED_ERROR, message: "The AcctId value must be the ID of the account to which Msisdn belongs or the entrusted payment account. "}
var E205431 = Global_error{id: "205431", eType: EXPECTED_ERROR, message: "Unallocated accounts do not support payment transfer. "}
var E205432 = Global_error{id: "205432", eType: EXPECTED_ERROR, message: "The bsno does not exist. "}
var E205433 = Global_error{id: "205433", eType: EXPECTED_ERROR, message: "The account is not the subscriber's account or entrusted payment account. "}
var E205434 = Global_error{id: "205434", eType: EXPECTED_ERROR, message: "WebService security authentication failed. "}
var E205435 = Global_error{id: "205435", eType: EXPECTED_ERROR, message: "The prepayment failed to take effect. "}
var E205436 = Global_error{id: "205436", eType: EXPECTED_ERROR, message: "The transfer amount of the invoice cannot be larger than the outstanding amount of the invoice. "}
var E205437 = Global_error{id: "205437", eType: EXPECTED_ERROR, message: "Failed to query customer-account-subscriber information by Customer ID. "}
var E205438 = Global_error{id: "205438", eType: EXPECTED_ERROR, message: "Failed to write off because the account has an ineffective future dated payment. "}
var E205439 = Global_error{id: "205439", eType: EXPECTED_ERROR, message: "Failed to query customer-account-subscriber information by Passport Number. "}
var E205440 = Global_error{id: "205440", eType: EXPECTED_ERROR, message: "Failed to query customer-account-subscriber information by Company Registration Code. "}
var E205441 = Global_error{id: "205441", eType: EXPECTED_ERROR, message: "The ItemId field in the adjustment message sent for installment cancellation cannot be empty, and the value must be a number. "}
var E205442 = Global_error{id: "205442", eType: EXPECTED_ERROR, message: "The account has a virtual payment request in the Initial state and write-off is not allowed. "}
var E205443 = Global_error{id: "205443", eType: EXPECTED_ERROR, message: "The subscriber information cannot be empty in the request. "}
var E205444 = Global_error{id: "205444", eType: EXPECTED_ERROR, message: "Failed to query customer-account-subscriber information by Invoice No. "}
var E205445 = Global_error{id: "205445", eType: EXPECTED_ERROR, message: "Failed to query customer-account-subscriber information by Business No. "}
var E205446 = Global_error{id: "205446", eType: EXPECTED_ERROR, message: "You cannot perform transfer between accounts of different currency types. "}
var E205447 = Global_error{id: "205447", eType: EXPECTED_ERROR, message: "The ACCT_CODE and MSISDN parameters cannot be both empty in the batch adjustment file. "}
var E205448 = Global_error{id: "205448", eType: EXPECTED_ERROR, message: "The number of deposit payment records cannot be 0 or larger than 10 in the batchDepositRequest interface. "}
var E205449 = Global_error{id: "205449", eType: EXPECTED_ERROR, message: "Failed to authenticate the IP address in the WebService message. "}
var E205450 = Global_error{id: "205450", eType: EXPECTED_ERROR, message: "Failed to authenticate the operator ID and password in the WebService message. "}
var E205451 = Global_error{id: "205451", eType: EXPECTED_ERROR, message: "Failed to authenticate the operator ID and IP address in the WebService message. "}
var E205452 = Global_error{id: "205452", eType: EXPECTED_ERROR, message: "Failed to authenticate the operator ID and operation ID in the WebService message. "}
var E205453 = Global_error{id: "205453", eType: EXPECTED_ERROR, message: "The payment source exists. "}
var E205454 = Global_error{id: "205454", eType: EXPECTED_ERROR, message: "A batch service can be performed only for local accounts. "}
var E205455 = Global_error{id: "205455", eType: EXPECTED_ERROR, message: "The deposit payment has been released and cannot be reversed. "}
var E205456 = Global_error{id: "205456", eType: EXPECTED_ERROR, message: "The prepayment list of the transferor of unallocated transfer is empty. "}
var E205457 = Global_error{id: "205457", eType: EXPECTED_ERROR, message: "A batch adjustment can only be in the CR or DR direction. "}
var E205458 = Global_error{id: "205458", eType: EXPECTED_ERROR, message: "When adjusting a hybrid account, you must select account book 2000 (prepaid) or 3000 (postpaid). If the account book is left empty, 3000 is used by default. "}
var E205459 = Global_error{id: "205459", eType: EXPECTED_ERROR, message: "When adjusting a postpaid account, you must select account book 3000 (postpaid). If the account book is left empty, 3000 is used by default. "}
var E205460 = Global_error{id: "205460", eType: EXPECTED_ERROR, message: "When adjusting a prepaid account, you must select account book 2000 (prepaid). If the account book is left empty, 2000 is used by default. "}
var E205461 = Global_error{id: "205461", eType: EXPECTED_ERROR, message: "An amount cannot be transferred between a subscriber's accounts of a same type. "}
var E205462 = Global_error{id: "205462", eType: EXPECTED_ERROR, message: "The amount to release cannot be larger than the maximum releasable amount in the deposit. "}
var E205463 = Global_error{id: "205463", eType: EXPECTED_ERROR, message: "The released deposit amount cannot be larger than the maximum. "}
var E205464 = Global_error{id: "205464", eType: EXPECTED_ERROR, message: "Unallocated payment does not apply to prepaid subscribers. "}
var E205465 = Global_error{id: "205465", eType: EXPECTED_ERROR, message: "You cannot adjust a fraudulent account. "}
var E205466 = Global_error{id: "205466", eType: EXPECTED_ERROR, message: "The subscriber whose fees are all paid by entrusted payment account cannot pay fees or deposits for their own account. "}
var E205467 = Global_error{id: "205467", eType: EXPECTED_ERROR, message: "On the invoice, the CR adjustment amount (tax excluded) cannot be smaller than 0. "}
var E205468 = Global_error{id: "205468", eType: EXPECTED_ERROR, message: "The branchCode field is empty or does not exist in the message. "}
var E205469 = Global_error{id: "205469", eType: EXPECTED_ERROR, message: "The branchCode field is empty or does not exist. "}
var E205470 = Global_error{id: "205470", eType: EXPECTED_ERROR, message: "The branch code already exists. "}
var E205471 = Global_error{id: "205471", eType: EXPECTED_ERROR, message: "The reasoncode field is empty or does not exist in the system. "}
var E205472 = Global_error{id: "205472", eType: EXPECTED_ERROR, message: "Subscribers of the transfer-forbidden product are not allowed to transfer the account. "}
var E205473 = Global_error{id: "205473", eType: EXPECTED_ERROR, message: "The PAYMENT_DETAILS field format is incorrect in the batch refund file. "}
var E205474 = Global_error{id: "205474", eType: EXPECTED_ERROR, message: "The deposit amount to refund must equal the deposit amount in the account. "}
var E205475 = Global_error{id: "205475", eType: EXPECTED_ERROR, message: "The account has no bad debt. You cannot roll back bad debt write-off. "}
var E205476 = Global_error{id: "205476", eType: EXPECTED_ERROR, message: "The account has no doubtful debt. You cannot roll back doubtful debt write-off. "}
var E205477 = Global_error{id: "205477", eType: EXPECTED_ERROR, message: "You cannot write off the doubtful debt for accounts whose doubtful debt has been written off. "}
var E205478 = Global_error{id: "205478", eType: EXPECTED_ERROR, message: "The ChannelId value is invalid. "}
var E205479 = Global_error{id: "205479", eType: EXPECTED_ERROR, message: "A customer can have only one account that contains one security deposit. "}
var E205480 = Global_error{id: "205480", eType: EXPECTED_ERROR, message: "The customer's security deposit cannot be refunded. "}
var E205481 = Global_error{id: "205481", eType: EXPECTED_ERROR, message: "If the customer has only one account, the subscriber's bad or doubtful debt can be written off only when the security deposit is paid or refunded. "}
var E205482 = Global_error{id: "205482", eType: EXPECTED_ERROR, message: "The number of payment records is different from the number in the file tail. "}
var E205483 = Global_error{id: "205483", eType: EXPECTED_ERROR, message: "The head line of the file cannot be empty. "}
var E205484 = Global_error{id: "205484", eType: EXPECTED_ERROR, message: "When you attempted to write off the security deposit account, the other accounts of the customer have been written off. Therefore, the security deposit cannot be transferred to other accounts. You can not write off the account. "}
var E205485 = Global_error{id: "205485", eType: EXPECTED_ERROR, message: "The unit conversion ID is not found in the ocs_measuredisrule table. "}
var E205486 = Global_error{id: "205486", eType: EXPECTED_ERROR, message: "The last billed amount of the subscriber does not exist. "}
var E205487 = Global_error{id: "205487", eType: EXPECTED_ERROR, message: "Transferor authentication failed. "}
var E205488 = Global_error{id: "205488", eType: EXPECTED_ERROR, message: "When payments are made by cheque, debt card, or credit card, the CHEQUE_NO or CREDIT_CARD_NO field is mandatory. "}
var E205489 = Global_error{id: "205489", eType: EXPECTED_ERROR, message: "Security deposit does not apply to group customers. "}
var E205490 = Global_error{id: "205490", eType: EXPECTED_ERROR, message: "The subscriber has no payment record. "}
var E205491 = Global_error{id: "205491", eType: EXPECTED_ERROR, message: "The inactive subscriber with an outstanding business fee cannot make a payment or recharge the account. "}
var E205492 = Global_error{id: "205492", eType: EXPECTED_ERROR, message: "The branch code cannot be set to -1 because -1 is reserved for other usages. "}
var E205493 = Global_error{id: "205493", eType: EXPECTED_ERROR, message: "The new transaction channel already exists in the system. "}
var E205494 = Global_error{id: "205494", eType: EXPECTED_ERROR, message: "You cannot reverse payment and make a new payment for a same account. "}
var E205495 = Global_error{id: "205495", eType: EXPECTED_ERROR, message: "You cannot reverse business fee payment and pay it again. "}
var E205496 = Global_error{id: "205496", eType: EXPECTED_ERROR, message: "The year and month of the start time must be the same as those of the end time. "}
var E205497 = Global_error{id: "205497", eType: EXPECTED_ERROR, message: "Failed to query receipt data due to incorrect customer, account, or subscriber information. "}
var E205498 = Global_error{id: "205498", eType: EXPECTED_ERROR, message: "The value of operatetype is invalid. "}
var E205499 = Global_error{id: "205499", eType: EXPECTED_ERROR, message: "The number of accounts under the customer is larger than the maximum. "}
var E205500 = Global_error{id: "205500", eType: EXPECTED_ERROR, message: "No transaction is performed in this period and you cannot reprint any receipt for this period. "}
var E205501 = Global_error{id: "205501", eType: EXPECTED_ERROR, message: "Failed to query customer-account-subscriber information based on identity proof number. "}
var E205502 = Global_error{id: "205502", eType: EXPECTED_ERROR, message: "The outstanding business bill or deposit bill cannot be specified in the payment interface for payment application. "}
var E205503 = Global_error{id: "205503", eType: EXPECTED_ERROR, message: "The service activity period or payment amount range in the new bonus point calculation rule cannot overlap those in existing rules. "}
var E205504 = Global_error{id: "205504", eType: EXPECTED_ERROR, message: "The AcctCode and OpAcctCode fields cannot be both empty. "}
var E205505 = Global_error{id: "205505", eType: EXPECTED_ERROR, message: "The system-level transfer authentication failed. "}
var E205506 = Global_error{id: "205506", eType: EXPECTED_ERROR, message: "Transferee authentication failed. "}
var E205507 = Global_error{id: "205507", eType: EXPECTED_ERROR, message: "Transfer failed because the transferor and transferee numbers are the same. "}
var E205508 = Global_error{id: "205508", eType: EXPECTED_ERROR, message: "Transfer failed because the service activity period of the transferor number is shorter than the minimum service activity period. "}
var E205509 = Global_error{id: "205509", eType: EXPECTED_ERROR, message: "Transfer failed because the service activity period of the transferee number is shorter than the minimum service activity period. "}
var E205510 = Global_error{id: "205510", eType: EXPECTED_ERROR, message: "The enumerated value authentication of the transfer amount failed. "}
var E205511 = Global_error{id: "205511", eType: EXPECTED_ERROR, message: "Life cycle status and management status authentication failed. "}
var E205512 = Global_error{id: "205512", eType: EXPECTED_ERROR, message: "The available credit limit of the transferor is insufficient after transfer. "}
var E205513 = Global_error{id: "205513", eType: EXPECTED_ERROR, message: "Password parsing error. "}
var E205514 = Global_error{id: "205514", eType: EXPECTED_ERROR, message: "The available credit limit of the transferor is insufficient before transfer. "}
var E205515 = Global_error{id: "205515", eType: EXPECTED_ERROR, message: "Transfer authentication of the group member failed. "}
var E205516 = Global_error{id: "205516", eType: EXPECTED_ERROR, message: "The language type transferred by the interface does not exist. "}
var E205517 = Global_error{id: "205517", eType: EXPECTED_ERROR, message: "The user name and password in the message header are incorrect. "}
var E205518 = Global_error{id: "205518", eType: EXPECTED_ERROR, message: "Failed to generate the postpaid balance notification file. "}
var E205519 = Global_error{id: "205519", eType: EXPECTED_ERROR, message: "Failed to invoke the oneDC to query the minimum resumption amount. "}
var E205520 = Global_error{id: "205520", eType: EXPECTED_ERROR, message: "You can't make this operation. "}
var E205521 = Global_error{id: "205521", eType: EXPECTED_ERROR, message: "The business fee has been refunded. "}
var E205522 = Global_error{id: "205522", eType: EXPECTED_ERROR, message: "The operator does not have the postpaid payment permission. "}
var E205523 = Global_error{id: "205523", eType: EXPECTED_ERROR, message: "The operator does not have the prepaid payment permission. "}
var E205524 = Global_error{id: "205524", eType: EXPECTED_ERROR, message: "The operator does not have the hybrid payment permission. "}
var E205525 = Global_error{id: "205525", eType: EXPECTED_ERROR, message: "The value of tranDirection is incorrect. "}
var E205526 = Global_error{id: "205526", eType: EXPECTED_ERROR, message: "The value of the parameter is incorrect. "}
var E205527 = Global_error{id: "205527", eType: EXPECTED_ERROR, message: "Data has already been updated. "}
var E205528 = Global_error{id: "205528", eType: EXPECTED_ERROR, message: "The file cannot be null. "}
var E205529 = Global_error{id: "205529", eType: EXPECTED_ERROR, message: "The value of DUEDATE does not exist. "}
var E205530 = Global_error{id: "205530", eType: EXPECTED_ERROR, message: "The value of ENDDATE does not exist. "}
var E205531 = Global_error{id: "205531", eType: EXPECTED_ERROR, message: "The account is a prepaid account and does not support dunning. "}
var E205532 = Global_error{id: "205532", eType: EXPECTED_ERROR, message: "The account is a group account and does not support test dunning. "}
var E205533 = Global_error{id: "205533", eType: EXPECTED_ERROR, message: "The operator is not found. "}
var E205534 = Global_error{id: "205534", eType: EXPECTED_ERROR, message: "Tenant information of the operator is not found. "}
var E205535 = Global_error{id: "205535", eType: EXPECTED_ERROR, message: "Tenant information in the request header is different from tenant information of the operator. "}
var E205536 = Global_error{id: "205536", eType: EXPECTED_ERROR, message: "Decryption failed. "}
var E205537 = Global_error{id: "205537", eType: EXPECTED_ERROR, message: "The account code is invalid. "}
var E205538 = Global_error{id: "205538", eType: EXPECTED_ERROR, message: "The account of the subscriber does not have any outstanding amount. "}
var E205539 = Global_error{id: "205539", eType: EXPECTED_ERROR, message: "The account does not have any valid postpaid subscriber. "}
var E205540 = Global_error{id: "205540", eType: EXPECTED_ERROR, message: "The account is invalid. "}
var E205541 = Global_error{id: "205541", eType: EXPECTED_ERROR, message: "The account does not belong to any dunning group. "}
var E205542 = Global_error{id: "205542", eType: EXPECTED_ERROR, message: "The dunning action cannot be performed because the outstanding amount of this account is less than the trigger threshold for dunning. "}
var E205543 = Global_error{id: "205543", eType: EXPECTED_ERROR, message: "Subscribers in the barring redlist are barring free. "}
var E205544 = Global_error{id: "205544", eType: EXPECTED_ERROR, message: "Subscribers in the suspension redlist are suspension free. "}
var E205545 = Global_error{id: "205545", eType: EXPECTED_ERROR, message: "Subscribers in the barring and suspension redlist are barring and suspension free. "}
var E205546 = Global_error{id: "205546", eType: EXPECTED_ERROR, message: "The account code does not match the mobile number. "}
var E205547 = Global_error{id: "205547", eType: EXPECTED_ERROR, message: "The mobile number is invalid. "}
var E205548 = Global_error{id: "205548", eType: EXPECTED_ERROR, message: "The subscriber is a prepaid subscriber. "}
var E205549 = Global_error{id: "205549", eType: EXPECTED_ERROR, message: "The subscriber is invalid. "}
var E205550 = Global_error{id: "205550", eType: EXPECTED_ERROR, message: "The dunning action cannot be performed because the mobile number is in the redlist. "}
var E205551 = Global_error{id: "205551", eType: EXPECTED_ERROR, message: "The system does not send barring or suspension work orders to fixed network subscribers. "}
var E205552 = Global_error{id: "205552", eType: EXPECTED_ERROR, message: "The mobile number and the account code are null at the same time. "}
var E205553 = Global_error{id: "205553", eType: EXPECTED_ERROR, message: "This operation cannot be performed because the subscriber does not use the group account to pay fees. "}
var E205554 = Global_error{id: "205554", eType: EXPECTED_ERROR, message: "The system does not send resumption work orders to fixed network subscribers. "}
var E205555 = Global_error{id: "205555", eType: EXPECTED_ERROR, message: "Processing the template failed. "}
var E205556 = Global_error{id: "205556", eType: EXPECTED_ERROR, message: "The template is null. "}
var E205557 = Global_error{id: "205557", eType: EXPECTED_ERROR, message: "The customer information does not exist. "}
var E205558 = Global_error{id: "205558", eType: EXPECTED_ERROR, message: "The dunning action cannot be performed on a dead customer. "}
var E205559 = Global_error{id: "205559", eType: EXPECTED_ERROR, message: "The dunning action cannot be deleted because it has been referenced. "}
var E205560 = Global_error{id: "205560", eType: EXPECTED_ERROR, message: "The action name that you want to set already exists. "}
var E205561 = Global_error{id: "205561", eType: EXPECTED_ERROR, message: "The action is invalid. "}
var E205562 = Global_error{id: "205562", eType: EXPECTED_ERROR, message: "The dunning action cannot be used to dun group accounts. "}
var E205563 = Global_error{id: "205563", eType: EXPECTED_ERROR, message: "The group is invalid. "}
var E205564 = Global_error{id: "205564", eType: EXPECTED_ERROR, message: "The dunning action cannot be used to dun individual accounts. "}
var E205565 = Global_error{id: "205565", eType: EXPECTED_ERROR, message: "The validity of the group cannot be modified because the group has been referenced. "}
var E205566 = Global_error{id: "205566", eType: EXPECTED_ERROR, message: "The rule that you want to add already exists in this group. "}
var E205567 = Global_error{id: "205567", eType: EXPECTED_ERROR, message: "The group name that you want to set already exists. "}
var E205568 = Global_error{id: "205568", eType: EXPECTED_ERROR, message: "SMS Bill Value cannot be null when you try to add a group rule. "}
var E205569 = Global_error{id: "205569", eType: EXPECTED_ERROR, message: "The non-dunning day that you want to add already exists in the system. "}
var E205570 = Global_error{id: "205570", eType: EXPECTED_ERROR, message: "The non-dunning day cannot be deleted because it is referenced by the dunning policy. "}
var E205571 = Global_error{id: "205571", eType: EXPECTED_ERROR, message: "The name that you want to set already exists. "}
var E205572 = Global_error{id: "205572", eType: EXPECTED_ERROR, message: "There is no dunning policy for the dunning group. "}
var E205573 = Global_error{id: "205573", eType: EXPECTED_ERROR, message: "There is no valid dunning policy for the dunning group. "}
var E205574 = Global_error{id: "205574", eType: EXPECTED_ERROR, message: "There is no dunning plan to be confirmed. "}
var E205575 = Global_error{id: "205575", eType: EXPECTED_ERROR, message: "The execution time of different policies for the same collection group is on the same day. "}
var E205576 = Global_error{id: "205576", eType: EXPECTED_ERROR, message: "The schedule has not been generated yet or has been finished. "}
var E205577 = Global_error{id: "205577", eType: EXPECTED_ERROR, message: "The execution time of different schedules for the same collection group is on the same day. "}
var E205578 = Global_error{id: "205578", eType: EXPECTED_ERROR, message: "There is no dunning plan to be canceled. "}
var E205579 = Global_error{id: "205579", eType: EXPECTED_ERROR, message: "No dunning plan needs to be ended. "}
var E205580 = Global_error{id: "205580", eType: EXPECTED_ERROR, message: "The account is not in the dunning flow. "}
var E205581 = Global_error{id: "205581", eType: EXPECTED_ERROR, message: "A new dunning action is generated. "}
var E205582 = Global_error{id: "205582", eType: EXPECTED_ERROR, message: "The dunning action is canceled because the reverse dunning action is performed. "}
var E205583 = Global_error{id: "205583", eType: EXPECTED_ERROR, message: "The email address does not exist. "}
var E205584 = Global_error{id: "205584", eType: EXPECTED_ERROR, message: "Sending the email failed. "}
var E205585 = Global_error{id: "205585", eType: EXPECTED_ERROR, message: "The subscriber title does not exist. "}
var E205586 = Global_error{id: "205586", eType: EXPECTED_ERROR, message: "The customer name is empty. "}
var E205587 = Global_error{id: "205587", eType: EXPECTED_ERROR, message: "Obtaining the employee work ID failed. "}
var E205588 = Global_error{id: "205588", eType: EXPECTED_ERROR, message: "The barring or suspension failed. "}
var E205589 = Global_error{id: "205589", eType: EXPECTED_ERROR, message: "Failed to suspend discount product. "}
var E205590 = Global_error{id: "205590", eType: EXPECTED_ERROR, message: "The SMS message recipient number of the group account is left empty. "}
var E205591 = Global_error{id: "205591", eType: EXPECTED_ERROR, message: "Failed to suspend international roaming. "}
var E205592 = Global_error{id: "205592", eType: EXPECTED_ERROR, message: "Failed to cancel discount product. "}
var E205593 = Global_error{id: "205593", eType: EXPECTED_ERROR, message: "Failed to lock corporate service. "}
var E205594 = Global_error{id: "205594", eType: EXPECTED_ERROR, message: "Failed to blacklist. "}
var E205595 = Global_error{id: "205595", eType: EXPECTED_ERROR, message: "Failed to deregister the subscriber. "}
var E205596 = Global_error{id: "205596", eType: EXPECTED_ERROR, message: "Failed to auto write off. "}
var E205597 = Global_error{id: "205597", eType: EXPECTED_ERROR, message: "Failed to synchronize information about application for payment assignment to AR. Solution: Check the debug.log file for the cause. "}
var E205598 = Global_error{id: "205598", eType: EXPECTED_ERROR, message: "Failed to cancel the PA plan. Solution: Configure a correct service address by referring to the debug.log file. "}
var E205599 = Global_error{id: "205599", eType: EXPECTED_ERROR, message: "The subscriber has been barred or suspended. "}
var E205600 = Global_error{id: "205600", eType: EXPECTED_ERROR, message: "The subscriber has been suspended. "}
var E205601 = Global_error{id: "205601", eType: EXPECTED_ERROR, message: "Failed to obtain the valid voice call number. "}
var E205602 = Global_error{id: "205602", eType: EXPECTED_ERROR, message: "The outstanding amount is less than the minimum amount for dunning. "}
var E205603 = Global_error{id: "205603", eType: EXPECTED_ERROR, message: "The format is incorrect. "}
var E205604 = Global_error{id: "205604", eType: EXPECTED_ERROR, message: "Invalid SCN "}
var E205605 = Global_error{id: "205605", eType: EXPECTED_ERROR, message: "The resumption failed. "}
var E205606 = Global_error{id: "205606", eType: EXPECTED_ERROR, message: "The outstanding amount is less than the specified percentage of the credit. "}
var E205607 = Global_error{id: "205607", eType: EXPECTED_ERROR, message: "The value of triggerAmt in the batch file is smaller than 0. "}
var E205608 = Global_error{id: "205608", eType: EXPECTED_ERROR, message: "The value of triggeramt in the batch file is invalid. "}
var E205609 = Global_error{id: "205609", eType: EXPECTED_ERROR, message: "The outstanding amount of the account has reached the maximum collection amount. The system does not collect the outstanding amount. "}
var E205610 = Global_error{id: "205610", eType: EXPECTED_ERROR, message: "The language of the SMS template does not match the subscriber language. "}
var E205611 = Global_error{id: "205611", eType: EXPECTED_ERROR, message: "The validity of the hold type cannot be modified because the hold type has been referenced. "}
var E205612 = Global_error{id: "205612", eType: EXPECTED_ERROR, message: "The hold action that you want to set already exists. "}
var E205613 = Global_error{id: "205613", eType: EXPECTED_ERROR, message: "The hold type does not exist. "}
var E205614 = Global_error{id: "205614", eType: EXPECTED_ERROR, message: "The hold type is invalid. "}
var E205615 = Global_error{id: "205615", eType: EXPECTED_ERROR, message: "The hold type that you want to set already exists. "}
var E205616 = Global_error{id: "205616", eType: EXPECTED_ERROR, message: "The validity of the hold type cannot be deleted because the hold type has been referenced. "}
var E205617 = Global_error{id: "205617", eType: EXPECTED_ERROR, message: "The value of holdTypeName is blank. "}
var E205618 = Global_error{id: "205618", eType: EXPECTED_ERROR, message: "The Hold Type value cannot contain commas. "}
var E205619 = Global_error{id: "205619", eType: EXPECTED_ERROR, message: "The action has been held for a long time. "}
var E205620 = Global_error{id: "205620", eType: EXPECTED_ERROR, message: "The action has been held. "}
var E205621 = Global_error{id: "205621", eType: EXPECTED_ERROR, message: "The action has been held and cannot be performed before it is unheld. "}
var E205622 = Global_error{id: "205622", eType: EXPECTED_ERROR, message: "The manual collect task corresponding to this account already exists and cannot be added again. "}
var E205623 = Global_error{id: "205623", eType: EXPECTED_ERROR, message: "The template cannot be deleted because it has been referenced. "}
var E205624 = Global_error{id: "205624", eType: EXPECTED_ERROR, message: "Creating the path for exporting the file failed. "}
var E205625 = Global_error{id: "205625", eType: EXPECTED_ERROR, message: "The Task parameter is set incorrectly. The format is reserve2=tenantId. "}
var E205626 = Global_error{id: "205626", eType: EXPECTED_ERROR, message: "The tenant ID in the route information does not exist. "}
var E205627 = Global_error{id: "205627", eType: EXPECTED_ERROR, message: "Failed to parse the request. "}
var E205628 = Global_error{id: "205628", eType: EXPECTED_ERROR, message: "The data source corresponding to the tenant ID is not found. "}
var E205629 = Global_error{id: "205629", eType: EXPECTED_ERROR, message: "The mandatory field SerialNo in the request head is blank. "}
var E205630 = Global_error{id: "205630", eType: EXPECTED_ERROR, message: "The mandatory field OperatorId in the request head is blank. "}
var E205631 = Global_error{id: "205631", eType: EXPECTED_ERROR, message: "The mandatory field DepartmentId in the request head is blank. "}
var E205632 = Global_error{id: "205632", eType: EXPECTED_ERROR, message: "The mandatory field Version in the request head is blank. "}
var E205633 = Global_error{id: "205633", eType: EXPECTED_ERROR, message: "The mandatory field TenantId in the request head cannot be blank. "}
var E205634 = Global_error{id: "205634", eType: EXPECTED_ERROR, message: "The mandatory field AccountID in the request message is blank. "}
var E205635 = Global_error{id: "205635", eType: EXPECTED_ERROR, message: "Request header verification failed. "}
var E205636 = Global_error{id: "205636", eType: EXPECTED_ERROR, message: "The tenant ID in the request header is invalid. "}
var E205637 = Global_error{id: "205637", eType: EXPECTED_ERROR, message: "The customer does not exist. "}
var E205638 = Global_error{id: "205638", eType: EXPECTED_ERROR, message: "Failed to query account information. "}
var E205639 = Global_error{id: "205639", eType: EXPECTED_ERROR, message: "Failed to query subscriber information. "}
var E205640 = Global_error{id: "205640", eType: EXPECTED_ERROR, message: "No required subscriber information found. "}
var E205641 = Global_error{id: "205641", eType: EXPECTED_ERROR, message: "Querying the customer information failed. "}
var E205642 = Global_error{id: "205642", eType: EXPECTED_ERROR, message: "No bill cycle found. "}
var E205643 = Global_error{id: "205643", eType: EXPECTED_ERROR, message: "Failed to query the bill of the bill run result. "}
var E205644 = Global_error{id: "205644", eType: EXPECTED_ERROR, message: "Failed to authenticate the IP address. "}
var E205645 = Global_error{id: "205645", eType: EXPECTED_ERROR, message: "Failed to authenticate the operator ID and password. "}
var E205646 = Global_error{id: "205646", eType: EXPECTED_ERROR, message: "Failed to authenticate the operator ID and IP address. "}
var E205647 = Global_error{id: "205647", eType: EXPECTED_ERROR, message: "Failed to authenticate the operator ID and operation ID. "}
var E205648 = Global_error{id: "205648", eType: EXPECTED_ERROR, message: "The database operation failed. "}
var E205649 = Global_error{id: "205649", eType: EXPECTED_ERROR, message: "Bill run data already exists but no bill can be obtained. "}
var E205650 = Global_error{id: "205650", eType: EXPECTED_ERROR, message: "The adjustment fee has been canceled. "}
var E205651 = Global_error{id: "205651", eType: EXPECTED_ERROR, message: "Failed to query group member information. "}
var E205652 = Global_error{id: "205652", eType: EXPECTED_ERROR, message: "The subscriber has been deleted. "}
var E205653 = Global_error{id: "205653", eType: EXPECTED_ERROR, message: "Failed to query group customer information. "}
var E205654 = Global_error{id: "205654", eType: EXPECTED_ERROR, message: "Failed to query group subscriber information. "}
var E205655 = Global_error{id: "205655", eType: EXPECTED_ERROR, message: "Account Route Information is not exist. "}
var E205656 = Global_error{id: "205656", eType: EXPECTED_ERROR, message: "Customer Route Information is not exist. "}
var E205657 = Global_error{id: "205657", eType: EXPECTED_ERROR, message: "Failed to query account route information. "}
var E205658 = Global_error{id: "205658", eType: EXPECTED_ERROR, message: "Failed to query customer route information. "}
var E205659 = Global_error{id: "205659", eType: EXPECTED_ERROR, message: "The group subscriber information does not exist. "}
var E205660 = Global_error{id: "205660", eType: EXPECTED_ERROR, message: "Failed to query payment information. "}
var E205661 = Global_error{id: "205661", eType: EXPECTED_ERROR, message: "Failed to add data to the hot billing or test billing request table. "}
var E205662 = Global_error{id: "205662", eType: EXPECTED_ERROR, message: "Failed to query the rule for displaying the currency unit. "}
var E205663 = Global_error{id: "205663", eType: EXPECTED_ERROR, message: "Failed to perform the operation. "}
var E205664 = Global_error{id: "205664", eType: EXPECTED_ERROR, message: "No subscriber meets the conditions for performing test billing or hot billing. "}
var E205665 = Global_error{id: "205665", eType: EXPECTED_ERROR, message: "Failed to send an IDL message to CHG. "}
var E205666 = Global_error{id: "205666", eType: EXPECTED_ERROR, message: "Failed to query the subscriber status. "}
var E205667 = Global_error{id: "205667", eType: EXPECTED_ERROR, message: "No valid account information is found for the bill cycle. "}
var E205668 = Global_error{id: "205668", eType: EXPECTED_ERROR, message: "Incorrect number format. "}
var E205669 = Global_error{id: "205669", eType: EXPECTED_ERROR, message: "The file to be uploaded is empty. "}
var E205670 = Global_error{id: "205670", eType: EXPECTED_ERROR, message: "The file to be uploaded does not exist. "}
var E205671 = Global_error{id: "205671", eType: EXPECTED_ERROR, message: "Account code format is not correct "}
var E205672 = Global_error{id: "205672", eType: EXPECTED_ERROR, message: "The number of lines in the file exceeds the maximum. "}
var E205673 = Global_error{id: "205673", eType: EXPECTED_ERROR, message: "Failed to create the path for exporting the file. "}
var E205674 = Global_error{id: "205674", eType: EXPECTED_ERROR, message: "Incorrect file name format. "}
var E205675 = Global_error{id: "205675", eType: EXPECTED_ERROR, message: "Virtual customers have no permission to perform this operation. "}
var E205676 = Global_error{id: "205676", eType: EXPECTED_ERROR, message: "You cannot make this operation. "}
var E205677 = Global_error{id: "205677", eType: EXPECTED_ERROR, message: "Bill run has been executed for the account at the subscription time. "}
var E205678 = Global_error{id: "205678", eType: EXPECTED_ERROR, message: "Failed to update the bill mask rule. "}
var E205679 = Global_error{id: "205679", eType: EXPECTED_ERROR, message: "Failed to delete the bill mask rule. "}
var E205680 = Global_error{id: "205680", eType: EXPECTED_ERROR, message: "Failed to query the bill mask rule. "}
var E205681 = Global_error{id: "205681", eType: EXPECTED_ERROR, message: "Failed to query the detail of the system parameter. "}
var E205682 = Global_error{id: "205682", eType: EXPECTED_ERROR, message: "Failed to update the system parameter. "}
var E205683 = Global_error{id: "205683", eType: EXPECTED_ERROR, message: "The customer group cannot be deleted. "}
var E205684 = Global_error{id: "205684", eType: EXPECTED_ERROR, message: "The customer group has been assigned to the marketing message. "}
var E205685 = Global_error{id: "205685", eType: EXPECTED_ERROR, message: "The customer group cannot be bound to a template repeatedly. "}
var E205686 = Global_error{id: "205686", eType: EXPECTED_ERROR, message: "The customer group name already exists. "}
var E205687 = Global_error{id: "205687", eType: EXPECTED_ERROR, message: "The marketing message cannot be deleted. "}
var E205688 = Global_error{id: "205688", eType: EXPECTED_ERROR, message: "The priority exists in the system. "}
var E205689 = Global_error{id: "205689", eType: EXPECTED_ERROR, message: "Failed to creat marketing message. "}
var E205690 = Global_error{id: "205690", eType: EXPECTED_ERROR, message: "Failed to creat sample rule item. "}
var E205691 = Global_error{id: "205691", eType: EXPECTED_ERROR, message: "The number length must be smaller than 32. "}
var E205692 = Global_error{id: "205692", eType: EXPECTED_ERROR, message: "The sampling rule cannot be deleted. "}
var E205693 = Global_error{id: "205693", eType: EXPECTED_ERROR, message: "The default batch cannot be deleted. "}
var E205694 = Global_error{id: "205694", eType: EXPECTED_ERROR, message: "The bill run batch name already exists. "}
var E205695 = Global_error{id: "205695", eType: EXPECTED_ERROR, message: "You did not select any tax packages. "}
var E205696 = Global_error{id: "205696", eType: EXPECTED_ERROR, message: "An error occurred when querying information about the bill run sampling plan. "}
var E205697 = Global_error{id: "205697", eType: EXPECTED_ERROR, message: "An error occurred when deleting information about the bill run sampling plan. "}
var E205698 = Global_error{id: "205698", eType: EXPECTED_ERROR, message: "The sampling plan information already exists. "}
var E205699 = Global_error{id: "205699", eType: EXPECTED_ERROR, message: "An error occurred when updating information about the bill run sampling plan. "}
var E205700 = Global_error{id: "205700", eType: EXPECTED_ERROR, message: "Tax No. must be a number. "}
var E205701 = Global_error{id: "205701", eType: EXPECTED_ERROR, message: "Incorrect node. "}
var E205702 = Global_error{id: "205702", eType: EXPECTED_ERROR, message: "Failed to add new tax batch. "}
var E205703 = Global_error{id: "205703", eType: EXPECTED_ERROR, message: "MSISDN format is not correct. "}
var E205704 = Global_error{id: "205704", eType: EXPECTED_ERROR, message: "Fail to upload file. "}
var E205705 = Global_error{id: "205705", eType: EXPECTED_ERROR, message: "The default customer group cannot be deleted. "}
var E205706 = Global_error{id: "205706", eType: EXPECTED_ERROR, message: "Failed to find the mathed Item Dic table "}
var E205707 = Global_error{id: "205707", eType: EXPECTED_ERROR, message: "The accounts in the imported file can contain only digits and letters. "}
var E205708 = Global_error{id: "205708", eType: EXPECTED_ERROR, message: "The length of the Account Code value cannot exceed 32 digits. "}
var E205709 = Global_error{id: "205709", eType: EXPECTED_ERROR, message: "The scheduled sending rule already exists. "}
var E205710 = Global_error{id: "205710", eType: EXPECTED_ERROR, message: "The bill run batch cannot be deleted. "}
var E205711 = Global_error{id: "205711", eType: EXPECTED_ERROR, message: "The template name already exists. "}
var E205712 = Global_error{id: "205712", eType: EXPECTED_ERROR, message: "An error occurs when you upload or save the template file. "}
var E205713 = Global_error{id: "205713", eType: EXPECTED_ERROR, message: "The language type for the template ID already exists. "}
var E205714 = Global_error{id: "205714", eType: EXPECTED_ERROR, message: "The customer type for the A/C code does not match the selected customer type. "}
var E205715 = Global_error{id: "205715", eType: EXPECTED_ERROR, message: "The customer group ID cannot be empty. "}
var E205716 = Global_error{id: "205716", eType: EXPECTED_ERROR, message: "Failed to upload the template file using the FTP or SFTP protocol. "}
var E205717 = Global_error{id: "205717", eType: EXPECTED_ERROR, message: "Failed to relating bill Insert. "}
var E205718 = Global_error{id: "205718", eType: EXPECTED_ERROR, message: "The job file corresponding to the bill template already exists. "}
var E205719 = Global_error{id: "205719", eType: EXPECTED_ERROR, message: "Failed to obtain the Job file from the prinetNet directory on the Invoice node. "}
var E205720 = Global_error{id: "205720", eType: EXPECTED_ERROR, message: "Failed to query the billing parameter. "}
var E205721 = Global_error{id: "205721", eType: EXPECTED_ERROR, message: "Failed to query bill cycle information. "}
var E205722 = Global_error{id: "205722", eType: EXPECTED_ERROR, message: "The current bill cycle does not exist in the qureying bill cycle summary. "}
var E205723 = Global_error{id: "205723", eType: EXPECTED_ERROR, message: "The bill data of the bill cycle not exists. "}
var E205724 = Global_error{id: "205724", eType: EXPECTED_ERROR, message: "Failed to query the bill summary average information. "}
var E205725 = Global_error{id: "205725", eType: EXPECTED_ERROR, message: "The current bill cycle is not confirmed. "}
var E205726 = Global_error{id: "205726", eType: EXPECTED_ERROR, message: "Failed to download the bills. "}
var E205727 = Global_error{id: "205727", eType: EXPECTED_ERROR, message: "Failed to load the file. "}
var E205728 = Global_error{id: "205728", eType: EXPECTED_ERROR, message: "No BA instance is subscribed to. "}
var E205729 = Global_error{id: "205729", eType: EXPECTED_ERROR, message: "Failed to obtain the XML information. "}
var E205730 = Global_error{id: "205730", eType: EXPECTED_ERROR, message: "Bills cannot be printed for prepaid subscribers. "}
var E205731 = Global_error{id: "205731", eType: EXPECTED_ERROR, message: "Failed to generate the PDF file. "}
var E205732 = Global_error{id: "205732", eType: EXPECTED_ERROR, message: "The database or network connection is abnormal. "}
var E205733 = Global_error{id: "205733", eType: EXPECTED_ERROR, message: "Failed to connect to the WebService service. "}
var E205734 = Global_error{id: "205734", eType: EXPECTED_ERROR, message: "The IP address cannot be blank. "}
var E205735 = Global_error{id: "205735", eType: EXPECTED_ERROR, message: "The XML file cannot be empty. "}
var E205736 = Global_error{id: "205736", eType: EXPECTED_ERROR, message: "An error occurred when the forfeit interface in AR parsed the XML message. "}
var E205737 = Global_error{id: "205737", eType: EXPECTED_ERROR, message: "There is no item that requires settlement cancellation. "}
var E205738 = Global_error{id: "205738", eType: EXPECTED_ERROR, message: "The Billing fails to synchronize the business fee from the CC. "}
var E205739 = Global_error{id: "205739", eType: EXPECTED_ERROR, message: "Failed to synchronize the OCC, rebate, or installment information. "}
var E205740 = Global_error{id: "205740", eType: EXPECTED_ERROR, message: "Failed to query the OCC, rebate, or installment information. "}
var E205741 = Global_error{id: "205741", eType: EXPECTED_ERROR, message: "Failed to synchronize the incentive subscription information. "}
var E205742 = Global_error{id: "205742", eType: EXPECTED_ERROR, message: "Failed to query incentive information. "}
var E205743 = Global_error{id: "205743", eType: EXPECTED_ERROR, message: "Failed to request hot billing. "}
var E205744 = Global_error{id: "205744", eType: EXPECTED_ERROR, message: "No subscriber corresponds to the MSISDN. "}
var E205745 = Global_error{id: "205745", eType: EXPECTED_ERROR, message: "The bill month is incorrect. "}
var E205746 = Global_error{id: "205746", eType: EXPECTED_ERROR, message: "The directory for storing the PDF file is not found. "}
var E205747 = Global_error{id: "205747", eType: EXPECTED_ERROR, message: "No valid data is found when querying customized bill information. "}
var E205748 = Global_error{id: "205748", eType: EXPECTED_ERROR, message: "The value of Effective is not 2. "}
var E205749 = Global_error{id: "205749", eType: EXPECTED_ERROR, message: "The current bill cycle does not exist. "}
var E205750 = Global_error{id: "205750", eType: EXPECTED_ERROR, message: "The number of tasks reaches the maximum. "}
var E205751 = Global_error{id: "205751", eType: EXPECTED_ERROR, message: "Bills cannot be reprinted. "}
var E205752 = Global_error{id: "205752", eType: EXPECTED_ERROR, message: "Bills cannot be reprinted for group subscribers. "}
var E205753 = Global_error{id: "205753", eType: EXPECTED_ERROR, message: "Bills cannot be reprinted for prepaid subscribers. "}
var E205754 = Global_error{id: "205754", eType: EXPECTED_ERROR, message: "Failed to query the inf_ba table. "}
var E205755 = Global_error{id: "205755", eType: EXPECTED_ERROR, message: "Failed to query PDF path  information. "}
var E205756 = Global_error{id: "205756", eType: EXPECTED_ERROR, message: "No valid data is found when querying PDF path information. "}
var E205757 = Global_error{id: "205757", eType: EXPECTED_ERROR, message: "A PDF file with the same name already exists under the account. "}
var E205758 = Global_error{id: "205758", eType: EXPECTED_ERROR, message: "CBP Restart. "}
var E205759 = Global_error{id: "205759", eType: EXPECTED_ERROR, message: "The file name already exists. "}
var E205760 = Global_error{id: "205760", eType: EXPECTED_ERROR, message: "The fee scenario does not exist. "}
var E205761 = Global_error{id: "205761", eType: EXPECTED_ERROR, message: "The SubID value does not match the AcctID value. "}
var E205762 = Global_error{id: "205762", eType: EXPECTED_ERROR, message: "The subscriber does not subscribe to the email bill. "}
var E205763 = Global_error{id: "205763", eType: EXPECTED_ERROR, message: "Failed to send a WebService message to the third-party system. "}
var E205764 = Global_error{id: "205764", eType: EXPECTED_ERROR, message: "Failed to synchronize installment rebates. "}
var E205765 = Global_error{id: "205765", eType: EXPECTED_ERROR, message: "Failed to invoke the queryInvoiceInfo interface. "}
var E205766 = Global_error{id: "205766", eType: EXPECTED_ERROR, message: "Email bills cannot be resent to prepaid subscribers. "}
var E205767 = Global_error{id: "205767", eType: EXPECTED_ERROR, message: "Failed to parse the password. "}
var E205768 = Global_error{id: "205768", eType: EXPECTED_ERROR, message: "Prepaid accounts do not support tax exemption. "}
var E205769 = Global_error{id: "205769", eType: EXPECTED_ERROR, message: "No serviceType group data is found. "}
var E205770 = Global_error{id: "205770", eType: EXPECTED_ERROR, message: "Failed to query prepaid accumulation data. "}
var E205771 = Global_error{id: "205771", eType: EXPECTED_ERROR, message: "An error occurred when parsing CDR data. "}
var E205772 = Global_error{id: "205772", eType: EXPECTED_ERROR, message: "The department of the operator does not exist. "}
var E205773 = Global_error{id: "205773", eType: EXPECTED_ERROR, message: "Bill run cannot be performed for this bill cycle. "}
var E205774 = Global_error{id: "205774", eType: EXPECTED_ERROR, message: "Hot billing cannot be performed. "}
var E205775 = Global_error{id: "205775", eType: EXPECTED_ERROR, message: "Failed to create the rerating task. "}
var E205776 = Global_error{id: "205776", eType: EXPECTED_ERROR, message: "Failed to create the directory for saving the exported files during rerating. "}
var E205777 = Global_error{id: "205777", eType: EXPECTED_ERROR, message: "The CDR file name verification failed. "}
var E205778 = Global_error{id: "205778", eType: EXPECTED_ERROR, message: "The number of lines in the parsing file involved in the rerating process exceeds the maximum. "}
var E205779 = Global_error{id: "205779", eType: EXPECTED_ERROR, message: "The subscriber queried in the rerating process does not exist. "}
var E205780 = Global_error{id: "205780", eType: EXPECTED_ERROR, message: "The data type does not support the synchronization function. "}
var E205781 = Global_error{id: "205781", eType: EXPECTED_ERROR, message: "Only CDRs of postpaid subscribers can be rerated. "}
var E205782 = Global_error{id: "205782", eType: EXPECTED_ERROR, message: "The CDR file size has exceeded the maximum. "}
var E205783 = Global_error{id: "205783", eType: EXPECTED_ERROR, message: "Failed to upload the CDR file. "}
var E205784 = Global_error{id: "205784", eType: EXPECTED_ERROR, message: "Rental CDRs cannot be rerated "}
var E205785 = Global_error{id: "205785", eType: EXPECTED_ERROR, message: "Parameters for updating the database are not found. "}
var E205786 = Global_error{id: "205786", eType: EXPECTED_ERROR, message: "An error occurs when updating the database. "}
var E205787 = Global_error{id: "205787", eType: EXPECTED_ERROR, message: "The data in the background is modified and is different from that submitted in the foreground. "}
var E205788 = Global_error{id: "205788", eType: EXPECTED_ERROR, message: "Failed to execute To Ebill operation. "}
var E205789 = Global_error{id: "205789", eType: EXPECTED_ERROR, message: "An error occurs when creating the system directory for recycling error CDRs. "}
var E205790 = Global_error{id: "205790", eType: EXPECTED_ERROR, message: "Failed to add the number of times the error CDR source file is recycled. "}
var E205791 = Global_error{id: "205791", eType: EXPECTED_ERROR, message: "An error occurs when confirming bill run. "}
var E205792 = Global_error{id: "205792", eType: EXPECTED_ERROR, message: "An error occurs when updating bill run batch instance information. "}
var E205793 = Global_error{id: "205793", eType: EXPECTED_ERROR, message: "An error occurs when inserting a bill run command. "}
var E205794 = Global_error{id: "205794", eType: EXPECTED_ERROR, message: "An error occurs when updating subscriber information for bill run. "}
var E205795 = Global_error{id: "205795", eType: EXPECTED_ERROR, message: "An error occurs when updating account information for bill run. "}
var E205796 = Global_error{id: "205796", eType: EXPECTED_ERROR, message: "The value of the Effective field in another record whose Bill Cycle Type is the same as that of this record is already Current. "}
var E205797 = Global_error{id: "205797", eType: EXPECTED_ERROR, message: "Failed to update bill cycle information when bill run starts. "}
var E205798 = Global_error{id: "205798", eType: EXPECTED_ERROR, message: "Hotbilling failed. "}
var E205799 = Global_error{id: "205799", eType: EXPECTED_ERROR, message: "Data to be added to the operation log file is incorrect. "}
var E205800 = Global_error{id: "205800", eType: EXPECTED_ERROR, message: "No valid data is found when updating customized bill information. "}
var E205801 = Global_error{id: "205801", eType: EXPECTED_ERROR, message: "The Auto Settle task cannot be executed. "}
var E205802 = Global_error{id: "205802", eType: EXPECTED_ERROR, message: "The undo operation cannot be executed. "}
var E205803 = Global_error{id: "205803", eType: EXPECTED_ERROR, message: "Bill run has been performed for this bill cycle. "}
var E205804 = Global_error{id: "205804", eType: EXPECTED_ERROR, message: "The bill cycle is not switched over. "}
var E205805 = Global_error{id: "205805", eType: EXPECTED_ERROR, message: "An error occurs in the system. "}
var E205806 = Global_error{id: "205806", eType: EXPECTED_ERROR, message: "An error occurred when updating the INF_BA_$YYYYMM table upon bill run suspension. "}
var E205807 = Global_error{id: "205807", eType: EXPECTED_ERROR, message: "The bill run batches cannot be reset. "}
var E205808 = Global_error{id: "205808", eType: EXPECTED_ERROR, message: "Test billing cannot be performed. "}
var E205809 = Global_error{id: "205809", eType: EXPECTED_ERROR, message: "Failed to perform test billing. "}
var E205810 = Global_error{id: "205810", eType: EXPECTED_ERROR, message: "Failed to query extended account attributes. "}
var E205811 = Global_error{id: "205811", eType: EXPECTED_ERROR, message: "The account paid mode is blank. "}
var E205812 = Global_error{id: "205812", eType: EXPECTED_ERROR, message: "The group customer information does not exist. "}
var E205813 = Global_error{id: "205813", eType: EXPECTED_ERROR, message: "Failed to query the group member list. "}
var E205814 = Global_error{id: "205814", eType: EXPECTED_ERROR, message: "Failed to query the subgroups that are effective in the group. "}
var E205815 = Global_error{id: "205815", eType: EXPECTED_ERROR, message: "The group number does not exist. "}
var E205816 = Global_error{id: "205816", eType: EXPECTED_ERROR, message: "Failed to invoke the CBPAgent interface to synchronize Billing requests. "}
var E205817 = Global_error{id: "205817", eType: EXPECTED_ERROR, message: "Test billing cannot be performed on this account. "}
var E205818 = Global_error{id: "205818", eType: EXPECTED_ERROR, message: "Hot billing cannot be performed for this bill cycle. "}
var E205819 = Global_error{id: "205819", eType: EXPECTED_ERROR, message: "A new test billing cannot be performed on this subscriber because the current test billing or hot billing is not finished yet. "}
var E205820 = Global_error{id: "205820", eType: EXPECTED_ERROR, message: "The account is not an individual account or the account does not exist. "}
var E205821 = Global_error{id: "205821", eType: EXPECTED_ERROR, message: "HotBill Invoice cannot be performed. "}
var E205822 = Global_error{id: "205822", eType: EXPECTED_ERROR, message: "Hot billing cannot be executed. "}
var E205823 = Global_error{id: "205823", eType: EXPECTED_ERROR, message: "Hot billing cannot be executed for group accounts. "}
var E205824 = Global_error{id: "205824", eType: EXPECTED_ERROR, message: "A new hot billing task cannot be executed. "}
var E205825 = Global_error{id: "205825", eType: EXPECTED_ERROR, message: "Invalid offer. "}
var E205826 = Global_error{id: "205826", eType: EXPECTED_ERROR, message: "Hot billing cannot be performed on the accounts having multiple subaccounts, each of which corresponds to multiple subscribers. "}
var E205827 = Global_error{id: "205827", eType: EXPECTED_ERROR, message: "Hot billing cannot be executed because the subscribers under the account expired. "}
var E205828 = Global_error{id: "205828", eType: EXPECTED_ERROR, message: "Hot billing cannot be executed for deregistered subscribers. "}
var E205829 = Global_error{id: "205829", eType: EXPECTED_ERROR, message: "Hot billing cannot be executed for entrusted payment accounts. "}
var E205830 = Global_error{id: "205830", eType: EXPECTED_ERROR, message: "Failed to query group information. "}
var E205831 = Global_error{id: "205831", eType: EXPECTED_ERROR, message: "Failed to import PDF bill files to the database. "}
var E205832 = Global_error{id: "205832", eType: EXPECTED_ERROR, message: "The PDF bill import table is not found. "}
var E205833 = Global_error{id: "205833", eType: EXPECTED_ERROR, message: "The data exists in the database. "}
var E205834 = Global_error{id: "205834", eType: EXPECTED_ERROR, message: "A field is empty when importing CDRs to the database. "}
var E205835 = Global_error{id: "205835", eType: EXPECTED_ERROR, message: "A field is not a number when importing CDRs to the database. "}
var E205836 = Global_error{id: "205836", eType: EXPECTED_ERROR, message: "A field is not a date when importing CDRs to the database. "}
var E205837 = Global_error{id: "205837", eType: EXPECTED_ERROR, message: "The length of a field exceeds the specified value when importing CDRs to the database. "}
var E205838 = Global_error{id: "205838", eType: EXPECTED_ERROR, message: "Incorrect CDR format for sorting CDRs. "}
var E205839 = Global_error{id: "205839", eType: EXPECTED_ERROR, message: "The SUBID field is empty during CDR sorting. "}
var E205840 = Global_error{id: "205840", eType: EXPECTED_ERROR, message: "The BillCycleID field is empty or is in an incorrect format during CDR sorting. "}
var E205841 = Global_error{id: "205841", eType: EXPECTED_ERROR, message: "The SCHEME_ID value does not exist in the DEF_SCHEME_DETAIL table during CDR sorting. "}
var E205842 = Global_error{id: "205842", eType: EXPECTED_ERROR, message: "Incorrect CDR format for accumulating CDRs. "}
var E205843 = Global_error{id: "205843", eType: EXPECTED_ERROR, message: "The bill cycle does not exist. "}
var E205844 = Global_error{id: "205844", eType: EXPECTED_ERROR, message: "The bill cycle has expired. "}
var E205845 = Global_error{id: "205845", eType: EXPECTED_ERROR, message: "Bill run is being executed for this bill cycle. "}
var E205846 = Global_error{id: "205846", eType: EXPECTED_ERROR, message: "Invalid IVR language type. "}
var E205847 = Global_error{id: "205847", eType: EXPECTED_ERROR, message: "Invalid SMS language type. "}
var E205848 = Global_error{id: "205848", eType: EXPECTED_ERROR, message: "The postpaid subscriber is not allowed to perform the activation. "}
var E205849 = Global_error{id: "205849", eType: EXPECTED_ERROR, message: "The subscriber's account balance is smaller than the threshold for activation. Activation is not allowed. "}
var E205850 = Global_error{id: "205850", eType: EXPECTED_ERROR, message: "The subscriber balance after recharge is greater than the upper limit of account balance. "}
var E205851 = Global_error{id: "205851", eType: EXPECTED_ERROR, message: "The list of offers that the subscriber subscribes to does not contain the FN service. "}
var E205852 = Global_error{id: "205852", eType: EXPECTED_ERROR, message: "The new FN to be changed to cannot be blank. "}
var E205853 = Global_error{id: "205853", eType: EXPECTED_ERROR, message: "The value of Effective Time for the new FN cannot be later than or equal to the value of Expiration Time. "}
var E205854 = Global_error{id: "205854", eType: EXPECTED_ERROR, message: "Failed to analyze numbers and query the national number prefix. "}
var E205855 = Global_error{id: "205855", eType: EXPECTED_ERROR, message: "Number analysis failed. The brand does not allow the subscriber to set an inter-network number as an FN number. "}
var E205856 = Global_error{id: "205856", eType: EXPECTED_ERROR, message: "Number analysis failed. The brand does not allow the subscriber to set an international number as an FN number. "}
var E205857 = Global_error{id: "205857", eType: EXPECTED_ERROR, message: "The FN group number does not exist. "}
var E205858 = Global_error{id: "205858", eType: EXPECTED_ERROR, message: "The value of Expiration Time for the FN to be added is earlier than the current time. "}
var E205859 = Global_error{id: "205859", eType: EXPECTED_ERROR, message: "The subscriber has not subscribed to any home zone products. "}
var E205860 = Global_error{id: "205860", eType: EXPECTED_ERROR, message: "The subscriber does not set any home zone. "}
var E205861 = Global_error{id: "205861", eType: EXPECTED_ERROR, message: "The cell ID already exists. "}
var E205862 = Global_error{id: "205862", eType: EXPECTED_ERROR, message: "A cell belongs to only one home zone. "}
var E205863 = Global_error{id: "205863", eType: EXPECTED_ERROR, message: "The number segment route does not exist. "}
var E205864 = Global_error{id: "205864", eType: EXPECTED_ERROR, message: "The subscriber cannot claim missing because the subscriber is already in the Claim Missing state. "}
var E205865 = Global_error{id: "205865", eType: EXPECTED_ERROR, message: "The subscriber cannot disclaim missing because the subscriber is not in the Claim Missing state. "}
var E205866 = Global_error{id: "205866", eType: EXPECTED_ERROR, message: "The value of Suspend Days entered to suspend a subscriber must be larger than zero. "}
var E205867 = Global_error{id: "205867", eType: EXPECTED_ERROR, message: "The IMSI cannot be changed because the subscriber does not have the IMSI attribute. "}
var E205868 = Global_error{id: "205868", eType: EXPECTED_ERROR, message: "The original IMSI is not a number. "}
var E205869 = Global_error{id: "205869", eType: EXPECTED_ERROR, message: "The new IMSI is not a number. "}
var E205870 = Global_error{id: "205870", eType: EXPECTED_ERROR, message: "The new and original IMSIs must be different. "}
var E205871 = Global_error{id: "205871", eType: EXPECTED_ERROR, message: "The original IMSI is incorrect. "}
var E205872 = Global_error{id: "205872", eType: EXPECTED_ERROR, message: "The subscriber attribute to be modified cannot be blank. "}
var E205873 = Global_error{id: "205873", eType: EXPECTED_ERROR, message: "The postpaid account attribute is added when modifying the prepaid subscriber account information. "}
var E205874 = Global_error{id: "205874", eType: EXPECTED_ERROR, message: "The prepaid account attribute is added when modifying the postpaid subscriber account information. "}
var E205875 = Global_error{id: "205875", eType: EXPECTED_ERROR, message: "The credit amount cannot be smaller than 0. "}
var E205876 = Global_error{id: "205876", eType: EXPECTED_ERROR, message: "The date of birth must be earlier than the current date. "}
var E205877 = Global_error{id: "205877", eType: EXPECTED_ERROR, message: "The customer does not subscribe to the offer. "}
var E205878 = Global_error{id: "205878", eType: EXPECTED_ERROR, message: "The subscriber does not subscribe to the Call Screen service. "}
var E205879 = Global_error{id: "205879", eType: EXPECTED_ERROR, message: "The total number of call screening numbers exceeds the upper limit. "}
var E205880 = Global_error{id: "205880", eType: EXPECTED_ERROR, message: "The call screening type must be blacklist or whitelist. "}
var E205881 = Global_error{id: "205881", eType: EXPECTED_ERROR, message: "The service request has been submitted and processed successfully. "}
var E205882 = Global_error{id: "205882", eType: EXPECTED_ERROR, message: "The service request is submitted and being processed. "}
var E205883 = Global_error{id: "205883", eType: EXPECTED_ERROR, message: "The number of characters contained in the password exceeds 67. "}
var E205884 = Global_error{id: "205884", eType: EXPECTED_ERROR, message: "The password cannot be blank. "}
var E205885 = Global_error{id: "205885", eType: EXPECTED_ERROR, message: "The system cannot handle the concurrent services of the same type. "}
var E205886 = Global_error{id: "205886", eType: EXPECTED_ERROR, message: "Invalid bill cycle type. "}
var E205887 = Global_error{id: "205887", eType: EXPECTED_ERROR, message: "The measurement data does not exist. "}
var E205888 = Global_error{id: "205888", eType: EXPECTED_ERROR, message: "The phone number is duplicated. "}
var E205889 = Global_error{id: "205889", eType: EXPECTED_ERROR, message: "The count of numbers to be processed is 0. "}
var E205890 = Global_error{id: "205890", eType: EXPECTED_ERROR, message: "The service is not available for an ordinary child card subscriber. "}
var E205891 = Global_error{id: "205891", eType: EXPECTED_ERROR, message: "Incorrect email format. "}
var E205892 = Global_error{id: "205892", eType: EXPECTED_ERROR, message: "Failed to verify the life cycle state. "}
var E205893 = Global_error{id: "205893", eType: EXPECTED_ERROR, message: "Failed to verify the management state. "}
var E205894 = Global_error{id: "205894", eType: EXPECTED_ERROR, message: "Failed to verify the country code. "}
var E205895 = Global_error{id: "205895", eType: EXPECTED_ERROR, message: "Failed to verify the area code. "}
var E205896 = Global_error{id: "205896", eType: EXPECTED_ERROR, message: "The value of the INTERVALDAYS attribute of the subbrand does not exist. "}
var E205897 = Global_error{id: "205897", eType: EXPECTED_ERROR, message: "No record found. "}
var E205898 = Global_error{id: "205898", eType: EXPECTED_ERROR, message: "The offer takes effect at a specified time. The effective date cannot be blank or later than January 1, 2037. "}
var E205899 = Global_error{id: "205899", eType: EXPECTED_ERROR, message: "Incorrect effective mode. "}
var E205900 = Global_error{id: "205900", eType: EXPECTED_ERROR, message: "The subscription list and unsubscription list of the offer cannot be blank at the same time. "}
var E205901 = Global_error{id: "205901", eType: EXPECTED_ERROR, message: "The subscriber has not subscribed to the offer to be modified or unsubscribed from. "}
var E205902 = Global_error{id: "205902", eType: EXPECTED_ERROR, message: "The subbrand attributes do not exist. "}
var E205903 = Global_error{id: "205903", eType: EXPECTED_ERROR, message: "The routing number cannot be blank. "}
var E205904 = Global_error{id: "205904", eType: EXPECTED_ERROR, message: "Week Stop cannot be earlier than Week Start. "}
var E205905 = Global_error{id: "205905", eType: EXPECTED_ERROR, message: "The value of Expiration Time for the Call Screen service must be later than the current date. "}
var E205906 = Global_error{id: "205906", eType: EXPECTED_ERROR, message: "The value of Expiration Time for the Call Screen service must be later than the value of Effective Time. "}
var E205907 = Global_error{id: "205907", eType: EXPECTED_ERROR, message: "The new call screening type is the same as the original one. "}
var E205908 = Global_error{id: "205908", eType: EXPECTED_ERROR, message: "There is no available CBP in the system. "}
var E205909 = Global_error{id: "205909", eType: EXPECTED_ERROR, message: "The current version does not support the discrete number scheme. "}
var E205910 = Global_error{id: "205910", eType: EXPECTED_ERROR, message: "The value corresponding to the operation type must be 1 or 2. "}
var E205911 = Global_error{id: "205911", eType: EXPECTED_ERROR, message: "The value corresponding to the call notification type must be 1 or 2. "}
var E205912 = Global_error{id: "205912", eType: EXPECTED_ERROR, message: "The threshold cannot be less than 0. "}
var E205913 = Global_error{id: "205913", eType: EXPECTED_ERROR, message: "Incorrect value length. "}
var E205914 = Global_error{id: "205914", eType: EXPECTED_ERROR, message: "Enter one or more call screen numbers. "}
var E205915 = Global_error{id: "205915", eType: EXPECTED_ERROR, message: "The threshold ranges for lower balance notification to be deleted overlap. "}
var E205916 = Global_error{id: "205916", eType: EXPECTED_ERROR, message: "The new threshold range for the low balance notification is the same as the existing range. "}
var E205917 = Global_error{id: "205917", eType: EXPECTED_ERROR, message: "The new threshold range for lower balance notification overlaps a threshold range in the database. "}
var E205918 = Global_error{id: "205918", eType: EXPECTED_ERROR, message: "The data does not exist. "}
var E205919 = Global_error{id: "205919", eType: EXPECTED_ERROR, message: "Failed to obtain the BMP ID. "}
var E205920 = Global_error{id: "205920", eType: EXPECTED_ERROR, message: "The short message file does not exist. "}
var E205921 = Global_error{id: "205921", eType: EXPECTED_ERROR, message: "Failed to save the short message to a file on the BMP. "}
var E205922 = Global_error{id: "205922", eType: EXPECTED_ERROR, message: "Failed to synchronize the short message file to the CBP. "}
var E205923 = Global_error{id: "205923", eType: EXPECTED_ERROR, message: "Failed to synchronize the short message file to the SCP. "}
var E205924 = Global_error{id: "205924", eType: EXPECTED_ERROR, message: "Failed to save the BMP short messages. "}
var E205925 = Global_error{id: "205925", eType: EXPECTED_ERROR, message: "The file to be imported is blank. "}
var E205926 = Global_error{id: "205926", eType: EXPECTED_ERROR, message: "Failed to create the file. "}
var E205927 = Global_error{id: "205927", eType: EXPECTED_ERROR, message: "Invalid payment mode. "}
var E205928 = Global_error{id: "205928", eType: EXPECTED_ERROR, message: "The FN cannot be blank. "}
var E205929 = Global_error{id: "205929", eType: EXPECTED_ERROR, message: "The new FN already exists. "}
var E205930 = Global_error{id: "205930", eType: EXPECTED_ERROR, message: "The value of operation type must be 1 or 2. "}
var E205931 = Global_error{id: "205931", eType: EXPECTED_ERROR, message: "The user has been added to the group. "}
var E205932 = Global_error{id: "205932", eType: EXPECTED_ERROR, message: "The blacklisting times cannot be reset because the subscriber is in the Blacklist state. "}
var E205933 = Global_error{id: "205933", eType: EXPECTED_ERROR, message: "You cannot delete the subscriber from the blacklist because the subscriber is not in the Blacklist state. "}
var E205934 = Global_error{id: "205934", eType: EXPECTED_ERROR, message: "The subscriber cannot be added to the blacklist because the subscriber is in the Blacklist state. "}
var E205935 = Global_error{id: "205935", eType: EXPECTED_ERROR, message: "Failed to analyze the number because the query of FN national number prefix failed. "}
var E205936 = Global_error{id: "205936", eType: EXPECTED_ERROR, message: "The CUG product is not found in the system. "}
var E205937 = Global_error{id: "205937", eType: EXPECTED_ERROR, message: "Multiple CUG products are found in the system. "}
var E205938 = Global_error{id: "205938", eType: EXPECTED_ERROR, message: "The number of the CUGs that the subscriber has joined reaches the upper limit. "}
var E205939 = Global_error{id: "205939", eType: EXPECTED_ERROR, message: "The CUG ID cannot be blank. "}
var E205940 = Global_error{id: "205940", eType: EXPECTED_ERROR, message: "Failed to transfer the file to the BMP using SFTP. "}
var E205941 = Global_error{id: "205941", eType: EXPECTED_ERROR, message: "The old and new passwords cannot be the same. "}
var E205942 = Global_error{id: "205942", eType: EXPECTED_ERROR, message: "The network that the subscriber number belongs to does not support the password function. "}
var E205943 = Global_error{id: "205943", eType: EXPECTED_ERROR, message: "Incorrect password. Enter the password again. "}
var E205944 = Global_error{id: "205944", eType: EXPECTED_ERROR, message: "Failed to change the password. "}
var E205945 = Global_error{id: "205945", eType: EXPECTED_ERROR, message: "The values of SDP_LOCATION and SDPNO do not match. "}
var E205946 = Global_error{id: "205946", eType: EXPECTED_ERROR, message: "The encrypted text of the new password cannot be greater than 67 characters. "}
var E205947 = Global_error{id: "205947", eType: EXPECTED_ERROR, message: "The value of Effective Time for the home zone cannot be later than the value of Expiration Time. "}
var E205948 = Global_error{id: "205948", eType: EXPECTED_ERROR, message: "The value of Expiration Time for the home zone must be later than the current time. "}
var E205949 = Global_error{id: "205949", eType: EXPECTED_ERROR, message: "Invalid operation type. "}
var E205950 = Global_error{id: "205950", eType: EXPECTED_ERROR, message: "Invalid subscriber payment type. "}
var E205951 = Global_error{id: "205951", eType: EXPECTED_ERROR, message: "The credit limit level of the subscriber cannot be a negative number. "}
var E205952 = Global_error{id: "205952", eType: EXPECTED_ERROR, message: "The credit limit in the subscriber's main account cannot be a negative number. "}
var E205953 = Global_error{id: "205953", eType: EXPECTED_ERROR, message: "The credit limit level of the subscriber and the credit limit level of the main account cannot be blank at the same time. "}
var E205954 = Global_error{id: "205954", eType: EXPECTED_ERROR, message: "The range from lowbalgate to upbalgate cannot overlap with other records. "}
var E205955 = Global_error{id: "205955", eType: EXPECTED_ERROR, message: "The values of Min. Recharge Amount and Max. Recharge Amount for EVC recharge cannot overlap with other records. "}
var E205956 = Global_error{id: "205956", eType: EXPECTED_ERROR, message: "The value length of lowbalgate cannot be greater than 18 digits. "}
var E205957 = Global_error{id: "205957", eType: EXPECTED_ERROR, message: "The value of AccessCode is blank in the database. "}
var E205958 = Global_error{id: "205958", eType: EXPECTED_ERROR, message: "The new password cannot be blank. Enter the password again. "}
var E205959 = Global_error{id: "205959", eType: EXPECTED_ERROR, message: "The new home zone ID cannot be blank. "}
var E205960 = Global_error{id: "205960", eType: EXPECTED_ERROR, message: "Incorrect operation type. "}
var E205961 = Global_error{id: "205961", eType: EXPECTED_ERROR, message: "Incorrect account number. "}
var E205962 = Global_error{id: "205962", eType: EXPECTED_ERROR, message: "The Call Screen service is not enabled. "}
var E205963 = Global_error{id: "205963", eType: EXPECTED_ERROR, message: "The salary cannot be smaller than 0. "}
var E205964 = Global_error{id: "205964", eType: EXPECTED_ERROR, message: "Incorrect input parameter values. "}
var E205965 = Global_error{id: "205965", eType: EXPECTED_ERROR, message: "The customer can have only one shared account. "}
var E205966 = Global_error{id: "205966", eType: EXPECTED_ERROR, message: "The bill cycle types of all accounts under the customer must be the same. "}
var E205967 = Global_error{id: "205967", eType: EXPECTED_ERROR, message: "When the effective mode is Immediately, and the value of EffectiveDate is not blank, the date specified by EffectiveDate cannot be later than the current date. "}
var E205968 = Global_error{id: "205968", eType: EXPECTED_ERROR, message: "The subscription key is mandatory when you change the subscription status of an offer. "}
var E205969 = Global_error{id: "205969", eType: EXPECTED_ERROR, message: "The value of TypeDetail must be 0 or 3. "}
var E205970 = Global_error{id: "205970", eType: EXPECTED_ERROR, message: "The brand ID is available only when the value of TypeDetail is 3. "}
var E205971 = Global_error{id: "205971", eType: EXPECTED_ERROR, message: "The value of Expiration Time cannot be earlier than the value of Effective Time. "}
var E205972 = Global_error{id: "205972", eType: EXPECTED_ERROR, message: "The value of Effective Time must be later than the current date when the effective mode is set to Take effect at a specified time. "}
var E205973 = Global_error{id: "205973", eType: EXPECTED_ERROR, message: "The main product or component ID is duplicated with an existing ID. "}
var E205974 = Global_error{id: "205974", eType: EXPECTED_ERROR, message: "When the value of AllowSubDuration for an optional offer is greater than 0, idle subscribers cannot subscribe to the offer. "}
var E205975 = Global_error{id: "205975", eType: EXPECTED_ERROR, message: "The subscriber network in the registration interface does not support the SMS, but the AsCustNotifyNumber attribute is transferred. "}
var E205976 = Global_error{id: "205976", eType: EXPECTED_ERROR, message: "Offers with the parent and child card service are not available for a customer with multiple subscribers. "}
var E205977 = Global_error{id: "205977", eType: EXPECTED_ERROR, message: "The new value of Expiration Time cannot be later than the original value. "}
var E205978 = Global_error{id: "205978", eType: EXPECTED_ERROR, message: "The account code is mandatory. "}
var E205979 = Global_error{id: "205979", eType: EXPECTED_ERROR, message: "The account ID is mandatory. "}
var E205980 = Global_error{id: "205980", eType: EXPECTED_ERROR, message: "The customer code is mandatory. "}
var E205981 = Global_error{id: "205981", eType: EXPECTED_ERROR, message: "The subscriber code is mandatory. "}
var E205982 = Global_error{id: "205982", eType: EXPECTED_ERROR, message: "The account code is mandatory when querying a specific account. "}
var E205983 = Global_error{id: "205983", eType: EXPECTED_ERROR, message: "The subscriber number is mandatory. "}
var E205984 = Global_error{id: "205984", eType: EXPECTED_ERROR, message: "The account corresponding to the account code is not found. "}
var E205985 = Global_error{id: "205985", eType: EXPECTED_ERROR, message: "The value of transfer type must be 0, 1, or 2. "}
var E205986 = Global_error{id: "205986", eType: EXPECTED_ERROR, message: "The account type is not found. "}
var E205987 = Global_error{id: "205987", eType: EXPECTED_ERROR, message: "The value is not found in the account type list. "}
var E205988 = Global_error{id: "205988", eType: EXPECTED_ERROR, message: "Incorrect transfer amount format. "}
var E205989 = Global_error{id: "205989", eType: EXPECTED_ERROR, message: "The value cannot be smaller than or equal to 0. "}
var E205990 = Global_error{id: "205990", eType: EXPECTED_ERROR, message: "The transferor and transferee must exist in the OCS. "}
var E205991 = Global_error{id: "205991", eType: EXPECTED_ERROR, message: "The transferee or transferor's account code does not belong to the home customer. "}
var E205992 = Global_error{id: "205992", eType: EXPECTED_ERROR, message: "The payment mode cannot be hybrid. "}
var E205993 = Global_error{id: "205993", eType: EXPECTED_ERROR, message: "The value exceeds the maximum length. "}
var E205994 = Global_error{id: "205994", eType: EXPECTED_ERROR, message: "Subaccounts cannot transfer balances. "}
var E205995 = Global_error{id: "205995", eType: EXPECTED_ERROR, message: "The transfer amount cannot be smaller than the loan amount. "}
var E205996 = Global_error{id: "205996", eType: EXPECTED_ERROR, message: "The subscriber does not recharge after first time activation. "}
var E205997 = Global_error{id: "205997", eType: EXPECTED_ERROR, message: "The account codes of the transferor and transferee cannot be the same. "}
var E205998 = Global_error{id: "205998", eType: EXPECTED_ERROR, message: "The offer must be a primary or optional offer. "}
var E205999 = Global_error{id: "205999", eType: EXPECTED_ERROR, message: "The total number of subscriber licenses is insufficient. "}
var E206000 = Global_error{id: "206000", eType: EXPECTED_ERROR, message: "The total number of active subscriber licenses is insufficient. "}
var E206001 = Global_error{id: "206001", eType: EXPECTED_ERROR, message: "The Effective Mode must be Immediately because there are primary offers to be changed in future. "}
var E206002 = Global_error{id: "206002", eType: EXPECTED_ERROR, message: "The effective mode of unsubscription must be Immediately because the offer expired but the subscription relationship is valid. "}
var E206003 = Global_error{id: "206003", eType: EXPECTED_ERROR, message: "The effective mode of unsubscription must be Immediately because the subscription relationship is not Immediately. "}
var E206004 = Global_error{id: "206004", eType: EXPECTED_ERROR, message: "The subscription relationship of the offer is already normal. "}
var E206005 = Global_error{id: "206005", eType: EXPECTED_ERROR, message: "The subscription relationship of the offer is already suspended. "}
var E206006 = Global_error{id: "206006", eType: EXPECTED_ERROR, message: "Services that are mutually exclusive cannot be processed by the same customer at the same time. "}
var E206007 = Global_error{id: "206007", eType: EXPECTED_ERROR, message: "The message is sent successfully. Please wait to callback. "}
var E206008 = Global_error{id: "206008", eType: EXPECTED_ERROR, message: "Services of the same type for the same customer cannot be processed at the same time. "}
var E206009 = Global_error{id: "206009", eType: EXPECTED_ERROR, message: "Failed to synchronize data to the SCP. "}
var E206010 = Global_error{id: "206010", eType: EXPECTED_ERROR, message: "The calculated value for Expiration Time is earlier than the value of Effective Time. "}
var E206011 = Global_error{id: "206011", eType: EXPECTED_ERROR, message: "The value of DeductFromParent must be 0 or 1. "}
var E206012 = Global_error{id: "206012", eType: EXPECTED_ERROR, message: "The value of RequestAction must be 0 or 2. "}
var E206013 = Global_error{id: "206013", eType: EXPECTED_ERROR, message: "The OperationFeeAmt parameter is mandatory when the value of RequestAction is 0 (one-off fee deduction). "}
var E206014 = Global_error{id: "206014", eType: EXPECTED_ERROR, message: "Invalid ModifyType value. "}
var E206015 = Global_error{id: "206015", eType: EXPECTED_ERROR, message: "The subscriber does not subscribe to this product. "}
var E206016 = Global_error{id: "206016", eType: EXPECTED_ERROR, message: "Invalid OperateType value. "}
var E206017 = Global_error{id: "206017", eType: EXPECTED_ERROR, message: "The product does not take effect. "}
var E206018 = Global_error{id: "206018", eType: EXPECTED_ERROR, message: "The account information cannot be modified when registering a new customer. "}
var E206019 = Global_error{id: "206019", eType: EXPECTED_ERROR, message: "The exterior SubscriberNo cannot be set when registering a subscriber not for an old customer. "}
var E206020 = Global_error{id: "206020", eType: EXPECTED_ERROR, message: "The Subscriber No., Customer Code, and Customer ID parameters are mandatory when registering a subscriber for an old customer. Set at least one of the Subscriber No., Customer Code, and Customer ID. "}
var E206021 = Global_error{id: "206021", eType: EXPECTED_ERROR, message: "An account must be specified when registering a subscriber for an old customer. "}
var E206022 = Global_error{id: "206022", eType: EXPECTED_ERROR, message: "The Subscriber No., Customer Code, and Customer ID parameter must be set to obtain the customer information when registering a subscriber for an old customer. "}
var E206023 = Global_error{id: "206023", eType: EXPECTED_ERROR, message: "Invalid customer code. "}
var E206024 = Global_error{id: "206024", eType: EXPECTED_ERROR, message: "Invalid Customer ID. "}
var E206025 = Global_error{id: "206025", eType: EXPECTED_ERROR, message: "A subscriber cannot be registered for an expired old customer. "}
var E206026 = Global_error{id: "206026", eType: EXPECTED_ERROR, message: "Invalid account code or account ID for the modified account. "}
var E206027 = Global_error{id: "206027", eType: EXPECTED_ERROR, message: "Many-to-many primary offer change is not supported. "}
var E206028 = Global_error{id: "206028", eType: EXPECTED_ERROR, message: "All the subscribers or none of the subscribers bound to the changed primary offer need to be entered. "}
var E206029 = Global_error{id: "206029", eType: EXPECTED_ERROR, message: "The new primary offer must be different from the original primary offer. "}
var E206030 = Global_error{id: "206030", eType: EXPECTED_ERROR, message: "The Expire Date parameter is not required. "}
var E206031 = Global_error{id: "206031", eType: EXPECTED_ERROR, message: "The value of OperationCount must be greater than or equal to 1. "}
var E206032 = Global_error{id: "206032", eType: EXPECTED_ERROR, message: "Incorrect account type. "}
var E206033 = Global_error{id: "206033", eType: EXPECTED_ERROR, message: "Re-adjustment is not allowed within a specified period. "}
var E206034 = Global_error{id: "206034", eType: EXPECTED_ERROR, message: "The value of Expiration Time for the account cannot be earlier than the current time. "}
var E206035 = Global_error{id: "206035", eType: EXPECTED_ERROR, message: "The account type does not match the subscriber type. "}
var E206036 = Global_error{id: "206036", eType: EXPECTED_ERROR, message: "In a random number scheme, data of all CBPs must be configured in the OCS_SubAmount table. "}
var E206037 = Global_error{id: "206037", eType: EXPECTED_ERROR, message: "The SMS code does not exist. "}
var E206038 = Global_error{id: "206038", eType: EXPECTED_ERROR, message: "The changed subscriber cannot be automatically adapted. "}
var E206039 = Global_error{id: "206039", eType: EXPECTED_ERROR, message: "Failed to create log files. "}
var E206040 = Global_error{id: "206040", eType: EXPECTED_ERROR, message: "Failed to transfer log files to the BMP by using SFTP. "}
var E206041 = Global_error{id: "206041", eType: EXPECTED_ERROR, message: "Incorrect value format of AdditionalInfo. "}
var E206042 = Global_error{id: "206042", eType: EXPECTED_ERROR, message: "The value of Expiration Time for the account type cannot be changed. "}
var E206043 = Global_error{id: "206043", eType: EXPECTED_ERROR, message: "The account adjustment list and validity period cannot be blank. "}
var E206044 = Global_error{id: "206044", eType: EXPECTED_ERROR, message: "The validity period of the postpaid subscriber cannot be adjusted. "}
var E206045 = Global_error{id: "206045", eType: EXPECTED_ERROR, message: "The validity period cannot be blank. "}
var E206046 = Global_error{id: "206046", eType: EXPECTED_ERROR, message: "The entered account code is not the account code of the customer to which the subscriber belongs. "}
var E206047 = Global_error{id: "206047", eType: EXPECTED_ERROR, message: "The product corresponding to the key expired. "}
var E206048 = Global_error{id: "206048", eType: EXPECTED_ERROR, message: "The adjusted amount cannot be blank. "}
var E206049 = Global_error{id: "206049", eType: EXPECTED_ERROR, message: "The value of QueryType must be 0, 1, or 2. "}
var E206050 = Global_error{id: "206050", eType: EXPECTED_ERROR, message: "The AccountCode cannot be blank when the value of QueryType is 2. "}
var E206051 = Global_error{id: "206051", eType: EXPECTED_ERROR, message: "The operation is not allowed for the subaccount. "}
var E206052 = Global_error{id: "206052", eType: EXPECTED_ERROR, message: "Account-level subscription is not allowed because the customer does not have shared accounts. "}
var E206053 = Global_error{id: "206053", eType: EXPECTED_ERROR, message: "Account-level subscription is not allowed because the entered account is not a shared account of the customer. "}
var E206054 = Global_error{id: "206054", eType: EXPECTED_ERROR, message: "Incorrect operation type for changing an optional offer. "}
var E206055 = Global_error{id: "206055", eType: EXPECTED_ERROR, message: "The changing operation only applies to offers in the suspend or normal state. "}
var E206056 = Global_error{id: "206056", eType: EXPECTED_ERROR, message: "Primary offer change in one-to-many or many-to-one mode can support only the mode of taking effect immediately. "}
var E206057 = Global_error{id: "206057", eType: EXPECTED_ERROR, message: "System configuration error. "}
var E206058 = Global_error{id: "206058", eType: EXPECTED_ERROR, message: "Invalid object type. "}
var E206059 = Global_error{id: "206059", eType: EXPECTED_ERROR, message: "The value of the OperType parameter must be 1 or 3. "}
var E206060 = Global_error{id: "206060", eType: EXPECTED_ERROR, message: "Accounts cannot be modified in the CBS solution. "}
var E206061 = Global_error{id: "206061", eType: EXPECTED_ERROR, message: "There are multiple Call Screening products in the to-be-subscribed optional offer list of a subscriber. "}
var E206062 = Global_error{id: "206062", eType: EXPECTED_ERROR, message: "The status of the Call Screening service is abnormal. "}
var E206063 = Global_error{id: "206063", eType: EXPECTED_ERROR, message: "The Home Zone service has been enabled. "}
var E206064 = Global_error{id: "206064", eType: EXPECTED_ERROR, message: "The Home Zone service cannot be disabled because it has not been enabled. "}
var E206065 = Global_error{id: "206065", eType: EXPECTED_ERROR, message: "There are multiple Home Zone products in the to-be-subscribed optional offer list of a subscriber. "}
var E206066 = Global_error{id: "206066", eType: EXPECTED_ERROR, message: "The length of the SMS message exceeds the upper limit. "}
var E206067 = Global_error{id: "206067", eType: EXPECTED_ERROR, message: "The value of Validity Increment must be greater than 0 if the subscriber is not activated. "}
var E206068 = Global_error{id: "206068", eType: EXPECTED_ERROR, message: "The CUG type cannot be blank. "}
var E206069 = Global_error{id: "206069", eType: EXPECTED_ERROR, message: "The current operation is not allowed because the customer has account information that will take effect in the future. "}
var E206070 = Global_error{id: "206070", eType: EXPECTED_ERROR, message: "Submitting tasks to the batch service thread pool times out. "}
var E206071 = Global_error{id: "206071", eType: EXPECTED_ERROR, message: "Invalid resume operation type. "}
var E206072 = Global_error{id: "206072", eType: EXPECTED_ERROR, message: "The CUG name cannot be blank. "}
var E206073 = Global_error{id: "206073", eType: EXPECTED_ERROR, message: "The CUG type does not exist in the system. "}
var E206074 = Global_error{id: "206074", eType: EXPECTED_ERROR, message: "The CUG ID already exists. "}
var E206075 = Global_error{id: "206075", eType: EXPECTED_ERROR, message: "The CUG name already exists. "}
var E206076 = Global_error{id: "206076", eType: EXPECTED_ERROR, message: "Invalid operation type value. "}
var E206077 = Global_error{id: "206077", eType: EXPECTED_ERROR, message: "The application time cannot be earlier than current time. "}
var E206078 = Global_error{id: "206078", eType: EXPECTED_ERROR, message: "The Expiration Time cannot be earlier than current time and cannot be later than 2037. "}
var E206079 = Global_error{id: "206079", eType: EXPECTED_ERROR, message: "The application time cannot be later than Expiration Time. "}
var E206080 = Global_error{id: "206080", eType: EXPECTED_ERROR, message: "The subscriber number must not be changed when the validity period of an offer subscribed to by the subscriber is changed. "}
var E206081 = Global_error{id: "206081", eType: EXPECTED_ERROR, message: "Only subaccounts of the OCS can transfer balances to each other, and the value of transfer type must be 2. "}
var E206082 = Global_error{id: "206082", eType: EXPECTED_ERROR, message: "Invalid value of CrossPPSPOSFlag. "}
var E206083 = Global_error{id: "206083", eType: EXPECTED_ERROR, message: "The CUG ID does not exist in the system. "}
var E206084 = Global_error{id: "206084", eType: EXPECTED_ERROR, message: "The CUG Name and CUG Address fields cannot be blank at the same time. "}
var E206085 = Global_error{id: "206085", eType: EXPECTED_ERROR, message: "The amount to be exchanged must be greater than zero. "}
var E206086 = Global_error{id: "206086", eType: EXPECTED_ERROR, message: "The amount to be exchanged must be in a correct format. "}
var E206087 = Global_error{id: "206087", eType: EXPECTED_ERROR, message: "No validity period corresponds to the amount to be exchanged. "}
var E206088 = Global_error{id: "206088", eType: EXPECTED_ERROR, message: "Postpaid subscribers are not allowed to exchange balance for validity period. "}
var E206089 = Global_error{id: "206089", eType: EXPECTED_ERROR, message: "The amount of the free resources to be exchanged must be greater than 0. "}
var E206090 = Global_error{id: "206090", eType: EXPECTED_ERROR, message: "The exchange relationship between free resource accounts does not exist; the exchange is not allowed. "}
var E206091 = Global_error{id: "206091", eType: EXPECTED_ERROR, message: "The attribute of the main product does not support changing the validity period. "}
var E206092 = Global_error{id: "206092", eType: EXPECTED_ERROR, message: "Invalid account. "}
var E206093 = Global_error{id: "206093", eType: EXPECTED_ERROR, message: "No information about the subaccounts of the account is specified. "}
var E206094 = Global_error{id: "206094", eType: EXPECTED_ERROR, message: "The key of the transferor account must be different from that of the transferee account. "}
var E206095 = Global_error{id: "206095", eType: EXPECTED_ERROR, message: "Batch processing timeout. "}
var E206096 = Global_error{id: "206096", eType: EXPECTED_ERROR, message: "The status of the subscriber is unknown because of BMP disconnection or exceptions. For details, see the information on the order management interface. "}
var E206097 = Global_error{id: "206097", eType: EXPECTED_ERROR, message: "The value of operation type can only be 1, 2, or 3. "}
var E206098 = Global_error{id: "206098", eType: EXPECTED_ERROR, message: "The transferor number and account cannot be blank at the same time. "}
var E206099 = Global_error{id: "206099", eType: EXPECTED_ERROR, message: "The transferee number and account cannot be blank at the same time. "}
var E206100 = Global_error{id: "206100", eType: EXPECTED_ERROR, message: "Failed to change the value of Effective Time for the FN. "}
var E206101 = Global_error{id: "206101", eType: EXPECTED_ERROR, message: "The HandleChargeFlag parameter can only be set to 0 or 1. "}
var E206102 = Global_error{id: "206102", eType: EXPECTED_ERROR, message: "The inputted account code or account ID must be consistent with the old account code and account ID when changes an old account during registering a subscriber for an old customer. "}
var E206103 = Global_error{id: "206103", eType: EXPECTED_ERROR, message: "During registering a subscriber for an old customer, a shared account cannot be created or modified because the customer already has a shared account. "}
var E206104 = Global_error{id: "206104", eType: EXPECTED_ERROR, message: "Space in use "}
var E206105 = Global_error{id: "206105", eType: EXPECTED_ERROR, message: "No corresponding scenario exists when App_Type is set to 3. "}
var E206106 = Global_error{id: "206106", eType: EXPECTED_ERROR, message: "Invalid rule type. "}
var E206107 = Global_error{id: "206107", eType: EXPECTED_ERROR, message: "The value of Expiration Time cannot be earlier than the current time. "}
var E206108 = Global_error{id: "206108", eType: EXPECTED_ERROR, message: "The account information must be configured when the default bill arrangement is used. "}
var E206109 = Global_error{id: "206109", eType: EXPECTED_ERROR, message: "Bill arrangement can only be operated for the CBS solution. "}
var E206110 = Global_error{id: "206110", eType: EXPECTED_ERROR, message: "The scenario information cannot be configured for the default bill arrangement. "}
var E206111 = Global_error{id: "206111", eType: EXPECTED_ERROR, message: "Failed to enter the value of Effective Time for a scenario during deletion. "}
var E206112 = Global_error{id: "206112", eType: EXPECTED_ERROR, message: "The scenario information must be configured for a non-default bill arrangement during registration. "}
var E206113 = Global_error{id: "206113", eType: EXPECTED_ERROR, message: "Failed to subscribe to the call screening service when there is no SCP. "}
var E206114 = Global_error{id: "206114", eType: EXPECTED_ERROR, message: "Failed to synchronize data to the CBP. "}
var E206115 = Global_error{id: "206115", eType: EXPECTED_ERROR, message: "Failed to synchronize data to the DCCProxy. "}
var E206116 = Global_error{id: "206116", eType: EXPECTED_ERROR, message: "Failed to find the scenario information based on the defined condition. "}
var E206117 = Global_error{id: "206117", eType: EXPECTED_ERROR, message: "Failed to find the delivery information based on the defined condition. "}
var E206118 = Global_error{id: "206118", eType: EXPECTED_ERROR, message: "The value of Expiration Time must be later than the configured value of Effective Time when you change the delivery mode. "}
var E206119 = Global_error{id: "206119", eType: EXPECTED_ERROR, message: "Failed to delete the file. "}
var E206120 = Global_error{id: "206120", eType: EXPECTED_ERROR, message: "The value of Expiration Time for the delivery mode cannot be later than the value of Expiration Time for the related bill arrangement "}
var E206121 = Global_error{id: "206121", eType: EXPECTED_ERROR, message: "The value of Effective Time for the delivery mode must be earlier than the value of Expiration Time for the related bill arrangement. "}
var E206122 = Global_error{id: "206122", eType: EXPECTED_ERROR, message: "The value of Effective Time for the delivery mode cannot be earlier than the value of Effective Time for the related bill arrangement. "}
var E206123 = Global_error{id: "206123", eType: EXPECTED_ERROR, message: "Failed to change the value of Effective Time for a delivery mode. "}
var E206124 = Global_error{id: "206124", eType: EXPECTED_ERROR, message: "The value of Expiration Time must be later than the specified value of Effective Time for the scenario. "}
var E206125 = Global_error{id: "206125", eType: EXPECTED_ERROR, message: "The value of Expiration Time for the scenario cannot be later than the value of Expiration Time for the related bill arrangement. "}
var E206126 = Global_error{id: "206126", eType: EXPECTED_ERROR, message: "The value of Effective Time for the scenario must be earlier than the value of Expiration Time for the related bill arrangement. "}
var E206127 = Global_error{id: "206127", eType: EXPECTED_ERROR, message: "The value of Effective Time for the scenario cannot be earlier than the value of Effective Time for the related bill arrangement. "}
var E206128 = Global_error{id: "206128", eType: EXPECTED_ERROR, message: "Failed to change the value of Effective Time for a active scenario. "}
var E206129 = Global_error{id: "206129", eType: EXPECTED_ERROR, message: "When modifying the scenario, you must specify at least one period. "}
var E206130 = Global_error{id: "206130", eType: EXPECTED_ERROR, message: "When modifying the scenario, you can set the operation type to only 1, 2, or 3. "}
var E206131 = Global_error{id: "206131", eType: EXPECTED_ERROR, message: "When changing the delivery mode, you can set the delivery mode to only 1, 2, or 3. "}
var E206132 = Global_error{id: "206132", eType: EXPECTED_ERROR, message: "You must specify the item to be changed when modifying a bill arrangement. "}
var E206133 = Global_error{id: "206133", eType: EXPECTED_ERROR, message: "Failed to find the customer according to the entered customer information. "}
var E206134 = Global_error{id: "206134", eType: EXPECTED_ERROR, message: "Incorrect recharge type. "}
var E206135 = Global_error{id: "206135", eType: EXPECTED_ERROR, message: "The bill arrangement code cannot start with system_. "}
var E206136 = Global_error{id: "206136", eType: EXPECTED_ERROR, message: "The bill arrangement type must be 0 or 1 during registration. "}
var E206137 = Global_error{id: "206137", eType: EXPECTED_ERROR, message: "The entered account key must be an account that belongs to the customer of the subscriber. "}
var E206138 = Global_error{id: "206138", eType: EXPECTED_ERROR, message: "The requested file does not exist. "}
var E206139 = Global_error{id: "206139", eType: EXPECTED_ERROR, message: "A CUG that has members cannot be deleted. "}
var E206140 = Global_error{id: "206140", eType: EXPECTED_ERROR, message: "Failed to update subscriber status. "}
var E206141 = Global_error{id: "206141", eType: EXPECTED_ERROR, message: "Failed to invoke the WebService interface of the Billing during billing discount subscription. "}
var E206142 = Global_error{id: "206142", eType: EXPECTED_ERROR, message: "This is a repetitive request. The service is processed and the order process has failed. "}
var E206143 = Global_error{id: "206143", eType: EXPECTED_ERROR, message: "The default billing arrangement of the BA.accountCode that is entered already exists. "}
var E206144 = Global_error{id: "206144", eType: EXPECTED_ERROR, message: "The operation type is blank. "}
var E206145 = Global_error{id: "206145", eType: EXPECTED_ERROR, message: "You can create only one account and one subscriber for each customer during batch registration. "}
var E206146 = Global_error{id: "206146", eType: EXPECTED_ERROR, message: "The recharge card number cannot be blank. "}
var E206147 = Global_error{id: "206147", eType: EXPECTED_ERROR, message: "Failed to invoke the WebService interface of the AR. "}
var E206148 = Global_error{id: "206148", eType: EXPECTED_ERROR, message: "The value of VOIDFLAG is incorrect. "}
var E206149 = Global_error{id: "206149", eType: EXPECTED_ERROR, message: "The value of LOGID cannot be blank when VoidFlag is set to 1. "}
var E206150 = Global_error{id: "206150", eType: EXPECTED_ERROR, message: "A timeout occurs when synchronizing data to the CBP. Please try again or manually synchronize data to the CBP on the iCBS. "}
var E206151 = Global_error{id: "206151", eType: EXPECTED_ERROR, message: "Service processing times out. "}
var E206152 = Global_error{id: "206152", eType: EXPECTED_ERROR, message: "One customer with multiple subscribers cannot contain a subscriber of DCS brand. "}
var E206153 = Global_error{id: "206153", eType: EXPECTED_ERROR, message: "The cash recharge record does not exist. "}
var E206154 = Global_error{id: "206154", eType: EXPECTED_ERROR, message: "Failed to recharge cash. "}
var E206155 = Global_error{id: "206155", eType: EXPECTED_ERROR, message: "There are multiple successful recharge records. "}
var E206156 = Global_error{id: "206156", eType: EXPECTED_ERROR, message: "Invalid value of QueryType. "}
var E206157 = Global_error{id: "206157", eType: EXPECTED_ERROR, message: "Invalid product type. "}
var E206158 = Global_error{id: "206158", eType: EXPECTED_ERROR, message: "The product does not exist. "}
var E206159 = Global_error{id: "206159", eType: EXPECTED_ERROR, message: "Failed to query the reward step information. "}
var E206160 = Global_error{id: "206160", eType: EXPECTED_ERROR, message: "The number cannot be changed because route information of the new number route and the old number is different. "}
var E206161 = Global_error{id: "206161", eType: EXPECTED_ERROR, message: "The subscriber's mobile number cannot be changed because the parent-child card service is enabled for the subscriber. "}
var E206162 = Global_error{id: "206162", eType: EXPECTED_ERROR, message: "The subscriber's mobile number cannot be changed because the network type of the new number is different from that of the old number. "}
var E206163 = Global_error{id: "206163", eType: EXPECTED_ERROR, message: "The value of ActionType is invalid. The value ranges from -1 to 4. "}
var E206164 = Global_error{id: "206164", eType: EXPECTED_ERROR, message: "The product is not a content charging product. "}
var E206165 = Global_error{id: "206165", eType: EXPECTED_ERROR, message: "The product cannot be automatically renewed. "}
var E206166 = Global_error{id: "206166", eType: EXPECTED_ERROR, message: "Invalid value of IsAutoExtend. "}
var E206167 = Global_error{id: "206167", eType: EXPECTED_ERROR, message: "The name of the batch service request file is blank. "}
var E206168 = Global_error{id: "206168", eType: EXPECTED_ERROR, message: "The subscriber cannot unsubscribe from the product because it cannot be automatically renewed. "}
var E206169 = Global_error{id: "206169", eType: EXPECTED_ERROR, message: "The node cannot be subscribed to repeatedly. "}
var E206170 = Global_error{id: "206170", eType: EXPECTED_ERROR, message: "The VAS cannot be subscribed to repeatedly. "}
var E206171 = Global_error{id: "206171", eType: EXPECTED_ERROR, message: "The start time cannot be later than the end time. "}
var E206172 = Global_error{id: "206172", eType: EXPECTED_ERROR, message: "Invalid combination of language type and area. "}
var E206173 = Global_error{id: "206173", eType: EXPECTED_ERROR, message: "Invalid price plan object type. "}
var E206174 = Global_error{id: "206174", eType: EXPECTED_ERROR, message: "The error code 7219 is sent back because the product is not subscribed to. "}
var E206175 = Global_error{id: "206175", eType: EXPECTED_ERROR, message: "Incorrect parameter setting. "}
var E206176 = Global_error{id: "206176", eType: EXPECTED_ERROR, message: "Invalid message flag. "}
var E206177 = Global_error{id: "206177", eType: EXPECTED_ERROR, message: "The error code 7006 is sent back due to invalid version number. "}
var E206178 = Global_error{id: "206178", eType: EXPECTED_ERROR, message: "Transfer is not allowed because the non-shared account is not used by the subscriber. "}
var E206179 = Global_error{id: "206179", eType: EXPECTED_ERROR, message: "Home zone information is left blank in the home zone management process. "}
var E206180 = Global_error{id: "206180", eType: EXPECTED_ERROR, message: "The subscribed Home Zone service is in an abnormal state. "}
var E206181 = Global_error{id: "206181", eType: EXPECTED_ERROR, message: "The short number in the batch request file is duplicated. "}
var E206182 = Global_error{id: "206182", eType: EXPECTED_ERROR, message: "Long numbers of group members cannot be entered in the scenario information when you are creating a group. "}
var E206183 = Global_error{id: "206183", eType: EXPECTED_ERROR, message: "Enter new information when modifying the BA function. "}
var E206184 = Global_error{id: "206184", eType: EXPECTED_ERROR, message: "The value of DefaultFlag can only be 0 or 1 when you are creating a group. "}
var E206185 = Global_error{id: "206185", eType: EXPECTED_ERROR, message: "The group offering subscription interface cannot change the status of the group subscription instance. "}
var E206186 = Global_error{id: "206186", eType: EXPECTED_ERROR, message: "The operation type in the group subscription interface is incorrect. "}
var E206187 = Global_error{id: "206187", eType: EXPECTED_ERROR, message: "The group member does not exist. "}
var E206188 = Global_error{id: "206188", eType: EXPECTED_ERROR, message: "The group subscriber does not exist. "}
var E206189 = Global_error{id: "206189", eType: EXPECTED_ERROR, message: "The task is executed for more than 24 hours, and exceptions may occur. "}
var E206190 = Global_error{id: "206190", eType: EXPECTED_ERROR, message: "There are multiple default basic offerings for non-OCS subscribers. "}
var E206191 = Global_error{id: "206191", eType: EXPECTED_ERROR, message: "There are no default basic offering for non-OCS subscribers. "}
var E206192 = Global_error{id: "206192", eType: EXPECTED_ERROR, message: "You cannot subscribe to multiple offerings of the same type. "}
var E206193 = Global_error{id: "206193", eType: EXPECTED_ERROR, message: "The optional offering that you want to subscribe to is not a group member offering. "}
var E206194 = Global_error{id: "206194", eType: EXPECTED_ERROR, message: "The subscriber's phone number cannot be blank. "}
var E206195 = Global_error{id: "206195", eType: EXPECTED_ERROR, message: "The value of BaCode cannot start with system_. "}
var E206196 = Global_error{id: "206196", eType: EXPECTED_ERROR, message: "The operation type for scenarios can be only 1, 2, or 3. "}
var E206197 = Global_error{id: "206197", eType: EXPECTED_ERROR, message: "The operation type for transfer methods can be only 1, 2, or 3. "}
var E206198 = Global_error{id: "206198", eType: EXPECTED_ERROR, message: "The payment type for the accounts to be registered in batches is different from the payment type for the main product. "}
var E206199 = Global_error{id: "206199", eType: EXPECTED_ERROR, message: "The delSubscriber interface cannot be used to deregister non-OCS group members. "}
var E206200 = Global_error{id: "206200", eType: EXPECTED_ERROR, message: "The original resource type and the target resource type must be different. "}
var E206201 = Global_error{id: "206201", eType: EXPECTED_ERROR, message: "The content for second time confirmation is incorrect, and therefore subscription is not allowed. "}
var E206202 = Global_error{id: "206202", eType: EXPECTED_ERROR, message: "Invalid service type. "}
var E206203 = Global_error{id: "206203", eType: EXPECTED_ERROR, message: "The content for second time confirmation is not found in the subscription history table, and therefore subscription is not allowed. "}
var E206204 = Global_error{id: "206204", eType: EXPECTED_ERROR, message: "Waiting for second time confirmation. "}
var E206205 = Global_error{id: "206205", eType: EXPECTED_ERROR, message: "Subscription is not allowed because the product is included in a blocked service. "}
var E206206 = Global_error{id: "206206", eType: EXPECTED_ERROR, message: "Invalid new bill cycle type or incorrect length. "}
var E206207 = Global_error{id: "206207", eType: EXPECTED_ERROR, message: "The subscriber number and account code cannot be blank at the same time. "}
var E206208 = Global_error{id: "206208", eType: EXPECTED_ERROR, message: "The bill cycle for the customer was changed and cannot be changed again before the new bill cycle takes effect. "}
var E206209 = Global_error{id: "206209", eType: EXPECTED_ERROR, message: "The new bill cycle is the same as the current bill cycle. "}
var E206210 = Global_error{id: "206210", eType: EXPECTED_ERROR, message: "The time zone parameter is missing for the scheduled task. "}
var E206211 = Global_error{id: "206211", eType: EXPECTED_ERROR, message: "When a customer is registered, the default time zone IDs for the subscribers of the customer are different. "}
var E206212 = Global_error{id: "206212", eType: EXPECTED_ERROR, message: "Incorrect Time Zone ID for registration. "}
var E206213 = Global_error{id: "206213", eType: EXPECTED_ERROR, message: "Failed to query NP information. "}
var E206214 = Global_error{id: "206214", eType: EXPECTED_ERROR, message: "The random code for second verification is duplicated in the subscription history table. "}
var E206215 = Global_error{id: "206215", eType: EXPECTED_ERROR, message: "The data migration is not allowed because the customer has uncompleted orders. "}
var E206216 = Global_error{id: "206216", eType: EXPECTED_ERROR, message: "Incorrect operation type for releasing a subscriber from the ETU blacklist. "}
var E206217 = Global_error{id: "206217", eType: EXPECTED_ERROR, message: "The Due Date value must range from 1 to 28. "}
var E206218 = Global_error{id: "206218", eType: EXPECTED_ERROR, message: "The subscriber is not in the ETU blacklist and therefore cannot be deleted from the ETU blacklist. "}
var E206219 = Global_error{id: "206219", eType: EXPECTED_ERROR, message: "Due Date cannot be blank. "}
var E206220 = Global_error{id: "206220", eType: EXPECTED_ERROR, message: "The product and offer are not one-to-one mapped. "}
var E206221 = Global_error{id: "206221", eType: EXPECTED_ERROR, message: "The operator to be added already exists. "}
var E206222 = Global_error{id: "206222", eType: EXPECTED_ERROR, message: "The subscriber has a bill cycle that will take effect and therefore cannot be added to the group. "}
var E206223 = Global_error{id: "206223", eType: EXPECTED_ERROR, message: "The subscriber cannot be a postpaid subscriber. "}
var E206224 = Global_error{id: "206224", eType: EXPECTED_ERROR, message: "The subscriber must be in the Active state. "}
var E206225 = Global_error{id: "206225", eType: EXPECTED_ERROR, message: "The service type is incorrect. "}
var E206226 = Global_error{id: "206226", eType: EXPECTED_ERROR, message: "Incorrect status of the order to be rolled back. "}
var E206227 = Global_error{id: "206227", eType: EXPECTED_ERROR, message: "Transfer can be rolled back only when the transfer is performed in the previous 24 hours. "}
var E206228 = Global_error{id: "206228", eType: EXPECTED_ERROR, message: "The transfer has been rolled back and cannot be rolled back again. "}
var E206229 = Global_error{id: "206229", eType: EXPECTED_ERROR, message: "The value length of transactionID exceeds 23 digits. "}
var E206230 = Global_error{id: "206230", eType: EXPECTED_ERROR, message: "No order corresponds to the transaction ID. "}
var E206231 = Global_error{id: "206231", eType: EXPECTED_ERROR, message: "The value of transactionID is blank or is not a numeric string. "}
var E206232 = Global_error{id: "206232", eType: EXPECTED_ERROR, message: "The subscriber must be a prepaid subscriber. "}
var E206233 = Global_error{id: "206233", eType: EXPECTED_ERROR, message: "No record corresponds to the entered order ID and subscriber number. "}
var E206234 = Global_error{id: "206234", eType: EXPECTED_ERROR, message: "The value of S_Order4FNPackage for the FN product to be subscribed conflicts with that of the subscribed FN product. "}
var E206235 = Global_error{id: "206235", eType: EXPECTED_ERROR, message: "The values of S_Order4FNPackage are the same for multiple FN products in the to-be-subscribed FN offer list. "}
var E206236 = Global_error{id: "206236", eType: EXPECTED_ERROR, message: "The subscriber does not subscribe to the FN product bound to the group number. "}
var E206237 = Global_error{id: "206237", eType: EXPECTED_ERROR, message: "The advance payment or balance in the main account book must be greater than zero for activation. "}
var E206238 = Global_error{id: "206238", eType: EXPECTED_ERROR, message: "The inter-network group level has been referenced and failed to be deleted. "}
var E206239 = Global_error{id: "206239", eType: EXPECTED_ERROR, message: "The operation type is not 1 or 2. "}
var E206240 = Global_error{id: "206240", eType: EXPECTED_ERROR, message: "The subscriber does not enable the preferred customer service. "}
var E206241 = Global_error{id: "206241", eType: EXPECTED_ERROR, message: "The group does not exist. "}
var E206242 = Global_error{id: "206242", eType: EXPECTED_ERROR, message: "The subscriber has joined the group. "}
var E206243 = Global_error{id: "206243", eType: EXPECTED_ERROR, message: "The subscriber has added the group number as a preferred customer. "}
var E206244 = Global_error{id: "206244", eType: EXPECTED_ERROR, message: "The subscriber has not added the group number as a preferred customer. "}
var E206245 = Global_error{id: "206245", eType: EXPECTED_ERROR, message: "The subscriber code already exists. "}
var E206246 = Global_error{id: "206246", eType: EXPECTED_ERROR, message: "The subscriber key does not exist. "}
var E206247 = Global_error{id: "206247", eType: EXPECTED_ERROR, message: "The account key does not exist. "}
var E206248 = Global_error{id: "206248", eType: EXPECTED_ERROR, message: "The time cannot be later than 2037. "}
var E206249 = Global_error{id: "206249", eType: EXPECTED_ERROR, message: "The value of Zip Code cannot be blank when a subscriber subscribes to the bill arrangement function. "}
var E206250 = Global_error{id: "206250", eType: EXPECTED_ERROR, message: "Data migration is not allowed because the number of subscribers under this customer exceeds the maximum. "}
var E206251 = Global_error{id: "206251", eType: EXPECTED_ERROR, message: "The new FN exists in another group. "}
var E206252 = Global_error{id: "206252", eType: EXPECTED_ERROR, message: "Invalid BA code. "}
var E206253 = Global_error{id: "206253", eType: EXPECTED_ERROR, message: "When the bill arrangement function that a subscriber subscribes to during registration is not the default bill arrangement function, the BACODE field cannot be blank. "}
var E206254 = Global_error{id: "206254", eType: EXPECTED_ERROR, message: "Full import failed because the data to be imported does not contain all referenced inter-network group levels. "}
var E206255 = Global_error{id: "206255", eType: EXPECTED_ERROR, message: "The group does not take effect based on the time zone of the subscriber who wants to join the group. "}
var E206256 = Global_error{id: "206256", eType: EXPECTED_ERROR, message: "The values of S_Order4FNPackage conflict for FN products to be subscribed. "}
var E206257 = Global_error{id: "206257", eType: EXPECTED_ERROR, message: "The account payment type is different from the payment type of the next bill cycle under the account. "}
var E206258 = Global_error{id: "206258", eType: EXPECTED_ERROR, message: "Only one request with feeType set to 1 is allowed for CUG rental collection triggered by the unified fee deduction interface in the first bill cycle. "}
var E206259 = Global_error{id: "206259", eType: EXPECTED_ERROR, message: "The favorite country service is not enabled for the subscriber. "}
var E206260 = Global_error{id: "206260", eType: EXPECTED_ERROR, message: "The favorite country has not been defined in the system. "}
var E206261 = Global_error{id: "206261", eType: EXPECTED_ERROR, message: "The favorite country has been set for the subscriber, and cannot be added repeatedly. "}
var E206262 = Global_error{id: "206262", eType: EXPECTED_ERROR, message: "The favorite country does not exist. "}
var E206263 = Global_error{id: "206263", eType: EXPECTED_ERROR, message: "The value corresponding to the operation type must be 0 or 1. "}
var E206264 = Global_error{id: "206264", eType: EXPECTED_ERROR, message: "The notification threshold for the monthly consumption quota must be in the range from 0 (excluded) to 2147483647 (included). "}
var E206265 = Global_error{id: "206265", eType: EXPECTED_ERROR, message: "The value of WEEKSTART is not in the range [0,6]. "}
var E206266 = Global_error{id: "206266", eType: EXPECTED_ERROR, message: "The value of WEEKSTOP is not in the range [0,6]. "}
var E206267 = Global_error{id: "206267", eType: EXPECTED_ERROR, message: "The routing method is blank. "}
var E206268 = Global_error{id: "206268", eType: EXPECTED_ERROR, message: "There must be only one Call Screen information when you attempt to set the routing method. "}
var E206269 = Global_error{id: "206269", eType: EXPECTED_ERROR, message: "One service type cannot correspond to multiple fee groups. "}
var E206270 = Global_error{id: "206270", eType: EXPECTED_ERROR, message: "The service handling is not allowed because the customer is migrating data. "}
var E206271 = Global_error{id: "206271", eType: EXPECTED_ERROR, message: "The subscriber does not exist or the customer that the subscriber belongs to is being migrated. Please check. "}
var E206272 = Global_error{id: "206272", eType: EXPECTED_ERROR, message: "The customer does not exist or is being migrated. Please check. "}
var E206273 = Global_error{id: "206273", eType: EXPECTED_ERROR, message: "The account does not exist or the customer that the account belongs to is being migrated. Please check. "}
var E206274 = Global_error{id: "206274", eType: EXPECTED_ERROR, message: "Failed to change the mobile number. "}
var E206275 = Global_error{id: "206275", eType: EXPECTED_ERROR, message: "A CUG Type is referenced by a CUG and cannot be deleted. "}
var E206276 = Global_error{id: "206276", eType: EXPECTED_ERROR, message: "The operation type is not 0, 1, or 2. "}
var E206277 = Global_error{id: "206277", eType: EXPECTED_ERROR, message: "The SubId and Msisdn fields cannot be blank at the same time. "}
var E206278 = Global_error{id: "206278", eType: EXPECTED_ERROR, message: "This QuotaType is already provided for the subscriber. "}
var E206279 = Global_error{id: "206279", eType: EXPECTED_ERROR, message: "The QuotaType does not exist. "}
var E206280 = Global_error{id: "206280", eType: EXPECTED_ERROR, message: "This QuotaType is not provided for the subscriber. "}
var E206281 = Global_error{id: "206281", eType: EXPECTED_ERROR, message: "There is no subscription record that has taken effect or will take effect for the product. "}
var E206282 = Global_error{id: "206282", eType: EXPECTED_ERROR, message: "Invalid value. "}
var E206283 = Global_error{id: "206283", eType: EXPECTED_ERROR, message: "There is more than one subscription record that has taken effect or will take effect for the product. "}
var E206284 = Global_error{id: "206284", eType: EXPECTED_ERROR, message: "BillMediumId is not associated with the customer type. "}
var E206285 = Global_error{id: "206285", eType: EXPECTED_ERROR, message: "You can add only one temporary credit. "}
var E206286 = Global_error{id: "206286", eType: EXPECTED_ERROR, message: "Type of the credit to be modified is inconsistent with the credit control mode. "}
var E206287 = Global_error{id: "206287", eType: EXPECTED_ERROR, message: "The operation type is not in the range from 1 to 4. "}
var E206288 = Global_error{id: "206288", eType: EXPECTED_ERROR, message: "The shareRuleId value does not exist. "}
var E206289 = Global_error{id: "206289", eType: EXPECTED_ERROR, message: "Invalid time scheme ID. "}
var E206290 = Global_error{id: "206290", eType: EXPECTED_ERROR, message: "The QuotaNotifyID value does not exist. "}
var E206291 = Global_error{id: "206291", eType: EXPECTED_ERROR, message: "The Permillage value is not in the range from 1 to 1000. "}
var E206292 = Global_error{id: "206292", eType: EXPECTED_ERROR, message: "Incorrect customer code. "}
var E206293 = Global_error{id: "206293", eType: EXPECTED_ERROR, message: "The effective time must be earlier than the expiration time. "}
var E206294 = Global_error{id: "206294", eType: EXPECTED_ERROR, message: "The prority cannot be duplicated. "}
var E206295 = Global_error{id: "206295", eType: EXPECTED_ERROR, message: "The ShareSourceType is not in the range from 0 to 4. "}
var E206296 = Global_error{id: "206296", eType: EXPECTED_ERROR, message: "The credit control cannot be modified. "}
var E206297 = Global_error{id: "206297", eType: EXPECTED_ERROR, message: "The quota type is incorrect, and the payment relationship management is not supported if the quota type is set to Total Limit. "}
var E206298 = Global_error{id: "206298", eType: EXPECTED_ERROR, message: "A postpaid subscriber cannot apply for this service. "}
var E206299 = Global_error{id: "206299", eType: EXPECTED_ERROR, message: "The deposit amount is invalid. "}
var E206300 = Global_error{id: "206300", eType: EXPECTED_ERROR, message: "The loan amount is invalid. "}
var E206301 = Global_error{id: "206301", eType: EXPECTED_ERROR, message: "The subscriber has paid the deposit and does not need to pay it again. "}
var E206302 = Global_error{id: "206302", eType: EXPECTED_ERROR, message: "The subscriber has not paid the deposit and cannot apply for returning the deposit. "}
var E206303 = Global_error{id: "206303", eType: EXPECTED_ERROR, message: "The subscriber does not need to pay the deposit. "}
var E206304 = Global_error{id: "206304", eType: EXPECTED_ERROR, message: "The subscriber does not pay the deposit before applying for a loan. "}
var E206305 = Global_error{id: "206305", eType: EXPECTED_ERROR, message: "No available CBP. "}
var E206306 = Global_error{id: "206306", eType: EXPECTED_ERROR, message: "The subscriber has applied for a loan and cannot apply again. "}
var E206307 = Global_error{id: "206307", eType: EXPECTED_ERROR, message: "The subscriber does not have any loans and does not need to repay a loan. "}
var E206308 = Global_error{id: "206308", eType: EXPECTED_ERROR, message: "The subscriber has enabled the low loan balance notification function and cannot enable the function again. "}
var E206309 = Global_error{id: "206309", eType: EXPECTED_ERROR, message: "The subscriber has disabled the low loan balance notification function and cannot disable the function again. "}
var E206310 = Global_error{id: "206310", eType: EXPECTED_ERROR, message: "The OperateType is not in the range from 1 to 7. "}
var E206311 = Global_error{id: "206311", eType: EXPECTED_ERROR, message: "Only one entrustment rule is available if a group pays for group members by percentage. Therefore, a group cannot pay for group members by both percentage and quota. "}
var E206312 = Global_error{id: "206312", eType: EXPECTED_ERROR, message: "The account must not be a prepaid account. "}
var E206313 = Global_error{id: "206313", eType: EXPECTED_ERROR, message: "The credit limit exceeds the upper limit. "}
var E206314 = Global_error{id: "206314", eType: EXPECTED_ERROR, message: "The expiration time of a CUG member cannot be earlier than the effective time of the group CUG. "}
var E206315 = Global_error{id: "206315", eType: EXPECTED_ERROR, message: "The credit control mode is not applicable to the group. "}
var E206316 = Global_error{id: "206316", eType: EXPECTED_ERROR, message: "Existent space "}
var E206317 = Global_error{id: "206317", eType: EXPECTED_ERROR, message: "No quota needs to be set for the group in the redlist. "}
var E206318 = Global_error{id: "206318", eType: EXPECTED_ERROR, message: "The number is a URI, and no short number can be assigned for it. "}
var E206319 = Global_error{id: "206319", eType: EXPECTED_ERROR, message: "The inter-network number must be a number or a URI. "}
var E206320 = Global_error{id: "206320", eType: EXPECTED_ERROR, message: "The subscriber cannot subscribe to the FN service. "}
var E206321 = Global_error{id: "206321", eType: EXPECTED_ERROR, message: "The subscriber number does not exist and cannot be deleted from the loan ETU blacklist. "}
var E206322 = Global_error{id: "206322", eType: EXPECTED_ERROR, message: "The subscriber does not have any valid loan records. "}
var E206323 = Global_error{id: "206323", eType: EXPECTED_ERROR, message: "The account has a non-default BA. "}
var E206324 = Global_error{id: "206324", eType: EXPECTED_ERROR, message: "The subscriber has a primary offer that will take effect. "}
var E206325 = Global_error{id: "206325", eType: EXPECTED_ERROR, message: "The subscriber and the account have different payment types. "}
var E206326 = Global_error{id: "206326", eType: EXPECTED_ERROR, message: "Incorrect account code. "}
var E206327 = Global_error{id: "206327", eType: EXPECTED_ERROR, message: "The account ID does not match the account code. "}
var E206328 = Global_error{id: "206328", eType: EXPECTED_ERROR, message: "Bill cycles are different. "}
var E206329 = Global_error{id: "206329", eType: EXPECTED_ERROR, message: "SUBSCRIBER.CUSTOMERCODE is empty when CUSTOMER is left empty. "}
var E206330 = Global_error{id: "206330", eType: EXPECTED_ERROR, message: "The offer instance contains more than one valid subscriber. "}
var E206331 = Global_error{id: "206331", eType: EXPECTED_ERROR, message: "The time zones for the old customer and new customer are different. "}
var E206332 = Global_error{id: "206332", eType: EXPECTED_ERROR, message: "Some BA parameters are left empty or set incorrectly. "}
var E206333 = Global_error{id: "206333", eType: EXPECTED_ERROR, message: "Maximum subsciption number of optional offers for this user is exceeded. "}
var E206334 = Global_error{id: "206334", eType: EXPECTED_ERROR, message: "Rerating is being performed on the subscriber under the account, and the current service cannot be processed. "}
var E206335 = Global_error{id: "206335", eType: EXPECTED_ERROR, message: "The subscriber's account balance is smaller than or equal to the balance threshold specified for the current primary offer. Therefore, the primary offer cannot be switched. "}
var E206336 = Global_error{id: "206336", eType: EXPECTED_ERROR, message: "Incorrect tenant ID format. "}
var E206337 = Global_error{id: "206337", eType: EXPECTED_ERROR, message: "The tenant ID does not exist. "}
var E206338 = Global_error{id: "206338", eType: EXPECTED_ERROR, message: "The group number exists. "}
var E206339 = Global_error{id: "206339", eType: EXPECTED_ERROR, message: "Other service operations are being executed, and the ownership cannot be transferred. "}
var E206340 = Global_error{id: "206340", eType: EXPECTED_ERROR, message: "Top groups that join the same super group must belong to the same tenant. "}
var E206341 = Global_error{id: "206341", eType: EXPECTED_ERROR, message: "The tenant ID of the payer's account is different from that of the charged subscriber. "}
var E206342 = Global_error{id: "206342", eType: EXPECTED_ERROR, message: "The ExpireTime value cannot be greater than 2037. "}
var E206343 = Global_error{id: "206343", eType: EXPECTED_ERROR, message: "The validityNum value is excessively large, leading to the result that the expiration time is later than 2037. "}
var E206344 = Global_error{id: "206344", eType: EXPECTED_ERROR, message: "The new subscriber cannot share the same account with a common child card subscriber. "}
var E206345 = Global_error{id: "206345", eType: EXPECTED_ERROR, message: "Incorrect format of the group number. "}
var E206346 = Global_error{id: "206346", eType: EXPECTED_ERROR, message: "The subscriber is a member of a parent-child card group. "}
var E206347 = Global_error{id: "206347", eType: EXPECTED_ERROR, message: "The member's mobile number does not exist. "}
var E206348 = Global_error{id: "206348", eType: EXPECTED_ERROR, message: "The validity period of the group must cover that of a group member. "}
var E206349 = Global_error{id: "206349", eType: EXPECTED_ERROR, message: "The subscriber is a member in the group. "}
var E206350 = Global_error{id: "206350", eType: EXPECTED_ERROR, message: "The member type cannot be changed. "}
var E206351 = Global_error{id: "206351", eType: EXPECTED_ERROR, message: "The subscriber is not a member in the group. "}
var E206352 = Global_error{id: "206352", eType: EXPECTED_ERROR, message: "Multiple subscriber groups are found based on GroupNo, GroupType, and OwnerSubscriberNo. "}
var E206353 = Global_error{id: "206353", eType: EXPECTED_ERROR, message: "A common child card subscriber cannot share an account with other subscribers. "}
var E206354 = Global_error{id: "206354", eType: EXPECTED_ERROR, message: "The group member has taken effect, and the effective time cannot be changed. "}
var E206355 = Global_error{id: "206355", eType: EXPECTED_ERROR, message: "The offer is not a user group offer. "}
var E206356 = Global_error{id: "206356", eType: EXPECTED_ERROR, message: "The subscriber has not subscribed to an offer that provides the parent-child service. "}
var E206357 = Global_error{id: "206357", eType: EXPECTED_ERROR, message: "The parent-child card offer cannot be unsubscribed from. "}
var E206358 = Global_error{id: "206358", eType: EXPECTED_ERROR, message: "Before deregistering an account, deregister its user group. "}
var E206359 = Global_error{id: "206359", eType: EXPECTED_ERROR, message: "The offer cannot contain the parent-child card product. "}
var E206360 = Global_error{id: "206360", eType: EXPECTED_ERROR, message: "The subscriber has not been registered, and no payment relationship can be added for the subscriber. "}
var E206361 = Global_error{id: "206361", eType: EXPECTED_ERROR, message: "The EffectiveDate, ExpireDate, and ChildSubLimitAmt parameters are left empty. "}
var E206362 = Global_error{id: "206362", eType: EXPECTED_ERROR, message: "The subscriber cannot become a common child-card subscriber. "}
var E206363 = Global_error{id: "206363", eType: EXPECTED_ERROR, message: "The number of group members reaches the upper limit. "}
var E206364 = Global_error{id: "206364", eType: EXPECTED_ERROR, message: "The entered number is not an OCS subscriber number. "}
var E206365 = Global_error{id: "206365", eType: EXPECTED_ERROR, message: "No valid user group is found. "}
var E206366 = Global_error{id: "206366", eType: EXPECTED_ERROR, message: "The parent-child card product cannot be repeatedly subscribed. "}
var E206367 = Global_error{id: "206367", eType: EXPECTED_ERROR, message: "The user group owner cannot be deleted. "}
var E206368 = Global_error{id: "206368", eType: EXPECTED_ERROR, message: "PersonHuntingListInfo must be unique for MODIFY operation. "}
var E206369 = Global_error{id: "206369", eType: EXPECTED_ERROR, message: "The value of WeekStart, WeekEnd, StartTime and StopTime of the call hunting list must be different from another call hunting list of the same hunting number. "}
var E206370 = Global_error{id: "206370", eType: EXPECTED_ERROR, message: "If the product of the subsciber does not have call hunting service, the user can not sign up a call hunting list. "}
var E206371 = Global_error{id: "206371", eType: EXPECTED_ERROR, message: "The hunting main number should be a dummy number or the subscriber number. "}
var E206372 = Global_error{id: "206372", eType: EXPECTED_ERROR, message: "The subscriber which is already self final hunting number cannot be self pilot number. "}
var E206373 = Global_error{id: "206373", eType: EXPECTED_ERROR, message: "The hunting main number can not be a dummy number which is already used as a hunting number of another hunting list. "}
var E206374 = Global_error{id: "206374", eType: EXPECTED_ERROR, message: "The final hunting number must be a real service number existed in the system and can not be a dummy number. "}
var E206375 = Global_error{id: "206375", eType: EXPECTED_ERROR, message: "Final hunting number can not be whether  a subscriber number or a special number. "}
var E206376 = Global_error{id: "206376", eType: EXPECTED_ERROR, message: "The related hunting list information could not be found. "}
var E206377 = Global_error{id: "206377", eType: EXPECTED_ERROR, message: "If the number of person hunting list in a request are more than one, they can not be identical. "}
var E206378 = Global_error{id: "206378", eType: EXPECTED_ERROR, message: "If the subscriber which is already self pilot number, it cannot be again self ring-to number. "}
var E206379 = Global_error{id: "206379", eType: EXPECTED_ERROR, message: "The RingToNum does not exist in the person hunting list. "}
var E206380 = Global_error{id: "206380", eType: EXPECTED_ERROR, message: "The value of  PersonHuntingNoInfo must be unique. "}
var E206381 = Global_error{id: "206381", eType: EXPECTED_ERROR, message: "The upper limit of hunting main numbers can not be exceeded. "}
var E206382 = Global_error{id: "206382", eType: EXPECTED_ERROR, message: "Maximum number of pilot numbers can not be exceeded. "}
var E206383 = Global_error{id: "206383", eType: EXPECTED_ERROR, message: "The subscriber number which is already a self pilot number and cannot again be a final hunting number. "}
var E206384 = Global_error{id: "206384", eType: EXPECTED_ERROR, message: "A priority number which is bigger than the count of the total member of the hunting list can not be entered. "}
var E206385 = Global_error{id: "206385", eType: EXPECTED_ERROR, message: "It is not allowed to give a same priority number to a hunting number. "}
var E206386 = Global_error{id: "206386", eType: EXPECTED_ERROR, message: "The call hunting service is not available for the subscriber. "}
var E206387 = Global_error{id: "206387", eType: EXPECTED_ERROR, message: "The hunting number exists and can not be added again. "}
var E206388 = Global_error{id: "206388", eType: EXPECTED_ERROR, message: "The total number of ring-to numbers exceeds the maximum. "}
var E206389 = Global_error{id: "206389", eType: EXPECTED_ERROR, message: "The format of StartTime or StopTime is incorrect. "}
var E206390 = Global_error{id: "206390", eType: EXPECTED_ERROR, message: "The total number of pilot numbers exceeds the maximum. "}
var E206391 = Global_error{id: "206391", eType: EXPECTED_ERROR, message: "The format of NoAnswerTime is incorrect. "}
var E206392 = Global_error{id: "206392", eType: EXPECTED_ERROR, message: "The parameter WeekStart or WeekStop is incorrect. "}
var E206393 = Global_error{id: "206393", eType: EXPECTED_ERROR, message: "The ring-to number of a list can not be used as the pilot number of the same list. "}
var E206394 = Global_error{id: "206394", eType: EXPECTED_ERROR, message: "No accumulator found. "}
var E206395 = Global_error{id: "206395", eType: EXPECTED_ERROR, message: "The value of priority must range from 1 to 20. "}
var E206396 = Global_error{id: "206396", eType: EXPECTED_ERROR, message: "OfficeZone and RatingGroup cannot be set for non-top groups. "}
var E206397 = Global_error{id: "206397", eType: EXPECTED_ERROR, message: "The number of rating groups exceeds the maximum. "}
var E206398 = Global_error{id: "206398", eType: EXPECTED_ERROR, message: "The number of office zones exceeds the maximum. "}
var E206399 = Global_error{id: "206399", eType: EXPECTED_ERROR, message: "The number of group members exceeds the maximum. "}
var E206400 = Global_error{id: "206400", eType: EXPECTED_ERROR, message: "The new maximum number of group members is smaller than the current number of group members. "}
var E206401 = Global_error{id: "206401", eType: EXPECTED_ERROR, message: "Invalid entertype. "}
var E206402 = Global_error{id: "206402", eType: EXPECTED_ERROR, message: "No data found in the OCS_RewardApply table. "}
var E206403 = Global_error{id: "206403", eType: EXPECTED_ERROR, message: "The subscriber has subscribed to the product. "}
var E206404 = Global_error{id: "206404", eType: EXPECTED_ERROR, message: "The subscription relationship has expired. "}
var E206405 = Global_error{id: "206405", eType: EXPECTED_ERROR, message: "The number of modifications in this cycle (in months) reaches the maximum. "}
var E206406 = Global_error{id: "206406", eType: EXPECTED_ERROR, message: "The number of modifications in this cycle (in days) reaches the maximum. "}
var E206407 = Global_error{id: "206407", eType: EXPECTED_ERROR, message: "The subscriber is not a child card subscriber. "}
var E206408 = Global_error{id: "206408", eType: EXPECTED_ERROR, message: "The subscriber cannot become a child card subscriber. "}
var E206409 = Global_error{id: "206409", eType: EXPECTED_ERROR, message: "The subscriber does not meet the condition of batch migration. "}
var E206410 = Global_error{id: "206410", eType: EXPECTED_ERROR, message: "Failed to delete or change the temporary credit because no required record is found in the database table. "}
var E206411 = Global_error{id: "206411", eType: EXPECTED_ERROR, message: "Failed to delete or change the temporary credit because the key value is not found in the database table. "}
var E206412 = Global_error{id: "206412", eType: EXPECTED_ERROR, message: "The bill cycle spans of all accounts under the customer must be the same. "}
var E206413 = Global_error{id: "206413", eType: EXPECTED_ERROR, message: "This service requires that the subscriber group owner be migrated, which is not allowed. "}
var E206414 = Global_error{id: "206414", eType: EXPECTED_ERROR, message: "Set BillCycleType, Bill CycleID, or both. "}
var E206415 = Global_error{id: "206415", eType: EXPECTED_ERROR, message: "QueryBillCycleInfoConfigItem and CalculatParameter cannot contain decimal places or cannot be negative. "}
var E206416 = Global_error{id: "206416", eType: EXPECTED_ERROR, message: "The recharge field is mandatory when the action value is 10. "}
var E206417 = Global_error{id: "206417", eType: EXPECTED_ERROR, message: "The CustomerGrade value is not a number. "}
var E206418 = Global_error{id: "206418", eType: EXPECTED_ERROR, message: "The TIMESHCEMAID value does not exist. "}
var E206419 = Global_error{id: "206419", eType: EXPECTED_ERROR, message: "The amount value cannot be negative or 0 when the action value is 10. "}
var E206420 = Global_error{id: "206420", eType: EXPECTED_ERROR, message: "The issendsms value must be 0 or 1 when the action value is 10. "}
var E206421 = Global_error{id: "206421", eType: EXPECTED_ERROR, message: "The bill cycle that straddles two months cannot be changed. "}
var E206422 = Global_error{id: "206422", eType: EXPECTED_ERROR, message: "Only one entrustment type can be configured for one payment relationship. "}
var E206423 = Global_error{id: "206423", eType: EXPECTED_ERROR, message: "The optional offer subscription interface does not transfer any subscriber numbers when the customer has multiple subscribers or accounts. "}
var E206424 = Global_error{id: "206424", eType: EXPECTED_ERROR, message: "The notification threshold exists. "}
var E206425 = Global_error{id: "206425", eType: EXPECTED_ERROR, message: "The permillage-based payment rule does not support notification. "}
var E206426 = Global_error{id: "206426", eType: EXPECTED_ERROR, message: "The payer's mobile number and account code cannot be empty at the same time. "}
var E206427 = Global_error{id: "206427", eType: EXPECTED_ERROR, message: "The notification threshold must be less than or equal to the quota defined in the payment rule. "}
var E206428 = Global_error{id: "206428", eType: EXPECTED_ERROR, message: "No factor found. "}
var E206429 = Global_error{id: "206429", eType: EXPECTED_ERROR, message: "The new initial credit cannot be smaller than the current initial credit. "}
var E206430 = Global_error{id: "206430", eType: EXPECTED_ERROR, message: "The subscriber's latest consumption information is not recorded in the OCS_LastChgInfo table. "}
var E206431 = Global_error{id: "206431", eType: EXPECTED_ERROR, message: "No record found in the OCS_DeductEventMap table according to chargeEvent and serviceType. "}
var E206432 = Global_error{id: "206432", eType: EXPECTED_ERROR, message: "The Sponsorship parent number does not exist as a parent number in the system. "}
var E206433 = Global_error{id: "206433", eType: EXPECTED_ERROR, message: "The handling charge parameter should be 0 or 1 "}
var E206434 = Global_error{id: "206434", eType: EXPECTED_ERROR, message: "The operation type parameter should be a valid one. "}
var E206435 = Global_error{id: "206435", eType: EXPECTED_ERROR, message: "The DestinationNoInfo parameter is empty or it is in an incorrect number format. "}
var E206436 = Global_error{id: "206436", eType: EXPECTED_ERROR, message: "A destination number can not be added because over limit is reached. "}
var E206437 = Global_error{id: "206437", eType: EXPECTED_ERROR, message: "An already existed destination number can not be added again. "}
var E206438 = Global_error{id: "206438", eType: EXPECTED_ERROR, message: "The Destination Number intended to be deleted or modified does not exist in the system. "}
var E206439 = Global_error{id: "206439", eType: EXPECTED_ERROR, message: "If the number to be changed in the Change MSISDN operation is a parent number of sponsorship service, the number can not be changed. "}
var E206440 = Global_error{id: "206440", eType: EXPECTED_ERROR, message: "If the expiration time is not a later time than the current time, the user can not be modified or add a sponsporship list. "}
var E206441 = Global_error{id: "206441", eType: EXPECTED_ERROR, message: "The operation expiration time must be a later time than the effective time of the service. "}
var E206442 = Global_error{id: "206442", eType: EXPECTED_ERROR, message: "The effective time of the payment relationship must be later than the start time of the next bill cycle. "}
var E206443 = Global_error{id: "206443", eType: EXPECTED_ERROR, message: "Sponsorship effective date can not be selected earlier than the effective date of the product. "}
var E206444 = Global_error{id: "206444", eType: EXPECTED_ERROR, message: "The operation expiration date was not entered correctly. "}
var E206445 = Global_error{id: "206445", eType: EXPECTED_ERROR, message: "The operation effective date must be earlier than the expiration date of the product. "}
var E206446 = Global_error{id: "206446", eType: EXPECTED_ERROR, message: "The fee item exists. "}
var E206447 = Global_error{id: "206447", eType: EXPECTED_ERROR, message: "The expiration date of the sponsorship operation must be a date earlier than the expiration date of the product. "}
var E206448 = Global_error{id: "206448", eType: EXPECTED_ERROR, message: "Common child cards cannot be selected for this service. "}
var E206449 = Global_error{id: "206449", eType: EXPECTED_ERROR, message: "The effective time of the payment relationship must be earlier than the expiration time. "}
var E206450 = Global_error{id: "206450", eType: EXPECTED_ERROR, message: "The validity period of the payment rule must cover that of the payment relationship. "}
var E206451 = Global_error{id: "206451", eType: EXPECTED_ERROR, message: "The notification threshold range cannot be empty. "}
var E206452 = Global_error{id: "206452", eType: EXPECTED_ERROR, message: "The permillage value must be in the range from 0 to 1000. "}
var E206453 = Global_error{id: "206453", eType: EXPECTED_ERROR, message: "The subscriber type must be hybrid. "}
var E206454 = Global_error{id: "206454", eType: EXPECTED_ERROR, message: "The customer is not a virtual customer. "}
var E206455 = Global_error{id: "206455", eType: EXPECTED_ERROR, message: "The account ID does not match the subscriber number. "}
var E206456 = Global_error{id: "206456", eType: EXPECTED_ERROR, message: "The operation type is not supported. "}
var E206457 = Global_error{id: "206457", eType: EXPECTED_ERROR, message: "The suppression flag is not supported. "}
var E206458 = Global_error{id: "206458", eType: EXPECTED_ERROR, message: "The service ID does not exist. "}
var E206459 = Global_error{id: "206459", eType: EXPECTED_ERROR, message: "The subscriber has not subscribed to this service. "}
var E206460 = Global_error{id: "206460", eType: EXPECTED_ERROR, message: "You cannot suppress bills for prepaid subscribers. "}
var E206461 = Global_error{id: "206461", eType: EXPECTED_ERROR, message: "Data format is correct in the batch request file. "}
var E206462 = Global_error{id: "206462", eType: EXPECTED_ERROR, message: "Duplicate record in the batch request file. "}
var E206463 = Global_error{id: "206463", eType: EXPECTED_ERROR, message: "The dummy number or a special number cannot be used as a ring-to number. "}
var E206464 = Global_error{id: "206464", eType: EXPECTED_ERROR, message: "The call hunting service has been enabled for the entered number, and the entered number cannot be used as a ring-to number. "}
var E206465 = Global_error{id: "206465", eType: EXPECTED_ERROR, message: "The payment rule key already exists. "}
var E206466 = Global_error{id: "206466", eType: EXPECTED_ERROR, message: "The payment relationship key already exists. "}
var E206467 = Global_error{id: "206467", eType: EXPECTED_ERROR, message: "CBP prepaid and postpaid attributes do not meet requirements. "}
var E206468 = Global_error{id: "206468", eType: EXPECTED_ERROR, message: "This service is unavailable when the CBP prepaid and postpaid attributes are supported. "}
var E206469 = Global_error{id: "206469", eType: EXPECTED_ERROR, message: "The subscribers fail to join the group because their bill cycles do not match the group bill cycle. "}
var E206470 = Global_error{id: "206470", eType: EXPECTED_ERROR, message: "A group member's bill cycle is changed when the member's customer requires the same bill cycle for all accounts and all group members' bill cycles must match the group bill cycle. "}
var E206471 = Global_error{id: "206471", eType: EXPECTED_ERROR, message: "An error occurs when the platform attempts to parse the encrypted text. "}
var E206472 = Global_error{id: "206472", eType: EXPECTED_ERROR, message: "Operation is successful. "}
var E206473 = Global_error{id: "206473", eType: EXPECTED_ERROR, message: "The migration configuration is incorrect. "}
var E206474 = Global_error{id: "206474", eType: EXPECTED_ERROR, message: "The Tfunction parameter is not found in the system. "}
var E206475 = Global_error{id: "206475", eType: EXPECTED_ERROR, message: "The subscribed offer is abnormal state. "}
var E206476 = Global_error{id: "206476", eType: EXPECTED_ERROR, message: "CBP physical database operation failed. "}
var E206477 = Global_error{id: "206477", eType: EXPECTED_ERROR, message: "The parameter is not found. "}
var E206478 = Global_error{id: "206478", eType: EXPECTED_ERROR, message: "The parameter already exists. "}
var E206479 = Global_error{id: "206479", eType: EXPECTED_ERROR, message: "No records return. "}
var E206480 = Global_error{id: "206480", eType: EXPECTED_ERROR, message: "The STARTSEQ and STOPSEQ parameters cannot be empty. "}
var E206481 = Global_error{id: "206481", eType: EXPECTED_ERROR, message: "The lengths of STARTSEQ and STOPSEQ are different. "}
var E206482 = Global_error{id: "206482", eType: EXPECTED_ERROR, message: "The value of STOPSEQ cannot be smaller than that of STARTSEQ. "}
var E206483 = Global_error{id: "206483", eType: EXPECTED_ERROR, message: "The data dictionary BUS.CUS.FN.GROUP of the familiarity number group definition is not defined or is not found. "}
var E206484 = Global_error{id: "206484", eType: EXPECTED_ERROR, message: "The special processing method of the offer subscription relationship is not defined. "}
var E206485 = Global_error{id: "206485", eType: EXPECTED_ERROR, message: "The offer subscription relationship has no specified processing method or has multiple specified processing methods. "}
var E206486 = Global_error{id: "206486", eType: EXPECTED_ERROR, message: "The subscriber has no available account. "}
var E206487 = Global_error{id: "206487", eType: EXPECTED_ERROR, message: "The task parameter record is not found in the table. "}
var E206488 = Global_error{id: "206488", eType: EXPECTED_ERROR, message: "Failed to parse the character string. "}
var E206489 = Global_error{id: "206489", eType: EXPECTED_ERROR, message: "The RecID parameter cannot be empty when you modify or delete subscriber priority configuration. "}
var E206490 = Global_error{id: "206490", eType: EXPECTED_ERROR, message: "The number of records cannot be larger than 5. "}
var E206491 = Global_error{id: "206491", eType: EXPECTED_ERROR, message: "The number of records exceeds the maximum. "}
var E206492 = Global_error{id: "206492", eType: EXPECTED_ERROR, message: "When subscribers join a group, the tenant IDs of the group and subscribers must be the same. "}
var E206493 = Global_error{id: "206493", eType: EXPECTED_ERROR, message: "The group account is not found. "}
var E206494 = Global_error{id: "206494", eType: EXPECTED_ERROR, message: "The group has not taken effect. "}
var E206495 = Global_error{id: "206495", eType: EXPECTED_ERROR, message: "The license validity period exceeds the maximum allowed period. "}
var E206496 = Global_error{id: "206496", eType: EXPECTED_ERROR, message: "The number of licensed records has exceeded the maximum or is smaller than 0. "}
var E206497 = Global_error{id: "206497", eType: EXPECTED_ERROR, message: "The start number and the end number are different in length. "}
var E206498 = Global_error{id: "206498", eType: EXPECTED_ERROR, message: "The segment route list is empty. "}
var E206499 = Global_error{id: "206499", eType: EXPECTED_ERROR, message: "The end number must be larger than the start number. "}
var E206500 = Global_error{id: "206500", eType: EXPECTED_ERROR, message: "The tax exemption record is not found. "}
var E206501 = Global_error{id: "206501", eType: EXPECTED_ERROR, message: "The tax exemption record already exists. "}
var E206502 = Global_error{id: "206502", eType: EXPECTED_ERROR, message: "The tax exemption record is duplicate. "}
var E206503 = Global_error{id: "206503", eType: EXPECTED_ERROR, message: "The operation type does not exist. "}
var E206504 = Global_error{id: "206504", eType: EXPECTED_ERROR, message: "The fee item is not found. "}
var E206505 = Global_error{id: "206505", eType: EXPECTED_ERROR, message: "Operation is successful but the advance payment failed to be transferred. "}
var E206506 = Global_error{id: "206506", eType: EXPECTED_ERROR, message: "When the bill cycles of the group and group members must be the same, you cannot change the group members' bill cycles. "}
var E206507 = Global_error{id: "206507", eType: EXPECTED_ERROR, message: "When the tax types are the same, the validity periods cannot overlap or be duplicate. "}
var E206508 = Global_error{id: "206508", eType: EXPECTED_ERROR, message: "Failed to apply for primary offer change. "}
var E206509 = Global_error{id: "206509", eType: EXPECTED_ERROR, message: "When TaxType uses the default value, the validity period cannot overlap or be duplicate with the validity period of another TaxType. "}
var E206510 = Global_error{id: "206510", eType: EXPECTED_ERROR, message: "The bill cycle type of the old account cannot be changed during registration. "}
var E206511 = Global_error{id: "206511", eType: EXPECTED_ERROR, message: "The main product subscribed to by a postpaid subscriber has no load function. "}
var E206512 = Global_error{id: "206512", eType: EXPECTED_ERROR, message: "Loan is not required. "}
var E206513 = Global_error{id: "206513", eType: EXPECTED_ERROR, message: "The number of the subscriber's loan times has exceeded the maximum number. "}
var E206514 = Global_error{id: "206514", eType: EXPECTED_ERROR, message: "One account book has multiple ModifyAcctFee records when reset account balance. "}
var E206515 = Global_error{id: "206515", eType: EXPECTED_ERROR, message: "No mapping bill cycle type. "}
var E206516 = Global_error{id: "206516", eType: EXPECTED_ERROR, message: "Incorrect payment type. "}
var E206517 = Global_error{id: "206517", eType: EXPECTED_ERROR, message: "Incorrect parameter value. "}
var E206518 = Global_error{id: "206518", eType: EXPECTED_ERROR, message: "The control parameter value is not a number. "}
var E206519 = Global_error{id: "206519", eType: EXPECTED_ERROR, message: "The bill cycle allocation function is not supported. "}
var E206520 = Global_error{id: "206520", eType: EXPECTED_ERROR, message: "The Due Date value must be larger than 0. "}
var E206521 = Global_error{id: "206521", eType: EXPECTED_ERROR, message: "The parameter values contains duplicate destination numbers. "}
var E206522 = Global_error{id: "206522", eType: EXPECTED_ERROR, message: "The values of NotityType must be the same for a certain CallLowBalType. "}
var E206523 = Global_error{id: "206523", eType: EXPECTED_ERROR, message: "The NotifyType value must be 1 for the prepaid main money account. "}
var E206524 = Global_error{id: "206524", eType: EXPECTED_ERROR, message: "The SUBBILLCYCLECREDIT parameter cannot be empty when the SUBCREDITCTRLMODE value is 1. "}
var E206525 = Global_error{id: "206525", eType: EXPECTED_ERROR, message: "The start time must be earlier than the end time. "}
var E206526 = Global_error{id: "206526", eType: EXPECTED_ERROR, message: "An error occurred during the processing or generation of the automatic recharge request file. "}
var E206527 = Global_error{id: "206527", eType: EXPECTED_ERROR, message: "The TPS of the data service exceeded the licensed maximum TPS yesterday and no subscriber can be registered. "}
var E206528 = Global_error{id: "206528", eType: EXPECTED_ERROR, message: "The subscriber is in the subscriber-level credit control mode, and the opertype value cannot be 0. "}
var E206529 = Global_error{id: "206529", eType: EXPECTED_ERROR, message: "The subscriber is in the account-level credit control mode, and the opertype value cannot be 1. "}
var E206530 = Global_error{id: "206530", eType: EXPECTED_ERROR, message: "Subscriber-level credit management is not allowed when the subscriber is not in the subscriber-level credit control mode. "}
var E206531 = Global_error{id: "206531", eType: EXPECTED_ERROR, message: "Postpaid subscribers cannot recharge accounts using recharge cards. "}
var E206532 = Global_error{id: "206532", eType: EXPECTED_ERROR, message: "When a subscriber joins multiple CUGs, the CUGs must be unique. "}
var E206533 = Global_error{id: "206533", eType: EXPECTED_ERROR, message: "A maximum of 10 adjustment requests can be transferred to the Account Adjustment interface in a time. "}
var E206534 = Global_error{id: "206534", eType: EXPECTED_ERROR, message: "The logID values must be unique in adjustment requests transferred in the Account Adjustment interface. "}
var E206535 = Global_error{id: "206535", eType: EXPECTED_ERROR, message: "The logID value cannot be empty in each adjustment request transferred in the Account Adjustment interface. "}
var E206536 = Global_error{id: "206536", eType: EXPECTED_ERROR, message: "Failed to find the subscriber's valid offering subscription instances based on effectiveTime and offerId. "}
var E206537 = Global_error{id: "206537", eType: EXPECTED_ERROR, message: "The OfferOrderKey value cannot be duplicated. "}
var E206538 = Global_error{id: "206538", eType: EXPECTED_ERROR, message: "Unknown error. "}
var E206539 = Global_error{id: "206539", eType: EXPECTED_ERROR, message: "Failed to find FN subscription information of the subscriber based on the offering transferred from external systems. "}
var E206540 = Global_error{id: "206540", eType: EXPECTED_ERROR, message: "The offerOrderCode field must be set in the ManSubFamilyNo interface when a subscriber subscribes to the FN offering repeatedly. "}
var E206541 = Global_error{id: "206541", eType: EXPECTED_ERROR, message: "The offerId, offerCode, and offerOrderCode fields cannot be all empty in the ManSubFamilyNo interface when a subscriber subscribes to multiple FN offerings or subscribes to an FN offering repeatedly. "}
var E206542 = Global_error{id: "206542", eType: EXPECTED_ERROR, message: "Failed to delete the IMSI card. The system must have at least one effective IMSI card. "}
var E206543 = Global_error{id: "206543", eType: EXPECTED_ERROR, message: "Failed to delete the IMSI card. The IMSI card does not exist or has not taken effect. "}
var E206544 = Global_error{id: "206544", eType: EXPECTED_ERROR, message: "You are not allowed to delete the main service number. "}
var E206545 = Global_error{id: "206545", eType: EXPECTED_ERROR, message: "Services of the same type cannot be processed at the same time. "}
var E206546 = Global_error{id: "206546", eType: EXPECTED_ERROR, message: "Duplicate AccountCode value. "}
var E206547 = Global_error{id: "206547", eType: EXPECTED_ERROR, message: "The PAYMENTMETHOD value must be CASH, DDCC, BKCH, or CRCD. "}
var E206548 = Global_error{id: "206548", eType: EXPECTED_ERROR, message: "No subscriber to be deregistered is found under the customer. "}
var E206549 = Global_error{id: "206549", eType: EXPECTED_ERROR, message: "Duplicate SubscriberNo value. "}
var E206550 = Global_error{id: "206550", eType: EXPECTED_ERROR, message: "You are not allowed to enter a negative number or a character in the SALARY value. "}
var E206551 = Global_error{id: "206551", eType: EXPECTED_ERROR, message: "Invalid SUBSCRIBERNO value. "}
var E206552 = Global_error{id: "206552", eType: EXPECTED_ERROR, message: "Invalid AccountCode value. "}
var E206553 = Global_error{id: "206553", eType: EXPECTED_ERROR, message: "Failed to generate the email content according to the email template. "}
var E206554 = Global_error{id: "206554", eType: EXPECTED_ERROR, message: "The new number is included in multiple groups. "}
var E206555 = Global_error{id: "206555", eType: EXPECTED_ERROR, message: "The subscriber is in the proper state, and cannot be resumed temporarily. "}
var E206556 = Global_error{id: "206556", eType: EXPECTED_ERROR, message: "The subscriber does not have the account. "}
var E206557 = Global_error{id: "206557", eType: EXPECTED_ERROR, message: "Failed to obtain the prefix when querying recharge card information. "}
var E206558 = Global_error{id: "206558", eType: EXPECTED_ERROR, message: "The subscriber cannot be resumed temporarily because it is blacklisted, is deregistered, or has claimed missing. "}
var E206559 = Global_error{id: "206559", eType: EXPECTED_ERROR, message: "No query time is set. "}
var E206560 = Global_error{id: "206560", eType: EXPECTED_ERROR, message: "The system parameter is empty or incorrect. "}
var E206561 = Global_error{id: "206561", eType: EXPECTED_ERROR, message: "The interval between the start time and end time is longer than three months. "}
var E206562 = Global_error{id: "206562", eType: EXPECTED_ERROR, message: "The subscriber number must contain the country code. "}
var E206563 = Global_error{id: "206563", eType: EXPECTED_ERROR, message: "The MSISDN record already exists in the OCS_MNP table. "}
var E206564 = Global_error{id: "206564", eType: EXPECTED_ERROR, message: "The MSISDN record does not exist in the OCS_MNP table. "}
var E206565 = Global_error{id: "206565", eType: EXPECTED_ERROR, message: "The password cannot be the subscriber number or the reverse of the subscriber number. "}
var E206566 = Global_error{id: "206566", eType: EXPECTED_ERROR, message: "No conversion rule between balance and validity period is found. "}
var E206567 = Global_error{id: "206567", eType: EXPECTED_ERROR, message: "If the system supports RollUp credit, the interface cannot contain the temporary credit limit. "}
var E206568 = Global_error{id: "206568", eType: EXPECTED_ERROR, message: "The subscriber balance is smaller than any minimum balance in the conversion rules between balance and validity period corresponding to the main product. "}
var E206569 = Global_error{id: "206569", eType: EXPECTED_ERROR, message: "The operator password cannot be the operator name or the reverse of the operator name. "}
var E206570 = Global_error{id: "206570", eType: EXPECTED_ERROR, message: "Duplicate cross-net group name. "}
var E206571 = Global_error{id: "206571", eType: EXPECTED_ERROR, message: "When you perform the periodic recharge, the parent and child numbers must belong to a same customer. "}
var E206572 = Global_error{id: "206572", eType: EXPECTED_ERROR, message: "The payment account does not contain the share subaccount. "}
var E206573 = Global_error{id: "206573", eType: EXPECTED_ERROR, message: "When you register existing subscribers, the subscribers must belong to a same customer. "}
var E206574 = Global_error{id: "206574", eType: EXPECTED_ERROR, message: "The effective date cannot be later than the expiration date. "}
var E206575 = Global_error{id: "206575", eType: EXPECTED_ERROR, message: "After the subscriber's primary offering is modified, the validity periods of the primary offering and the next primary offering must be continuous. "}
var E206576 = Global_error{id: "206576", eType: EXPECTED_ERROR, message: "The expiration date cannot be earlier than the current date. "}
var E206577 = Global_error{id: "206577", eType: EXPECTED_ERROR, message: "The expiration date cannot be later than the default latest expiration date in the system. "}
var E206578 = Global_error{id: "206578", eType: EXPECTED_ERROR, message: "The effective date cannot be earlier than the current date. "}
var E206579 = Global_error{id: "206579", eType: EXPECTED_ERROR, message: "The effective date cannot be later than the default latest expiration date in the system. "}
var E206580 = Global_error{id: "206580", eType: EXPECTED_ERROR, message: "The subscriber has been activated. "}
var E206581 = Global_error{id: "206581", eType: EXPECTED_ERROR, message: "The off-net number cannot be added to the off-net number group of the group member. "}
var E206582 = Global_error{id: "206582", eType: EXPECTED_ERROR, message: "Number of manual redo work orders "}
var E206583 = Global_error{id: "206583", eType: EXPECTED_ERROR, message: "Number of concurrent orders in progress "}
var E206584 = Global_error{id: "206584", eType: EXPECTED_ERROR, message: "Number of tasks to be retried "}
var E206585 = Global_error{id: "206585", eType: EXPECTED_ERROR, message: "Number of records in duplicate request table "}
var E206586 = Global_error{id: "206586", eType: EXPECTED_ERROR, message: "Order history table cleaning status "}
var E206587 = Global_error{id: "206587", eType: EXPECTED_ERROR, message: "Number of orders in temporary order table "}
var E206588 = Global_error{id: "206588", eType: EXPECTED_ERROR, message: "Number of concurrent reverse work orders in progress "}
var E206589 = Global_error{id: "206589", eType: EXPECTED_ERROR, message: "URL link status for reverse work order notification "}
var E206590 = Global_error{id: "206590", eType: EXPECTED_ERROR, message: "Number of concurrent IVR access requests "}
var E206591 = Global_error{id: "206591", eType: EXPECTED_ERROR, message: "Number of concurrent WebService access requests "}
var E206592 = Global_error{id: "206592", eType: EXPECTED_ERROR, message: "Number of concurrent services in progress "}
var E206593 = Global_error{id: "206593", eType: EXPECTED_ERROR, message: "Number of concurrent customer tasks in progress "}
var E206594 = Global_error{id: "206594", eType: EXPECTED_ERROR, message: "Scheduled task to be executed currently "}
var E206595 = Global_error{id: "206595", eType: EXPECTED_ERROR, message: "Data in the concurrency control table "}
var E206596 = Global_error{id: "206596", eType: EXPECTED_ERROR, message: "Failed to process interportin messages because the current system is not the DTN system. "}
var E206597 = Global_error{id: "206597", eType: EXPECTED_ERROR, message: "Failed to process migratecustomer messages because the current system is not the DTAC system. "}
var E206598 = Global_error{id: "206598", eType: EXPECTED_ERROR, message: "Group members or subscriber group members cannot be migrated. "}
var E206599 = Global_error{id: "206599", eType: EXPECTED_ERROR, message: "The DTN system failed to insert migrated data and the DTAC system failed to cancel the migration request. "}
var E206600 = Global_error{id: "206600", eType: EXPECTED_ERROR, message: "The DTN system failed to insert migrated data; however, the DTAC system cancels the migration request successfully. "}
var E206601 = Global_error{id: "206601", eType: EXPECTED_ERROR, message: "Failed to migrate the subscriber to the DTN system because the subscriber is using another service. "}
var E206602 = Global_error{id: "206602", eType: EXPECTED_ERROR, message: "Failed to migrate the subscriber because his/her account is shared by other subscribers. "}
var E206603 = Global_error{id: "206603", eType: EXPECTED_ERROR, message: "The group number in the batch file cannot be empty during the batch management of group members. "}
var E206604 = Global_error{id: "206604", eType: EXPECTED_ERROR, message: "The SubscriberNo and AccountCode do not match. "}
var E206605 = Global_error{id: "206605", eType: EXPECTED_ERROR, message: "The recharge card is in use. "}
var E206606 = Global_error{id: "206606", eType: EXPECTED_ERROR, message: "The recharge card is being used in another recharge operation. "}
var E206607 = Global_error{id: "206607", eType: EXPECTED_ERROR, message: "The recharge amount cannot exceed the maximum of the account amount. "}
var E206608 = Global_error{id: "206608", eType: EXPECTED_ERROR, message: "An error occurs before processing a service. "}
var E206609 = Global_error{id: "206609", eType: EXPECTED_ERROR, message: "No recharge record. "}
var E206610 = Global_error{id: "206610", eType: EXPECTED_ERROR, message: "The operation succeeded. "}
var E206611 = Global_error{id: "206611", eType: EXPECTED_ERROR, message: "The single recharge amount exceeds the maximum recharge amount. "}
var E206612 = Global_error{id: "206612", eType: EXPECTED_ERROR, message: "The total recharge amount exceeds the upper limit. "}
var E206613 = Global_error{id: "206613", eType: EXPECTED_ERROR, message: "[All] No historical deduction record is found for SMS refund. "}
var E206614 = Global_error{id: "206614", eType: EXPECTED_ERROR, message: "During parent-child card authentication, the parent-child card service is not subscribed to. "}
var E206615 = Global_error{id: "206615", eType: EXPECTED_ERROR, message: "Insufficient account balance. "}
var E206616 = Global_error{id: "206616", eType: EXPECTED_ERROR, message: "The international gateway function is disabled for an international roaming subscriber. "}
var E206617 = Global_error{id: "206617", eType: EXPECTED_ERROR, message: "The void operation has been executed. "}
var E206618 = Global_error{id: "206618", eType: EXPECTED_ERROR, message: "Insufficient balance for account adjustment or transfer. "}
var E206619 = Global_error{id: "206619", eType: EXPECTED_ERROR, message: "Information about the customer that the subscriber belongs to is incomplete. "}
var E206620 = Global_error{id: "206620", eType: EXPECTED_ERROR, message: "The queried record already exists in ocs_chgintlog. "}
var E206621 = Global_error{id: "206621", eType: EXPECTED_ERROR, message: "Failed to interact with the third-party IN system, for example, authentication and fee deduction failed. "}
var E206622 = Global_error{id: "206622", eType: EXPECTED_ERROR, message: "Failed to query the third-party number segment based routing information. "}
var E206623 = Global_error{id: "206623", eType: EXPECTED_ERROR, message: "The balance of the transferor is smaller than the amount to be transferred. "}
var E206624 = Global_error{id: "206624", eType: EXPECTED_ERROR, message: "The maximum number of transfer times for the current month is exceeded. "}
var E206625 = Global_error{id: "206625", eType: EXPECTED_ERROR, message: "The minimum transfer amount at a time is not reached. "}
var E206626 = Global_error{id: "206626", eType: EXPECTED_ERROR, message: "The maximum transfer amount at a time is exceeded. "}
var E206627 = Global_error{id: "206627", eType: EXPECTED_ERROR, message: "The minimum balance before balance transfer is not reached. "}
var E206628 = Global_error{id: "206628", eType: EXPECTED_ERROR, message: "The minimum balance after balance transfer is not reached. "}
var E206629 = Global_error{id: "206629", eType: EXPECTED_ERROR, message: "The maximum transfer amount for the current day is exceeded. "}
var E206630 = Global_error{id: "206630", eType: EXPECTED_ERROR, message: "The maximum transfer amount for the current month is exceeded. "}
var E206631 = Global_error{id: "206631", eType: EXPECTED_ERROR, message: "The maximum number of transfer times for the current day is exceeded. "}
var E206632 = Global_error{id: "206632", eType: EXPECTED_ERROR, message: "Operation succeeded. "}
var E206633 = Global_error{id: "206633", eType: EXPECTED_ERROR, message: "The maximum account balance is exceeded. "}
var E206634 = Global_error{id: "206634", eType: EXPECTED_ERROR, message: "The subscriber cannot be activated because the current date is later than the activation deadline or exceeds maximum validity period. "}
var E206635 = Global_error{id: "206635", eType: EXPECTED_ERROR, message: "The short message notification is sent, indicating the maximum number of short messages that can be sent in a cycle. "}
var E206636 = Global_error{id: "206636", eType: EXPECTED_ERROR, message: "Failed to void recharge because the subscriber is rewarded with an offer for recharge. "}
var E206637 = Global_error{id: "206637", eType: EXPECTED_ERROR, message: "A subscriber is not allowed to use the GPRS for first time activation. "}
var E206638 = Global_error{id: "206638", eType: EXPECTED_ERROR, message: "Operation failed because the subaccount balance is larger than the maximum balance of the subaccount. The internal error code is 402023241. "}
var E206639 = Global_error{id: "206639", eType: EXPECTED_ERROR, message: "The number of accumulative transfer times has exceeded the weekly maximum. "}
var E206640 = Global_error{id: "206640", eType: EXPECTED_ERROR, message: "The number of accumulative transfer times has exceeded the hourly maximum. "}
var E206641 = Global_error{id: "206641", eType: EXPECTED_ERROR, message: "The product subscription fee is queried successfully. "}
var E206642 = Global_error{id: "206642", eType: EXPECTED_ERROR, message: "The content or service does not exist. "}
var E206643 = Global_error{id: "206643", eType: EXPECTED_ERROR, message: "The transfer amount within the current week exceeds the maximum. "}
var E206644 = Global_error{id: "206644", eType: EXPECTED_ERROR, message: "The category does not exist. "}
var E206645 = Global_error{id: "206645", eType: EXPECTED_ERROR, message: "Authentication failed because the account is being migrated. "}
var E206646 = Global_error{id: "206646", eType: EXPECTED_ERROR, message: "The accumulative transfer amount has exceeded the hourly maximum. "}
var E206647 = Global_error{id: "206647", eType: EXPECTED_ERROR, message: "The balance is insufficient to repay the loan. "}
var E206648 = Global_error{id: "206648", eType: EXPECTED_ERROR, message: "The recharge card was used. "}
var E206649 = Global_error{id: "206649", eType: EXPECTED_ERROR, message: "Only prepaid subscribers can apply for a loan. "}
var E206650 = Global_error{id: "206650", eType: EXPECTED_ERROR, message: "Balance authentication error. "}
var E206651 = Global_error{id: "206651", eType: EXPECTED_ERROR, message: "The subscriber is not in active state. "}
var E206652 = Global_error{id: "206652", eType: EXPECTED_ERROR, message: "The subscriber has loans. "}
var E206653 = Global_error{id: "206653", eType: EXPECTED_ERROR, message: "The subscriber is in the ETU blacklist state. "}
var E206654 = Global_error{id: "206654", eType: EXPECTED_ERROR, message: "The service duration of the subscriber is shorter than the minimum duration corresponding to the loan level. "}
var E206655 = Global_error{id: "206655", eType: EXPECTED_ERROR, message: "The main account balance of the subscriber does not reach the threshold for applying for loans. "}
var E206656 = Global_error{id: "206656", eType: EXPECTED_ERROR, message: "Lock failure "}
var E206657 = Global_error{id: "206657", eType: EXPECTED_ERROR, message: "The current service operation time is not within the time scheme allowed by the corresponding loan level. "}
var E206658 = Global_error{id: "206658", eType: EXPECTED_ERROR, message: "The accumulated consumption amount of the subscriber in the specified period does not meet the minimum requirement for the loan level. "}
var E206659 = Global_error{id: "206659", eType: EXPECTED_ERROR, message: "The loan level entered by the subscriber does not exist. "}
var E206660 = Global_error{id: "206660", eType: EXPECTED_ERROR, message: "The subscriber is in missing claiming state now. "}
var E206661 = Global_error{id: "206661", eType: EXPECTED_ERROR, message: "The subscriber is in the blacklist state now. "}
var E206662 = Global_error{id: "206662", eType: EXPECTED_ERROR, message: "Error code returned from PCCW WIFI (except for the case that balance is insufficient, management status is abnormal and subscriber expires). "}
var E206663 = Global_error{id: "206663", eType: EXPECTED_ERROR, message: "The request is commited repeatedly. "}
var E206664 = Global_error{id: "206664", eType: EXPECTED_ERROR, message: "This transfer operation failed because this number is not recharged after first activation. "}
var E206665 = Global_error{id: "206665", eType: EXPECTED_ERROR, message: "The subscriber without real name registration cannot be activated. "}
var E206666 = Global_error{id: "206666", eType: EXPECTED_ERROR, message: "Failed to authenticate the outgoing call right. "}
var E206667 = Global_error{id: "206667", eType: EXPECTED_ERROR, message: "The PCCW WIFI platform fails to process the charging request because the subscriber is in the Two-way frozen state. "}
var E206668 = Global_error{id: "206668", eType: EXPECTED_ERROR, message: "Error code returned from PCCW WIFI when subscriber is in the Disable or Suspend state. "}
var E206669 = Global_error{id: "206669", eType: EXPECTED_ERROR, message: "Failed to authenticate the roaming right. "}
var E206670 = Global_error{id: "206670", eType: EXPECTED_ERROR, message: "The sequence number of the request is duplicated. The internal error code is 102030016. "}
var E206671 = Global_error{id: "206671", eType: EXPECTED_ERROR, message: "The loan amount exceeds the maximum. "}
var E206672 = Global_error{id: "206672", eType: EXPECTED_ERROR, message: "The transfer-in and transfer-out accounts are the same in the DCC transfer process. "}
var E206673 = Global_error{id: "206673", eType: EXPECTED_ERROR, message: "The subscriber is not allowed to use the service in the content-based charging process. "}
var E206674 = Global_error{id: "206674", eType: EXPECTED_ERROR, message: "Authentication failed in the voice or SMS process because the peer number is an SP special number but the SP special number function is not enabled for the subscriber. "}
var E206675 = Global_error{id: "206675", eType: EXPECTED_ERROR, message: "The transfer request is rejected because the interval between this transfer request and the last transfer is shorter than the threshold. "}
var E206676 = Global_error{id: "206676", eType: EXPECTED_ERROR, message: "Failed to query the loan rule. "}
var E206677 = Global_error{id: "206677", eType: EXPECTED_ERROR, message: "The loan amount is not divisible. "}
var E206678 = Global_error{id: "206678", eType: EXPECTED_ERROR, message: "The loan offer ID is incorrect or the offer does not support loan. The internal error code is 102023131. "}
var E206679 = Global_error{id: "206679", eType: EXPECTED_ERROR, message: "The main capital balance will be smaller than the minimum after adjustment. Therefore, adjustment failed. The internal error code is 102023132. "}
var E206680 = Global_error{id: "206680", eType: EXPECTED_ERROR, message: "Failed to query the transfer amount and service handling fee of the transferor. "}
var E206681 = Global_error{id: "206681", eType: EXPECTED_ERROR, message: "The transfer function is not subscribed according to main products. Therefore, transfer-out authentication fails. "}
var E206682 = Global_error{id: "206682", eType: EXPECTED_ERROR, message: "An idle subscriber is not allowed to recharge the account using EVC. "}
var E206683 = Global_error{id: "206683", eType: EXPECTED_ERROR, message: "You are not allowed to access the rating group. "}
var E206684 = Global_error{id: "206684", eType: EXPECTED_ERROR, message: "Failed to query the OCS_ADJUSTHIS table. "}
var E206685 = Global_error{id: "206685", eType: EXPECTED_ERROR, message: "The adjustment serial number already exists. "}
var E206686 = Global_error{id: "206686", eType: EXPECTED_ERROR, message: "Authentication failed. "}
var E206687 = Global_error{id: "206687", eType: EXPECTED_ERROR, message: "For suspended subscribers of the GoldenNumber subbrand, the recharge amount is smaller than the value of the Min. Recharge Amount for Suspend attribute of the subbrand. "}
var E206688 = Global_error{id: "206688", eType: EXPECTED_ERROR, message: "The subscriber's CDRs are being rerated and the service cannot be handled. "}
var E206689 = Global_error{id: "206689", eType: EXPECTED_ERROR, message: "The subscriber for whom you want to adjust the account does not have this account book. "}
var E206690 = Global_error{id: "206690", eType: EXPECTED_ERROR, message: "Transfer-out authentication failed because condition expression verification failed. "}
var E206691 = Global_error{id: "206691", eType: EXPECTED_ERROR, message: "Transfer-out is not supported in subscriber-level authentication, and transfer-out authentication failed. "}
var E206692 = Global_error{id: "206692", eType: EXPECTED_ERROR, message: "Transfer-in is not supported in subscriber-level authentication, and transfer-in authentication failed. "}
var E206693 = Global_error{id: "206693", eType: EXPECTED_ERROR, message: "The interval between the current time and the generation time of international roaming offline CDRs is longer than the maximum. The system does not execute rating for the CDRs. The internal error code is 102023126. "}
var E206694 = Global_error{id: "206694", eType: EXPECTED_ERROR, message: "During transfer, the transferor life cycle authentication failed. "}
var E206695 = Global_error{id: "206695", eType: EXPECTED_ERROR, message: "Invalid AVP data. "}
var E206696 = Global_error{id: "206696", eType: EXPECTED_ERROR, message: "Counteraction is not allowed when the subscriber's balance is a negative value or 0. The internal error code is 102030013. "}
var E206697 = Global_error{id: "206697", eType: EXPECTED_ERROR, message: "This recharge method is not supported. The internal error code is 102022136. "}
var E206698 = Global_error{id: "206698", eType: EXPECTED_ERROR, message: "During transfer, the transferee life cycle authentication failed. "}
var E206699 = Global_error{id: "206699", eType: EXPECTED_ERROR, message: "System-level transferor authentication failed. "}
var E206700 = Global_error{id: "206700", eType: EXPECTED_ERROR, message: "System-level transferee authentication failed. "}
var E206701 = Global_error{id: "206701", eType: EXPECTED_ERROR, message: "Brand-level transferor authentication failed. "}
var E206702 = Global_error{id: "206702", eType: EXPECTED_ERROR, message: "Brand-level transferee authentication failed. "}
var E206703 = Global_error{id: "206703", eType: EXPECTED_ERROR, message: "Appendant product-level transferor authentication failed. "}
var E206704 = Global_error{id: "206704", eType: EXPECTED_ERROR, message: "Appendant product-level transferee authentication failed. "}
var E206705 = Global_error{id: "206705", eType: EXPECTED_ERROR, message: "Transferor status authentication failed. "}
var E206706 = Global_error{id: "206706", eType: EXPECTED_ERROR, message: "Transferee status authentication failed. "}
var E206707 = Global_error{id: "206707", eType: EXPECTED_ERROR, message: "The CUG function is completely disabled, so services are interrupted. "}
var E206708 = Global_error{id: "206708", eType: EXPECTED_ERROR, message: "The group member is locked. "}
var E206709 = Global_error{id: "206709", eType: EXPECTED_ERROR, message: "Transfer authentication failed because the transfer amount is not in the preconfigured enumerated values of the transferable amount. "}
var E206710 = Global_error{id: "206710", eType: EXPECTED_ERROR, message: "The subscriber's subbrand does not allow subaccount transfer. "}
var E206711 = Global_error{id: "206711", eType: EXPECTED_ERROR, message: "The system configuration data is faulty. "}
var E206712 = Global_error{id: "206712", eType: EXPECTED_ERROR, message: "The group customer is locked. "}
var E206713 = Global_error{id: "206713", eType: EXPECTED_ERROR, message: "The recharge package type that is specified does not match the recharge amount. The external code is 5007. "}
var E206714 = Global_error{id: "206714", eType: EXPECTED_ERROR, message: "No RatingGroup is reported. "}
var E206715 = Global_error{id: "206715", eType: EXPECTED_ERROR, message: "Failed to authenticate the password. "}
var E206716 = Global_error{id: "206716", eType: EXPECTED_ERROR, message: "During the three-level authentication for enabling the transfer function, the authentication at the brand level fails. "}
var E206717 = Global_error{id: "206717", eType: EXPECTED_ERROR, message: "During the three-level authentication for enabling the transfer function, the authentication at the subscriber level fails. "}
var E206718 = Global_error{id: "206718", eType: EXPECTED_ERROR, message: "The service duration of the transferor does not reach the minimum limit. "}
var E206719 = Global_error{id: "206719", eType: EXPECTED_ERROR, message: "Incorrect preference type. "}
var E206720 = Global_error{id: "206720", eType: EXPECTED_ERROR, message: "The service duration of the transferee does not reach the minimum limit. "}
var E206721 = Global_error{id: "206721", eType: EXPECTED_ERROR, message: "The transfer amount is not a multiple of the specified amount. "}
var E206722 = Global_error{id: "206722", eType: EXPECTED_ERROR, message: "When the transfer-in and transfer-out functions are enabled for brands, authentication fails. "}
var E206723 = Global_error{id: "206723", eType: EXPECTED_ERROR, message: "The transfer function is not subscribed according to main products. Therefore, transfer-in authentication fails. "}
var E206724 = Global_error{id: "206724", eType: EXPECTED_ERROR, message: "The account book type specified by the transferor does not exist. "}
var E206725 = Global_error{id: "206725", eType: EXPECTED_ERROR, message: "The account book type specified by the transferee does not exist. "}
var E206726 = Global_error{id: "206726", eType: EXPECTED_ERROR, message: "Activation is not allowed because licenses are insufficient. "}
var E206727 = Global_error{id: "206727", eType: EXPECTED_ERROR, message: "When you convert balance into validity period, the requested validity period is too long. "}
var E206728 = Global_error{id: "206728", eType: EXPECTED_ERROR, message: "Incorrect account type. You cannot convert the load subaccount balance into validity period. "}
var E206729 = Global_error{id: "206729", eType: EXPECTED_ERROR, message: "The accumulative transfer amount has exceeded the weekly maximum. "}
var E206730 = Global_error{id: "206730", eType: EXPECTED_ERROR, message: "Failed to compile the expression. "}
var E206731 = Global_error{id: "206731", eType: EXPECTED_ERROR, message: "Connecting to the compiling server is rejected. "}
var E206732 = Global_error{id: "206732", eType: EXPECTED_ERROR, message: "Failed to update the product and offer buffer. "}
var E206733 = Global_error{id: "206733", eType: EXPECTED_ERROR, message: "Failed to query and update policy. "}
var E206734 = Global_error{id: "206734", eType: EXPECTED_ERROR, message: "The product to be created exceeds the license limit. Update the license. "}
var E206735 = Global_error{id: "206735", eType: EXPECTED_ERROR, message: "Failed to query or update the policy. "}
var E206736 = Global_error{id: "206736", eType: EXPECTED_ERROR, message: "Incorrect template data. "}
var E206737 = Global_error{id: "206737", eType: EXPECTED_ERROR, message: "Failed to verify the product attribute. "}
var E206738 = Global_error{id: "206738", eType: EXPECTED_ERROR, message: "Failed to verify the condition group attribute. "}
var E206739 = Global_error{id: "206739", eType: EXPECTED_ERROR, message: "Failed to save the extended attribute. "}
var E206740 = Global_error{id: "206740", eType: EXPECTED_ERROR, message: "Failed to query the universal matrix. "}
var E206741 = Global_error{id: "206741", eType: EXPECTED_ERROR, message: "The condition group records cannot be copied. "}
var E206742 = Global_error{id: "206742", eType: EXPECTED_ERROR, message: "Failed to delete extended attributes. "}
var E206743 = Global_error{id: "206743", eType: EXPECTED_ERROR, message: "The condition group records cannot be copied because the prototype product associated with the operation type is not the prototype product stored in the system. "}
var E206744 = Global_error{id: "206744", eType: EXPECTED_ERROR, message: "The data has been updated. "}
var E206745 = Global_error{id: "206745", eType: EXPECTED_ERROR, message: "The condition group record cannot be created. "}
var E206746 = Global_error{id: "206746", eType: EXPECTED_ERROR, message: "The product name cannot be duplicated. "}
var E206747 = Global_error{id: "206747", eType: EXPECTED_ERROR, message: "The product cannot be deleted because it has been tested or released. "}
var E206748 = Global_error{id: "206748", eType: EXPECTED_ERROR, message: "The main and global products must have an associated cycle category. "}
var E206749 = Global_error{id: "206749", eType: EXPECTED_ERROR, message: "The time scheme cannot be saved because the time segment is duplicated in the time scheme. "}
var E206750 = Global_error{id: "206750", eType: EXPECTED_ERROR, message: "Failed to add or edit a usage policy. "}
var E206751 = Global_error{id: "206751", eType: EXPECTED_ERROR, message: "The tariff record name already exists. "}
var E206752 = Global_error{id: "206752", eType: EXPECTED_ERROR, message: "Failed to save the universal charging matrix. "}
var E206753 = Global_error{id: "206753", eType: EXPECTED_ERROR, message: "Failed to delete the bill cycle type. "}
var E206754 = Global_error{id: "206754", eType: EXPECTED_ERROR, message: "Failed to add the time scheme. "}
var E206755 = Global_error{id: "206755", eType: EXPECTED_ERROR, message: "The brand cannot be deleted because certain products of this brand exist. "}
var E206756 = Global_error{id: "206756", eType: EXPECTED_ERROR, message: "Failed to import records to the universal main and annex table. "}
var E206757 = Global_error{id: "206757", eType: EXPECTED_ERROR, message: "Failed to add the recharge reward rule. "}
var E206758 = Global_error{id: "206758", eType: EXPECTED_ERROR, message: "Failed to save the price plan. "}
var E206759 = Global_error{id: "206759", eType: EXPECTED_ERROR, message: "Failed to load the price plan tree. "}
var E206760 = Global_error{id: "206760", eType: EXPECTED_ERROR, message: "Failed to modify or delete condition expressions. "}
var E206761 = Global_error{id: "206761", eType: EXPECTED_ERROR, message: "Failed to import complete data. "}
var E206762 = Global_error{id: "206762", eType: EXPECTED_ERROR, message: "Failed to create or copy product. "}
var E206763 = Global_error{id: "206763", eType: EXPECTED_ERROR, message: "Failed to change the product status to Test or Release. "}
var E206764 = Global_error{id: "206764", eType: EXPECTED_ERROR, message: "Failed to add or update the common authentication record. "}
var E206765 = Global_error{id: "206765", eType: EXPECTED_ERROR, message: "Failed to query the product priority. "}
var E206766 = Global_error{id: "206766", eType: EXPECTED_ERROR, message: "Failed to delete the product or offer directory. "}
var E206767 = Global_error{id: "206767", eType: EXPECTED_ERROR, message: "Failed to add or update the product directory. "}
var E206768 = Global_error{id: "206768", eType: EXPECTED_ERROR, message: "Failed to change the product or offer status. "}
var E206769 = Global_error{id: "206769", eType: EXPECTED_ERROR, message: "Failed to test or release the product (UVS). "}
var E206770 = Global_error{id: "206770", eType: EXPECTED_ERROR, message: "Failed to query the product rental priority. "}
var E206771 = Global_error{id: "206771", eType: EXPECTED_ERROR, message: "Failed to create the rental priority tree. "}
var E206772 = Global_error{id: "206772", eType: EXPECTED_ERROR, message: "Failed to load the product priority. "}
var E206773 = Global_error{id: "206773", eType: EXPECTED_ERROR, message: "Failed to obtain the main product priority data. "}
var E206774 = Global_error{id: "206774", eType: EXPECTED_ERROR, message: "Failed to query the Simple usage template. "}
var E206775 = Global_error{id: "206775", eType: EXPECTED_ERROR, message: "Failed to import the product. "}
var E206776 = Global_error{id: "206776", eType: EXPECTED_ERROR, message: "Failed to import the price plan. "}
var E206777 = Global_error{id: "206777", eType: EXPECTED_ERROR, message: "Failed to import the policy. "}
var E206778 = Global_error{id: "206778", eType: EXPECTED_ERROR, message: "The special authentication record is duplicated. "}
var E206779 = Global_error{id: "206779", eType: EXPECTED_ERROR, message: "A tariff record with the same time scheme and tariff condition already exist. "}
var E206780 = Global_error{id: "206780", eType: EXPECTED_ERROR, message: "The same special number record already exists. "}
var E206781 = Global_error{id: "206781", eType: EXPECTED_ERROR, message: "Export failure. The table does not contain any data. "}
var E206782 = Global_error{id: "206782", eType: EXPECTED_ERROR, message: "Failed to synchronize CRM. "}
var E206783 = Global_error{id: "206783", eType: EXPECTED_ERROR, message: "The original product key does not exist. "}
var E206784 = Global_error{id: "206784", eType: EXPECTED_ERROR, message: "Failed to read the TimeSpanSearchTblConfig configuration item. "}
var E206785 = Global_error{id: "206785", eType: EXPECTED_ERROR, message: "Failed to read the TimeSpanRefPubTblConfig configuration item. "}
var E206786 = Global_error{id: "206786", eType: EXPECTED_ERROR, message: "The price plan to be tested or released must contain at least one policy. "}
var E206787 = Global_error{id: "206787", eType: EXPECTED_ERROR, message: "CUG ID and CUG Type cannot be All at the same time. "}
var E206788 = Global_error{id: "206788", eType: EXPECTED_ERROR, message: "The external product ID already exists. "}
var E206789 = Global_error{id: "206789", eType: EXPECTED_ERROR, message: "The directory cannot be deleted because it contains tested or released products. "}
var E206790 = Global_error{id: "206790", eType: EXPECTED_ERROR, message: "The same record exists. "}
var E206791 = Global_error{id: "206791", eType: EXPECTED_ERROR, message: "The offer cannot be deleted because it has been tested or released. "}
var E206792 = Global_error{id: "206792", eType: EXPECTED_ERROR, message: "Failed to delete the brand. "}
var E206793 = Global_error{id: "206793", eType: EXPECTED_ERROR, message: "The catalog name of the offer already exists. "}
var E206794 = Global_error{id: "206794", eType: EXPECTED_ERROR, message: "Failed to delete the hidden global offer. "}
var E206795 = Global_error{id: "206795", eType: EXPECTED_ERROR, message: "Failed to import the offer. "}
var E206796 = Global_error{id: "206796", eType: EXPECTED_ERROR, message: "Failed to release the relationship between the offer and product. "}
var E206797 = Global_error{id: "206797", eType: EXPECTED_ERROR, message: "The offer name cannot be duplicated. "}
var E206798 = Global_error{id: "206798", eType: EXPECTED_ERROR, message: "The brand name already exists. The brand with the same name cannot be added. "}
var E206799 = Global_error{id: "206799", eType: EXPECTED_ERROR, message: "The replacement relationship name is duplicated. "}
var E206800 = Global_error{id: "206800", eType: EXPECTED_ERROR, message: "The number of main products on the source end is different from that on the target end or the number of main products of the same network type is different. "}
var E206801 = Global_error{id: "206801", eType: EXPECTED_ERROR, message: "Failed to copy the replacement relationship of the offer. "}
var E206802 = Global_error{id: "206802", eType: EXPECTED_ERROR, message: "The product in the offer is not released. "}
var E206803 = Global_error{id: "206803", eType: EXPECTED_ERROR, message: "The data service of the usage policy has been rewarded. "}
var E206804 = Global_error{id: "206804", eType: EXPECTED_ERROR, message: "The scenario name cannot be duplicated. "}
var E206805 = Global_error{id: "206805", eType: EXPECTED_ERROR, message: "The scenario cannot be deleted because it has been referenced. "}
var E206806 = Global_error{id: "206806", eType: EXPECTED_ERROR, message: "The SMS channel fee is not an integer. "}
var E206807 = Global_error{id: "206807", eType: EXPECTED_ERROR, message: "The MMS channel fee is not an integer. "}
var E206808 = Global_error{id: "206808", eType: EXPECTED_ERROR, message: "The main product in the file to be imported does not exist. "}
var E206809 = Global_error{id: "206809", eType: EXPECTED_ERROR, message: "Failed to synchronize digital right to the DRMC. "}
var E206810 = Global_error{id: "206810", eType: EXPECTED_ERROR, message: "Enter a file name in the XLS or ZIP format. "}
var E206811 = Global_error{id: "206811", eType: EXPECTED_ERROR, message: "The number of records exceeds 65534. Export the records to a TXT file. "}
var E206812 = Global_error{id: "206812", eType: EXPECTED_ERROR, message: "Blank orb. "}
var E206813 = Global_error{id: "206813", eType: EXPECTED_ERROR, message: "Failed to import special numbers. "}
var E206814 = Global_error{id: "206814", eType: EXPECTED_ERROR, message: "The operation product cannot be imported from the product template import menu. "}
var E206815 = Global_error{id: "206815", eType: EXPECTED_ERROR, message: "Failed to import offers. "}
var E206816 = Global_error{id: "206816", eType: EXPECTED_ERROR, message: "The product template import menu cannot be used to import product templates. "}
var E206817 = Global_error{id: "206817", eType: EXPECTED_ERROR, message: "Failed to synchronize data to SCP. "}
var E206818 = Global_error{id: "206818", eType: EXPECTED_ERROR, message: "Failed to synchronize data from the PMS to the Billing. "}
var E206819 = Global_error{id: "206819", eType: EXPECTED_ERROR, message: "The content charging product can contain only one service or category. "}
var E206820 = Global_error{id: "206820", eType: EXPECTED_ERROR, message: "The offer key does not exist and the offer information cannot be imported. "}
var E206821 = Global_error{id: "206821", eType: EXPECTED_ERROR, message: "The consumption accumulation cannot be deleted because it is referenced. "}
var E206822 = Global_error{id: "206822", eType: EXPECTED_ERROR, message: "The consumption accumulation exists and cannot be added again. "}
var E206823 = Global_error{id: "206823", eType: EXPECTED_ERROR, message: "Failed to change the offer state to test. "}
var E206824 = Global_error{id: "206824", eType: EXPECTED_ERROR, message: "The interval between the start time and end time of the new record cannot overlap those of existing records. "}
var E206825 = Global_error{id: "206825", eType: EXPECTED_ERROR, message: "The average network speed range defined in the new record cannot overlap those defined in existing records. "}
var E206826 = Global_error{id: "206826", eType: EXPECTED_ERROR, message: "The zone ID has been referenced and cannot be deleted. "}
var E206827 = Global_error{id: "206827", eType: EXPECTED_ERROR, message: "The recharge amount ranges cannot overlap for the same main product. "}
var E206828 = Global_error{id: "206828", eType: EXPECTED_ERROR, message: "The service scenario does not exist. "}
var E206829 = Global_error{id: "206829", eType: EXPECTED_ERROR, message: "The threshold defined about the Threshold Up Limit and the Threshold Low Limit cannot overlap with the existing records. "}
var E206830 = Global_error{id: "206830", eType: EXPECTED_ERROR, message: "The channel code has been referenced by the autopay_channel_map table and therefore cannot be deleted. "}
var E206831 = Global_error{id: "206831", eType: EXPECTED_ERROR, message: "Failed to obtain the factors for spliting scenarios. "}
var E206832 = Global_error{id: "206832", eType: EXPECTED_ERROR, message: "Failed to save the service scenario. "}
var E206833 = Global_error{id: "206833", eType: EXPECTED_ERROR, message: "The product already has the PCRF policy group. "}
var E206834 = Global_error{id: "206834", eType: EXPECTED_ERROR, message: "The charging matrix contains duplicate records, which violates the uniqueness rule. "}
var E206835 = Global_error{id: "206835", eType: EXPECTED_ERROR, message: "Failed to release the scenarios because the two scenarios have the same IDs. "}
var E206836 = Global_error{id: "206836", eType: EXPECTED_ERROR, message: "The automatically upgraded package has a rental price plan. Automatic package upgrade data must be configured before the product can be tested or released. "}
var E206837 = Global_error{id: "206837", eType: EXPECTED_ERROR, message: "The package IDs in a same product must be different. "}
var E206838 = Global_error{id: "206838", eType: EXPECTED_ERROR, message: "The package rental must increase after automatic upgrade. "}
var E206839 = Global_error{id: "206839", eType: EXPECTED_ERROR, message: "Failed to synchronize the scenario to Billing. "}
var E206840 = Global_error{id: "206840", eType: EXPECTED_ERROR, message: "The new period overlaps an existing period. "}
var E206841 = Global_error{id: "206841", eType: EXPECTED_ERROR, message: "The end time of the new record is earlier than the start time. "}
var E206842 = Global_error{id: "206842", eType: EXPECTED_ERROR, message: "Failed to change the offer status from Draft to Release because the offer contains unreleased products. "}
var E206843 = Global_error{id: "206843", eType: EXPECTED_ERROR, message: "Failed to tested the offer because the offer contains products whose Is Tested value is 0. "}
var E206844 = Global_error{id: "206844", eType: EXPECTED_ERROR, message: "The price plan to be released must contain at least one policy. "}
var E206845 = Global_error{id: "206845", eType: EXPECTED_ERROR, message: "Failed to connect to DRMC. "}
var E206846 = Global_error{id: "206846", eType: EXPECTED_ERROR, message: "The codes defined in the system have been used up. No code is available. "}
var E206847 = Global_error{id: "206847", eType: EXPECTED_ERROR, message: "The database does not contain the DIC_DYN_RULE table. "}
var E206848 = Global_error{id: "206848", eType: EXPECTED_ERROR, message: "When you are importing the PCRF policy, the rating group matching the service ID in the policy is duplicated. "}
var E206849 = Global_error{id: "206849", eType: EXPECTED_ERROR, message: "When you are importing the PCRF policy, the service ID in the policy is duplicated. "}
var E206850 = Global_error{id: "206850", eType: EXPECTED_ERROR, message: "Rating failure. "}
var E206851 = Global_error{id: "206851", eType: EXPECTED_ERROR, message: "The data already exists in the table. "}
var E206852 = Global_error{id: "206852", eType: EXPECTED_ERROR, message: "The tag code does not exist. "}
var E206853 = Global_error{id: "206853", eType: EXPECTED_ERROR, message: "The code field cannot be blank. "}
var E206854 = Global_error{id: "206854", eType: EXPECTED_ERROR, message: "The resource operation type is incorrect. "}
var E206855 = Global_error{id: "206855", eType: EXPECTED_ERROR, message: "The data type is incorrect when converting the XML node data to an object. "}
var E206856 = Global_error{id: "206856", eType: EXPECTED_ERROR, message: "The record to be deleted does not exist. tableName: [0]; codeField: [1]; codeValue: [2]. "}
var E206857 = Global_error{id: "206857", eType: EXPECTED_ERROR, message: "The resource record to be modified is not unique. CodeField: [0]; CodeValue: [1]. "}
var E206858 = Global_error{id: "206858", eType: EXPECTED_ERROR, message: "The values of Cut-off Type of the same accumulator are different. "}
var E206859 = Global_error{id: "206859", eType: EXPECTED_ERROR, message: "Failed to change the product status to test. "}
var E206860 = Global_error{id: "206860", eType: EXPECTED_ERROR, message: "The value of Cut-off Type has already been used by another accumulator. "}
var E206861 = Global_error{id: "206861", eType: EXPECTED_ERROR, message: "Failed to import the records of the universal primary and secondary tables. "}
var E206862 = Global_error{id: "206862", eType: EXPECTED_ERROR, message: "The class of the request name is blank. "}
var E206863 = Global_error{id: "206863", eType: EXPECTED_ERROR, message: "The RENTCHARGETYPE parameter is missing in the simple monthly rent template. "}
var E206864 = Global_error{id: "206864", eType: EXPECTED_ERROR, message: "Failed to find the proper route. "}
var E206865 = Global_error{id: "206865", eType: EXPECTED_ERROR, message: "The number of times of obtaining the phone numbers in batches exceeds the threshold. "}
var E206866 = Global_error{id: "206866", eType: EXPECTED_ERROR, message: "The type of the external product is incorrect. "}
var E206867 = Global_error{id: "206867", eType: EXPECTED_ERROR, message: "The value of BILLINGCYCLETYPE of the product policy is invalid. "}
var E206868 = Global_error{id: "206868", eType: EXPECTED_ERROR, message: "The input ID of the price plan is blank. "}
var E206869 = Global_error{id: "206869", eType: EXPECTED_ERROR, message: "The length of the number is configured incorrectly. "}
var E206870 = Global_error{id: "206870", eType: EXPECTED_ERROR, message: "The normal authentication record is duplicated. "}
var E206871 = Global_error{id: "206871", eType: EXPECTED_ERROR, message: "The service type of each price plan of the product must be unique. "}
var E206872 = Global_error{id: "206872", eType: EXPECTED_ERROR, message: "The resource that is not idle cannot be deleted. "}
var E206873 = Global_error{id: "206873", eType: EXPECTED_ERROR, message: "For the main product, the service corresponding to the does not exist or multiple services correspond to the FeatureId. "}
var E206874 = Global_error{id: "206874", eType: EXPECTED_ERROR, message: "The product on which other products depend cannot depend on other products. "}
var E206875 = Global_error{id: "206875", eType: EXPECTED_ERROR, message: "The number of price plans exceeds the threshold. "}
var E206876 = Global_error{id: "206876", eType: EXPECTED_ERROR, message: "A price plan cannot be added to or deleted from the product in Test state. "}
var E206877 = Global_error{id: "206877", eType: EXPECTED_ERROR, message: "There are multiple pricing packages corresponding to the subbrands of the product. "}
var E206878 = Global_error{id: "206878", eType: EXPECTED_ERROR, message: "Failed to dump the number segment. "}
var E206879 = Global_error{id: "206879", eType: EXPECTED_ERROR, message: "The fixed settlement date for query is unavailable. "}
var E206880 = Global_error{id: "206880", eType: EXPECTED_ERROR, message: "Incorrect tag. "}
var E206881 = Global_error{id: "206881", eType: EXPECTED_ERROR, message: "The product is not related to the properties for billing-cycle. "}
var E206882 = Global_error{id: "206882", eType: EXPECTED_ERROR, message: "For the product with the hour package, the price plan cannot contain the rent policy. "}
var E206883 = Global_error{id: "206883", eType: EXPECTED_ERROR, message: "The catalog cannot be deleted because the catalog has products. "}
var E206884 = Global_error{id: "206884", eType: EXPECTED_ERROR, message: "The source product to be set with the appendant relation must be a non-main product. The destination product must be a main product. "}
var E206885 = Global_error{id: "206885", eType: EXPECTED_ERROR, message: "The catalog cannot be deleted because the brand has subcatalogs. "}
var E206886 = Global_error{id: "206886", eType: EXPECTED_ERROR, message: "The simple allowance tariff is not supported. "}
var E206887 = Global_error{id: "206887", eType: EXPECTED_ERROR, message: "The SessionEntity parameter in the input document is blank. "}
var E206888 = Global_error{id: "206888", eType: EXPECTED_ERROR, message: "The operation failed. "}
var E206889 = Global_error{id: "206889", eType: EXPECTED_ERROR, message: "The statuses of the source and destination are not the same. "}
var E206890 = Global_error{id: "206890", eType: EXPECTED_ERROR, message: "The imported format of the file is incorrect. "}
var E206891 = Global_error{id: "206891", eType: EXPECTED_ERROR, message: "The CYCLESTARTFLAG value of billing-cycle for this product is invalid. "}
var E206892 = Global_error{id: "206892", eType: EXPECTED_ERROR, message: "The return value of the invoked BizLogic is null. "}
var E206893 = Global_error{id: "206893", eType: EXPECTED_ERROR, message: "The main product cannot depend on other products. "}
var E206894 = Global_error{id: "206894", eType: EXPECTED_ERROR, message: "Failed to import the file. "}
var E206895 = Global_error{id: "206895", eType: EXPECTED_ERROR, message: "Failed to export the product. "}
var E206896 = Global_error{id: "206896", eType: EXPECTED_ERROR, message: "The referenced external resource does not exist. The error must be located based on the site requirements. "}
var E206897 = Global_error{id: "206897", eType: EXPECTED_ERROR, message: "The simple discount tariff is not supported. "}
var E206898 = Global_error{id: "206898", eType: EXPECTED_ERROR, message: "The relation to be added already exists in the relation list. "}
var E206899 = Global_error{id: "206899", eType: EXPECTED_ERROR, message: "The specified file does not exist. "}
var E206900 = Global_error{id: "206900", eType: EXPECTED_ERROR, message: "The products in the replacement relationship must be either prepayment products or postpayment products. "}
var E206901 = Global_error{id: "206901", eType: EXPECTED_ERROR, message: "JSON request times out. "}
var E206902 = Global_error{id: "206902", eType: EXPECTED_ERROR, message: "Time out while sending MML request. "}
var E206903 = Global_error{id: "206903", eType: EXPECTED_ERROR, message: "The catalog name has been existed, cannot add catalog. "}
var E206904 = Global_error{id: "206904", eType: EXPECTED_ERROR, message: "The relevant services of the product already existed. "}
var E206905 = Global_error{id: "206905", eType: EXPECTED_ERROR, message: "The number of records exceeds 65535. "}
var E206906 = Global_error{id: "206906", eType: EXPECTED_ERROR, message: "The record already exists. "}
var E206907 = Global_error{id: "206907", eType: EXPECTED_ERROR, message: "The simple usage tariff is not supported. "}
var E206908 = Global_error{id: "206908", eType: EXPECTED_ERROR, message: "Failed to save the data. "}
var E206909 = Global_error{id: "206909", eType: EXPECTED_ERROR, message: "The products in the replacement relationship must be either main products or non-main products. "}
var E206910 = Global_error{id: "206910", eType: EXPECTED_ERROR, message: "A condition group cannot be added or deleted when the price plan is in Test state. "}
var E206911 = Global_error{id: "206911", eType: EXPECTED_ERROR, message: "Failed to export the records of the universal primary and secondary tables. "}
var E206912 = Global_error{id: "206912", eType: EXPECTED_ERROR, message: "Failed to read the configuration file. "}
var E206913 = Global_error{id: "206913", eType: EXPECTED_ERROR, message: "The non-telecom or data service of the source product to be set up with appendant relationship must depend on the basic service of the target product. "}
var E206914 = Global_error{id: "206914", eType: EXPECTED_ERROR, message: "Failed to compress backup package. "}
var E206915 = Global_error{id: "206915", eType: EXPECTED_ERROR, message: "Failed to invoke the real-time interface for querying the balance account book table. "}
var E206916 = Global_error{id: "206916", eType: EXPECTED_ERROR, message: "The format of file is wrong, please read File Formatter Description. "}
var E206917 = Global_error{id: "206917", eType: EXPECTED_ERROR, message: "The released product cannot be modified or deleted. "}
var E206918 = Global_error{id: "206918", eType: EXPECTED_ERROR, message: "The record being modify is not exclusive. "}
var E206919 = Global_error{id: "206919", eType: EXPECTED_ERROR, message: "Ftp or Sftp send file does not exist. "}
var E206920 = Global_error{id: "206920", eType: EXPECTED_ERROR, message: "An exception occurs in querying condition data. "}
var E206921 = Global_error{id: "206921", eType: EXPECTED_ERROR, message: "The non-main product cannot contain the services with repeated featureIds. "}
var E206922 = Global_error{id: "206922", eType: EXPECTED_ERROR, message: "Records with the same fee type exist. "}
var E206923 = Global_error{id: "206923", eType: EXPECTED_ERROR, message: "The format of the segment is incorrect. "}
var E206924 = Global_error{id: "206924", eType: EXPECTED_ERROR, message: "As the price plan is in Released state, the operation cannot be performed. "}
var E206925 = Global_error{id: "206925", eType: EXPECTED_ERROR, message: "Failed to receive data load reply message. "}
var E206926 = Global_error{id: "206926", eType: EXPECTED_ERROR, message: "The price plan has been deleted. "}
var E206927 = Global_error{id: "206927", eType: EXPECTED_ERROR, message: "The isDupSubscriber property cannot coexist with the non-virtual service. "}
var E206928 = Global_error{id: "206928", eType: EXPECTED_ERROR, message: "The operation failed. The policy you want to delete has been deleted. "}
var E206929 = Global_error{id: "206929", eType: EXPECTED_ERROR, message: "Conflict with the existent ID. Use the other ID. "}
var E206930 = Global_error{id: "206930", eType: EXPECTED_ERROR, message: "The non-main product can contain a maximum of one service with the FeatureId. "}
var E206931 = Global_error{id: "206931", eType: EXPECTED_ERROR, message: "Failed to back up the package. "}
var E206932 = Global_error{id: "206932", eType: EXPECTED_ERROR, message: "Failed to release the product. "}
var E206933 = Global_error{id: "206933", eType: EXPECTED_ERROR, message: "The product to be tested must be in defined state. "}
var E206934 = Global_error{id: "206934", eType: EXPECTED_ERROR, message: "The request is being processed. "}
var E206935 = Global_error{id: "206935", eType: EXPECTED_ERROR, message: "Failed to execute the task of writing the CDR file. "}
var E206936 = Global_error{id: "206936", eType: EXPECTED_ERROR, message: "The operation failed. The policy you want to modify has been deleted. "}
var E206937 = Global_error{id: "206937", eType: EXPECTED_ERROR, message: "The subscriber does not order the product or orders the product more than once. "}
var E206938 = Global_error{id: "206938", eType: EXPECTED_ERROR, message: "The corresponding record is not found. "}
var E206939 = Global_error{id: "206939", eType: EXPECTED_ERROR, message: "Only one dependent relationship can be set up. "}
var E206940 = Global_error{id: "206940", eType: EXPECTED_ERROR, message: "The resource operation type of the imported file is incorrect. "}
var E206941 = Global_error{id: "206941", eType: EXPECTED_ERROR, message: "The imported parameter is invalid. "}
var E206942 = Global_error{id: "206942", eType: EXPECTED_ERROR, message: "The data to be operated does not exist or part of the data does not exist. "}
var E206943 = Global_error{id: "206943", eType: EXPECTED_ERROR, message: "The product with the hour package cannot contain services with the FeatureId. "}
var E206944 = Global_error{id: "206944", eType: EXPECTED_ERROR, message: "Import .xls or .zip files. "}
var E206945 = Global_error{id: "206945", eType: EXPECTED_ERROR, message: "As the price plan is in Released state, the condition group cannot be modified. "}
var E206946 = Global_error{id: "206946", eType: EXPECTED_ERROR, message: "The CBPAgent parses Data failed. "}
var E206947 = Global_error{id: "206947", eType: EXPECTED_ERROR, message: "The product's name cannot be the same as that of existing product's. "}
var E206948 = Global_error{id: "206948", eType: EXPECTED_ERROR, message: "The product to which other products append cannot append to other products. "}
var E206949 = Global_error{id: "206949", eType: EXPECTED_ERROR, message: "At least one price plan does not have any tariffs. "}
var E206950 = Global_error{id: "206950", eType: EXPECTED_ERROR, message: "The count of numbers to be imported must not exceed 100,000. "}
var E206951 = Global_error{id: "206951", eType: EXPECTED_ERROR, message: "The product to be copied does not exist. The product is deleted by other users because of concurrent operations. "}
var E206952 = Global_error{id: "206952", eType: EXPECTED_ERROR, message: "Failed to send files using FTP or SFTP. "}
var E206953 = Global_error{id: "206953", eType: EXPECTED_ERROR, message: "I/O exception. Failed to write the CDR file. "}
var E206954 = Global_error{id: "206954", eType: EXPECTED_ERROR, message: "The input ID of the product corresponding to the price plan is blank. "}
var E206955 = Global_error{id: "206955", eType: EXPECTED_ERROR, message: "The relations of default dependant products cannot be mutually exclusive. "}
var E206956 = Global_error{id: "206956", eType: EXPECTED_ERROR, message: "The record to be deleted does not exist. "}
var E206957 = Global_error{id: "206957", eType: EXPECTED_ERROR, message: "Failed to write the CDR file. "}
var E206958 = Global_error{id: "206958", eType: EXPECTED_ERROR, message: "The compress file of synchronization package does not exist. "}
var E206959 = Global_error{id: "206959", eType: EXPECTED_ERROR, message: "The replacement relationship can be set up only between the products that are appendant to the same main product. "}
var E206960 = Global_error{id: "206960", eType: EXPECTED_ERROR, message: "As the price plan contains the periodic presentation policy, the price plan cannot be used or copied by the global product. "}
var E206961 = Global_error{id: "206961", eType: EXPECTED_ERROR, message: "The product ID is null. "}
var E206962 = Global_error{id: "206962", eType: EXPECTED_ERROR, message: "The main product cannot contain the services with the FeatureId. "}
var E206963 = Global_error{id: "206963", eType: EXPECTED_ERROR, message: "The value of the condition express of the special charging matrix is null. "}
var E206964 = Global_error{id: "206964", eType: EXPECTED_ERROR, message: "The XML data is incorrect. "}
var E206965 = Global_error{id: "206965", eType: EXPECTED_ERROR, message: "Failed to execute the database operation. "}
var E206966 = Global_error{id: "206966", eType: EXPECTED_ERROR, message: "The replacement relationship cannot be set up between two non-main products before they are appendant to a main product. "}
var E206967 = Global_error{id: "206967", eType: EXPECTED_ERROR, message: "As the price plan contains the allowance policy, the price plan cannot be used or copied by the individual main product. "}
var E206968 = Global_error{id: "206968", eType: EXPECTED_ERROR, message: "An unknown error occurs. "}
var E206969 = Global_error{id: "206969", eType: EXPECTED_ERROR, message: "Failed to query the list of options for configuring the template attributes. "}
var E206970 = Global_error{id: "206970", eType: EXPECTED_ERROR, message: "An exception occurred when the data is synchronized to the SCP. "}
var E206971 = Global_error{id: "206971", eType: EXPECTED_ERROR, message: "License File expired. "}
var E206972 = Global_error{id: "206972", eType: EXPECTED_ERROR, message: "The Code field cannot be left blank. "}
var E206973 = Global_error{id: "206973", eType: EXPECTED_ERROR, message: "Parameter error. The template code is unavailable for the tariff. "}
var E206974 = Global_error{id: "206974", eType: EXPECTED_ERROR, message: "The phone number is invalid. "}
var E206975 = Global_error{id: "206975", eType: EXPECTED_ERROR, message: "The record in the secondary tables is incorrect. "}
var E206976 = Global_error{id: "206976", eType: EXPECTED_ERROR, message: "Failed to upload the file. "}
var E206977 = Global_error{id: "206977", eType: EXPECTED_ERROR, message: "The format of the file is incorrect. "}
var E206978 = Global_error{id: "206978", eType: EXPECTED_ERROR, message: "The restriction to the BalPromptGate property value is incorrect. "}
var E206979 = Global_error{id: "206979", eType: EXPECTED_ERROR, message: "As the price plan contains the periodic tariff policy (except the periodic allowance policy), the price plan cannot be used or copied by the global product. "}
var E206980 = Global_error{id: "206980", eType: EXPECTED_ERROR, message: "As the pricing package of the product is in Defined state, the priorities of the price plans cannot be adjusted. "}
var E206981 = Global_error{id: "206981", eType: EXPECTED_ERROR, message: "The released product cannot be modified. "}
var E206982 = Global_error{id: "206982", eType: EXPECTED_ERROR, message: "Failed to create the sql file of the synchronization package. "}
var E206983 = Global_error{id: "206983", eType: EXPECTED_ERROR, message: "The pricing package is used by the external product. "}
var E206984 = Global_error{id: "206984", eType: EXPECTED_ERROR, message: "The number already exists. "}
var E206985 = Global_error{id: "206985", eType: EXPECTED_ERROR, message: "Parameter error. The tariff must be the tariff presented according to the period by amount or ratio. "}
var E206986 = Global_error{id: "206986", eType: EXPECTED_ERROR, message: "Failed to compress the synchronization package. "}
var E206987 = Global_error{id: "206987", eType: EXPECTED_ERROR, message: "The exclusive relation exists between mandatory services or between the mandatory service and optional service. "}
var E206988 = Global_error{id: "206988", eType: EXPECTED_ERROR, message: "Failed to write synchronization package sql file. "}
var E206989 = Global_error{id: "206989", eType: EXPECTED_ERROR, message: "The product in released state cannot be deleted. "}
var E206990 = Global_error{id: "206990", eType: EXPECTED_ERROR, message: "The value of the price plan type is null. "}
var E206991 = Global_error{id: "206991", eType: EXPECTED_ERROR, message: "Failed to query the universal charging matrix. "}
var E206992 = Global_error{id: "206992", eType: EXPECTED_ERROR, message: "The template type is incorrect. "}
var E206993 = Global_error{id: "206993", eType: EXPECTED_ERROR, message: "In a number segment, the lengths of the numbers are invalid. "}
var E206994 = Global_error{id: "206994", eType: EXPECTED_ERROR, message: "The service feature ID of the products that are appendant to the same main product must be unique. "}
var E206995 = Global_error{id: "206995", eType: EXPECTED_ERROR, message: "The version field does not exist in the universal charging matrix. "}
var E206996 = Global_error{id: "206996", eType: EXPECTED_ERROR, message: "The number of records is incorrect. "}
var E206997 = Global_error{id: "206997", eType: EXPECTED_ERROR, message: "Associated product template does not exist. "}
var E206998 = Global_error{id: "206998", eType: EXPECTED_ERROR, message: "The product to be released does not have a price plan. "}
var E206999 = Global_error{id: "206999", eType: EXPECTED_ERROR, message: "The value of fee item of the special charging matrix is null. "}
var E207000 = Global_error{id: "207000", eType: EXPECTED_ERROR, message: "The number of products exceeds the threshold. No products can be added. "}
var E207001 = Global_error{id: "207001", eType: EXPECTED_ERROR, message: "The segment range is duplicated. "}
var E207002 = Global_error{id: "207002", eType: EXPECTED_ERROR, message: "Activate BUS failed. "}
var E207003 = Global_error{id: "207003", eType: EXPECTED_ERROR, message: "The codeField or codeValue field in the resource file is left blank. "}
var E207004 = Global_error{id: "207004", eType: EXPECTED_ERROR, message: "Failed to delete the existing records. "}
var E207005 = Global_error{id: "207005", eType: EXPECTED_ERROR, message: "Parameter error. The allowance mode is null or incorrect. "}
var E207006 = Global_error{id: "207006", eType: EXPECTED_ERROR, message: "Failed to edit the product in released state. "}
var E207007 = Global_error{id: "207007", eType: EXPECTED_ERROR, message: "Parameter error. The reference type is null or incorrect. "}
var E207008 = Global_error{id: "207008", eType: EXPECTED_ERROR, message: "The type of the price plan does not exist. "}
var E207009 = Global_error{id: "207009", eType: EXPECTED_ERROR, message: "In a main product, there is only one default mainPackage dependant product. "}
var E207010 = Global_error{id: "207010", eType: EXPECTED_ERROR, message: "The product contains the service that complies with the following condition: The services that this service depends on or excludes from must belong to a released product. "}
var E207011 = Global_error{id: "207011", eType: EXPECTED_ERROR, message: "Failed to operate the DAS. "}
var E207012 = Global_error{id: "207012", eType: EXPECTED_ERROR, message: "Failed to query the rent attributes at the system level. "}
var E207013 = Global_error{id: "207013", eType: EXPECTED_ERROR, message: "Failed to obtain the priority of the main product. "}
var E207014 = Global_error{id: "207014", eType: EXPECTED_ERROR, message: "Failed to obtain the priority data. "}
var E207015 = Global_error{id: "207015", eType: EXPECTED_ERROR, message: "An exception occurs in the key value of the product group. "}
var E207016 = Global_error{id: "207016", eType: EXPECTED_ERROR, message: "An exception occurs in the transaction data of the product group. "}
var E207017 = Global_error{id: "207017", eType: EXPECTED_ERROR, message: "The SyncDataAgent service fails in obtaining the parameter list of response messages. "}
var E207018 = Global_error{id: "207018", eType: EXPECTED_ERROR, message: "The MSISDN rule cannot be deleted because the MSISDN rule has been referenced by a MSISDN grade. "}
var E207019 = Global_error{id: "207019", eType: EXPECTED_ERROR, message: "The number of time schemes exceeds the threshold. "}
var E207020 = Global_error{id: "207020", eType: EXPECTED_ERROR, message: "The attribute does not exist. "}
var E207021 = Global_error{id: "207021", eType: EXPECTED_ERROR, message: "The SyncDataAgent service fails in creating a response message. "}
var E207022 = Global_error{id: "207022", eType: EXPECTED_ERROR, message: "ZIP file is empty or does not contain valid files. "}
var E207023 = Global_error{id: "207023", eType: EXPECTED_ERROR, message: "The product and its default appdent relation product cannot have the same service. "}
var E207024 = Global_error{id: "207024", eType: EXPECTED_ERROR, message: "The route information of the GroupNo does not exist. "}
var E207025 = Global_error{id: "207025", eType: EXPECTED_ERROR, message: "An error occurred in the JSON data engine. "}
var E207026 = Global_error{id: "207026", eType: EXPECTED_ERROR, message: "Failed to create synchronization package directory. "}
var E207027 = Global_error{id: "207027", eType: EXPECTED_ERROR, message: "The relation cannot be defined repeatedly. "}
var E207028 = Global_error{id: "207028", eType: EXPECTED_ERROR, message: "The type of queryMeasureUnits is wrong, type must be 1 or 2. "}
var E207029 = Global_error{id: "207029", eType: EXPECTED_ERROR, message: "The brand cannot be deleted because the brand has products. "}
var E207030 = Global_error{id: "207030", eType: EXPECTED_ERROR, message: "The personal main product or appendant service product must contain at least one mandatory service. "}
var E207031 = Global_error{id: "207031", eType: EXPECTED_ERROR, message: "All the dispersed numbers must be numerals. "}
var E207032 = Global_error{id: "207032", eType: EXPECTED_ERROR, message: "Reference billingCycleType data is not exist. "}
var E207033 = Global_error{id: "207033", eType: EXPECTED_ERROR, message: "All the phone numbers in a segment must be numerals. "}
var E207034 = Global_error{id: "207034", eType: EXPECTED_ERROR, message: "The service does not belong to any released product. This service is depended on the service of the product to be released. "}
var E207035 = Global_error{id: "207035", eType: EXPECTED_ERROR, message: "The start number is less than the end number. "}
var E207036 = Global_error{id: "207036", eType: EXPECTED_ERROR, message: "The discrete number is duplicated. "}
var E207037 = Global_error{id: "207037", eType: EXPECTED_ERROR, message: "The template code of the simple allowance tariff is not supported. "}
var E207038 = Global_error{id: "207038", eType: EXPECTED_ERROR, message: "The lengths of the dispersed numbers are invalid. "}
var E207039 = Global_error{id: "207039", eType: EXPECTED_ERROR, message: "Saving the price plan succeeded. The priorities of tariffs conflict but are adjusted automatically. "}
var E207040 = Global_error{id: "207040", eType: EXPECTED_ERROR, message: "A tariff cannot be added to or deleted from the product in Test state. "}
var E207041 = Global_error{id: "207041", eType: EXPECTED_ERROR, message: "The template does not exist. The operation cannot go on. "}
var E207042 = Global_error{id: "207042", eType: EXPECTED_ERROR, message: "Failed to obtain the CBP status. "}
var E207043 = Global_error{id: "207043", eType: EXPECTED_ERROR, message: "The product to be released must be in Test state. "}
var E207044 = Global_error{id: "207044", eType: EXPECTED_ERROR, message: "Failed to query the system rent attribute. "}
var E207045 = Global_error{id: "207045", eType: EXPECTED_ERROR, message: "As the price plan contains the divided periodic presentation policy, the price plan cannot be used or copied by the global product. "}
var E207046 = Global_error{id: "207046", eType: EXPECTED_ERROR, message: "Synchronizing data times out. "}
var E207047 = Global_error{id: "207047", eType: EXPECTED_ERROR, message: "The task of writing the CDR file cannot be deleted. "}
var E207048 = Global_error{id: "207048", eType: EXPECTED_ERROR, message: "Failed to synchronize data to the SMDB. "}
var E207049 = Global_error{id: "207049", eType: EXPECTED_ERROR, message: "The main product must have the rent attribute. "}
var E207050 = Global_error{id: "207050", eType: EXPECTED_ERROR, message: "The catalog name already exists. The catalog with the same name cannot be updated. "}
var E207051 = Global_error{id: "207051", eType: EXPECTED_ERROR, message: "No valid pricing packages are obtained according to the price plan. "}
var E207052 = Global_error{id: "207052", eType: EXPECTED_ERROR, message: "In the imported Excel file, the format of the number resource cell is not the text format. "}
var E207053 = Global_error{id: "207053", eType: EXPECTED_ERROR, message: "A main product cannot have two or more same appendant products. "}
var E207054 = Global_error{id: "207054", eType: EXPECTED_ERROR, message: "A main product cannot have two or more duplicated services. "}
var E207055 = Global_error{id: "207055", eType: EXPECTED_ERROR, message: "This accumulated item is referenced by a policy. "}
var E207056 = Global_error{id: "207056", eType: EXPECTED_ERROR, message: "The CBP overloads. "}
var E207057 = Global_error{id: "207057", eType: EXPECTED_ERROR, message: "When you query the next monthly settlement day of a product or product offer, the corresponding customer does not exist. "}
var E207058 = Global_error{id: "207058", eType: EXPECTED_ERROR, message: "When you query the next monthly settlement day of a product or product offer, the corresponding account does not exist. "}
var E207059 = Global_error{id: "207059", eType: EXPECTED_ERROR, message: "The product offer with the same name already exists. "}
var E207060 = Global_error{id: "207060", eType: EXPECTED_ERROR, message: "The dynamic attribute of the customer does not exist. "}
var E207061 = Global_error{id: "207061", eType: EXPECTED_ERROR, message: "The relationship between the subscriber and customer does not exist. "}
var E207062 = Global_error{id: "207062", eType: EXPECTED_ERROR, message: "Failed to create a connection. "}
var E207063 = Global_error{id: "207063", eType: EXPECTED_ERROR, message: "Unmatched user names and passwords of file transfer and the SMS are typed, causing that files succeed to be updated and connections fail to be refreshed. "}
var E207064 = Global_error{id: "207064", eType: EXPECTED_ERROR, message: "The node number already exists. "}
var E207065 = Global_error{id: "207065", eType: EXPECTED_ERROR, message: "The node number does not exist. "}
var E207066 = Global_error{id: "207066", eType: EXPECTED_ERROR, message: "Failed to register on the node. "}
var E207067 = Global_error{id: "207067", eType: EXPECTED_ERROR, message: "Failed to delete the node registering information. "}
var E207068 = Global_error{id: "207068", eType: EXPECTED_ERROR, message: "The product offer directory name already exists. "}
var E207069 = Global_error{id: "207069", eType: EXPECTED_ERROR, message: "The count of the fields is incorrect. "}
var E207070 = Global_error{id: "207070", eType: EXPECTED_ERROR, message: "The same SIM card record already  exists. "}
var E207071 = Global_error{id: "207071", eType: EXPECTED_ERROR, message: "The value of ICCID is duplicated. "}
var E207072 = Global_error{id: "207072", eType: EXPECTED_ERROR, message: "The MSISDN of this grade does not match the corresponding MSISDN rule; or the MSISDN matches the rule with the grade of higher priority. "}
var E207073 = Global_error{id: "207073", eType: EXPECTED_ERROR, message: "All the ICCID, IMSI, PIN1, and PUK1 fields are mandatory. "}
var E207074 = Global_error{id: "207074", eType: EXPECTED_ERROR, message: "All the values of the ICCID, ModelID, and NetworkType fields must be numbers. "}
var E207075 = Global_error{id: "207075", eType: EXPECTED_ERROR, message: "The IMSI field value contains not all digits. "}
var E207076 = Global_error{id: "207076", eType: EXPECTED_ERROR, message: "Duplicated IMSI field value. "}
var E207077 = Global_error{id: "207077", eType: EXPECTED_ERROR, message: "The IMSI field value already exists in the database. "}
var E207078 = Global_error{id: "207078", eType: EXPECTED_ERROR, message: "The ICCID field length exceeds 20. "}
var E207079 = Global_error{id: "207079", eType: EXPECTED_ERROR, message: "The IMSI field length exceeds 15. "}
var E207080 = Global_error{id: "207080", eType: EXPECTED_ERROR, message: "The PIN1 or PIN2 field length exceeds 8. "}
var E207081 = Global_error{id: "207081", eType: EXPECTED_ERROR, message: "The PUK1 or PUK2  field length exceeds 8. "}
var E207082 = Global_error{id: "207082", eType: EXPECTED_ERROR, message: "The LocalLan field length exceeds 6. "}
var E207083 = Global_error{id: "207083", eType: EXPECTED_ERROR, message: "The ActualHLR field length exceeds 6. "}
var E207084 = Global_error{id: "207084", eType: EXPECTED_ERROR, message: "The ModelID field value does not meet the requirements. "}
var E207085 = Global_error{id: "207085", eType: EXPECTED_ERROR, message: "The NetworkType field value does not meet the requirements. "}
var E207086 = Global_error{id: "207086", eType: EXPECTED_ERROR, message: "The number of idle MSISDNs or SIM cards is smaller than the minimum number for batch packaging. "}
var E207087 = Global_error{id: "207087", eType: EXPECTED_ERROR, message: "The number of idle MSISDNs or SIM cards that have the same home area and HLR number is smaller than the minimum number for batch packaging. "}
var E207088 = Global_error{id: "207088", eType: EXPECTED_ERROR, message: "Failed to read the commandType attribute. "}
var E207089 = Global_error{id: "207089", eType: EXPECTED_ERROR, message: "Failed to read the commandkey attribute. "}
var E207090 = Global_error{id: "207090", eType: EXPECTED_ERROR, message: "Failed to create locks concurrently. "}
var E207091 = Global_error{id: "207091", eType: EXPECTED_ERROR, message: "The CPU usage exceeds the threshold. "}
var E207092 = Global_error{id: "207092", eType: EXPECTED_ERROR, message: "Failed to replace the uninstallation package. "}
var E207093 = Global_error{id: "207093", eType: EXPECTED_ERROR, message: "The SyncDataAgent service loads data in batch, during which loading a product fails. "}
var E207094 = Global_error{id: "207094", eType: EXPECTED_ERROR, message: "One CBP correspond to multiple DB nodes. "}
var E207095 = Global_error{id: "207095", eType: EXPECTED_ERROR, message: "The national area code specified by the LocalLan field does not match the code defined in the TB_AreaDef table. "}
var E207096 = Global_error{id: "207096", eType: EXPECTED_ERROR, message: "The HLR number specified by the ActualHLR field does not match the number defined in the TB_HLRNumberDef. "}
var E207097 = Global_error{id: "207097", eType: EXPECTED_ERROR, message: "The value of the NetworkType field cannot be  mandatory. "}
var E207098 = Global_error{id: "207098", eType: EXPECTED_ERROR, message: "Invalid parameter verification. "}
var E207099 = Global_error{id: "207099", eType: EXPECTED_ERROR, message: "The values of ProductRentPrior mandatory for this product are different. "}
var E207100 = Global_error{id: "207100", eType: EXPECTED_ERROR, message: "The file cannot be downloaded. Please check the configuration file for the download catalogs. "}
var E207101 = Global_error{id: "207101", eType: EXPECTED_ERROR, message: "Nepal calendar information cannot be found according to the current time. "}
var E207102 = Global_error{id: "207102", eType: EXPECTED_ERROR, message: "The product that is being synchronized cannot be uninstalled. "}
var E207103 = Global_error{id: "207103", eType: EXPECTED_ERROR, message: "The product referenced by the offer to be synchronized does not exist on the CBP node. "}
var E207104 = Global_error{id: "207104", eType: EXPECTED_ERROR, message: "The offer referenced by the offer to be synchronized does not exist on the CBP node. "}
var E207105 = Global_error{id: "207105", eType: EXPECTED_ERROR, message: "More than 1048576 records are to be exported from the excel file. "}
var E207106 = Global_error{id: "207106", eType: EXPECTED_ERROR, message: "The customer information does not exist and cannot be updated. "}
var E207107 = Global_error{id: "207107", eType: EXPECTED_ERROR, message: "Failed to monitor the task progress. "}
var E207108 = Global_error{id: "207108", eType: EXPECTED_ERROR, message: "The last synchronization has not taken effect. You cannot perform the synchronization operation. "}
var E207109 = Global_error{id: "207109", eType: EXPECTED_ERROR, message: "The value of ICCID or IMSI already exists in the database. "}
var E207110 = Global_error{id: "207110", eType: EXPECTED_ERROR, message: "The updated license file must be newer than the one which is used currently. "}
var E207111 = Global_error{id: "207111", eType: EXPECTED_ERROR, message: "The status of the license server is abnormal. "}
var E207112 = Global_error{id: "207112", eType: EXPECTED_ERROR, message: "The old license file doesn't exist. "}
var E207113 = Global_error{id: "207113", eType: EXPECTED_ERROR, message: "Failed to authenticate the license file. "}
var E207114 = Global_error{id: "207114", eType: EXPECTED_ERROR, message: "No privilege to access. "}
var E207115 = Global_error{id: "207115", eType: EXPECTED_ERROR, message: "Querying the role corresponding to a role group failed. "}
var E207116 = Global_error{id: "207116", eType: EXPECTED_ERROR, message: "The condition-based single table synchronization file that the CBP queries is invalid. "}
var E207117 = Global_error{id: "207117", eType: EXPECTED_ERROR, message: "Failed to connect to the SMDB. "}
var E207118 = Global_error{id: "207118", eType: EXPECTED_ERROR, message: "Failed to enable the SMDB cursor "}
var E207119 = Global_error{id: "207119", eType: EXPECTED_ERROR, message: "Failed to obtain the SMDB slider. "}
var E207120 = Global_error{id: "207120", eType: EXPECTED_ERROR, message: "Failed to disable the SMDB slider. "}
var E207121 = Global_error{id: "207121", eType: EXPECTED_ERROR, message: "The MEMDB table cannot be found. "}
var E207122 = Global_error{id: "207122", eType: EXPECTED_ERROR, message: "The MEMDB index cannot be found. "}
var E207123 = Global_error{id: "207123", eType: EXPECTED_ERROR, message: "Failed to insert records. "}
var E207124 = Global_error{id: "207124", eType: EXPECTED_ERROR, message: "Failed to update records. "}
var E207125 = Global_error{id: "207125", eType: EXPECTED_ERROR, message: "Failed to delete records. "}
var E207126 = Global_error{id: "207126", eType: EXPECTED_ERROR, message: "Failed to connect to the physical database. "}
var E207127 = Global_error{id: "207127", eType: EXPECTED_ERROR, message: "Environment variables are not set. "}
var E207128 = Global_error{id: "207128", eType: EXPECTED_ERROR, message: "The decryption fails. "}
var E207129 = Global_error{id: "207129", eType: EXPECTED_ERROR, message: "Account division fails. "}
var E207130 = Global_error{id: "207130", eType: EXPECTED_ERROR, message: "The sum of balances of the account book type exceeds the upper limit. "}
var E207131 = Global_error{id: "207131", eType: EXPECTED_ERROR, message: "Failed to receive the Diameter message. "}
var E207132 = Global_error{id: "207132", eType: EXPECTED_ERROR, message: "The mandatory field, such as orgSessionID, is not contained in the message. "}
var E207133 = Global_error{id: "207133", eType: EXPECTED_ERROR, message: "Failed to bind the session control service. "}
var E207134 = Global_error{id: "207134", eType: EXPECTED_ERROR, message: "The data obtained from the I2000 is invalid. "}
var E207135 = Global_error{id: "207135", eType: EXPECTED_ERROR, message: "Decryption fails. "}
var E207136 = Global_error{id: "207136", eType: EXPECTED_ERROR, message: "Blank XML file handler. "}
var E207137 = Global_error{id: "207137", eType: EXPECTED_ERROR, message: "Failed to obtain the values of the environment variables CBP_HOME, CBP_NODEID, and ENIP_HOME. "}
var E207138 = Global_error{id: "207138", eType: EXPECTED_ERROR, message: "The element resolution fails. "}
var E207139 = Global_error{id: "207139", eType: EXPECTED_ERROR, message: "The first and last records of the CDR file are incorrect. "}
var E207140 = Global_error{id: "207140", eType: EXPECTED_ERROR, message: "Failed to obtain the service number type (service number and URL) of the charged party. "}
var E207141 = Global_error{id: "207141", eType: EXPECTED_ERROR, message: "Failed to obtain the service number. "}
var E207142 = Global_error{id: "207142", eType: EXPECTED_ERROR, message: "Invalid flow distribution service name. "}
var E207143 = Global_error{id: "207143", eType: EXPECTED_ERROR, message: "The TLV node does not exist. "}
var E207144 = Global_error{id: "207144", eType: EXPECTED_ERROR, message: "A node in the XML file does not exist. "}
var E207145 = Global_error{id: "207145", eType: EXPECTED_ERROR, message: "No contents are found in tables. "}
var E207146 = Global_error{id: "207146", eType: EXPECTED_ERROR, message: "Querying the SMDB fails. "}
var E207147 = Global_error{id: "207147", eType: EXPECTED_ERROR, message: "Locating the SMDB fails. "}
var E207148 = Global_error{id: "207148", eType: EXPECTED_ERROR, message: "The data record fails to pass the authentication, because the record contains the fields with illegal values. "}
var E207149 = Global_error{id: "207149", eType: EXPECTED_ERROR, message: "Keys are duplicated. "}
var E207150 = Global_error{id: "207150", eType: EXPECTED_ERROR, message: "No idle slots can be assigned. "}
var E207151 = Global_error{id: "207151", eType: EXPECTED_ERROR, message: "The transaction does not exist. "}
var E207152 = Global_error{id: "207152", eType: EXPECTED_ERROR, message: "Incorrect object type.The object type can be only int4 and int8. If the object type is int4, its value must be from -2147483648 to 2147483647. "}
var E207153 = Global_error{id: "207153", eType: EXPECTED_ERROR, message: "Unsupported field types of the table. "}
var E207154 = Global_error{id: "207154", eType: EXPECTED_ERROR, message: "Failed to set the fields in the latitudinal table. "}
var E207155 = Global_error{id: "207155", eType: EXPECTED_ERROR, message: "The field type is illegal. "}
var E207156 = Global_error{id: "207156", eType: EXPECTED_ERROR, message: "The length of a field of the string type in the SMDB is incorrect. "}
var E207157 = Global_error{id: "207157", eType: EXPECTED_ERROR, message: "The value of a field of the string type in the SMDB is incorrect. "}
var E207158 = Global_error{id: "207158", eType: EXPECTED_ERROR, message: "No unit is found to match with the long latitudinal table during the query. "}
var E207159 = Global_error{id: "207159", eType: EXPECTED_ERROR, message: "The matching record is found but the record does not contain any contents. "}
var E207160 = Global_error{id: "207160", eType: EXPECTED_ERROR, message: "Failed to start the session in the MEMDB. "}
var E207161 = Global_error{id: "207161", eType: EXPECTED_ERROR, message: "Failed to stop the transaction. "}
var E207162 = Global_error{id: "207162", eType: EXPECTED_ERROR, message: "Failed to invoke the xmGetSerial interface. "}
var E207163 = Global_error{id: "207163", eType: EXPECTED_ERROR, message: "Failed to obtain the number of records. "}
var E207164 = Global_error{id: "207164", eType: EXPECTED_ERROR, message: "Failed to create a table. "}
var E207165 = Global_error{id: "207165", eType: EXPECTED_ERROR, message: "Failed to create a table. The reason is that the table with the same name exists. "}
var E207166 = Global_error{id: "207166", eType: EXPECTED_ERROR, message: "Failed to load a table. "}
var E207167 = Global_error{id: "207167", eType: EXPECTED_ERROR, message: "Failed to save the table. "}
var E207168 = Global_error{id: "207168", eType: EXPECTED_ERROR, message: "The transaction number is invalid. "}
var E207169 = Global_error{id: "207169", eType: EXPECTED_ERROR, message: "The number of records in the buffer table has reached the maximum number specified in the PHYDBCTRLTBL table. "}
var E207170 = Global_error{id: "207170", eType: EXPECTED_ERROR, message: "No record is updated or deleted. "}
var E207171 = Global_error{id: "207171", eType: EXPECTED_ERROR, message: "A null pointer is returned when the service is bound. "}
var E207172 = Global_error{id: "207172", eType: EXPECTED_ERROR, message: "An exception occurs in binding the services. "}
var E207173 = Global_error{id: "207173", eType: EXPECTED_ERROR, message: "Obtaining a remote object fails. "}
var E207174 = Global_error{id: "207174", eType: EXPECTED_ERROR, message: "An exception occurred when the IDL interface is invoked. "}
var E207175 = Global_error{id: "207175", eType: EXPECTED_ERROR, message: "The invocation of the IDL interface timed out. "}
var E207176 = Global_error{id: "207176", eType: EXPECTED_ERROR, message: "A failure error code (non-zero error code) is returned for the IDL invoking. "}
var E207177 = Global_error{id: "207177", eType: EXPECTED_ERROR, message: "The server receives interfaces that are not implemented. "}
var E207178 = Global_error{id: "207178", eType: EXPECTED_ERROR, message: "Release the session. "}
var E207179 = Global_error{id: "207179", eType: EXPECTED_ERROR, message: "Waiting for the IDL message timed out. "}
var E207180 = Global_error{id: "207180", eType: EXPECTED_ERROR, message: "The status of the session is incorrect. "}
var E207181 = Global_error{id: "207181", eType: EXPECTED_ERROR, message: "There is no remote transaction. "}
var E207182 = Global_error{id: "207182", eType: EXPECTED_ERROR, message: "Failed to set the timer. "}
var E207183 = Global_error{id: "207183", eType: EXPECTED_ERROR, message: "The timeout data is deleted in file preprocessing. "}
var E207184 = Global_error{id: "207184", eType: EXPECTED_ERROR, message: "The incorrect CDRs are deleted in file preprocessing. "}
var E207185 = Global_error{id: "207185", eType: EXPECTED_ERROR, message: "Failed to obtain the events of the next cycle. "}
var E207186 = Global_error{id: "207186", eType: EXPECTED_ERROR, message: "The mapping between the connection object and command object is not set up. "}
var E207187 = Global_error{id: "207187", eType: EXPECTED_ERROR, message: "Invalid physical transaction number. "}
var E207188 = Global_error{id: "207188", eType: EXPECTED_ERROR, message: "Failed to create the connection pool. "}
var E207189 = Global_error{id: "207189", eType: EXPECTED_ERROR, message: "Failed to obtain the record. "}
var E207190 = Global_error{id: "207190", eType: EXPECTED_ERROR, message: "The link is in use. "}
var E207191 = Global_error{id: "207191", eType: EXPECTED_ERROR, message: "An error occurred in the SQLAPI. "}
var E207192 = Global_error{id: "207192", eType: EXPECTED_ERROR, message: "The table does not exist in the dictionary table. "}
var E207193 = Global_error{id: "207193", eType: EXPECTED_ERROR, message: "The pointer is null. "}
var E207194 = Global_error{id: "207194", eType: EXPECTED_ERROR, message: "Invalid number of parameters. "}
var E207195 = Global_error{id: "207195", eType: EXPECTED_ERROR, message: "Invalid parameter length. "}
var E207196 = Global_error{id: "207196", eType: EXPECTED_ERROR, message: "The array subscript outranges. "}
var E207197 = Global_error{id: "207197", eType: EXPECTED_ERROR, message: "Failed to assign the memory. "}
var E207198 = Global_error{id: "207198", eType: EXPECTED_ERROR, message: "The corresponding data is not found. "}
var E207199 = Global_error{id: "207199", eType: EXPECTED_ERROR, message: "Failed to open a file. "}
var E207200 = Global_error{id: "207200", eType: EXPECTED_ERROR, message: "Failed to write a file. "}
var E207201 = Global_error{id: "207201", eType: EXPECTED_ERROR, message: "Reading the stream failed. "}
var E207202 = Global_error{id: "207202", eType: EXPECTED_ERROR, message: "Writing the stream failed. "}
var E207203 = Global_error{id: "207203", eType: EXPECTED_ERROR, message: "Failed to create an accumulative item. "}
var E207204 = Global_error{id: "207204", eType: EXPECTED_ERROR, message: "Failed to obtain the object. "}
var E207205 = Global_error{id: "207205", eType: EXPECTED_ERROR, message: "Failed to convert the measurement. "}
var E207206 = Global_error{id: "207206", eType: EXPECTED_ERROR, message: "An error occurred when running the system script. "}
var E207207 = Global_error{id: "207207", eType: EXPECTED_ERROR, message: "Failed to apply for the idle index. "}
var E207208 = Global_error{id: "207208", eType: EXPECTED_ERROR, message: "The STL container is faulty. "}
var E207209 = Global_error{id: "207209", eType: EXPECTED_ERROR, message: "Incorrect length. "}
var E207210 = Global_error{id: "207210", eType: EXPECTED_ERROR, message: "The TLV link table contains the nodes that need not be queried. "}
var E207211 = Global_error{id: "207211", eType: EXPECTED_ERROR, message: "The longitudinal link table of a message does not contain the TLV node. "}
var E207212 = Global_error{id: "207212", eType: EXPECTED_ERROR, message: "Obtaining the next charging event fails. "}
var E207213 = Global_error{id: "207213", eType: EXPECTED_ERROR, message: "The TLV value does not exist. The value can be null. "}
var E207214 = Global_error{id: "207214", eType: EXPECTED_ERROR, message: "Incorrect tag type. "}
var E207215 = Global_error{id: "207215", eType: EXPECTED_ERROR, message: "Obtaining the TLV fails. "}
var E207216 = Global_error{id: "207216", eType: EXPECTED_ERROR, message: "Failed to invoke the TLV in the dynamic library. "}
var E207217 = Global_error{id: "207217", eType: EXPECTED_ERROR, message: "Setting the TLV fails. "}
var E207218 = Global_error{id: "207218", eType: EXPECTED_ERROR, message: "The length of the package for TLV compression is incorrect. "}
var E207219 = Global_error{id: "207219", eType: EXPECTED_ERROR, message: "The length of the package for TLV uncompression is incorrect. "}
var E207220 = Global_error{id: "207220", eType: EXPECTED_ERROR, message: "The IsimpleRatingAction does not need to be executed. "}
var E207221 = Global_error{id: "207221", eType: EXPECTED_ERROR, message: "Failed to load subscriber data. "}
var E207222 = Global_error{id: "207222", eType: EXPECTED_ERROR, message: "The object is empty during account division. "}
var E207223 = Global_error{id: "207223", eType: EXPECTED_ERROR, message: "The bin component is incorrect. "}
var E207224 = Global_error{id: "207224", eType: EXPECTED_ERROR, message: "Failed to obtain components using the TemplateId. "}
var E207225 = Global_error{id: "207225", eType: EXPECTED_ERROR, message: "The key value outranges. "}
var E207226 = Global_error{id: "207226", eType: EXPECTED_ERROR, message: "Failed to create the shared memory. "}
var E207227 = Global_error{id: "207227", eType: EXPECTED_ERROR, message: "Failed to delete the shared memory. "}
var E207228 = Global_error{id: "207228", eType: EXPECTED_ERROR, message: "The ID of the segment in the shared memory is beyond the scope(2048). "}
var E207229 = Global_error{id: "207229", eType: EXPECTED_ERROR, message: "The input xmid is different from the xmid of the page. "}
var E207230 = Global_error{id: "207230", eType: EXPECTED_ERROR, message: "The length of a record is invald. "}
var E207231 = Global_error{id: "207231", eType: EXPECTED_ERROR, message: "The current space does not exist. "}
var E207232 = Global_error{id: "207232", eType: EXPECTED_ERROR, message: "Invalid AVP value. "}
var E207233 = Global_error{id: "207233", eType: EXPECTED_ERROR, message: "The current space already exists. "}
var E207234 = Global_error{id: "207234", eType: EXPECTED_ERROR, message: "The current space does not have idle pages. "}
var E207235 = Global_error{id: "207235", eType: EXPECTED_ERROR, message: "The space ID is invalid. "}
var E207236 = Global_error{id: "207236", eType: EXPECTED_ERROR, message: "The page ID is invalid. "}
var E207237 = Global_error{id: "207237", eType: EXPECTED_ERROR, message: "The page in the current space is released. "}
var E207238 = Global_error{id: "207238", eType: EXPECTED_ERROR, message: "The space size is invalid. "}
var E207239 = Global_error{id: "207239", eType: EXPECTED_ERROR, message: "The number of spaces exceeds the threshold. "}
var E207240 = Global_error{id: "207240", eType: EXPECTED_ERROR, message: "The space is in use. "}
var E207241 = Global_error{id: "207241", eType: EXPECTED_ERROR, message: "The storage set of the current shard memory does not exist. "}
var E207242 = Global_error{id: "207242", eType: EXPECTED_ERROR, message: "The ID of the storage set in the current shard memory is invalid. "}
var E207243 = Global_error{id: "207243", eType: EXPECTED_ERROR, message: "The storage set of the current shard memory already exists. "}
var E207244 = Global_error{id: "207244", eType: EXPECTED_ERROR, message: "The number of storage sets in the current shard memory exceeds the threshold(512). "}
var E207245 = Global_error{id: "207245", eType: EXPECTED_ERROR, message: "The shared memory segment does not match the base address. "}
var E207246 = Global_error{id: "207246", eType: EXPECTED_ERROR, message: "The AVP does not exist in the TLV. "}
var E207247 = Global_error{id: "207247", eType: EXPECTED_ERROR, message: "Failed to invoke the decoding module in the dynamic library. "}
var E207248 = Global_error{id: "207248", eType: EXPECTED_ERROR, message: "CDRs are repeated. "}
var E207249 = Global_error{id: "207249", eType: EXPECTED_ERROR, message: "No error. "}
var E207250 = Global_error{id: "207250", eType: EXPECTED_ERROR, message: "Failed to invoke the encoding module in the dynamic library. "}
var E207251 = Global_error{id: "207251", eType: EXPECTED_ERROR, message: "The value of the AVP code is greater than the upper limit or lower than the lower limit. "}
var E207252 = Global_error{id: "207252", eType: EXPECTED_ERROR, message: "No mandatory AVP is contained in the message. "}
var E207253 = Global_error{id: "207253", eType: EXPECTED_ERROR, message: "Invalid AVP length. "}
var E207254 = Global_error{id: "207254", eType: EXPECTED_ERROR, message: "The type of Event, Initial, Update, and Terminate messages is incorrect. The type is specified by AVP 416 in the code stream. "}
var E207255 = Global_error{id: "207255", eType: EXPECTED_ERROR, message: "The message contains invalid CC-Request-Number AVP. "}
var E207256 = Global_error{id: "207256", eType: EXPECTED_ERROR, message: "The error codes returned by the format conversion are illegal. "}
var E207257 = Global_error{id: "207257", eType: EXPECTED_ERROR, message: "Invalid AVP. No node in the internal link table matches the AVP. "}
var E207258 = Global_error{id: "207258", eType: EXPECTED_ERROR, message: "The length of the AVP code exceeds the maximum length that the message can assign. "}
var E207259 = Global_error{id: "207259", eType: EXPECTED_ERROR, message: "Incorrect flow distribution type. "}
var E207260 = Global_error{id: "207260", eType: EXPECTED_ERROR, message: "Unknown flow distribution type. "}
var E207261 = Global_error{id: "207261", eType: EXPECTED_ERROR, message: "Unknown service type. "}
var E207262 = Global_error{id: "207262", eType: EXPECTED_ERROR, message: "Failed to obtain the service number type. "}
var E207263 = Global_error{id: "207263", eType: EXPECTED_ERROR, message: "Slot in use "}
var E207264 = Global_error{id: "207264", eType: EXPECTED_ERROR, message: "Invalid flow distribution type. "}
var E207265 = Global_error{id: "207265", eType: EXPECTED_ERROR, message: "The information about the subscriber is not found in the service table. "}
var E207266 = Global_error{id: "207266", eType: EXPECTED_ERROR, message: "The function does not exist. "}
var E207267 = Global_error{id: "207267", eType: EXPECTED_ERROR, message: "The data in the scheduling link table on the CDR deduplication page is incorrect. "}
var E207268 = Global_error{id: "207268", eType: EXPECTED_ERROR, message: "Failed to create a file. "}
var E207269 = Global_error{id: "207269", eType: EXPECTED_ERROR, message: "Failed to delete a file. "}
var E207270 = Global_error{id: "207270", eType: EXPECTED_ERROR, message: "File names cannot be found. "}
var E207271 = Global_error{id: "207271", eType: EXPECTED_ERROR, message: "Failed to invoke the conversion function, that is, failed to convert the time from integer type to the character string type. "}
var E207272 = Global_error{id: "207272", eType: EXPECTED_ERROR, message: "Failed to read a file. "}
var E207273 = Global_error{id: "207273", eType: EXPECTED_ERROR, message: "Failed to obtain the anti-repetition table files on the disk. "}
var E207274 = Global_error{id: "207274", eType: EXPECTED_ERROR, message: "Failed to obtain the termination time tag from the 1041 CDR, that is, failed to obtain the value in the tag [EVENT_ORIGIN_END_TIME]. "}
var E207275 = Global_error{id: "207275", eType: EXPECTED_ERROR, message: "Failed to obtain the semaphores. "}
var E207276 = Global_error{id: "207276", eType: EXPECTED_ERROR, message: "The queried record does not exist. "}
var E207277 = Global_error{id: "207277", eType: EXPECTED_ERROR, message: "The rule for processing the current charging event cannot be found in the main anti-repetition table, in other words, the record cannot be found in the EVENT_UNDUP_DEF table. "}
var E207278 = Global_error{id: "207278", eType: EXPECTED_ERROR, message: "Failed to open the semaphores. "}
var E207279 = Global_error{id: "207279", eType: EXPECTED_ERROR, message: "Failed to release the semaphores. "}
var E207280 = Global_error{id: "207280", eType: EXPECTED_ERROR, message: "Failed to invoke the object function to convert a hexadecimal string to the ASCII code. "}
var E207281 = Global_error{id: "207281", eType: EXPECTED_ERROR, message: "The queried record is in the physical file, and cannot be found. "}
var E207282 = Global_error{id: "207282", eType: EXPECTED_ERROR, message: "The buffer space is insufficient. "}
var E207283 = Global_error{id: "207283", eType: EXPECTED_ERROR, message: "Failed to obtain the buffer control table of the physical table. "}
var E207284 = Global_error{id: "207284", eType: EXPECTED_ERROR, message: "Failed to delete the table. "}
var E207285 = Global_error{id: "207285", eType: EXPECTED_ERROR, message: "The number of steps in the processing plan exceeds the maximum value. "}
var E207286 = Global_error{id: "207286", eType: EXPECTED_ERROR, message: "The type returned by the dynamic function is incorrect. "}
var E207287 = Global_error{id: "207287", eType: EXPECTED_ERROR, message: "The diameter messages are duplicated or the serial number of the message is wrong. "}
var E207288 = Global_error{id: "207288", eType: EXPECTED_ERROR, message: "Invalid RequestType. "}
var E207289 = Global_error{id: "207289", eType: EXPECTED_ERROR, message: "The mode is not primary or single. "}
var E207290 = Global_error{id: "207290", eType: EXPECTED_ERROR, message: "An exception occurs during the processing of files in a directory. "}
var E207291 = Global_error{id: "207291", eType: EXPECTED_ERROR, message: "Failed to close a file. "}
var E207292 = Global_error{id: "207292", eType: EXPECTED_ERROR, message: "Failed to move a file. "}
var E207293 = Global_error{id: "207293", eType: EXPECTED_ERROR, message: "Failed to obtain the size of a file. "}
var E207294 = Global_error{id: "207294", eType: EXPECTED_ERROR, message: "Failed to convert the data type. "}
var E207295 = Global_error{id: "207295", eType: EXPECTED_ERROR, message: "The directory does not exist. "}
var E207296 = Global_error{id: "207296", eType: EXPECTED_ERROR, message: "The file is already processed. "}
var E207297 = Global_error{id: "207297", eType: EXPECTED_ERROR, message: "The file does not exist. "}
var E207298 = Global_error{id: "207298", eType: EXPECTED_ERROR, message: "The process cannot open the file to be read or written. "}
var E207299 = Global_error{id: "207299", eType: EXPECTED_ERROR, message: "The file is already opened. "}
var E207300 = Global_error{id: "207300", eType: EXPECTED_ERROR, message: "The file already exists in the target directory. "}
var E207301 = Global_error{id: "207301", eType: EXPECTED_ERROR, message: "The separator does not exist. "}
var E207302 = Global_error{id: "207302", eType: EXPECTED_ERROR, message: "An error occurred in processing the directory. The directory does not exist or the process is not authorized to access the directory. "}
var E207303 = Global_error{id: "207303", eType: EXPECTED_ERROR, message: "The flow distribution invoking type does not exist. "}
var E207304 = Global_error{id: "207304", eType: EXPECTED_ERROR, message: "The CDR buffer outranges. "}
var E207305 = Global_error{id: "207305", eType: EXPECTED_ERROR, message: "Hard encoding is not required. "}
var E207306 = Global_error{id: "207306", eType: EXPECTED_ERROR, message: "Charging flow reattempt. "}
var E207307 = Global_error{id: "207307", eType: EXPECTED_ERROR, message: "Failed to identify products subscribed by subscribers. "}
var E207308 = Global_error{id: "207308", eType: EXPECTED_ERROR, message: "Failed to identify the global products. "}
var E207309 = Global_error{id: "207309", eType: EXPECTED_ERROR, message: "Failed to identify rules. "}
var E207310 = Global_error{id: "207310", eType: EXPECTED_ERROR, message: "The rule cannot be found. "}
var E207311 = Global_error{id: "207311", eType: EXPECTED_ERROR, message: "Wrong expression is used, in other words, an error occurs when the expression is used. "}
var E207312 = Global_error{id: "207312", eType: EXPECTED_ERROR, message: "The system finds that the rules are invalid when matching the rules. "}
var E207313 = Global_error{id: "207313", eType: EXPECTED_ERROR, message: "An error occurs in performing the rule action. "}
var E207314 = Global_error{id: "207314", eType: EXPECTED_ERROR, message: "No policies are recorded. "}
var E207315 = Global_error{id: "207315", eType: EXPECTED_ERROR, message: "The recursive layers exceed the maximum layers supported by the execution engine. "}
var E207316 = Global_error{id: "207316", eType: EXPECTED_ERROR, message: "Invalid LogKey. "}
var E207317 = Global_error{id: "207317", eType: EXPECTED_ERROR, message: "Succeeded in matching the policy rule expression. Proceed with the next policy. "}
var E207318 = Global_error{id: "207318", eType: EXPECTED_ERROR, message: "The price plan of the rating and accounting product is empty. "}
var E207319 = Global_error{id: "207319", eType: EXPECTED_ERROR, message: "Reference types are not supported. "}
var E207320 = Global_error{id: "207320", eType: EXPECTED_ERROR, message: "The method of obtaining the reference value is not implemented. "}
var E207321 = Global_error{id: "207321", eType: EXPECTED_ERROR, message: "Failed to process free resources. "}
var E207322 = Global_error{id: "207322", eType: EXPECTED_ERROR, message: "Rating is incomplete. "}
var E207323 = Global_error{id: "207323", eType: EXPECTED_ERROR, message: "The time is not in busy hours or idle hours. "}
var E207324 = Global_error{id: "207324", eType: EXPECTED_ERROR, message: "No matching debit relationship or global debit relationship is found. "}
var E207325 = Global_error{id: "207325", eType: EXPECTED_ERROR, message: "No matching account is found. "}
var E207326 = Global_error{id: "207326", eType: EXPECTED_ERROR, message: "The debiting relation is wrongly configured, in other words, free resources are debited into the payment resource account. "}
var E207327 = Global_error{id: "207327", eType: EXPECTED_ERROR, message: "The configuration of debit relations is incorrect (non-free resources are debited into a free resource account). "}
var E207328 = Global_error{id: "207328", eType: EXPECTED_ERROR, message: "The account book cannot be found according to the debit relation. "}
var E207329 = Global_error{id: "207329", eType: EXPECTED_ERROR, message: "Debiting fails. "}
var E207330 = Global_error{id: "207330", eType: EXPECTED_ERROR, message: "Bill cycles of an account are incorrectly configured. In other words, no valid bill cycle can be found. "}
var E207331 = Global_error{id: "207331", eType: EXPECTED_ERROR, message: "Failed to perform the accumulation triggering operation. "}
var E207332 = Global_error{id: "207332", eType: EXPECTED_ERROR, message: "Failed to query the account trigger. "}
var E207333 = Global_error{id: "207333", eType: EXPECTED_ERROR, message: "The account trigger cannot be found. "}
var E207334 = Global_error{id: "207334", eType: EXPECTED_ERROR, message: "Failed to execute the trigger. "}
var E207335 = Global_error{id: "207335", eType: EXPECTED_ERROR, message: "Failed to divide fee types based on the ratio. "}
var E207336 = Global_error{id: "207336", eType: EXPECTED_ERROR, message: "The approach count in the account division algorithm is large. "}
var E207337 = Global_error{id: "207337", eType: EXPECTED_ERROR, message: "The key of the created subaccount is invalid. "}
var E207338 = Global_error{id: "207338", eType: EXPECTED_ERROR, message: "During the query of accumulation triggering polices, the database table is returned but the count of charging policies in the returned result is 0. "}
var E207339 = Global_error{id: "207339", eType: EXPECTED_ERROR, message: "All the services that are processed are not related to the money processing. "}
var E207340 = Global_error{id: "207340", eType: EXPECTED_ERROR, message: "No matching account can be found for debiting. "}
var E207341 = Global_error{id: "207341", eType: EXPECTED_ERROR, message: "No debiting node is processed completely. "}
var E207342 = Global_error{id: "207342", eType: EXPECTED_ERROR, message: "If the balance account book does not exist during the account adjustment, the system considers that the adjustment is processed successfully. "}
var E207343 = Global_error{id: "207343", eType: EXPECTED_ERROR, message: "If the balance account book does not exist during the account adjustment, the system considers that the adjustment is processed unsuccessfully. "}
var E207344 = Global_error{id: "207344", eType: EXPECTED_ERROR, message: "The balance for account adjustment is insufficient and the balance control mode is failure. "}
var E207345 = Global_error{id: "207345", eType: EXPECTED_ERROR, message: "The account adjustment from the account books of the same type failed. That is, the account books cannot be found. "}
var E207346 = Global_error{id: "207346", eType: EXPECTED_ERROR, message: "Failed to instantiate the subscription relation. "}
var E207347 = Global_error{id: "207347", eType: EXPECTED_ERROR, message: "An error occurred in calculating the validity time and expiry time according to the measurement of the validity period type. "}
var E207348 = Global_error{id: "207348", eType: EXPECTED_ERROR, message: "Failed to obtain the shared memory. "}
var E207349 = Global_error{id: "207349", eType: EXPECTED_ERROR, message: "An error occurs in processing the divided periodic presentation policies. "}
var E207350 = Global_error{id: "207350", eType: EXPECTED_ERROR, message: "First presentation error. "}
var E207351 = Global_error{id: "207351", eType: EXPECTED_ERROR, message: "Failed to run the rule engine. "}
var E207352 = Global_error{id: "207352", eType: EXPECTED_ERROR, message: "Failed to create the accumulative item. "}
var E207353 = Global_error{id: "207353", eType: EXPECTED_ERROR, message: "Failed to determine the end time. "}
var E207354 = Global_error{id: "207354", eType: EXPECTED_ERROR, message: "Failed to obtain the charging matrix data. "}
var E207355 = Global_error{id: "207355", eType: EXPECTED_ERROR, message: "The grade points are inconsecutive. "}
var E207356 = Global_error{id: "207356", eType: EXPECTED_ERROR, message: "The calculated time is illegal. "}
var E207357 = Global_error{id: "207357", eType: EXPECTED_ERROR, message: "Adjusting the time segments according to which fees are charged. "}
var E207358 = Global_error{id: "207358", eType: EXPECTED_ERROR, message: "Tiered calculation error. "}
var E207359 = Global_error{id: "207359", eType: EXPECTED_ERROR, message: "The accumulation has exceeded the upper threshold. "}
var E207360 = Global_error{id: "207360", eType: EXPECTED_ERROR, message: "The number of tiers has exceeded the upper threshold. "}
var E207361 = Global_error{id: "207361", eType: EXPECTED_ERROR, message: "Undefined discount mode. "}
var E207362 = Global_error{id: "207362", eType: EXPECTED_ERROR, message: "The fee type does not match the measurement type. "}
var E207363 = Global_error{id: "207363", eType: EXPECTED_ERROR, message: "An error occurs in obtaining the start time and end time of the bill cycle according to the key of the default account. "}
var E207364 = Global_error{id: "207364", eType: EXPECTED_ERROR, message: "The SrvTag fee type does not match with the tag in the charging rate table. "}
var E207365 = Global_error{id: "207365", eType: EXPECTED_ERROR, message: "Existent table "}
var E207366 = Global_error{id: "207366", eType: EXPECTED_ERROR, message: "The current charging time goes beyond the time range of the next bill cycle. "}
var E207367 = Global_error{id: "207367", eType: EXPECTED_ERROR, message: "Wrong measurement unit. "}
var E207368 = Global_error{id: "207368", eType: EXPECTED_ERROR, message: "The current charging time goes beyond the time range set after the accumulation switchover. "}
var E207369 = Global_error{id: "207369", eType: EXPECTED_ERROR, message: "The detection of the product associated with the accumulation item is wrong. "}
var E207370 = Global_error{id: "207370", eType: EXPECTED_ERROR, message: "No subscriber record. "}
var E207371 = Global_error{id: "207371", eType: EXPECTED_ERROR, message: "The subfunction of the rebating behavior function is wrong. "}
var E207372 = Global_error{id: "207372", eType: EXPECTED_ERROR, message: "For the group preference, if a group member is at the current node (node of the service), the member is skipped. "}
var E207373 = Global_error{id: "207373", eType: EXPECTED_ERROR, message: "The current task needs to be performed. "}
var E207374 = Global_error{id: "207374", eType: EXPECTED_ERROR, message: "The current task does not need to be performed. "}
var E207375 = Global_error{id: "207375", eType: EXPECTED_ERROR, message: "Failed to calculate the next bill cycle. "}
var E207376 = Global_error{id: "207376", eType: EXPECTED_ERROR, message: "The XML file of the CBPAgent does not exist. "}
var E207377 = Global_error{id: "207377", eType: EXPECTED_ERROR, message: "The XML document does not follow the schema file. "}
var E207378 = Global_error{id: "207378", eType: EXPECTED_ERROR, message: "The XML file does not exist. "}
var E207379 = Global_error{id: "207379", eType: EXPECTED_ERROR, message: "Failed to parse the XSD file. "}
var E207380 = Global_error{id: "207380", eType: EXPECTED_ERROR, message: "The parser file in the XML format does not exist. "}
var E207381 = Global_error{id: "207381", eType: EXPECTED_ERROR, message: "There are no idle service sessions for processing. "}
var E207382 = Global_error{id: "207382", eType: EXPECTED_ERROR, message: "Failed to apply for the memory from the buffer pool. "}
var E207383 = Global_error{id: "207383", eType: EXPECTED_ERROR, message: "Failed to obtain LogKey. "}
var E207384 = Global_error{id: "207384", eType: EXPECTED_ERROR, message: "LogKey is being processed currently. "}
var E207385 = Global_error{id: "207385", eType: EXPECTED_ERROR, message: "Failed to uncompress data. "}
var E207386 = Global_error{id: "207386", eType: EXPECTED_ERROR, message: "Failed to compress data. "}
var E207387 = Global_error{id: "207387", eType: EXPECTED_ERROR, message: "Incorrect message data. "}
var E207388 = Global_error{id: "207388", eType: EXPECTED_ERROR, message: "The value of CommandID is inconsistent with that in the packet. "}
var E207389 = Global_error{id: "207389", eType: EXPECTED_ERROR, message: "The version is inconsistent with that in the packet. "}
var E207390 = Global_error{id: "207390", eType: EXPECTED_ERROR, message: "The parser is not found. "}
var E207391 = Global_error{id: "207391", eType: EXPECTED_ERROR, message: "Failed to verify the XML file. "}
var E207392 = Global_error{id: "207392", eType: EXPECTED_ERROR, message: "The node does not exist. "}
var E207393 = Global_error{id: "207393", eType: EXPECTED_ERROR, message: "The AttributeName field is not imported when the vertical table is operated. "}
var E207394 = Global_error{id: "207394", eType: EXPECTED_ERROR, message: "The input table field value is incorrect. "}
var E207395 = Global_error{id: "207395", eType: EXPECTED_ERROR, message: "Incorrect PreData data. "}
var E207396 = Global_error{id: "207396", eType: EXPECTED_ERROR, message: "The EventType field in PreData is incorrect. "}
var E207397 = Global_error{id: "207397", eType: EXPECTED_ERROR, message: "The values of RecID are duplicated. "}
var E207398 = Global_error{id: "207398", eType: EXPECTED_ERROR, message: "Loss of RecID. The values of RecID in the packet are not serial numbers starting from 0. "}
var E207399 = Global_error{id: "207399", eType: EXPECTED_ERROR, message: "Failed to obtain the serial number of the imported module. "}
var E207400 = Global_error{id: "207400", eType: EXPECTED_ERROR, message: "Failed to obtain MemData, PreData, and PhyData. "}
var E207401 = Global_error{id: "207401", eType: EXPECTED_ERROR, message: "The module is not processed. "}
var E207402 = Global_error{id: "207402", eType: EXPECTED_ERROR, message: "Failed to obtain the IDL interface information in PreData. "}
var E207403 = Global_error{id: "207403", eType: EXPECTED_ERROR, message: "The result code returned after the DS preprocessing does not match with the configured value. "}
var E207404 = Global_error{id: "207404", eType: EXPECTED_ERROR, message: "BASE64 decoding failed. "}
var E207405 = Global_error{id: "207405", eType: EXPECTED_ERROR, message: "BASE64 encoding failed. "}
var E207406 = Global_error{id: "207406", eType: EXPECTED_ERROR, message: "DAS begin failure. "}
var E207407 = Global_error{id: "207407", eType: EXPECTED_ERROR, message: "The request message size is larger than 100 KB. "}
var E207408 = Global_error{id: "207408", eType: EXPECTED_ERROR, message: "No rating operation is performed. "}
var E207409 = Global_error{id: "207409", eType: EXPECTED_ERROR, message: "Failed to obtain the related key value during content charging. "}
var E207410 = Global_error{id: "207410", eType: EXPECTED_ERROR, message: "The CommandType in the PythonData message is incorrect. "}
var E207411 = Global_error{id: "207411", eType: EXPECTED_ERROR, message: "The number of sub-accounts during debiting exceeds the maximum value. "}
var E207412 = Global_error{id: "207412", eType: EXPECTED_ERROR, message: "Failed to query the scenario tree. "}
var E207413 = Global_error{id: "207413", eType: EXPECTED_ERROR, message: "Failed to match the correct scenario after scanning the scenario tree for the maximum number of times in a loop, namely, 1000 times. "}
var E207414 = Global_error{id: "207414", eType: EXPECTED_ERROR, message: "An infinite loop error occurred when scanning the scenario tree. "}
var E207415 = Global_error{id: "207415", eType: EXPECTED_ERROR, message: "Failed to allocate memory. "}
var E207416 = Global_error{id: "207416", eType: EXPECTED_ERROR, message: "Invalid length. "}
var E207417 = Global_error{id: "207417", eType: EXPECTED_ERROR, message: "Common error code "}
var E207418 = Global_error{id: "207418", eType: EXPECTED_ERROR, message: "Failed to allocate dynamic memory "}
var E207419 = Global_error{id: "207419", eType: EXPECTED_ERROR, message: "Path length exceeds the upper limit "}
var E207420 = Global_error{id: "207420", eType: EXPECTED_ERROR, message: "Failed to obtain the environment variable. "}
var E207421 = Global_error{id: "207421", eType: EXPECTED_ERROR, message: "Nonexistent directory "}
var E207422 = Global_error{id: "207422", eType: EXPECTED_ERROR, message: "Failed to access the shared memory "}
var E207423 = Global_error{id: "207423", eType: EXPECTED_ERROR, message: "Failed to remove the share memory "}
var E207424 = Global_error{id: "207424", eType: EXPECTED_ERROR, message: "Use of excessive shared memories "}
var E207425 = Global_error{id: "207425", eType: EXPECTED_ERROR, message: "Lack of the execute permission "}
var E207426 = Global_error{id: "207426", eType: EXPECTED_ERROR, message: "The size of the shared memory exceeds the value of MaxMemSize. "}
var E207427 = Global_error{id: "207427", eType: EXPECTED_ERROR, message: "Slot not in use "}
var E207428 = Global_error{id: "207428", eType: EXPECTED_ERROR, message: "Invalid record slot "}
var E207429 = Global_error{id: "207429", eType: EXPECTED_ERROR, message: "Invalid input record "}
var E207430 = Global_error{id: "207430", eType: EXPECTED_ERROR, message: "Invalid record length "}
var E207431 = Global_error{id: "207431", eType: EXPECTED_ERROR, message: "Failed to find the matched record "}
var E207432 = Global_error{id: "207432", eType: EXPECTED_ERROR, message: "Unmatched version of the slot "}
var E207433 = Global_error{id: "207433", eType: EXPECTED_ERROR, message: "Time-out of waiting to use the record "}
var E207434 = Global_error{id: "207434", eType: EXPECTED_ERROR, message: "Nonexistent space "}
var E207435 = Global_error{id: "207435", eType: EXPECTED_ERROR, message: "Invalid space type "}
var E207436 = Global_error{id: "207436", eType: EXPECTED_ERROR, message: "No idle page of the space "}
var E207437 = Global_error{id: "207437", eType: EXPECTED_ERROR, message: "Invalid spaceid "}
var E207438 = Global_error{id: "207438", eType: EXPECTED_ERROR, message: "Invalid page ID "}
var E207439 = Global_error{id: "207439", eType: EXPECTED_ERROR, message: "Repeated freeing of space pages "}
var E207440 = Global_error{id: "207440", eType: EXPECTED_ERROR, message: "Invalid space size "}
var E207441 = Global_error{id: "207441", eType: EXPECTED_ERROR, message: "Excessive spaces "}
var E207442 = Global_error{id: "207442", eType: EXPECTED_ERROR, message: "Space check failed "}
var E207443 = Global_error{id: "207443", eType: EXPECTED_ERROR, message: "Page check failed. "}
var E207444 = Global_error{id: "207444", eType: EXPECTED_ERROR, message: "Nonexistent table. "}
var E207445 = Global_error{id: "207445", eType: EXPECTED_ERROR, message: "Invalid table name "}
var E207446 = Global_error{id: "207446", eType: EXPECTED_ERROR, message: "Invalid table ID "}
var E207447 = Global_error{id: "207447", eType: EXPECTED_ERROR, message: "Invalid number of table fields "}
var E207448 = Global_error{id: "207448", eType: EXPECTED_ERROR, message: "Excessive tables "}
var E207449 = Global_error{id: "207449", eType: EXPECTED_ERROR, message: "Nonexistent table field. "}
var E207450 = Global_error{id: "207450", eType: EXPECTED_ERROR, message: "Invalid table field "}
var E207451 = Global_error{id: "207451", eType: EXPECTED_ERROR, message: "Table check failed "}
var E207452 = Global_error{id: "207452", eType: EXPECTED_ERROR, message: "Failed to drop the table "}
var E207453 = Global_error{id: "207453", eType: EXPECTED_ERROR, message: "Nonexistent index "}
var E207454 = Global_error{id: "207454", eType: EXPECTED_ERROR, message: "Existent index "}
var E207455 = Global_error{id: "207455", eType: EXPECTED_ERROR, message: "Invalid index ID "}
var E207456 = Global_error{id: "207456", eType: EXPECTED_ERROR, message: "Invalid index field "}
var E207457 = Global_error{id: "207457", eType: EXPECTED_ERROR, message: "Invalid index name "}
var E207458 = Global_error{id: "207458", eType: EXPECTED_ERROR, message: "Invalid index method "}
var E207459 = Global_error{id: "207459", eType: EXPECTED_ERROR, message: "Invalid index sorting method "}
var E207460 = Global_error{id: "207460", eType: EXPECTED_ERROR, message: "Invalid sort field "}
var E207461 = Global_error{id: "207461", eType: EXPECTED_ERROR, message: "Invalid index parameter value or key value "}
var E207462 = Global_error{id: "207462", eType: EXPECTED_ERROR, message: "Excessive indexes "}
var E207463 = Global_error{id: "207463", eType: EXPECTED_ERROR, message: "Invalid hash size of the index "}
var E207464 = Global_error{id: "207464", eType: EXPECTED_ERROR, message: "Invalid index node "}
var E207465 = Global_error{id: "207465", eType: EXPECTED_ERROR, message: "Conflict of the unique key "}
var E207466 = Global_error{id: "207466", eType: EXPECTED_ERROR, message: "Cursor used out "}
var E207467 = Global_error{id: "207467", eType: EXPECTED_ERROR, message: "Invalid cursor ID "}
var E207468 = Global_error{id: "207468", eType: EXPECTED_ERROR, message: "Incorrect number of the OR items "}
var E207469 = Global_error{id: "207469", eType: EXPECTED_ERROR, message: "Incorrect number of the AND items "}
var E207470 = Global_error{id: "207470", eType: EXPECTED_ERROR, message: "Invalid field size "}
var E207471 = Global_error{id: "207471", eType: EXPECTED_ERROR, message: "Invalid parameter value of the filter "}
var E207472 = Global_error{id: "207472", eType: EXPECTED_ERROR, message: "Invalid hash ID "}
var E207473 = Global_error{id: "207473", eType: EXPECTED_ERROR, message: "Hash bucket not in use "}
var E207474 = Global_error{id: "207474", eType: EXPECTED_ERROR, message: "Index node not in use "}
var E207475 = Global_error{id: "207475", eType: EXPECTED_ERROR, message: "Invalid serial ID "}
var E207476 = Global_error{id: "207476", eType: EXPECTED_ERROR, message: "Invalid serial name "}
var E207477 = Global_error{id: "207477", eType: EXPECTED_ERROR, message: "Invalid serial parameter value "}
var E207478 = Global_error{id: "207478", eType: EXPECTED_ERROR, message: "Existent serial number "}
var E207479 = Global_error{id: "207479", eType: EXPECTED_ERROR, message: "Nonexistent serial number "}
var E207480 = Global_error{id: "207480", eType: EXPECTED_ERROR, message: "Excessive serial numbers "}
var E207481 = Global_error{id: "207481", eType: EXPECTED_ERROR, message: "Invalid parameter values of the incremental update function "}
var E207482 = Global_error{id: "207482", eType: EXPECTED_ERROR, message: "Invalid incremental update mode "}
var E207483 = Global_error{id: "207483", eType: EXPECTED_ERROR, message: "Failed to obtain the transaction lock "}
var E207484 = Global_error{id: "207484", eType: EXPECTED_ERROR, message: "Invalid transaction status "}
var E207485 = Global_error{id: "207485", eType: EXPECTED_ERROR, message: "Nonexistent transaction "}
var E207486 = Global_error{id: "207486", eType: EXPECTED_ERROR, message: "Invalid action type "}
var E207487 = Global_error{id: "207487", eType: EXPECTED_ERROR, message: "Invalid timeout interval "}
var E207488 = Global_error{id: "207488", eType: EXPECTED_ERROR, message: "Failed to obtain the SMDB basekey "}
var E207489 = Global_error{id: "207489", eType: EXPECTED_ERROR, message: "Transaction existed "}
var E207490 = Global_error{id: "207490", eType: EXPECTED_ERROR, message: "Failed to obtain the controller of debug logs "}
var E207491 = Global_error{id: "207491", eType: EXPECTED_ERROR, message: "Existent SMDB "}
var E207492 = Global_error{id: "207492", eType: EXPECTED_ERROR, message: "Unmatched SMDB version "}
var E207493 = Global_error{id: "207493", eType: EXPECTED_ERROR, message: "Dynamic library MEMAPI is not initialized or its application process is terminated "}
var E207494 = Global_error{id: "207494", eType: EXPECTED_ERROR, message: "Forbidden operation "}
var E207495 = Global_error{id: "207495", eType: EXPECTED_ERROR, message: "Multi-thread not supported "}
var E207496 = Global_error{id: "207496", eType: EXPECTED_ERROR, message: "Invalid log name "}
var E207497 = Global_error{id: "207497", eType: EXPECTED_ERROR, message: "TZ environment variable is not found or invalid "}
var E207498 = Global_error{id: "207498", eType: EXPECTED_ERROR, message: "Condition of operation not matched "}
var E207499 = Global_error{id: "207499", eType: EXPECTED_ERROR, message: "Failure to pass the backup integrity check "}
var E207500 = Global_error{id: "207500", eType: EXPECTED_ERROR, message: "TZ flag check failed "}
var E207501 = Global_error{id: "207501", eType: EXPECTED_ERROR, message: "The time value is out of valid scope "}
var E207502 = Global_error{id: "207502", eType: EXPECTED_ERROR, message: "Incorrect setting of a configuration item "}
var E207503 = Global_error{id: "207503", eType: EXPECTED_ERROR, message: "Syntax error of SQL statements "}
var E207504 = Global_error{id: "207504", eType: EXPECTED_ERROR, message: "Incompatible data type "}
var E207505 = Global_error{id: "207505", eType: EXPECTED_ERROR, message: "Internal SQL error "}
var E207506 = Global_error{id: "207506", eType: EXPECTED_ERROR, message: "Overflow of the input value "}
var E207507 = Global_error{id: "207507", eType: EXPECTED_ERROR, message: "Invalid function call "}
var E207508 = Global_error{id: "207508", eType: EXPECTED_ERROR, message: "Lack of permission "}
var E207509 = Global_error{id: "207509", eType: EXPECTED_ERROR, message: "Invalid user name of the SMDB "}
var E207510 = Global_error{id: "207510", eType: EXPECTED_ERROR, message: "Dynamic allocate memory failed "}
var E207511 = Global_error{id: "207511", eType: EXPECTED_ERROR, message: "Invalid parameter of SCN "}
var E207512 = Global_error{id: "207512", eType: EXPECTED_ERROR, message: "Cannot find SCN from redo logs "}
var E207513 = Global_error{id: "207513", eType: EXPECTED_ERROR, message: "Open redolog file failed "}
var E207514 = Global_error{id: "207514", eType: EXPECTED_ERROR, message: "Write the index data of redolog file failed "}
var E207515 = Global_error{id: "207515", eType: EXPECTED_ERROR, message: "Read redolog file failed "}
var E207516 = Global_error{id: "207516", eType: EXPECTED_ERROR, message: "Write redolog file failed "}
var E207517 = Global_error{id: "207517", eType: EXPECTED_ERROR, message: "Open redolog control file failed "}
var E207518 = Global_error{id: "207518", eType: EXPECTED_ERROR, message: "Read redolog control file failed "}
var E207519 = Global_error{id: "207519", eType: EXPECTED_ERROR, message: "Write redolog control file failed "}
var E207520 = Global_error{id: "207520", eType: EXPECTED_ERROR, message: "Invalid index of redolog control "}
var E207521 = Global_error{id: "207521", eType: EXPECTED_ERROR, message: "Index data of redolog file destroyed "}
var E207522 = Global_error{id: "207522", eType: EXPECTED_ERROR, message: "Data of redolog file destroyed "}
var E207523 = Global_error{id: "207523", eType: EXPECTED_ERROR, message: "The redo log path not exist or permission denied "}
var E207524 = Global_error{id: "207524", eType: EXPECTED_ERROR, message: "Redolog file number exceed the limit "}
var E207525 = Global_error{id: "207525", eType: EXPECTED_ERROR, message: "All SCN in redolog file already exist in SMDB "}
var E207526 = Global_error{id: "207526", eType: EXPECTED_ERROR, message: "Attach share memory failed "}
var E207527 = Global_error{id: "207527", eType: EXPECTED_ERROR, message: "Create share memory failed "}
var E207528 = Global_error{id: "207528", eType: EXPECTED_ERROR, message: "Invalid tableid in redolog "}
var E207529 = Global_error{id: "207529", eType: EXPECTED_ERROR, message: "Cannot execute restoration when SMDB exists "}
var E207530 = Global_error{id: "207530", eType: EXPECTED_ERROR, message: "Get space address failed "}
var E207531 = Global_error{id: "207531", eType: EXPECTED_ERROR, message: "DBFilePath not exist or permission denied "}
var E207532 = Global_error{id: "207532", eType: EXPECTED_ERROR, message: "Backup file destroyed "}
var E207533 = Global_error{id: "207533", eType: EXPECTED_ERROR, message: "The size of the online log file does not range from 1 to 128 MB. "}
var E207534 = Global_error{id: "207534", eType: EXPECTED_ERROR, message: "Scan redolog directory failed "}
var E207535 = Global_error{id: "207535", eType: EXPECTED_ERROR, message: "Open backup control file failed "}
var E207536 = Global_error{id: "207536", eType: EXPECTED_ERROR, message: "Read backup control file failed "}
var E207537 = Global_error{id: "207537", eType: EXPECTED_ERROR, message: "Write backup control file failed "}
var E207538 = Global_error{id: "207538", eType: EXPECTED_ERROR, message: "Open backup file failed "}
var E207539 = Global_error{id: "207539", eType: EXPECTED_ERROR, message: "Read backup file failed "}
var E207540 = Global_error{id: "207540", eType: EXPECTED_ERROR, message: "Write backup file failed "}
var E207541 = Global_error{id: "207541", eType: EXPECTED_ERROR, message: "Netcopy restore is terminated. "}
var E207542 = Global_error{id: "207542", eType: EXPECTED_ERROR, message: "Invalid switch submode "}
var E207543 = Global_error{id: "207543", eType: EXPECTED_ERROR, message: "Copying the mirror file failed "}
var E207544 = Global_error{id: "207544", eType: EXPECTED_ERROR, message: "Disconnected client and the server "}
var E207545 = Global_error{id: "207545", eType: EXPECTED_ERROR, message: "Failure to send requests from the client to the server "}
var E207546 = Global_error{id: "207546", eType: EXPECTED_ERROR, message: "Failure to receive a response on the client "}
var E207547 = Global_error{id: "207547", eType: EXPECTED_ERROR, message: "Initialization connection failure "}
var E207548 = Global_error{id: "207548", eType: EXPECTED_ERROR, message: "Disconnected client. "}
var E207549 = Global_error{id: "207549", eType: EXPECTED_ERROR, message: "Failure to send data from the server "}
var E207550 = Global_error{id: "207550", eType: EXPECTED_ERROR, message: "Failure to receive data from the server "}
var E207551 = Global_error{id: "207551", eType: EXPECTED_ERROR, message: "Failure to initialize UNIX communications on the server "}
var E207552 = Global_error{id: "207552", eType: EXPECTED_ERROR, message: "Failed to initialize TCP communication on the server "}
var E207553 = Global_error{id: "207553", eType: EXPECTED_ERROR, message: "Failure to create the local object. "}
var E207554 = Global_error{id: "207554", eType: EXPECTED_ERROR, message: "Failure to create the thread used by the ENIP to invoke the Corba. "}
var E207555 = Global_error{id: "207555", eType: EXPECTED_ERROR, message: "Uninitialized Corba OLC. "}
var E207556 = Global_error{id: "207556", eType: EXPECTED_ERROR, message: "Failure to create the session for the registry or Corba to invoke the ENIP. "}
var E207557 = Global_error{id: "207557", eType: EXPECTED_ERROR, message: "Failure to read configuration data. "}
var E207558 = Global_error{id: "207558", eType: EXPECTED_ERROR, message: "Failure to start the Corba server. "}
var E207559 = Global_error{id: "207559", eType: EXPECTED_ERROR, message: "Failure to allocate the memory. "}
var E207560 = Global_error{id: "207560", eType: EXPECTED_ERROR, message: "NULL returned when the instance of the performer was required. "}
var E207561 = Global_error{id: "207561", eType: EXPECTED_ERROR, message: "NULL returned when the instance of the recvFactory was required. "}
var E207562 = Global_error{id: "207562", eType: EXPECTED_ERROR, message: "Failure to obtain the object for the configuration table of the interface. "}
var E207563 = Global_error{id: "207563", eType: EXPECTED_ERROR, message: "Failure to initialize the performer. "}
var E207564 = Global_error{id: "207564", eType: EXPECTED_ERROR, message: "Failure to read parameters from the OLCSend message. "}
var E207565 = Global_error{id: "207565", eType: EXPECTED_ERROR, message: "Failure to match destConnID in the OLCSend message with the value of srcConnID. "}
var E207566 = Global_error{id: "207566", eType: EXPECTED_ERROR, message: "Too long OLC message. "}
var E207567 = Global_error{id: "207567", eType: EXPECTED_ERROR, message: "NULL returned when the recvHandler was required by using connID. "}
var E207568 = Global_error{id: "207568", eType: EXPECTED_ERROR, message: "Failure to receive the message by the performer. "}
var E207569 = Global_error{id: "207569", eType: EXPECTED_ERROR, message: "Incorrect value. "}
var E207570 = Global_error{id: "207570", eType: EXPECTED_ERROR, message: "Failure to create the response for the status report. "}
var E207571 = Global_error{id: "207571", eType: EXPECTED_ERROR, message: "Failure to add parameters to response streams. "}
var E207572 = Global_error{id: "207572", eType: EXPECTED_ERROR, message: "Failure to send the status report. "}
var E207573 = Global_error{id: "207573", eType: EXPECTED_ERROR, message: "Uninitialized global data. "}
var E207574 = Global_error{id: "207574", eType: EXPECTED_ERROR, message: "Unloaded ConfigAgent. "}
var E207575 = Global_error{id: "207575", eType: EXPECTED_ERROR, message: "Failure to obtain the Corba IDL path. "}
var E207576 = Global_error{id: "207576", eType: EXPECTED_ERROR, message: "Failure to read the number of updated table records in the received update request. "}
var E207577 = Global_error{id: "207577", eType: EXPECTED_ERROR, message: "Failure to read the update type of table records in the update request. "}
var E207578 = Global_error{id: "207578", eType: EXPECTED_ERROR, message: "Invalid table operation type. "}
var E207579 = Global_error{id: "207579", eType: EXPECTED_ERROR, message: "Incorrect parameter list in the update request. "}
var E207580 = Global_error{id: "207580", eType: EXPECTED_ERROR, message: "Failure to allocate the memory for the parameter list. "}
var E207581 = Global_error{id: "207581", eType: EXPECTED_ERROR, message: "Uninitialized Corba configuration. "}
var E207582 = Global_error{id: "207582", eType: EXPECTED_ERROR, message: "Error message returned when the item was read from the CC. "}
var E207583 = Global_error{id: "207583", eType: EXPECTED_ERROR, message: "Error message returned when the table was read from the CC. "}
var E207584 = Global_error{id: "207584", eType: EXPECTED_ERROR, message: "Failure to read data from the streams of the received update request. "}
var E207585 = Global_error{id: "207585", eType: EXPECTED_ERROR, message: "Failure to obtain the long name of an item based on its short name. "}
var E207586 = Global_error{id: "207586", eType: EXPECTED_ERROR, message: "Incorrect item update type in the update request. "}
var E207587 = Global_error{id: "207587", eType: EXPECTED_ERROR, message: "Incorrect table update type. "}
var E207588 = Global_error{id: "207588", eType: EXPECTED_ERROR, message: "Incorrect updated table name in the request. "}
var E207589 = Global_error{id: "207589", eType: EXPECTED_ERROR, message: "Unknown configuration table name. "}
var E207590 = Global_error{id: "207590", eType: EXPECTED_ERROR, message: "Invalid enipServiceName, corbaNamingServer, or corbaServiceName. "}
var E207591 = Global_error{id: "207591", eType: EXPECTED_ERROR, message: "Unknown key column name in the configuration table. "}
var E207592 = Global_error{id: "207592", eType: EXPECTED_ERROR, message: "Invalid IDL interface name. "}
var E207593 = Global_error{id: "207593", eType: EXPECTED_ERROR, message: "Unknown nonkey column name in the configuration table. "}
var E207594 = Global_error{id: "207594", eType: EXPECTED_ERROR, message: "Incorrect extension of the IDL file name. "}
var E207595 = Global_error{id: "207595", eType: EXPECTED_ERROR, message: "Invalid IDL file path. "}
var E207596 = Global_error{id: "207596", eType: EXPECTED_ERROR, message: "Failure to find the IDL file. "}
var E207597 = Global_error{id: "207597", eType: EXPECTED_ERROR, message: "Wait for the startup of the container. "}
var E207598 = Global_error{id: "207598", eType: EXPECTED_ERROR, message: "The parameter is invalid. "}
var E207599 = Global_error{id: "207599", eType: EXPECTED_ERROR, message: "Failure to update the file. "}
var E207600 = Global_error{id: "207600", eType: EXPECTED_ERROR, message: "Container not running. "}
var E207601 = Global_error{id: "207601", eType: EXPECTED_ERROR, message: "Configured container not running. "}
var E207602 = Global_error{id: "207602", eType: EXPECTED_ERROR, message: "Maximum number of the Monitor exceeded the upper limit. "}
var E207603 = Global_error{id: "207603", eType: EXPECTED_ERROR, message: "Invalid container ID. "}
var E207604 = Global_error{id: "207604", eType: EXPECTED_ERROR, message: "Failure to delete the container. "}
var E207605 = Global_error{id: "207605", eType: EXPECTED_ERROR, message: "Container to be deleted not running. "}
var E207606 = Global_error{id: "207606", eType: EXPECTED_ERROR, message: "Failure to pause the container. "}
var E207607 = Global_error{id: "207607", eType: EXPECTED_ERROR, message: "No monitoring required for the container. "}
var E207608 = Global_error{id: "207608", eType: EXPECTED_ERROR, message: "Failure to set a timer for the container. "}
var E207609 = Global_error{id: "207609", eType: EXPECTED_ERROR, message: "Failure to add the container. "}
var E207610 = Global_error{id: "207610", eType: EXPECTED_ERROR, message: "Failure to open the file. "}
var E207611 = Global_error{id: "207611", eType: EXPECTED_ERROR, message: "Failure to add data to the file. "}
var E207612 = Global_error{id: "207612", eType: EXPECTED_ERROR, message: "Invalid file name. "}
var E207613 = Global_error{id: "207613", eType: EXPECTED_ERROR, message: "Unmatched global data. "}
var E207614 = Global_error{id: "207614", eType: EXPECTED_ERROR, message: "Failure to obtain the local context object. "}
var E207615 = Global_error{id: "207615", eType: EXPECTED_ERROR, message: "Failure to obtain the tracing manager interface from the ENIP CORE. "}
var E207616 = Global_error{id: "207616", eType: EXPECTED_ERROR, message: "NULL returned for ORB_init. "}
var E207617 = Global_error{id: "207617", eType: EXPECTED_ERROR, message: "Failure to create the tracing manager of the OMAgent. "}
var E207618 = Global_error{id: "207618", eType: EXPECTED_ERROR, message: "Failure to create the ENIP CORE O&M manager of the OMAgent. "}
var E207619 = Global_error{id: "207619", eType: EXPECTED_ERROR, message: "Failure to obtain the O&M interface of the ENIP CORE. "}
var E207620 = Global_error{id: "207620", eType: EXPECTED_ERROR, message: "Failure to obtain running information from the ENIP CORE. "}
var E207621 = Global_error{id: "207621", eType: EXPECTED_ERROR, message: "Failure to obtain the naming interface from the ENIP CORE. "}
var E207622 = Global_error{id: "207622", eType: EXPECTED_ERROR, message: "Failure to find the service from the Naming. "}
var E207623 = Global_error{id: "207623", eType: EXPECTED_ERROR, message: "Incorrect tracing conditions in the tracing command. "}
var E207624 = Global_error{id: "207624", eType: EXPECTED_ERROR, message: "Failure to convert additional information in the tracing condition. "}
var E207625 = Global_error{id: "207625", eType: EXPECTED_ERROR, message: "Invalid maximum number of reported messages related to session tracing. "}
var E207626 = Global_error{id: "207626", eType: EXPECTED_ERROR, message: "Duplicate tracing conditions in the tracing command. "}
var E207627 = Global_error{id: "207627", eType: EXPECTED_ERROR, message: "No tracing condition in the tracing command. "}
var E207628 = Global_error{id: "207628", eType: EXPECTED_ERROR, message: "Failure to add the tracing task to the ENIP CORE. "}
var E207629 = Global_error{id: "207629", eType: EXPECTED_ERROR, message: "Failure to find the tracing task. "}
var E207630 = Global_error{id: "207630", eType: EXPECTED_ERROR, message: "Failure to create RootPOA. "}
var E207631 = Global_error{id: "207631", eType: EXPECTED_ERROR, message: "Failure to create CorbaAdapter POA. "}
var E207632 = Global_error{id: "207632", eType: EXPECTED_ERROR, message: "Exception occurring when the ORB was initialized. "}
var E207633 = Global_error{id: "207633", eType: EXPECTED_ERROR, message: "Failure to shut down the ORB. "}
var E207634 = Global_error{id: "207634", eType: EXPECTED_ERROR, message: "Failure to obtain the value of HostIP. "}
var E207635 = Global_error{id: "207635", eType: EXPECTED_ERROR, message: "Failure to initialize the ORB. "}
var E207636 = Global_error{id: "207636", eType: EXPECTED_ERROR, message: "Failure to create the object for the CEnip2Corba. "}
var E207637 = Global_error{id: "207637", eType: EXPECTED_ERROR, message: "Uninitialized CCorbaConfig. "}
var E207638 = Global_error{id: "207638", eType: EXPECTED_ERROR, message: "Failure to copy the request. "}
var E207639 = Global_error{id: "207639", eType: EXPECTED_ERROR, message: "Full request queue or insufficient memory. "}
var E207640 = Global_error{id: "207640", eType: EXPECTED_ERROR, message: "Failure to place Corba invoking information in the queue. "}
var E207641 = Global_error{id: "207641", eType: EXPECTED_ERROR, message: "Failure to send the Corba request or response. "}
var E207642 = Global_error{id: "207642", eType: EXPECTED_ERROR, message: "Failure to add the information about the timeout exception to streams of the ENIP response. "}
var E207643 = Global_error{id: "207643", eType: EXPECTED_ERROR, message: "Exception occurring when the Corba response was converted into an ENIP response. "}
var E207644 = Global_error{id: "207644", eType: EXPECTED_ERROR, message: "Failure to create the Corba response processing thread. "}
var E207645 = Global_error{id: "207645", eType: EXPECTED_ERROR, message: "Failure to create the ENIP request when processing a Corba request. "}
var E207646 = Global_error{id: "207646", eType: EXPECTED_ERROR, message: "No free control node. "}
var E207647 = Global_error{id: "207647", eType: EXPECTED_ERROR, message: "Failure to send the Corba request to the ENIP. "}
var E207648 = Global_error{id: "207648", eType: EXPECTED_ERROR, message: "Uninitialized Convertor. "}
var E207649 = Global_error{id: "207649", eType: EXPECTED_ERROR, message: "NULL returned when invoke convertToDIIRequest to create TypeCode. "}
var E207650 = Global_error{id: "207650", eType: EXPECTED_ERROR, message: "Failure to read the exception from all known exceptions. "}
var E207651 = Global_error{id: "207651", eType: EXPECTED_ERROR, message: "Failure to add the information about system exceptions to the ENIP. "}
var E207652 = Global_error{id: "207652", eType: EXPECTED_ERROR, message: "NULL returned when the parameter list was created. "}
var E207653 = Global_error{id: "207653", eType: EXPECTED_ERROR, message: "NULL returned when invoke convertToENIPRequest to create TypeCode. "}
var E207654 = Global_error{id: "207654", eType: EXPECTED_ERROR, message: "Blank DSI parameter. "}
var E207655 = Global_error{id: "207655", eType: EXPECTED_ERROR, message: "Error message returned when parameter values were read from the streams of the ENIP response. "}
var E207656 = Global_error{id: "207656", eType: EXPECTED_ERROR, message: "Uninitialized MDRAgent. "}
var E207657 = Global_error{id: "207657", eType: EXPECTED_ERROR, message: "Failure to obtain the IDL definition from the remote node. "}
var E207658 = Global_error{id: "207658", eType: EXPECTED_ERROR, message: "Error message returned when the MDRAgent obtained the IDL definition. "}
var E207659 = Global_error{id: "207659", eType: EXPECTED_ERROR, message: "Invalid domain ID. "}
var E207660 = Global_error{id: "207660", eType: EXPECTED_ERROR, message: "Failure to obtain the IDL definition using the MDRAgent. "}
var E207661 = Global_error{id: "207661", eType: EXPECTED_ERROR, message: "Blank interface define or DynAnyFactory. "}
var E207662 = Global_error{id: "207662", eType: EXPECTED_ERROR, message: "Unsupported data type. "}
var E207663 = Global_error{id: "207663", eType: EXPECTED_ERROR, message: "NULL returned when TypeCode was created. "}
var E207664 = Global_error{id: "207664", eType: EXPECTED_ERROR, message: "Failure to add a value to the DynamicAny. "}
var E207665 = Global_error{id: "207665", eType: EXPECTED_ERROR, message: "Error message returned when parameter values were read from ENIP streams. "}
var E207666 = Global_error{id: "207666", eType: EXPECTED_ERROR, message: "Blank interfaceDefine or DynAnyFactory. "}
var E207667 = Global_error{id: "207667", eType: EXPECTED_ERROR, message: "Any type in the Corba not matched with the Any type in the ENIP. "}
var E207668 = Global_error{id: "207668", eType: EXPECTED_ERROR, message: "Error message returned when parameter values were read from all known exceptions. "}
var E207669 = Global_error{id: "207669", eType: EXPECTED_ERROR, message: "Error message returned when parameter values were added to ENIP streams. "}
var E207670 = Global_error{id: "207670", eType: EXPECTED_ERROR, message: "Unknown idlproxy error. "}
var E207671 = Global_error{id: "207671", eType: EXPECTED_ERROR, message: "Invalid domain name. "}
var E207672 = Global_error{id: "207672", eType: EXPECTED_ERROR, message: "Invalid domain IP address. "}
var E207673 = Global_error{id: "207673", eType: EXPECTED_ERROR, message: "Domain information conflict. "}
var E207674 = Global_error{id: "207674", eType: EXPECTED_ERROR, message: "Duplicate domain ID. "}
var E207675 = Global_error{id: "207675", eType: EXPECTED_ERROR, message: "Duplicate domain name. "}
var E207676 = Global_error{id: "207676", eType: EXPECTED_ERROR, message: "Duplicate domain IP address. "}
var E207677 = Global_error{id: "207677", eType: EXPECTED_ERROR, message: "Failure to find the domain. "}
var E207678 = Global_error{id: "207678", eType: EXPECTED_ERROR, message: "Incorrect number of domains sent for refreshing the IDLProxy. "}
var E207679 = Global_error{id: "207679", eType: EXPECTED_ERROR, message: "Failure to write streams when refreshing the IDLProxy configuration. "}
var E207680 = Global_error{id: "207680", eType: EXPECTED_ERROR, message: "Failure to send requests when refreshing the IDLProxy configuration. "}
var E207681 = Global_error{id: "207681", eType: EXPECTED_ERROR, message: "No matching domain IP address. "}
var E207682 = Global_error{id: "207682", eType: EXPECTED_ERROR, message: "Failure to save information in the idlproxy.xml file. "}
var E207683 = Global_error{id: "207683", eType: EXPECTED_ERROR, message: "Not allowed to modify the information about the local domain. "}
var E207684 = Global_error{id: "207684", eType: EXPECTED_ERROR, message: "Internal error when refreshing the IDLProxy configuration. "}
var E207685 = Global_error{id: "207685", eType: EXPECTED_ERROR, message: "Timeout when refreshing the IDLProxy configuration. "}
var E207686 = Global_error{id: "207686", eType: EXPECTED_ERROR, message: "Refreshing task already performed. "}
var E207687 = Global_error{id: "207687", eType: EXPECTED_ERROR, message: "Failed to obtain or start the MDRAgent. "}
var E207688 = Global_error{id: "207688", eType: EXPECTED_ERROR, message: "Failed to read data from streams. "}
var E207689 = Global_error{id: "207689", eType: EXPECTED_ERROR, message: "Failed to write data into streams. "}
var E207690 = Global_error{id: "207690", eType: EXPECTED_ERROR, message: "The memory is insufficient. "}
var E207691 = Global_error{id: "207691", eType: EXPECTED_ERROR, message: "Failed to create a response. "}
var E207692 = Global_error{id: "207692", eType: EXPECTED_ERROR, message: "Failed to obtain the ID of the module. "}
var E207693 = Global_error{id: "207693", eType: EXPECTED_ERROR, message: "Failed to initialize the XML parser. "}
var E207694 = Global_error{id: "207694", eType: EXPECTED_ERROR, message: "Failed to obtain the value of the environment variable ENIP_HOME. "}
var E207695 = Global_error{id: "207695", eType: EXPECTED_ERROR, message: "Failed to read the UOA IP address. "}
var E207696 = Global_error{id: "207696", eType: EXPECTED_ERROR, message: "Failed to read the UOA port number. "}
var E207697 = Global_error{id: "207697", eType: EXPECTED_ERROR, message: "Failed to read the local IP address. "}
var E207698 = Global_error{id: "207698", eType: EXPECTED_ERROR, message: "Failed to read the local port number. "}
var E207699 = Global_error{id: "207699", eType: EXPECTED_ERROR, message: "Failed to load the oamlib library. "}
var E207700 = Global_error{id: "207700", eType: EXPECTED_ERROR, message: "Failed to obtain the function object from the oamlib library. "}
var E207701 = Global_error{id: "207701", eType: EXPECTED_ERROR, message: "Failed to obtain the local context. "}
var E207702 = Global_error{id: "207702", eType: EXPECTED_ERROR, message: "Failed to register the module. "}
var E207703 = Global_error{id: "207703", eType: EXPECTED_ERROR, message: "Failed to initialize the NMAdapter. "}
var E207704 = Global_error{id: "207704", eType: EXPECTED_ERROR, message: "Failed to set the timer for the NMAdapter. "}
var E207705 = Global_error{id: "207705", eType: EXPECTED_ERROR, message: "Failed to create the tracing manager by the NMAdapter. "}
var E207706 = Global_error{id: "207706", eType: EXPECTED_ERROR, message: "Failed to send the response. "}
var E207707 = Global_error{id: "207707", eType: EXPECTED_ERROR, message: "Failed to obtain the local OMAgent service. "}
var E207708 = Global_error{id: "207708", eType: EXPECTED_ERROR, message: "Failed to find the module. "}
var E207709 = Global_error{id: "207709", eType: EXPECTED_ERROR, message: "Failed to obtain streams from the message. "}
var E207710 = Global_error{id: "207710", eType: EXPECTED_ERROR, message: "Failed to invoke the remote process. "}
var E207711 = Global_error{id: "207711", eType: EXPECTED_ERROR, message: "Failed to send the request. "}
var E207712 = Global_error{id: "207712", eType: EXPECTED_ERROR, message: "Failed to send the tracing command to the OMAgent. "}
var E207713 = Global_error{id: "207713", eType: EXPECTED_ERROR, message: "Failed to create the request. "}
var E207714 = Global_error{id: "207714", eType: EXPECTED_ERROR, message: "Failed to find the ModuleManager. "}
var E207715 = Global_error{id: "207715", eType: EXPECTED_ERROR, message: "Statistics directory error. "}
var E207716 = Global_error{id: "207716", eType: EXPECTED_ERROR, message: "Invalid statistics filtering criteria. "}
var E207717 = Global_error{id: "207717", eType: EXPECTED_ERROR, message: "Invalid statistics command. "}
var E207718 = Global_error{id: "207718", eType: EXPECTED_ERROR, message: "Unsupported statistics command. "}
var E207719 = Global_error{id: "207719", eType: EXPECTED_ERROR, message: "The ModuleManager returns an exception message. "}
var E207720 = Global_error{id: "207720", eType: EXPECTED_ERROR, message: "Lack of the OID in the UOA configuration command. "}
var E207721 = Global_error{id: "207721", eType: EXPECTED_ERROR, message: "Failed to find the MIBMAP item. "}
var E207722 = Global_error{id: "207722", eType: EXPECTED_ERROR, message: "The parameter value in the UOA configuration command is empty. "}
var E207723 = Global_error{id: "207723", eType: EXPECTED_ERROR, message: "Lack of key fields in the UOA configuration command. "}
var E207724 = Global_error{id: "207724", eType: EXPECTED_ERROR, message: "No data type information of the configuration item. "}
var E207725 = Global_error{id: "207725", eType: EXPECTED_ERROR, message: "The ConfigCenter returns an exception message. "}
var E207726 = Global_error{id: "207726", eType: EXPECTED_ERROR, message: "Invalid operation type in the UOA configuration command. "}
var E207727 = Global_error{id: "207727", eType: EXPECTED_ERROR, message: "Insufficient data in the UOA configuration command. "}
var E207728 = Global_error{id: "207728", eType: EXPECTED_ERROR, message: "The value of the MIBMAP item is incorrect. "}
var E207729 = Global_error{id: "207729", eType: EXPECTED_ERROR, message: "Incorrect DOID format. "}
var E207730 = Global_error{id: "207730", eType: EXPECTED_ERROR, message: "Failed to invoke the MDRAgent interface. "}
var E207731 = Global_error{id: "207731", eType: EXPECTED_ERROR, message: "Incorrect interface name. "}
var E207732 = Global_error{id: "207732", eType: EXPECTED_ERROR, message: "Empty ServiceID. "}
var E207733 = Global_error{id: "207733", eType: EXPECTED_ERROR, message: "Failed to query the interface name. "}
var E207734 = Global_error{id: "207734", eType: EXPECTED_ERROR, message: "Failed to query the interface for more than one time. "}
var E207735 = Global_error{id: "207735", eType: EXPECTED_ERROR, message: "Empty interface name. "}
var E207736 = Global_error{id: "207736", eType: EXPECTED_ERROR, message: "Empty operation name. "}
var E207737 = Global_error{id: "207737", eType: EXPECTED_ERROR, message: "Empty module name. "}
var E207738 = Global_error{id: "207738", eType: EXPECTED_ERROR, message: "Inconsistent data type. "}
var E207739 = Global_error{id: "207739", eType: EXPECTED_ERROR, message: "Failed to find the MDRAgent. "}
var E207740 = Global_error{id: "207740", eType: EXPECTED_ERROR, message: "Incorrect IDL file. "}
var E207741 = Global_error{id: "207741", eType: EXPECTED_ERROR, message: "Failed to find the head service of the module. "}
var E207742 = Global_error{id: "207742", eType: EXPECTED_ERROR, message: "Failed to obtain the session from the head service of the module. "}
var E207743 = Global_error{id: "207743", eType: EXPECTED_ERROR, message: "Unsupported operation type. "}
var E207744 = Global_error{id: "207744", eType: EXPECTED_ERROR, message: "Incorrect DOID. "}
var E207745 = Global_error{id: "207745", eType: EXPECTED_ERROR, message: "Invalid number of the MIBMAP item. "}
var E207746 = Global_error{id: "207746", eType: EXPECTED_ERROR, message: "Incorrect item value. "}
var E207747 = Global_error{id: "207747", eType: EXPECTED_ERROR, message: "Invalid length of the module type. "}
var E207748 = Global_error{id: "207748", eType: EXPECTED_ERROR, message: "Failed to find the tracing head service. "}
var E207749 = Global_error{id: "207749", eType: EXPECTED_ERROR, message: "Failed to access the ConfigCenter. "}
var E207750 = Global_error{id: "207750", eType: EXPECTED_ERROR, message: "Tracing failure. "}
var E207751 = Global_error{id: "207751", eType: EXPECTED_ERROR, message: "Failed to enable the timer. "}
var E207752 = Global_error{id: "207752", eType: EXPECTED_ERROR, message: "Failed to disable the timer. "}
var E207753 = Global_error{id: "207753", eType: EXPECTED_ERROR, message: "Failed to add the invoking record. "}
var E207754 = Global_error{id: "207754", eType: EXPECTED_ERROR, message: "Failed to connect to the UOA. "}
var E207755 = Global_error{id: "207755", eType: EXPECTED_ERROR, message: "Invalid parameter found when the CorbaAdapter interacted with the MDRAgent. "}
var E207756 = Global_error{id: "207756", eType: EXPECTED_ERROR, message: "Failure to create the MDRAgent proxy. "}
var E207757 = Global_error{id: "207757", eType: EXPECTED_ERROR, message: "Insufficient memory used for creating the request to obtain the MDR instance. "}
var E207758 = Global_error{id: "207758", eType: EXPECTED_ERROR, message: "Exception occurring when the MDRAgent obtained the MDR instance. "}
var E207759 = Global_error{id: "207759", eType: EXPECTED_ERROR, message: "Failure to read the streams of the response from the MDRAgent. "}
var E207760 = Global_error{id: "207760", eType: EXPECTED_ERROR, message: "NULL returned when the MDRAgent obtained the MDR instance. "}
var E207761 = Global_error{id: "207761", eType: EXPECTED_ERROR, message: "Uninitialized registry. "}
var E207762 = Global_error{id: "207762", eType: EXPECTED_ERROR, message: "Failure to create the request. "}
var E207763 = Global_error{id: "207763", eType: EXPECTED_ERROR, message: "Failure to read records from the table. "}
var E207764 = Global_error{id: "207764", eType: EXPECTED_ERROR, message: "Failure to add parameter values to ENIP streams. "}
var E207765 = Global_error{id: "207765", eType: EXPECTED_ERROR, message: "Failure to send the registry request. "}
var E207766 = Global_error{id: "207766", eType: EXPECTED_ERROR, message: "Failure to create the registration request to be sent to the MDRAgent or Naming. "}
var E207767 = Global_error{id: "207767", eType: EXPECTED_ERROR, message: "Failure to write request streams by the registry of the Corba. "}
var E207768 = Global_error{id: "207768", eType: EXPECTED_ERROR, message: "Failure to find the Corba service in the cosNaming. "}
var E207769 = Global_error{id: "207769", eType: EXPECTED_ERROR, message: "Unloaded the namingAgent. "}
var E207770 = Global_error{id: "207770", eType: EXPECTED_ERROR, message: "Blank enipServiceName. "}
var E207771 = Global_error{id: "207771", eType: EXPECTED_ERROR, message: "Failure to register the service to the cosNaming by the registry of the ENIP. "}
var E207772 = Global_error{id: "207772", eType: EXPECTED_ERROR, message: "Failure to deregister the service from the cosNaming by the registry of the ENIP. "}
var E207773 = Global_error{id: "207773", eType: EXPECTED_ERROR, message: "Failure to obtain the extended item from the DOID. "}
var E207774 = Global_error{id: "207774", eType: EXPECTED_ERROR, message: "Invalid length of the IOR in the DOID. "}
var E207775 = Global_error{id: "207775", eType: EXPECTED_ERROR, message: "Exception occurring when the Corba service was bound. "}
var E207776 = Global_error{id: "207776", eType: EXPECTED_ERROR, message: "Blank CorbaServiceInfo parameter. "}
var E207777 = Global_error{id: "207777", eType: EXPECTED_ERROR, message: "Failure to allocate memory for the control node. "}
var E207778 = Global_error{id: "207778", eType: EXPECTED_ERROR, message: "Blank CorbaObject. "}
var E207779 = Global_error{id: "207779", eType: EXPECTED_ERROR, message: "Invalid enipServiceName when the Corba service was registered. "}
var E207780 = Global_error{id: "207780", eType: EXPECTED_ERROR, message: "Timeout occurring during the addition of MDR meta data or the registration of naming information when the Corba service was registered. "}
var E207781 = Global_error{id: "207781", eType: EXPECTED_ERROR, message: "Failure to add MDR meta data when the Corba service was registered. "}
var E207782 = Global_error{id: "207782", eType: EXPECTED_ERROR, message: "Failure to register naming information when the Corba service was registered. "}
var E207783 = Global_error{id: "207783", eType: EXPECTED_ERROR, message: "Incorrect state when the registry of the Corba processed a response. "}
var E207784 = Global_error{id: "207784", eType: EXPECTED_ERROR, message: "Invalid ServiceName when the ENIP service was registered. "}
var E207785 = Global_error{id: "207785", eType: EXPECTED_ERROR, message: "Invalid InterfaceName when the ENIP service was registered. "}
var E207786 = Global_error{id: "207786", eType: EXPECTED_ERROR, message: "Inactive message processor. "}
var E207787 = Global_error{id: "207787", eType: EXPECTED_ERROR, message: "A parameter is invalid. "}
var E207788 = Global_error{id: "207788", eType: EXPECTED_ERROR, message: "The size of a packet that is to be sent exceeds the maximum size. "}
var E207789 = Global_error{id: "207789", eType: EXPECTED_ERROR, message: "Sending a message failed. "}
var E207790 = Global_error{id: "207790", eType: EXPECTED_ERROR, message: "Failure to initialize TCP information. "}
var E207791 = Global_error{id: "207791", eType: EXPECTED_ERROR, message: "Failure to initialize IDMAP. "}
var E207792 = Global_error{id: "207792", eType: EXPECTED_ERROR, message: "Failure to find comm thread. "}
var E207793 = Global_error{id: "207793", eType: EXPECTED_ERROR, message: "Failure to obtain the IP address. "}
var E207794 = Global_error{id: "207794", eType: EXPECTED_ERROR, message: "Incorrect schedule. "}
var E207795 = Global_error{id: "207795", eType: EXPECTED_ERROR, message: "Failure to obtain the maximum size of the package. "}
var E207796 = Global_error{id: "207796", eType: EXPECTED_ERROR, message: "Empty message. "}
var E207797 = Global_error{id: "207797", eType: EXPECTED_ERROR, message: "Failure to obtain memory from the memory pool. "}
var E207798 = Global_error{id: "207798", eType: EXPECTED_ERROR, message: "Local domain not set. "}
var E207799 = Global_error{id: "207799", eType: EXPECTED_ERROR, message: "Not local message. "}
var E207800 = Global_error{id: "207800", eType: EXPECTED_ERROR, message: "Failure to access the destination domain. "}
var E207801 = Global_error{id: "207801", eType: EXPECTED_ERROR, message: "Failure to access the source domain. "}
var E207802 = Global_error{id: "207802", eType: EXPECTED_ERROR, message: "Invalid domain. "}
var E207803 = Global_error{id: "207803", eType: EXPECTED_ERROR, message: "Existing domain. "}
var E207804 = Global_error{id: "207804", eType: EXPECTED_ERROR, message: "Domain not found. "}
var E207805 = Global_error{id: "207805", eType: EXPECTED_ERROR, message: "Invalid ENIP message. "}
var E207806 = Global_error{id: "207806", eType: EXPECTED_ERROR, message: "Failed to obtain TimeDelayEnable. "}
var E207807 = Global_error{id: "207807", eType: EXPECTED_ERROR, message: "Failed to obtain receive block sleep time. "}
var E207808 = Global_error{id: "207808", eType: EXPECTED_ERROR, message: "Empty message queue. "}
var E207809 = Global_error{id: "207809", eType: EXPECTED_ERROR, message: "Invalid thread ID. "}
var E207810 = Global_error{id: "207810", eType: EXPECTED_ERROR, message: "Invalid thread information. "}
var E207811 = Global_error{id: "207811", eType: EXPECTED_ERROR, message: "Invalid ProcessVerifyCode. "}
var E207812 = Global_error{id: "207812", eType: EXPECTED_ERROR, message: "Invalid SessionVerifyCode. "}
var E207813 = Global_error{id: "207813", eType: EXPECTED_ERROR, message: "Incorrect service data. "}
var E207814 = Global_error{id: "207814", eType: EXPECTED_ERROR, message: "Failure to occupy thread. "}
var E207815 = Global_error{id: "207815", eType: EXPECTED_ERROR, message: "Incorrect share service-related parameters. "}
var E207816 = Global_error{id: "207816", eType: EXPECTED_ERROR, message: "Invalid share parameter. "}
var E207817 = Global_error{id: "207817", eType: EXPECTED_ERROR, message: "Invalid message handling mode of the service. "}
var E207818 = Global_error{id: "207818", eType: EXPECTED_ERROR, message: "Invalid message handling of the session. "}
var E207819 = Global_error{id: "207819", eType: EXPECTED_ERROR, message: "Failure to allocate MHID. "}
var E207820 = Global_error{id: "207820", eType: EXPECTED_ERROR, message: "Invalid MessageManager parameter. "}
var E207821 = Global_error{id: "207821", eType: EXPECTED_ERROR, message: "Invalid Message parameter. "}
var E207822 = Global_error{id: "207822", eType: EXPECTED_ERROR, message: "Failure to start the worker thread. "}
var E207823 = Global_error{id: "207823", eType: EXPECTED_ERROR, message: "Unmatched ENIP CORE version. "}
var E207824 = Global_error{id: "207824", eType: EXPECTED_ERROR, message: "Inconsistent thread. "}
var E207825 = Global_error{id: "207825", eType: EXPECTED_ERROR, message: "Failure to obtain data of the schedule thread. "}
var E207826 = Global_error{id: "207826", eType: EXPECTED_ERROR, message: "Invalid first index of MHID. "}
var E207827 = Global_error{id: "207827", eType: EXPECTED_ERROR, message: "Invalid HA of MHID. "}
var E207828 = Global_error{id: "207828", eType: EXPECTED_ERROR, message: "Failure to rename file. "}
var E207829 = Global_error{id: "207829", eType: EXPECTED_ERROR, message: "Failure to write the file. "}
var E207830 = Global_error{id: "207830", eType: EXPECTED_ERROR, message: "Uninitialized HA thread. "}
var E207831 = Global_error{id: "207831", eType: EXPECTED_ERROR, message: "Failure to find MhID. "}
var E207832 = Global_error{id: "207832", eType: EXPECTED_ERROR, message: "Failed to allocate memory to sessions. "}
var E207833 = Global_error{id: "207833", eType: EXPECTED_ERROR, message: "Uninitialized non-status session. "}
var E207834 = Global_error{id: "207834", eType: EXPECTED_ERROR, message: "Empty peer message. "}
var E207835 = Global_error{id: "207835", eType: EXPECTED_ERROR, message: "Empty local message. "}
var E207836 = Global_error{id: "207836", eType: EXPECTED_ERROR, message: "Invalid peer message type for the non-state session. "}
var E207837 = Global_error{id: "207837", eType: EXPECTED_ERROR, message: "The dual queue is incorrect. "}
var E207838 = Global_error{id: "207838", eType: EXPECTED_ERROR, message: "Failure to handle the peer message. "}
var E207839 = Global_error{id: "207839", eType: EXPECTED_ERROR, message: "Failure to allocate memory for the dual queue. "}
var E207840 = Global_error{id: "207840", eType: EXPECTED_ERROR, message: "Invalid type of the local message. "}
var E207841 = Global_error{id: "207841", eType: EXPECTED_ERROR, message: "Failure to handle local messages. "}
var E207842 = Global_error{id: "207842", eType: EXPECTED_ERROR, message: "Failure to obtain the index of the double-type field. "}
var E207843 = Global_error{id: "207843", eType: EXPECTED_ERROR, message: "Failure to obtain the index of the char-type field. "}
var E207844 = Global_error{id: "207844", eType: EXPECTED_ERROR, message: "Failure to obtain Sqlite3_column_text of the char-type field. "}
var E207845 = Global_error{id: "207845", eType: EXPECTED_ERROR, message: "Failure to read the Statistic enable file. "}
var E207846 = Global_error{id: "207846", eType: EXPECTED_ERROR, message: "Incorrect file format. "}
var E207847 = Global_error{id: "207847", eType: EXPECTED_ERROR, message: "Failure to open the statistic enable file. "}
var E207848 = Global_error{id: "207848", eType: EXPECTED_ERROR, message: "Call rejection at the message level. "}
var E207849 = Global_error{id: "207849", eType: EXPECTED_ERROR, message: "Call rejection at the session level. "}
var E207850 = Global_error{id: "207850", eType: EXPECTED_ERROR, message: "OLC is disabled. "}
var E207851 = Global_error{id: "207851", eType: EXPECTED_ERROR, message: "Call rejection by the slow start filter. "}
var E207852 = Global_error{id: "207852", eType: EXPECTED_ERROR, message: "Increment SLC Call Count failed. "}
var E207853 = Global_error{id: "207853", eType: EXPECTED_ERROR, message: "Downloading incompatible information in xml file is skipped. "}
var E207854 = Global_error{id: "207854", eType: EXPECTED_ERROR, message: "Failure to create the TCP connection. "}
var E207855 = Global_error{id: "207855", eType: EXPECTED_ERROR, message: "Failure to invoke the function Accept. "}
var E207856 = Global_error{id: "207856", eType: EXPECTED_ERROR, message: "Failure to create the listener. "}
var E207857 = Global_error{id: "207857", eType: EXPECTED_ERROR, message: "Failure to generate the local address. "}
var E207858 = Global_error{id: "207858", eType: EXPECTED_ERROR, message: "The peer address fails to be generated. "}
var E207859 = Global_error{id: "207859", eType: EXPECTED_ERROR, message: "Failure to construct the socket. "}
var E207860 = Global_error{id: "207860", eType: EXPECTED_ERROR, message: "Failure to bind the socket. "}
var E207861 = Global_error{id: "207861", eType: EXPECTED_ERROR, message: "Failure to invoke the listener. "}
var E207862 = Global_error{id: "207862", eType: EXPECTED_ERROR, message: "Failure to create the TCPListener. "}
var E207863 = Global_error{id: "207863", eType: EXPECTED_ERROR, message: "Failure to connect to the socket. "}
var E207864 = Global_error{id: "207864", eType: EXPECTED_ERROR, message: "Failure to invoke the connection socket. "}
var E207865 = Global_error{id: "207865", eType: EXPECTED_ERROR, message: "Failure to create the InputListener. "}
var E207866 = Global_error{id: "207866", eType: EXPECTED_ERROR, message: "Destory UDPConnection in onAccept. "}
var E207867 = Global_error{id: "207867", eType: EXPECTED_ERROR, message: "Invalid handle of the UDPConnection. "}
var E207868 = Global_error{id: "207868", eType: EXPECTED_ERROR, message: "No EventHandler in the UDPConnection. "}
var E207869 = Global_error{id: "207869", eType: EXPECTED_ERROR, message: "Failure to construct the socket during the setup of the connection. "}
var E207870 = Global_error{id: "207870", eType: EXPECTED_ERROR, message: "Failure to bind the socket during the setup of the connection. "}
var E207871 = Global_error{id: "207871", eType: EXPECTED_ERROR, message: "Invalid EventHandler or remoteIP in TCPConnection connectEx. "}
var E207872 = Global_error{id: "207872", eType: EXPECTED_ERROR, message: "Invalid EventHandler in UDPConnection connectEx. "}
var E207873 = Global_error{id: "207873", eType: EXPECTED_ERROR, message: "Invalid IP or Acceptor in TCPConnection listenEx. "}
var E207874 = Global_error{id: "207874", eType: EXPECTED_ERROR, message: "Invalid IP or Acceptor in UDPConnection listenEx. "}
var E207875 = Global_error{id: "207875", eType: EXPECTED_ERROR, message: "Failure to obtain getFilters for OLC Performer. "}
var E207876 = Global_error{id: "207876", eType: EXPECTED_ERROR, message: "Incorrect NodeKey in the OLC table. "}
var E207877 = Global_error{id: "207877", eType: EXPECTED_ERROR, message: "Failed to load config data for OLC performer. "}
var E207878 = Global_error{id: "207878", eType: EXPECTED_ERROR, message: "Failed to allocate OLC config object. "}
var E207879 = Global_error{id: "207879", eType: EXPECTED_ERROR, message: "Failed to allocate OLC RecvFactory object. "}
var E207880 = Global_error{id: "207880", eType: EXPECTED_ERROR, message: "Failed to allocate OLC alarm object. "}
var E207881 = Global_error{id: "207881", eType: EXPECTED_ERROR, message: "Failed to allocate OLC timer object. "}
var E207882 = Global_error{id: "207882", eType: EXPECTED_ERROR, message: "Failed to allocate OLC sendFactory object. "}
var E207883 = Global_error{id: "207883", eType: EXPECTED_ERROR, message: "Failed to allocate OLC logger object. "}
var E207884 = Global_error{id: "207884", eType: EXPECTED_ERROR, message: "Call rejection by overload control method. "}
var E207885 = Global_error{id: "207885", eType: EXPECTED_ERROR, message: "Communication channel not available. "}
var E207886 = Global_error{id: "207886", eType: EXPECTED_ERROR, message: "Request message is not created. "}
var E207887 = Global_error{id: "207887", eType: EXPECTED_ERROR, message: "Call stub internal error. "}
var E207888 = Global_error{id: "207888", eType: EXPECTED_ERROR, message: "Send request message failed. "}
var E207889 = Global_error{id: "207889", eType: EXPECTED_ERROR, message: "Operation time out. "}
var E207890 = Global_error{id: "207890", eType: EXPECTED_ERROR, message: "The EORB framework cannot be used. "}
var E207891 = Global_error{id: "207891", eType: EXPECTED_ERROR, message: "Failure to perform the initialization in upgrades. "}
var E207892 = Global_error{id: "207892", eType: EXPECTED_ERROR, message: "Failed to run the system commands. "}
var E207893 = Global_error{id: "207893", eType: EXPECTED_ERROR, message: "Failure to initialize the XML platform. "}
var E207894 = Global_error{id: "207894", eType: EXPECTED_ERROR, message: "Failure to allocate memory. "}
var E207895 = Global_error{id: "207895", eType: EXPECTED_ERROR, message: "Failure to parse the XML file. "}
var E207896 = Global_error{id: "207896", eType: EXPECTED_ERROR, message: "Exception occurred in parsing the XML file. "}
var E207897 = Global_error{id: "207897", eType: EXPECTED_ERROR, message: "Invalid value in the XML file. "}
var E207898 = Global_error{id: "207898", eType: EXPECTED_ERROR, message: "Unparsed XML file. "}
var E207899 = Global_error{id: "207899", eType: EXPECTED_ERROR, message: "Incorrect format of a category file. "}
var E207900 = Global_error{id: "207900", eType: EXPECTED_ERROR, message: "Failure to open a category file. "}
var E207901 = Global_error{id: "207901", eType: EXPECTED_ERROR, message: "Incorrect CID or dpd file. "}
var E207902 = Global_error{id: "207902", eType: EXPECTED_ERROR, message: "Invalid connection type. "}
var E207903 = Global_error{id: "207903", eType: EXPECTED_ERROR, message: "Unparsed CID file. "}
var E207904 = Global_error{id: "207904", eType: EXPECTED_ERROR, message: "No attribute in the CID file. "}
var E207905 = Global_error{id: "207905", eType: EXPECTED_ERROR, message: "No Component in the CID file. "}
var E207906 = Global_error{id: "207906", eType: EXPECTED_ERROR, message: "No interface in CID file. "}
var E207907 = Global_error{id: "207907", eType: EXPECTED_ERROR, message: "No assemblyImp in the CID file. "}
var E207908 = Global_error{id: "207908", eType: EXPECTED_ERROR, message: "No propertyList in the CID file. "}
var E207909 = Global_error{id: "207909", eType: EXPECTED_ERROR, message: "No statistics in the CID file. "}
var E207910 = Global_error{id: "207910", eType: EXPECTED_ERROR, message: "Incorrect CID file format. "}
var E207911 = Global_error{id: "207911", eType: EXPECTED_ERROR, message: "Incorrect value obtained from the CID file. "}
var E207912 = Global_error{id: "207912", eType: EXPECTED_ERROR, message: "Unparsed dpd file. "}
var E207913 = Global_error{id: "207913", eType: EXPECTED_ERROR, message: "Module not found in the dpd file. "}
var E207914 = Global_error{id: "207914", eType: EXPECTED_ERROR, message: "No attribute in the dpd file. "}
var E207915 = Global_error{id: "207915", eType: EXPECTED_ERROR, message: "Incorrect module instance or property node. "}
var E207916 = Global_error{id: "207916", eType: EXPECTED_ERROR, message: "Incorrect dpd file format. "}
var E207917 = Global_error{id: "207917", eType: EXPECTED_ERROR, message: "Incorrect module instance subnode. "}
var E207918 = Global_error{id: "207918", eType: EXPECTED_ERROR, message: "Unparsed Ignorelist file. "}
var E207919 = Global_error{id: "207919", eType: EXPECTED_ERROR, message: "Unparsed moduleInfo.xml. "}
var E207920 = Global_error{id: "207920", eType: EXPECTED_ERROR, message: "Failure to create a node in ModuleInfo.xml. "}
var E207921 = Global_error{id: "207921", eType: EXPECTED_ERROR, message: "Incorrect MMMetaDataDB file format or data. "}
var E207922 = Global_error{id: "207922", eType: EXPECTED_ERROR, message: "Attribute lost in ModuleInfo.xml. "}
var E207923 = Global_error{id: "207923", eType: EXPECTED_ERROR, message: "Failure to add the module instance to ModuleInfo.xml. "}
var E207924 = Global_error{id: "207924", eType: EXPECTED_ERROR, message: "Failure to write data into moduleInfo.xml. "}
var E207925 = Global_error{id: "207925", eType: EXPECTED_ERROR, message: "Failure to switch files when refreshing moduleInfo.xml. "}
var E207926 = Global_error{id: "207926", eType: EXPECTED_ERROR, message: "moduleInfo.xml not initialized. "}
var E207927 = Global_error{id: "207927", eType: EXPECTED_ERROR, message: "moduleInfo.xml not found. "}
var E207928 = Global_error{id: "207928", eType: EXPECTED_ERROR, message: "The file fails to be deleted. "}
var E207929 = Global_error{id: "207929", eType: EXPECTED_ERROR, message: "module database file not found. "}
var E207930 = Global_error{id: "207930", eType: EXPECTED_ERROR, message: "Failure to open a persist file. "}
var E207931 = Global_error{id: "207931", eType: EXPECTED_ERROR, message: "naming.db file not found. "}
var E207932 = Global_error{id: "207932", eType: EXPECTED_ERROR, message: "Failure to open naming.db. "}
var E207933 = Global_error{id: "207933", eType: EXPECTED_ERROR, message: "DataBaseExecutor not initialized. "}
var E207934 = Global_error{id: "207934", eType: EXPECTED_ERROR, message: "Unparsed node.cfg. "}
var E207935 = Global_error{id: "207935", eType: EXPECTED_ERROR, message: "The SQL executor fails to be created during initialization of the naming persistency file instance. "}
var E207936 = Global_error{id: "207936", eType: EXPECTED_ERROR, message: "Failure to delete the file. "}
var E207937 = Global_error{id: "207937", eType: EXPECTED_ERROR, message: "Failure to obtain data. "}
var E207938 = Global_error{id: "207938", eType: EXPECTED_ERROR, message: "Node not found in node.cfg. "}
var E207939 = Global_error{id: "207939", eType: EXPECTED_ERROR, message: "File list not found in the output file. "}
var E207940 = Global_error{id: "207940", eType: EXPECTED_ERROR, message: "moduleInsList not found in output file. "}
var E207941 = Global_error{id: "207941", eType: EXPECTED_ERROR, message: "Blank attributes in the output file. "}
var E207942 = Global_error{id: "207942", eType: EXPECTED_ERROR, message: "Invalid output. "}
var E207943 = Global_error{id: "207943", eType: EXPECTED_ERROR, message: "Output directory not found. "}
var E207944 = Global_error{id: "207944", eType: EXPECTED_ERROR, message: "Failure to open the output file. "}
var E207945 = Global_error{id: "207945", eType: EXPECTED_ERROR, message: "Failure to write the output file. "}
var E207946 = Global_error{id: "207946", eType: EXPECTED_ERROR, message: "Category already loaded. "}
var E207947 = Global_error{id: "207947", eType: EXPECTED_ERROR, message: "Category not loaded. "}
var E207948 = Global_error{id: "207948", eType: EXPECTED_ERROR, message: "Failure to create the directory. "}
var E207949 = Global_error{id: "207949", eType: EXPECTED_ERROR, message: "Failure to access the directory. "}
var E207950 = Global_error{id: "207950", eType: EXPECTED_ERROR, message: "Unparsed service description file. "}
var E207951 = Global_error{id: "207951", eType: EXPECTED_ERROR, message: "Blank attribute of the Service. "}
var E207952 = Global_error{id: "207952", eType: EXPECTED_ERROR, message: "Incorrect service description file. "}
var E207953 = Global_error{id: "207953", eType: EXPECTED_ERROR, message: "Incorrect state value. "}
var E207954 = Global_error{id: "207954", eType: EXPECTED_ERROR, message: "Incorrect service name. "}
var E207955 = Global_error{id: "207955", eType: EXPECTED_ERROR, message: "Incorrect threadMode. "}
var E207956 = Global_error{id: "207956", eType: EXPECTED_ERROR, message: "Incorrect number of service arguments. "}
var E207957 = Global_error{id: "207957", eType: EXPECTED_ERROR, message: "Failure to execute SQL or obtain query data. "}
var E207958 = Global_error{id: "207958", eType: EXPECTED_ERROR, message: "Failure to query version number. "}
var E207959 = Global_error{id: "207959", eType: EXPECTED_ERROR, message: "Failure to create the executor for SQL. "}
var E207960 = Global_error{id: "207960", eType: EXPECTED_ERROR, message: "Failure to query moduleID. "}
var E207961 = Global_error{id: "207961", eType: EXPECTED_ERROR, message: "Failure to delete the copied file. "}
var E207962 = Global_error{id: "207962", eType: EXPECTED_ERROR, message: "Initialization function not called. "}
var E207963 = Global_error{id: "207963", eType: EXPECTED_ERROR, message: "DB file not found. "}
var E207964 = Global_error{id: "207964", eType: EXPECTED_ERROR, message: "Failure to open the persist file. "}
var E207965 = Global_error{id: "207965", eType: EXPECTED_ERROR, message: "Incorrect old package name. "}
var E207966 = Global_error{id: "207966", eType: EXPECTED_ERROR, message: "Failure to generate the checksum package. "}
var E207967 = Global_error{id: "207967", eType: EXPECTED_ERROR, message: "Invalid parameter in the function CDataBaseExecutor. "}
var E207968 = Global_error{id: "207968", eType: EXPECTED_ERROR, message: "Failure to invoke Sqlite3_reset when the executor was reset. "}
var E207969 = Global_error{id: "207969", eType: EXPECTED_ERROR, message: "Failure to invoke Sqlite3_step when the command was run. "}
var E207970 = Global_error{id: "207970", eType: EXPECTED_ERROR, message: "Failure to invoke Sqlite3_bind_text during binding. "}
var E207971 = Global_error{id: "207971", eType: EXPECTED_ERROR, message: "Failure to invoke Sqlite3_bind_int during binding. "}
var E207972 = Global_error{id: "207972", eType: EXPECTED_ERROR, message: "Failure to invoke Sqlite3_bind_int64 during binding. "}
var E207973 = Global_error{id: "207973", eType: EXPECTED_ERROR, message: "Failure to invoke Sqlite3_bind_double during binding. "}
var E207974 = Global_error{id: "207974", eType: EXPECTED_ERROR, message: "Invalid parameter in the function CDataBaseOperation. "}
var E207975 = Global_error{id: "207975", eType: EXPECTED_ERROR, message: "Failure to invoke Sqlite3_exec when the SQL command was run. "}
var E207976 = Global_error{id: "207976", eType: EXPECTED_ERROR, message: "Failure to invoke Sqlite3_prepare_v2. "}
var E207977 = Global_error{id: "207977", eType: EXPECTED_ERROR, message: "Failure to invoke Sqlite3_step. "}
var E207978 = Global_error{id: "207978", eType: EXPECTED_ERROR, message: "Incorrect SQL statement for updating the record. "}
var E207979 = Global_error{id: "207979", eType: EXPECTED_ERROR, message: "Incorrect SQL statement for deleting the record. "}
var E207980 = Global_error{id: "207980", eType: EXPECTED_ERROR, message: "The SQL statement for inserting the record is incorrect. "}
var E207981 = Global_error{id: "207981", eType: EXPECTED_ERROR, message: "Failure to invoke Sqlite3_open_v2 during initialization. "}
var E207982 = Global_error{id: "207982", eType: EXPECTED_ERROR, message: "Failure to invoke Sqlite3_close. "}
var E207983 = Global_error{id: "207983", eType: EXPECTED_ERROR, message: "Incorrect return value of the GetFieldIndex. "}
var E207984 = Global_error{id: "207984", eType: EXPECTED_ERROR, message: "Failure to query records. "}
var E207985 = Global_error{id: "207985", eType: EXPECTED_ERROR, message: "Out of memory. "}
var E207986 = Global_error{id: "207986", eType: EXPECTED_ERROR, message: "Failure to find the persistence file. "}
var E207987 = Global_error{id: "207987", eType: EXPECTED_ERROR, message: "Failure to open the persistence file. "}
var E207988 = Global_error{id: "207988", eType: EXPECTED_ERROR, message: "Failure to find the configuration persistence file. "}
var E207989 = Global_error{id: "207989", eType: EXPECTED_ERROR, message: "Invalid module package name. "}
var E207990 = Global_error{id: "207990", eType: EXPECTED_ERROR, message: "Invalid property definition. "}
var E207991 = Global_error{id: "207991", eType: EXPECTED_ERROR, message: "Invalid property initial data. "}
var E207992 = Global_error{id: "207992", eType: EXPECTED_ERROR, message: "Failure to create an executor for SQL operations. "}
var E207993 = Global_error{id: "207993", eType: EXPECTED_ERROR, message: "Successful function implementation . "}
var E207994 = Global_error{id: "207994", eType: EXPECTED_ERROR, message: "Failed to find the file. "}
var E207995 = Global_error{id: "207995", eType: EXPECTED_ERROR, message: "Invalid parameter. "}
var E207996 = Global_error{id: "207996", eType: EXPECTED_ERROR, message: "Internal exception. "}
var E207997 = Global_error{id: "207997", eType: EXPECTED_ERROR, message: "The number of arguments is incorrect. "}
var E207998 = Global_error{id: "207998", eType: EXPECTED_ERROR, message: "Container ID is greater than 1023. "}
var E207999 = Global_error{id: "207999", eType: EXPECTED_ERROR, message: "The environment variable of ENIP_HOME does not exist. "}
var E208000 = Global_error{id: "208000", eType: EXPECTED_ERROR, message: "ENIP_HOME directory does not exist. "}
var E208001 = Global_error{id: "208001", eType: EXPECTED_ERROR, message: "The variable name is empty. "}
var E208002 = Global_error{id: "208002", eType: EXPECTED_ERROR, message: "The variable cannot be found. "}
var E208003 = Global_error{id: "208003", eType: EXPECTED_ERROR, message: "The distributed object is empty. "}
var E208004 = Global_error{id: "208004", eType: EXPECTED_ERROR, message: "Messages should be saved. "}
var E208005 = Global_error{id: "208005", eType: EXPECTED_ERROR, message: "The service returns a general exception. "}
var E208006 = Global_error{id: "208006", eType: EXPECTED_ERROR, message: "The distributed object is not active. "}
var E208007 = Global_error{id: "208007", eType: EXPECTED_ERROR, message: "The user queue is full. "}
var E208008 = Global_error{id: "208008", eType: EXPECTED_ERROR, message: "Creating reply messages failed. "}
var E208009 = Global_error{id: "208009", eType: EXPECTED_ERROR, message: "Encoding message failed. "}
var E208010 = Global_error{id: "208010", eType: EXPECTED_ERROR, message: "Encoding messages failed. "}
var E208011 = Global_error{id: "208011", eType: EXPECTED_ERROR, message: "Writing data to the message stream failed. "}
var E208012 = Global_error{id: "208012", eType: EXPECTED_ERROR, message: "The distributed object is not a service. "}
var E208013 = Global_error{id: "208013", eType: EXPECTED_ERROR, message: "The service is inactive. "}
var E208014 = Global_error{id: "208014", eType: EXPECTED_ERROR, message: "The service is empty. "}
var E208015 = Global_error{id: "208015", eType: EXPECTED_ERROR, message: "Invoking onDeactivate failed. "}
var E208016 = Global_error{id: "208016", eType: EXPECTED_ERROR, message: "The message is empty. "}
var E208017 = Global_error{id: "208017", eType: EXPECTED_ERROR, message: "The message type is unmatched. "}
var E208018 = Global_error{id: "208018", eType: EXPECTED_ERROR, message: "The onSwitch return value failed. "}
var E208019 = Global_error{id: "208019", eType: EXPECTED_ERROR, message: "Invoking onCreated failed. "}
var E208020 = Global_error{id: "208020", eType: EXPECTED_ERROR, message: "The IEnvironment is empty. "}
var E208021 = Global_error{id: "208021", eType: EXPECTED_ERROR, message: "Node ID missing. "}
var E208022 = Global_error{id: "208022", eType: EXPECTED_ERROR, message: "The number of local IP addresses is incorrect. "}
var E208023 = Global_error{id: "208023", eType: EXPECTED_ERROR, message: "Invalid Node ID. "}
var E208024 = Global_error{id: "208024", eType: EXPECTED_ERROR, message: "Invalid of Node ID. "}
var E208025 = Global_error{id: "208025", eType: EXPECTED_ERROR, message: "HA config is missing. "}
var E208026 = Global_error{id: "208026", eType: EXPECTED_ERROR, message: "Local IP missing. "}
var E208027 = Global_error{id: "208027", eType: EXPECTED_ERROR, message: "Two identical local IP addresses. "}
var E208028 = Global_error{id: "208028", eType: EXPECTED_ERROR, message: "The first of the two local IP addresses is the same as node IP. "}
var E208029 = Global_error{id: "208029", eType: EXPECTED_ERROR, message: "The second of the two local IP addresses is the same as node IP. "}
var E208030 = Global_error{id: "208030", eType: EXPECTED_ERROR, message: "Reading node config failed. "}
var E208031 = Global_error{id: "208031", eType: EXPECTED_ERROR, message: "Creating logger failed. "}
var E208032 = Global_error{id: "208032", eType: EXPECTED_ERROR, message: "The common agent is empty. "}
var E208033 = Global_error{id: "208033", eType: EXPECTED_ERROR, message: "Float IP isn't in this host. "}
var E208034 = Global_error{id: "208034", eType: EXPECTED_ERROR, message: "The HA config is invalid. "}
var E208035 = Global_error{id: "208035", eType: EXPECTED_ERROR, message: "Message handler is inactive. "}
var E208036 = Global_error{id: "208036", eType: EXPECTED_ERROR, message: "The number of threads is incorrect. "}
var E208037 = Global_error{id: "208037", eType: EXPECTED_ERROR, message: "Loading a service failed. "}
var E208038 = Global_error{id: "208038", eType: EXPECTED_ERROR, message: "Occupying a service control module failed when a load is being loaded. "}
var E208039 = Global_error{id: "208039", eType: EXPECTED_ERROR, message: "Creating an instance of a service that is to be loaded failed. "}
var E208040 = Global_error{id: "208040", eType: EXPECTED_ERROR, message: "Unloading a service failed. "}
var E208041 = Global_error{id: "208041", eType: EXPECTED_ERROR, message: "Activating a service failed. "}
var E208042 = Global_error{id: "208042", eType: EXPECTED_ERROR, message: "A service that is to be deactivated is not scheduled. "}
var E208043 = Global_error{id: "208043", eType: EXPECTED_ERROR, message: "A service that is to be deactivated is not in the active state. "}
var E208044 = Global_error{id: "208044", eType: EXPECTED_ERROR, message: "Initializing the xerces dynamic library file failed. "}
var E208045 = Global_error{id: "208045", eType: EXPECTED_ERROR, message: "Processing a message for invoking a service failed. "}
var E208046 = Global_error{id: "208046", eType: EXPECTED_ERROR, message: "Initializing a container failed. "}
var E208047 = Global_error{id: "208047", eType: EXPECTED_ERROR, message: "Nonexistent service. "}
var E208048 = Global_error{id: "208048", eType: EXPECTED_ERROR, message: "Object is not active when deactivate. "}
var E208049 = Global_error{id: "208049", eType: EXPECTED_ERROR, message: "Deactivating an object failed. "}
var E208050 = Global_error{id: "208050", eType: EXPECTED_ERROR, message: "Nonexistent session. "}
var E208051 = Global_error{id: "208051", eType: EXPECTED_ERROR, message: "Failed to find the SMAgent. "}
var E208052 = Global_error{id: "208052", eType: EXPECTED_ERROR, message: "Creating message failed. "}
var E208053 = Global_error{id: "208053", eType: EXPECTED_ERROR, message: "Sending the message failed. "}
var E208054 = Global_error{id: "208054", eType: EXPECTED_ERROR, message: "Nonexistent load balance service. "}
var E208055 = Global_error{id: "208055", eType: EXPECTED_ERROR, message: "An error occurs when an XML file is parsed. "}
var E208056 = Global_error{id: "208056", eType: EXPECTED_ERROR, message: "Parsing XML failed. "}
var E208057 = Global_error{id: "208057", eType: EXPECTED_ERROR, message: "Reduplicate service. "}
var E208058 = Global_error{id: "208058", eType: EXPECTED_ERROR, message: "Invalid module id. "}
var E208059 = Global_error{id: "208059", eType: EXPECTED_ERROR, message: "Finding nodes failed. "}
var E208060 = Global_error{id: "208060", eType: EXPECTED_ERROR, message: "Finding child nodes failed. "}
var E208061 = Global_error{id: "208061", eType: EXPECTED_ERROR, message: "Multiple center containers in this node. "}
var E208062 = Global_error{id: "208062", eType: EXPECTED_ERROR, message: "Invalid ENIP_HOME. "}
var E208063 = Global_error{id: "208063", eType: EXPECTED_ERROR, message: "Invalid service name. "}
var E208064 = Global_error{id: "208064", eType: EXPECTED_ERROR, message: "No attribute in the node. "}
var E208065 = Global_error{id: "208065", eType: EXPECTED_ERROR, message: "Unmatched container type. "}
var E208066 = Global_error{id: "208066", eType: EXPECTED_ERROR, message: "Uninitialized LocalCfg. "}
var E208067 = Global_error{id: "208067", eType: EXPECTED_ERROR, message: "Invalid node. "}
var E208068 = Global_error{id: "208068", eType: EXPECTED_ERROR, message: "Invalid node name. "}
var E208069 = Global_error{id: "208069", eType: EXPECTED_ERROR, message: "No node information. "}
var E208070 = Global_error{id: "208070", eType: EXPECTED_ERROR, message: "The buffer pointer is empty. "}
var E208071 = Global_error{id: "208071", eType: EXPECTED_ERROR, message: "Invalid message buffer length. "}
var E208072 = Global_error{id: "208072", eType: EXPECTED_ERROR, message: "The request message is empty. "}
var E208073 = Global_error{id: "208073", eType: EXPECTED_ERROR, message: "The reply message is empty. "}
var E208074 = Global_error{id: "208074", eType: EXPECTED_ERROR, message: "Obtaining the local context failed. "}
var E208075 = Global_error{id: "208075", eType: EXPECTED_ERROR, message: "Obtaining INaming failed. "}
var E208076 = Global_error{id: "208076", eType: EXPECTED_ERROR, message: "Load balance object is empty. "}
var E208077 = Global_error{id: "208077", eType: EXPECTED_ERROR, message: "Failed to malloc memory. "}
var E208078 = Global_error{id: "208078", eType: EXPECTED_ERROR, message: "Finding active DOIDs failed. "}
var E208079 = Global_error{id: "208079", eType: EXPECTED_ERROR, message: "Repeat loading. "}
var E208080 = Global_error{id: "208080", eType: EXPECTED_ERROR, message: "Invalid node information. "}
var E208081 = Global_error{id: "208081", eType: EXPECTED_ERROR, message: "Invalid service information. "}
var E208082 = Global_error{id: "208082", eType: EXPECTED_ERROR, message: "Not unique instance. "}
var E208083 = Global_error{id: "208083", eType: EXPECTED_ERROR, message: "Failure to recover the instance. "}
var E208084 = Global_error{id: "208084", eType: EXPECTED_ERROR, message: "Failure to find active DOIDs. "}
var E208085 = Global_error{id: "208085", eType: EXPECTED_ERROR, message: "Creating timer hash_table failed. "}
var E208086 = Global_error{id: "208086", eType: EXPECTED_ERROR, message: "Creating timer thread failed. "}
var E208087 = Global_error{id: "208087", eType: EXPECTED_ERROR, message: "Parameters are invalid and timer interval is zero. "}
var E208088 = Global_error{id: "208088", eType: EXPECTED_ERROR, message: "Invalid param and timer interval too great. "}
var E208089 = Global_error{id: "208089", eType: EXPECTED_ERROR, message: "Invalid parameter and empty callback object. "}
var E208090 = Global_error{id: "208090", eType: EXPECTED_ERROR, message: "Insufficient resource to create the timer. "}
var E208091 = Global_error{id: "208091", eType: EXPECTED_ERROR, message: "Invalid param, timer interval equals zero. "}
var E208092 = Global_error{id: "208092", eType: EXPECTED_ERROR, message: "Invalid timer verify code. "}
var E208093 = Global_error{id: "208093", eType: EXPECTED_ERROR, message: "Invalid timer ID. "}
var E208094 = Global_error{id: "208094", eType: EXPECTED_ERROR, message: "Timer ID is invalid. "}
var E208095 = Global_error{id: "208095", eType: EXPECTED_ERROR, message: "Timer node is empty. "}
var E208096 = Global_error{id: "208096", eType: EXPECTED_ERROR, message: "The timer node is empty. "}
var E208097 = Global_error{id: "208097", eType: EXPECTED_ERROR, message: "Connection times out. "}
var E208098 = Global_error{id: "208098", eType: EXPECTED_ERROR, message: "Creating the connection failed. "}
var E208099 = Global_error{id: "208099", eType: EXPECTED_ERROR, message: "Invalid socket. "}
var E208100 = Global_error{id: "208100", eType: EXPECTED_ERROR, message: "Invalid IP address. "}
var E208101 = Global_error{id: "208101", eType: EXPECTED_ERROR, message: "Invalid port. "}
var E208102 = Global_error{id: "208102", eType: EXPECTED_ERROR, message: "Obtaining a dependent interface failed. "}
var E208103 = Global_error{id: "208103", eType: EXPECTED_ERROR, message: "Obtaining short and long names of an attribute failed. "}
var E208104 = Global_error{id: "208104", eType: EXPECTED_ERROR, message: "Obtaining the long name of an external attribute through its short name failed. "}
var E208105 = Global_error{id: "208105", eType: EXPECTED_ERROR, message: "Obtaining the long name of an external attribute failed. "}
var E208106 = Global_error{id: "208106", eType: EXPECTED_ERROR, message: "Reply exception. "}
var E208107 = Global_error{id: "208107", eType: EXPECTED_ERROR, message: "Invoking O&M times out. "}
var E208108 = Global_error{id: "208108", eType: EXPECTED_ERROR, message: "Finding the service manager service failed. "}
var E208109 = Global_error{id: "208109", eType: EXPECTED_ERROR, message: "Invalid version. "}
var E208110 = Global_error{id: "208110", eType: EXPECTED_ERROR, message: "Invalid trace task. "}
var E208111 = Global_error{id: "208111", eType: EXPECTED_ERROR, message: "Invalid trace addition information. "}
var E208112 = Global_error{id: "208112", eType: EXPECTED_ERROR, message: "Invalid trace creater. "}
var E208113 = Global_error{id: "208113", eType: EXPECTED_ERROR, message: "Invalid input parameter value. "}
var E208114 = Global_error{id: "208114", eType: EXPECTED_ERROR, message: "Existent tracing task. "}
var E208115 = Global_error{id: "208115", eType: EXPECTED_ERROR, message: "Blank tracing condition. "}
var E208116 = Global_error{id: "208116", eType: EXPECTED_ERROR, message: "No matching tracing task. "}
var E208117 = Global_error{id: "208117", eType: EXPECTED_ERROR, message: "When any license operation fails. "}
var E208118 = Global_error{id: "208118", eType: EXPECTED_ERROR, message: "The license is already registered for the given listener. "}
var E208119 = Global_error{id: "208119", eType: EXPECTED_ERROR, message: "The given license or license product component does not exist. "}
var E208120 = Global_error{id: "208120", eType: EXPECTED_ERROR, message: "The requested license operation could not complete in this attempt. "}
var E208121 = Global_error{id: "208121", eType: EXPECTED_ERROR, message: "License is not found. "}
var E208122 = Global_error{id: "208122", eType: EXPECTED_ERROR, message: "License is already loaded. "}
var E208123 = Global_error{id: "208123", eType: EXPECTED_ERROR, message: "Operation is not allowed. "}
var E208124 = Global_error{id: "208124", eType: EXPECTED_ERROR, message: "Duplicate audit request. "}
var E208125 = Global_error{id: "208125", eType: EXPECTED_ERROR, message: "Feature is expired. "}
var E208126 = Global_error{id: "208126", eType: EXPECTED_ERROR, message: "The given resource does not exist. "}
var E208127 = Global_error{id: "208127", eType: EXPECTED_ERROR, message: "The given function does not exist. "}
var E208128 = Global_error{id: "208128", eType: EXPECTED_ERROR, message: "Disk operation failed. "}
var E208129 = Global_error{id: "208129", eType: EXPECTED_ERROR, message: "License file copy failed. "}
var E208130 = Global_error{id: "208130", eType: EXPECTED_ERROR, message: "License is in use. "}
var E208131 = Global_error{id: "208131", eType: EXPECTED_ERROR, message: "Internal error. "}
var E208132 = Global_error{id: "208132", eType: EXPECTED_ERROR, message: "Invalid argument. "}
var E208133 = Global_error{id: "208133", eType: EXPECTED_ERROR, message: "License feature does not exist. "}
var E208134 = Global_error{id: "208134", eType: EXPECTED_ERROR, message: "A general error has occurred during the ModuleManager operation. This is a generic error code indicating many common failures. "}
var E208135 = Global_error{id: "208135", eType: EXPECTED_ERROR, message: "A general internal error occurred when the ModuleManager processes an operation command. This is a generic error code indicating many common failures that occur during the internal logic execution. "}
var E208136 = Global_error{id: "208136", eType: EXPECTED_ERROR, message: "The ModuleManager operation times out. "}
var E208137 = Global_error{id: "208137", eType: EXPECTED_ERROR, message: "Failed to bind the target service when sending a message. "}
var E208138 = Global_error{id: "208138", eType: EXPECTED_ERROR, message: "Dpd file does not exist. "}
var E208139 = Global_error{id: "208139", eType: EXPECTED_ERROR, message: "MM Config data synchronization failure. "}
var E208140 = Global_error{id: "208140", eType: EXPECTED_ERROR, message: "Invalid input parameters. "}
var E208141 = Global_error{id: "208141", eType: EXPECTED_ERROR, message: "The ModuleManager parses the module CID and DPD files during various operations related to the lifecycle and property. This error code is returned when the ModuleManager fails to parse these files. "}
var E208142 = Global_error{id: "208142", eType: EXPECTED_ERROR, message: "Failed to write data in the specified input file. "}
var E208143 = Global_error{id: "208143", eType: EXPECTED_ERROR, message: "When some lifecycle operations are performed on a module instance, the module instance will be locked. If any other operation is performed on the locked module instance, the ModuleManager returns this error code. "}
var E208144 = Global_error{id: "208144", eType: EXPECTED_ERROR, message: "Some parameters provided for the operation are invalid. For example, when the queryLifeCycle operation is performed on the ENIPCore module, this error code is returned. "}
var E208145 = Global_error{id: "208145", eType: EXPECTED_ERROR, message: "When the ModuleManager restarts, it tries to reload all module instances to the status before the restart. If this operation fails, this error code is returned. "}
var E208146 = Global_error{id: "208146", eType: EXPECTED_ERROR, message: "The load operation is not complete. "}
var E208147 = Global_error{id: "208147", eType: EXPECTED_ERROR, message: "Failed to perform the specified operation in the ModuleManager database. "}
var E208148 = Global_error{id: "208148", eType: EXPECTED_ERROR, message: "User module is failed to get interface and property dependency information from owner module. "}
var E208149 = Global_error{id: "208149", eType: EXPECTED_ERROR, message: "The package does not exist. "}
var E208150 = Global_error{id: "208150", eType: EXPECTED_ERROR, message: "The current service or module state does not support the specified operation. "}
var E208151 = Global_error{id: "208151", eType: EXPECTED_ERROR, message: "Failed to perform the specified operation on the module instance. "}
var E208152 = Global_error{id: "208152", eType: EXPECTED_ERROR, message: "Duplicate operation is performed on a module instance. "}
var E208153 = Global_error{id: "208153", eType: EXPECTED_ERROR, message: "Some modules are configured as singleton in their CID files. This error code is returned when a second instance is loaded to a singleton module. "}
var E208154 = Global_error{id: "208154", eType: EXPECTED_ERROR, message: "The ModuleManager loads the table and item properties when the module is loaded. When the ModuleManager fails to load the properties in config subsystem, this error code is returned. "}
var E208155 = Global_error{id: "208155", eType: EXPECTED_ERROR, message: "Failed to load statistics item at the statistics subsystem during the module load or upgrade. "}
var E208156 = Global_error{id: "208156", eType: EXPECTED_ERROR, message: "Failed to load the component instance. "}
var E208157 = Global_error{id: "208157", eType: EXPECTED_ERROR, message: "Failed to unload the component instance. "}
var E208158 = Global_error{id: "208158", eType: EXPECTED_ERROR, message: "Failed to unload the statistics category. "}
var E208159 = Global_error{id: "208159", eType: EXPECTED_ERROR, message: "Failed to unload the property. "}
var E208160 = Global_error{id: "208160", eType: EXPECTED_ERROR, message: "Failed to activate the component. "}
var E208161 = Global_error{id: "208161", eType: EXPECTED_ERROR, message: "The package is not installed. "}
var E208162 = Global_error{id: "208162", eType: EXPECTED_ERROR, message: "Failed to deactivate the component. "}
var E208163 = Global_error{id: "208163", eType: EXPECTED_ERROR, message: "For some module operations, the module bearing the specified NEID, NEType, CompontentName, and version configuration does not exist. "}
var E208164 = Global_error{id: "208164", eType: EXPECTED_ERROR, message: "The property dependency already exists. "}
var E208165 = Global_error{id: "208165", eType: EXPECTED_ERROR, message: "The order of the module instance names for the upgrade operation is incorrect. "}
var E208166 = Global_error{id: "208166", eType: EXPECTED_ERROR, message: "Each property in the CID file specifies a set of validation rules. The load or upgradePrepare operation returns an error if the initial value of the property does not conform to the validation rules. "}
var E208167 = Global_error{id: "208167", eType: EXPECTED_ERROR, message: "Failed to handle the dependency relationship. "}
var E208168 = Global_error{id: "208168", eType: EXPECTED_ERROR, message: "During the upgradePrepare operation, the ModuleManager invokes the replacePrepare function at the SM. If replacePrepare function fails, this error code is returned. "}
var E208169 = Global_error{id: "208169", eType: EXPECTED_ERROR, message: "During the upgradeCancel operation, the ModuleManager invokes the replaceCancel operation at the SM. If the replaceCancel operation fails, this error code is returned. "}
var E208170 = Global_error{id: "208170", eType: EXPECTED_ERROR, message: "Failed to perform the upgradeConfirm operation. "}
var E208171 = Global_error{id: "208171", eType: EXPECTED_ERROR, message: "Module is locked. "}
var E208172 = Global_error{id: "208172", eType: EXPECTED_ERROR, message: "The upgrade rollback operation is not allowed. "}
var E208173 = Global_error{id: "208173", eType: EXPECTED_ERROR, message: "The upgradePrepare operation is not allowed. "}
var E208174 = Global_error{id: "208174", eType: EXPECTED_ERROR, message: "Failed to perform the offlineUpgradePrepare operation on the component. "}
var E208175 = Global_error{id: "208175", eType: EXPECTED_ERROR, message: "Failed to perform the offlineUpgradeCancel operation on the component. "}
var E208176 = Global_error{id: "208176", eType: EXPECTED_ERROR, message: "Failed to perform the offlineUpgradeConfirm operation on the component. "}
var E208177 = Global_error{id: "208177", eType: EXPECTED_ERROR, message: "The installation package already exists. "}
var E208178 = Global_error{id: "208178", eType: EXPECTED_ERROR, message: "Failed to decompress the package. "}
var E208179 = Global_error{id: "208179", eType: EXPECTED_ERROR, message: "Failed to transfer the component package. "}
var E208180 = Global_error{id: "208180", eType: EXPECTED_ERROR, message: "Failed to delete the package. "}
var E208181 = Global_error{id: "208181", eType: EXPECTED_ERROR, message: "Failed to execute the md5sum command on the package. "}
var E208182 = Global_error{id: "208182", eType: EXPECTED_ERROR, message: "Failed to delete the package during the rollback operation. "}
var E208183 = Global_error{id: "208183", eType: EXPECTED_ERROR, message: "The ModuleManager dependency is incorrect. "}
var E208184 = Global_error{id: "208184", eType: EXPECTED_ERROR, message: "The service package does not exist. "}
var E208185 = Global_error{id: "208185", eType: EXPECTED_ERROR, message: "Move install package or dpd file failed. "}
var E208186 = Global_error{id: "208186", eType: EXPECTED_ERROR, message: "MM upgrade prepare component on active node failure. "}
var E208187 = Global_error{id: "208187", eType: EXPECTED_ERROR, message: "MM upgrade cancel component on active node failure. "}
var E208188 = Global_error{id: "208188", eType: EXPECTED_ERROR, message: "MM upgrade confirm component on active node failure. "}
var E208189 = Global_error{id: "208189", eType: EXPECTED_ERROR, message: "Invalid parameter during operation processing. "}
var E208190 = Global_error{id: "208190", eType: EXPECTED_ERROR, message: "MM operation failed in the config subsystem. "}
var E208191 = Global_error{id: "208191", eType: EXPECTED_ERROR, message: "Operation is failed at module manager due to insufficient disk space. "}
var E208192 = Global_error{id: "208192", eType: EXPECTED_ERROR, message: "Read download file failure. "}
var E208193 = Global_error{id: "208193", eType: EXPECTED_ERROR, message: "Config data object exist. "}
var E208194 = Global_error{id: "208194", eType: EXPECTED_ERROR, message: "Input parameter does not exist. "}
var E208195 = Global_error{id: "208195", eType: EXPECTED_ERROR, message: "Version type is already current. "}
var E208196 = Global_error{id: "208196", eType: EXPECTED_ERROR, message: "Draft Version data is not available. "}
var E208197 = Global_error{id: "208197", eType: EXPECTED_ERROR, message: "Send Validation Message failure. "}
var E208198 = Global_error{id: "208198", eType: EXPECTED_ERROR, message: "Send message failure. "}
var E208199 = Global_error{id: "208199", eType: EXPECTED_ERROR, message: "Read message failure. "}
var E208200 = Global_error{id: "208200", eType: EXPECTED_ERROR, message: "No configuration data is present for the given version. "}
var E208201 = Global_error{id: "208201", eType: EXPECTED_ERROR, message: "Given property is not present in the topology. "}
var E208202 = Global_error{id: "208202", eType: EXPECTED_ERROR, message: "No access permissions to the download binary file. "}
var E208203 = Global_error{id: "208203", eType: EXPECTED_ERROR, message: "Delete download file failed. "}
var E208204 = Global_error{id: "208204", eType: EXPECTED_ERROR, message: "Download operation data file is invalid. "}
var E208205 = Global_error{id: "208205", eType: EXPECTED_ERROR, message: "Rename download file failed. "}
var E208206 = Global_error{id: "208206", eType: EXPECTED_ERROR, message: "Reached max label number at NE level. "}
var E208207 = Global_error{id: "208207", eType: EXPECTED_ERROR, message: "Reached max label number at module level. "}
var E208208 = Global_error{id: "208208", eType: EXPECTED_ERROR, message: "Upload file creation failed. "}
var E208209 = Global_error{id: "208209", eType: EXPECTED_ERROR, message: "Create directory failed during upload operation. "}
var E208210 = Global_error{id: "208210", eType: EXPECTED_ERROR, message: "The number of history versions of the module reaches the maximum. "}
var E208211 = Global_error{id: "208211", eType: EXPECTED_ERROR, message: "More records defined than max number of records. "}
var E208212 = Global_error{id: "208212", eType: EXPECTED_ERROR, message: "Property schema type mismatch. "}
var E208213 = Global_error{id: "208213", eType: EXPECTED_ERROR, message: "Property mismatch between source and destination. "}
var E208214 = Global_error{id: "208214", eType: EXPECTED_ERROR, message: "When service validation for config data fails. "}
var E208215 = Global_error{id: "208215", eType: EXPECTED_ERROR, message: "Validation error during property management. "}
var E208216 = Global_error{id: "208216", eType: EXPECTED_ERROR, message: "Validation rule is invalid. "}
var E208217 = Global_error{id: "208217", eType: EXPECTED_ERROR, message: "Binding service failure. "}
var E208218 = Global_error{id: "208218", eType: EXPECTED_ERROR, message: "MM validation is timed out. "}
var E208219 = Global_error{id: "208219", eType: EXPECTED_ERROR, message: "Validation rule exists. "}
var E208220 = Global_error{id: "208220", eType: EXPECTED_ERROR, message: "Validation rule does not exist. "}
var E208221 = Global_error{id: "208221", eType: EXPECTED_ERROR, message: "MM failed to read file. "}
var E208222 = Global_error{id: "208222", eType: EXPECTED_ERROR, message: "Validation failed. "}
var E208223 = Global_error{id: "208223", eType: EXPECTED_ERROR, message: "Service validation general exception. "}
var E208224 = Global_error{id: "208224", eType: EXPECTED_ERROR, message: "Validation rule is empty. "}
var E208225 = Global_error{id: "208225", eType: EXPECTED_ERROR, message: "Bind to SM center service failed. "}
var E208226 = Global_error{id: "208226", eType: EXPECTED_ERROR, message: "Query dependency information failed for module instance. "}
var E208227 = Global_error{id: "208227", eType: EXPECTED_ERROR, message: "Life cycle operation is not allowed. "}
var E208228 = Global_error{id: "208228", eType: EXPECTED_ERROR, message: "Failed to load, activate, deactivate, or unload a service. "}
var E208229 = Global_error{id: "208229", eType: EXPECTED_ERROR, message: "An internal error occurred. "}
var E208230 = Global_error{id: "208230", eType: EXPECTED_ERROR, message: "The application service does not exist. "}
var E208231 = Global_error{id: "208231", eType: EXPECTED_ERROR, message: "The service or application TAR package does not exist. "}
var E208232 = Global_error{id: "208232", eType: EXPECTED_ERROR, message: "The current service state does not support the operation. "}
var E208233 = Global_error{id: "208233", eType: EXPECTED_ERROR, message: "Failed to obtain the service TAR package from the SMCenter node. "}
var E208234 = Global_error{id: "208234", eType: EXPECTED_ERROR, message: "Failed to decompress the application TAR package. "}
var E208235 = Global_error{id: "208235", eType: EXPECTED_ERROR, message: "Failed to request a core module at the lower layer to load a service instance. "}
var E208236 = Global_error{id: "208236", eType: EXPECTED_ERROR, message: "Failed to update the database status. "}
var E208237 = Global_error{id: "208237", eType: EXPECTED_ERROR, message: "Failed to request a core module at the lower layer to activate a service instance. "}
var E208238 = Global_error{id: "208238", eType: EXPECTED_ERROR, message: "Failed to register the service IDL file with the MDRAgent. "}
var E208239 = Global_error{id: "208239", eType: EXPECTED_ERROR, message: "Failed to request a core module at the lower layer to deactivate a service instance. "}
var E208240 = Global_error{id: "208240", eType: EXPECTED_ERROR, message: "Failed to request a core module at the lower layer to unload a service instance. "}
var E208241 = Global_error{id: "208241", eType: EXPECTED_ERROR, message: "The TAR package of the application contains invalid contents. "}
var E208242 = Global_error{id: "208242", eType: EXPECTED_ERROR, message: "Service names are inconsistent. "}
var E208243 = Global_error{id: "208243", eType: EXPECTED_ERROR, message: "The service package is in use. "}
var E208244 = Global_error{id: "208244", eType: EXPECTED_ERROR, message: "Maximum value for instance ids is over. "}
var E208245 = Global_error{id: "208245", eType: EXPECTED_ERROR, message: "Failed to perform the replacePrepare operation on a service. "}
var E208246 = Global_error{id: "208246", eType: EXPECTED_ERROR, message: "The offline replace prepare operation is not performed on the service. "}
var E208247 = Global_error{id: "208247", eType: EXPECTED_ERROR, message: "The service attribute name is not found in the given Module. "}
var E208248 = Global_error{id: "208248", eType: EXPECTED_ERROR, message: "The SMCenter data is not synchronized to the SMDaemon. "}
var E208249 = Global_error{id: "208249", eType: EXPECTED_ERROR, message: "Statistics service operation failure. "}
var E208250 = Global_error{id: "208250", eType: EXPECTED_ERROR, message: "Failed to perform the bind operation in the SQLite database. "}
var E208251 = Global_error{id: "208251", eType: EXPECTED_ERROR, message: "Failed to read and write a message. "}
var E208252 = Global_error{id: "208252", eType: EXPECTED_ERROR, message: "Statistics internal error. Example:insufficient memory. "}
var E208253 = Global_error{id: "208253", eType: EXPECTED_ERROR, message: "The given statistics parameters are invalid. "}
var E208254 = Global_error{id: "208254", eType: EXPECTED_ERROR, message: "This value is returned when the category is not loaded during any statistic operation. "}
var E208255 = Global_error{id: "208255", eType: EXPECTED_ERROR, message: "This value is returned, if the category is already loaded. "}
var E208256 = Global_error{id: "208256", eType: EXPECTED_ERROR, message: "This value is returned if the category is already enabled for the given filter condition and id. "}
var E208257 = Global_error{id: "208257", eType: EXPECTED_ERROR, message: "This value is returned if the category is not enabled for specified filter condition. "}
var E208258 = Global_error{id: "208258", eType: EXPECTED_ERROR, message: "The function returns this value if the maximum number of category is already loaded. "}
var E208259 = Global_error{id: "208259", eType: EXPECTED_ERROR, message: "If a category with more than 1024 items is loaded then the statistics returns this error. "}
var E208260 = Global_error{id: "208260", eType: EXPECTED_ERROR, message: "This value is returned when a category with more than 32 filters is loaded. "}
var E208261 = Global_error{id: "208261", eType: EXPECTED_ERROR, message: "This value is returned if the file selected, from which the category is to be loaded is invalid. "}
var E208262 = Global_error{id: "208262", eType: EXPECTED_ERROR, message: "This value is returned, if statistic service is not able to read the file. "}
var E208263 = Global_error{id: "208263", eType: EXPECTED_ERROR, message: "This value is returned when a statistic operation is done on standby node. "}
var E208264 = Global_error{id: "208264", eType: EXPECTED_ERROR, message: "When max number of filter conditions per user and category is exceeded. "}
var E208265 = Global_error{id: "208265", eType: EXPECTED_ERROR, message: "The SOAP message is not complete. "}
var E208266 = Global_error{id: "208266", eType: EXPECTED_ERROR, message: "Soap message is complete. "}
var E208267 = Global_error{id: "208267", eType: EXPECTED_ERROR, message: "Host name is invalid. "}
var E208268 = Global_error{id: "208268", eType: EXPECTED_ERROR, message: "Conflicted SOAP service name. "}
var E208269 = Global_error{id: "208269", eType: EXPECTED_ERROR, message: "Failed to write data in ENIP message stream when creating a message. "}
var E208270 = Global_error{id: "208270", eType: EXPECTED_ERROR, message: "Memory allocation has failed. "}
var E208271 = Global_error{id: "208271", eType: EXPECTED_ERROR, message: "Failed to create a request or send a request to the ENIP service. "}
var E208272 = Global_error{id: "208272", eType: EXPECTED_ERROR, message: "Failed to open the WSDL file. "}
var E208273 = Global_error{id: "208273", eType: EXPECTED_ERROR, message: "Failed to query the ENIP service through the web service. "}
var E208274 = Global_error{id: "208274", eType: EXPECTED_ERROR, message: "Failed to send a request to the ENIP service. "}
var E208275 = Global_error{id: "208275", eType: EXPECTED_ERROR, message: "Failed to send reply message to ENIP service. "}
var E208276 = Global_error{id: "208276", eType: EXPECTED_ERROR, message: "The interface name in the SOAPAction header contains more than 256 characters. "}
var E208277 = Global_error{id: "208277", eType: EXPECTED_ERROR, message: "The host information in the HTTP/HTTPS header is lost. "}
var E208278 = Global_error{id: "208278", eType: EXPECTED_ERROR, message: "The SOAPAction in the HTTP/HTTPS header is incorrect. "}
var E208279 = Global_error{id: "208279", eType: EXPECTED_ERROR, message: "The SOAPAction is lost in the HTTP/HTTPS header. "}
var E208280 = Global_error{id: "208280", eType: EXPECTED_ERROR, message: "The Content-type header in HTTP/HTTPS message is incorrect. "}
var E208281 = Global_error{id: "208281", eType: EXPECTED_ERROR, message: "The HTTP/HTTPS message does not contain the content length or Transfer Encoding header. "}
var E208282 = Global_error{id: "208282", eType: EXPECTED_ERROR, message: "The HTTP/HTTPS message contains repeated Transfer Encoding headers. "}
var E208283 = Global_error{id: "208283", eType: EXPECTED_ERROR, message: "The value of the Transfer Encoding header in the HTTP/HTTPS message is invalid. "}
var E208284 = Global_error{id: "208284", eType: EXPECTED_ERROR, message: "Operation fails. "}
var E208285 = Global_error{id: "208285", eType: EXPECTED_ERROR, message: "The HTTP/HTTPS message contains repeated Content-length headers. "}
var E208286 = Global_error{id: "208286", eType: EXPECTED_ERROR, message: "The value of the Content-length header in the HTTP/HTTPS message is invalid. "}
var E208287 = Global_error{id: "208287", eType: EXPECTED_ERROR, message: "The chunk data length is not equal to the chunk data size. "}
var E208288 = Global_error{id: "208288", eType: EXPECTED_ERROR, message: "dictID in post URI is invalid. "}
var E208289 = Global_error{id: "208289", eType: EXPECTED_ERROR, message: "SOAP request message transformed from ENIP request message is too long. "}
var E208290 = Global_error{id: "208290", eType: EXPECTED_ERROR, message: "ENIP request message is too long. "}
var E208291 = Global_error{id: "208291", eType: EXPECTED_ERROR, message: "Allocation of ENIP request call failed. "}
var E208292 = Global_error{id: "208292", eType: EXPECTED_ERROR, message: "Chunked message is too long. "}
var E208293 = Global_error{id: "208293", eType: EXPECTED_ERROR, message: "Failed to create a request to register the SOAP service with the naming database. "}
var E208294 = Global_error{id: "208294", eType: EXPECTED_ERROR, message: "Failed to allocate SOAP service during dynamic registration. "}
var E208295 = Global_error{id: "208295", eType: EXPECTED_ERROR, message: "Failed to write data into the stream when registering the SOAP service with the naming database. "}
var E208296 = Global_error{id: "208296", eType: EXPECTED_ERROR, message: "Failed to send a request to register the SOAP service with the Naming Center. "}
var E208297 = Global_error{id: "208297", eType: EXPECTED_ERROR, message: "SOAPAdapter is running in master node. "}
var E208298 = Global_error{id: "208298", eType: EXPECTED_ERROR, message: "Failed to create a request when unregistering SOAP service to naming. "}
var E208299 = Global_error{id: "208299", eType: EXPECTED_ERROR, message: "Failed to send a request when unregistering SOAP service to naming. "}
var E208300 = Global_error{id: "208300", eType: EXPECTED_ERROR, message: "The request to dynamically register the SOAP service is invalid. "}
var E208301 = Global_error{id: "208301", eType: EXPECTED_ERROR, message: "Failed to read required parameters from the request to dynamically deregister a service. "}
var E208302 = Global_error{id: "208302", eType: EXPECTED_ERROR, message: "Failed to read parameter for dynamic register ENIP service. "}
var E208303 = Global_error{id: "208303", eType: EXPECTED_ERROR, message: "Failed to allocate ENIP service during dynamic registration. "}
var E208304 = Global_error{id: "208304", eType: EXPECTED_ERROR, message: "Failed to create a response corresponding to the operation of obtaining registered SOAP services. For IDL, the operation is getRegistedSoapService. "}
var E208305 = Global_error{id: "208305", eType: EXPECTED_ERROR, message: "Failed to write data to reply message, when soap service was received. "}
var E208306 = Global_error{id: "208306", eType: EXPECTED_ERROR, message: "Failed to send reply message for getRegistedSoapService operation. "}
var E208307 = Global_error{id: "208307", eType: EXPECTED_ERROR, message: "Failed to create reply message for getENIPService operation. "}
var E208308 = Global_error{id: "208308", eType: EXPECTED_ERROR, message: "Failed to initialize LibXML. "}
var E208309 = Global_error{id: "208309", eType: EXPECTED_ERROR, message: "Failed to send reply message for getENIPService operation. "}
var E208310 = Global_error{id: "208310", eType: EXPECTED_ERROR, message: "Failed to write data to reply message when ENIP service is received. "}
var E208311 = Global_error{id: "208311", eType: EXPECTED_ERROR, message: "Reply message from ENIP is too long during WEB-ENIP call. "}
var E208312 = Global_error{id: "208312", eType: EXPECTED_ERROR, message: "Failed to start data thread. "}
var E208313 = Global_error{id: "208313", eType: EXPECTED_ERROR, message: "Failed during initialization of SOAPconfig. "}
var E208314 = Global_error{id: "208314", eType: EXPECTED_ERROR, message: "Failed to listen to the IP port. "}
var E208315 = Global_error{id: "208315", eType: EXPECTED_ERROR, message: "Failed to allocate SOAPSrvRegSession object. "}
var E208316 = Global_error{id: "208316", eType: EXPECTED_ERROR, message: "Failed to set the heart beat timer. "}
var E208317 = Global_error{id: "208317", eType: EXPECTED_ERROR, message: "Failed to set profile timer. "}
var E208318 = Global_error{id: "208318", eType: EXPECTED_ERROR, message: "Failed to create request message when unregistering SOAP Adapter to naming. "}
var E208319 = Global_error{id: "208319", eType: EXPECTED_ERROR, message: "Failed to create a request message while registering SOAPAdapter to naming database. "}
var E208320 = Global_error{id: "208320", eType: EXPECTED_ERROR, message: "Failed to set register timer when SOAPAdapter starts. "}
var E208321 = Global_error{id: "208321", eType: EXPECTED_ERROR, message: "Failed to write data to message while registering SOAPAdapter to naming. "}
var E208322 = Global_error{id: "208322", eType: EXPECTED_ERROR, message: "Failed to send message when registering SOAPAdapter to naming. "}
var E208323 = Global_error{id: "208323", eType: EXPECTED_ERROR, message: "Failed to create request message when unregistering SOAPAdapter to naming. "}
var E208324 = Global_error{id: "208324", eType: EXPECTED_ERROR, message: "Failed to send message when unregistering SOAPAdapter to naming. "}
var E208325 = Global_error{id: "208325", eType: EXPECTED_ERROR, message: "Failed to write data to message when unregistering SOAP Adapter from naming. "}
var E208326 = Global_error{id: "208326", eType: EXPECTED_ERROR, message: "Failed to set timer when registering or unregistering a SOAP service. "}
var E208327 = Global_error{id: "208327", eType: EXPECTED_ERROR, message: "Failed to allocate OLC parameter. "}
var E208328 = Global_error{id: "208328", eType: EXPECTED_ERROR, message: "Failed to get OLC Controller. "}
var E208329 = Global_error{id: "208329", eType: EXPECTED_ERROR, message: "Port number in URI is absent. "}
var E208330 = Global_error{id: "208330", eType: EXPECTED_ERROR, message: "Normal exception of ENIP Call WEB (E2W). "}
var E208331 = Global_error{id: "208331", eType: EXPECTED_ERROR, message: "Format of status-line is invalid. "}
var E208332 = Global_error{id: "208332", eType: EXPECTED_ERROR, message: "Unregister soap service is processing. "}
var E208333 = Global_error{id: "208333", eType: EXPECTED_ERROR, message: "Failed to set register information timer, cannot refresh SOAP/ENIP service registration information from configcenter table. "}
var E208334 = Global_error{id: "208334", eType: EXPECTED_ERROR, message: "Failed to read savewsdl data. "}
var E208335 = Global_error{id: "208335", eType: EXPECTED_ERROR, message: "Failed to open or write wsdl file. "}
var E208336 = Global_error{id: "208336", eType: EXPECTED_ERROR, message: "Failed to execute system command. "}
var E208337 = Global_error{id: "208337", eType: EXPECTED_ERROR, message: "Failed to execute remove file command. "}
var E208338 = Global_error{id: "208338", eType: EXPECTED_ERROR, message: "Package name length should not exceed 8. "}
var E208339 = Global_error{id: "208339", eType: EXPECTED_ERROR, message: "Package suffix does not contain tar.gz. "}
var E208340 = Global_error{id: "208340", eType: EXPECTED_ERROR, message: "Maximum ENIP connections are reached. "}
var E208341 = Global_error{id: "208341", eType: EXPECTED_ERROR, message: "Address is invalid or null. "}
var E208342 = Global_error{id: "208342", eType: EXPECTED_ERROR, message: "Address format is invalid. "}
var E208343 = Global_error{id: "208343", eType: EXPECTED_ERROR, message: "Invalid port, failed to convert port to integer. "}
var E208344 = Global_error{id: "208344", eType: EXPECTED_ERROR, message: "Failed to convert network address from string to binary. "}
var E208345 = Global_error{id: "208345", eType: EXPECTED_ERROR, message: "Failed to bind on socket. "}
var E208346 = Global_error{id: "208346", eType: EXPECTED_ERROR, message: "Socket is already in use. "}
var E208347 = Global_error{id: "208347", eType: EXPECTED_ERROR, message: "Unable to poll on socket, failed to allocate memory. "}
var E208348 = Global_error{id: "208348", eType: EXPECTED_ERROR, message: "Socket listen has failed. "}
var E208349 = Global_error{id: "208349", eType: EXPECTED_ERROR, message: "Failed to create socket. "}
var E208350 = Global_error{id: "208350", eType: EXPECTED_ERROR, message: "Failed to start listen thread. "}
var E208351 = Global_error{id: "208351", eType: EXPECTED_ERROR, message: "HTTP/HTTPS header in SOAP message sent by the Web service is invalid. "}
var E208352 = Global_error{id: "208352", eType: EXPECTED_ERROR, message: "Event subscription fails during SOAPAdapter startup. "}
var E208353 = Global_error{id: "208353", eType: EXPECTED_ERROR, message: "The service ID fails to be obtained. "}
var E208354 = Global_error{id: "208354", eType: EXPECTED_ERROR, message: "HTTP/HTTPS header contains invalid or empty X-ENIP-TraceInfo. "}
var E208355 = Global_error{id: "208355", eType: EXPECTED_ERROR, message: "Memory allocation fails when a SOAP service attempts to create an AlarmHandler object. "}
var E208356 = Global_error{id: "208356", eType: EXPECTED_ERROR, message: "The SoapAdapterEnableAlarmFlag value of the SOAPAdapter module is invalid. "}
var E208357 = Global_error{id: "208357", eType: EXPECTED_ERROR, message: "Failed to set timer for event alarm overflow control in SOAPAdapter module. "}
var E208358 = Global_error{id: "208358", eType: EXPECTED_ERROR, message: "Registering SOAPAdapter as soap service is not allowed. "}
var E208359 = Global_error{id: "208359", eType: EXPECTED_ERROR, message: "The ConfigSessionDbNONVERSION_MGMT file is not found. "}
var E208360 = Global_error{id: "208360", eType: EXPECTED_ERROR, message: "The SOAP service to be registered is the same as an existing SOAP service. "}
var E208361 = Global_error{id: "208361", eType: EXPECTED_ERROR, message: "The length of the value of ipPort is too long in the URI of the SOAP service to be registered. "}
var E208362 = Global_error{id: "208362", eType: EXPECTED_ERROR, message: "The format of port in URI is invalid. "}
var E208363 = Global_error{id: "208363", eType: EXPECTED_ERROR, message: "The configuration specification of a SOAP service is incorrect. "}
var E208364 = Global_error{id: "208364", eType: EXPECTED_ERROR, message: "The format of the IP address is incorrect in the URI of the SOAP service to be registered. "}
var E208365 = Global_error{id: "208365", eType: EXPECTED_ERROR, message: "Allocating the memory fails when a SOAP service is registered. "}
var E208366 = Global_error{id: "208366", eType: EXPECTED_ERROR, message: "Allocating the memory fails when an ENIP service is registered. "}
var E208367 = Global_error{id: "208367", eType: EXPECTED_ERROR, message: "The configuration specification of an ENIP service is incorrect. "}
var E208368 = Global_error{id: "208368", eType: EXPECTED_ERROR, message: "The ENIP service to be registered is already registered to the system. "}
var E208369 = Global_error{id: "208369", eType: EXPECTED_ERROR, message: "The ENIP service to be deregistered does not exist. "}
var E208370 = Global_error{id: "208370", eType: EXPECTED_ERROR, message: "The ENIP service to be unregistered does not exist. "}
var E208371 = Global_error{id: "208371", eType: EXPECTED_ERROR, message: "Failed to register SOAP service to naming. "}
var E208372 = Global_error{id: "208372", eType: EXPECTED_ERROR, message: "Failed to unregister SOAP service from naming. "}
var E208373 = Global_error{id: "208373", eType: EXPECTED_ERROR, message: "A WSDL file contains excessive layers of references. "}
var E208374 = Global_error{id: "208374", eType: EXPECTED_ERROR, message: "The data format of the request line in the HTTP/HTTPS header is incorrect. "}
var E208375 = Global_error{id: "208375", eType: EXPECTED_ERROR, message: "The content type in HTTP/HTTPS header is invalid. "}
var E208376 = Global_error{id: "208376", eType: EXPECTED_ERROR, message: "The value of chunk-size is invalid. "}
var E208377 = Global_error{id: "208377", eType: EXPECTED_ERROR, message: "The size of an HTTP/HTTPS header exceeds the upper limit. "}
var E208378 = Global_error{id: "208378", eType: EXPECTED_ERROR, message: "The size of an HTTP/HTTPS message body exceeds the upper limit. "}
var E208379 = Global_error{id: "208379", eType: EXPECTED_ERROR, message: "The post or get method does not exist in an HTTP/HTTPS header. "}
var E208380 = Global_error{id: "208380", eType: EXPECTED_ERROR, message: "Receiving data from a WEB service fails. "}
var E208381 = Global_error{id: "208381", eType: EXPECTED_ERROR, message: "When an ENIP service invokes a WEB service, applying for the socket handler fails. "}
var E208382 = Global_error{id: "208382", eType: EXPECTED_ERROR, message: "Sending data from an ENIP service to a WEB service fails. "}
var E208383 = Global_error{id: "208383", eType: EXPECTED_ERROR, message: "The value of DOID in the session sent from a WEB service to an ENIP service is invalid. "}
var E208384 = Global_error{id: "208384", eType: EXPECTED_ERROR, message: "When an ENIP service invokes a WEB service, sending data to the WEB service times out. "}
var E208385 = Global_error{id: "208385", eType: EXPECTED_ERROR, message: "When an ENIP service receives data from a WEB service, the operation times out. "}
var E208386 = Global_error{id: "208386", eType: EXPECTED_ERROR, message: "Connecting to an external SOAP server fails. "}
var E208387 = Global_error{id: "208387", eType: EXPECTED_ERROR, message: "Connecting to a WEB server times out. "}
var E208388 = Global_error{id: "208388", eType: EXPECTED_ERROR, message: "When an ENIP service invokes a WEB service, the URL index is invalid. "}
var E208389 = Global_error{id: "208389", eType: EXPECTED_ERROR, message: "During the dynamic deregistration of an ENIP service, another ENIP service with the same name is found. "}
var E208390 = Global_error{id: "208390", eType: EXPECTED_ERROR, message: "Register or unregister of a SOAP service has failed. "}
var E208391 = Global_error{id: "208391", eType: EXPECTED_ERROR, message: "Failed to write data to stream when unregistering SOAP service to naming. "}
var E208392 = Global_error{id: "208392", eType: EXPECTED_ERROR, message: "A registration or deregistration request is unknown. "}
var E208393 = Global_error{id: "208393", eType: EXPECTED_ERROR, message: "When a WEB service invokes an ENIP service, receiving data from the WEB service times out. "}
var E208394 = Global_error{id: "208394", eType: EXPECTED_ERROR, message: "Failed to create data thread. "}
var E208395 = Global_error{id: "208395", eType: EXPECTED_ERROR, message: "Failed to switch threads. "}
var E208396 = Global_error{id: "208396", eType: EXPECTED_ERROR, message: "When a WEB service invokes an ENIP service, waiting the ENIP service response times out. "}
var E208397 = Global_error{id: "208397", eType: EXPECTED_ERROR, message: "SOAP service is removed. "}
var E208398 = Global_error{id: "208398", eType: EXPECTED_ERROR, message: "The SOAPAdapter does not accept new calls. "}
var E208399 = Global_error{id: "208399", eType: EXPECTED_ERROR, message: "Parameter of SOAP service is changed. "}
var E208400 = Global_error{id: "208400", eType: EXPECTED_ERROR, message: "The port number that corresponds to the local IP address is incorrect. "}
var E208401 = Global_error{id: "208401", eType: EXPECTED_ERROR, message: "A local IP address is incorrect. "}
var E208402 = Global_error{id: "208402", eType: EXPECTED_ERROR, message: "A key already exists. "}
var E208403 = Global_error{id: "208403", eType: EXPECTED_ERROR, message: "Registering a SOAP service to or deregistering a SOAP service from the Naming service times out. "}
var E208404 = Global_error{id: "208404", eType: EXPECTED_ERROR, message: "When an ENIP service invokes a WEB service, binding the local IP address fails. "}
var E208405 = Global_error{id: "208405", eType: EXPECTED_ERROR, message: "The message sent from a WEB service is filtered by an ENIP service. "}
var E208406 = Global_error{id: "208406", eType: EXPECTED_ERROR, message: "The system is overloaded. "}
var E208407 = Global_error{id: "208407", eType: EXPECTED_ERROR, message: "Failed to export SOAP and ENIP service to file. "}
var E208408 = Global_error{id: "208408", eType: EXPECTED_ERROR, message: "The format of the content in the DOID extension domain is incorrect. "}
var E208409 = Global_error{id: "208409", eType: EXPECTED_ERROR, message: "The size of a WSDL file is excessive. "}
var E208410 = Global_error{id: "208410", eType: EXPECTED_ERROR, message: "The value of location in a get request is incorrect. "}
var E208411 = Global_error{id: "208411", eType: EXPECTED_ERROR, message: "A specified WSDL file cannot be found. "}
var E208412 = Global_error{id: "208412", eType: EXPECTED_ERROR, message: "The target object specified in a get request does not exist. "}
var E208413 = Global_error{id: "208413", eType: EXPECTED_ERROR, message: "The target object specified in a get request does not exist in the wsdl directory. "}
var E208414 = Global_error{id: "208414", eType: EXPECTED_ERROR, message: "There is no HTTP/HTTPS header in HTTP/HTTPS message. "}
var E208415 = Global_error{id: "208415", eType: EXPECTED_ERROR, message: "Failed to read record. "}
var E208416 = Global_error{id: "208416", eType: EXPECTED_ERROR, message: "SoapAdapterBuffOutPutFlag is invalid, it should be NONE, ALL or ERROR. "}
var E208417 = Global_error{id: "208417", eType: EXPECTED_ERROR, message: "Failed to add record to ENIPAdapterInstance table. "}
var E208418 = Global_error{id: "208418", eType: EXPECTED_ERROR, message: "Failed to update record to ENIPAdapterInstance table. "}
var E208419 = Global_error{id: "208419", eType: EXPECTED_ERROR, message: "Failed to create getrecord reply msg. "}
var E208420 = Global_error{id: "208420", eType: EXPECTED_ERROR, message: "Failed to write date when performing getrecord. "}
var E208421 = Global_error{id: "208421", eType: EXPECTED_ERROR, message: "Failed to set, add and update record timer. "}
var E208422 = Global_error{id: "208422", eType: EXPECTED_ERROR, message: "New connections being refused. "}
var E208423 = Global_error{id: "208423", eType: EXPECTED_ERROR, message: "The BasicUpdate operation fails to be performed. "}
var E208424 = Global_error{id: "208424", eType: EXPECTED_ERROR, message: "When registering an already registered service from registerService interface or reregister of daemon. "}
var E208425 = Global_error{id: "208425", eType: EXPECTED_ERROR, message: "Doid-service name pair does not exist. "}
var E208426 = Global_error{id: "208426", eType: EXPECTED_ERROR, message: "Bulk register fails for all services. "}
var E208427 = Global_error{id: "208427", eType: EXPECTED_ERROR, message: "Bulk register or deregister operation fails, when reading the arguments from the message stream. "}
var E208428 = Global_error{id: "208428", eType: EXPECTED_ERROR, message: "Perform naming operations when HA environment is set but not active. "}
var E208429 = Global_error{id: "208429", eType: EXPECTED_ERROR, message: "A key does not exist. "}
var E208430 = Global_error{id: "208430", eType: EXPECTED_ERROR, message: "Input parameter is invalid. "}
var E208431 = Global_error{id: "208431", eType: EXPECTED_ERROR, message: "Table does not exist. "}
var E208432 = Global_error{id: "208432", eType: EXPECTED_ERROR, message: "Operation being not allowed. "}
var E208433 = Global_error{id: "208433", eType: EXPECTED_ERROR, message: "Schema of the information provided for the table is not the same as the actual table. "}
var E208434 = Global_error{id: "208434", eType: EXPECTED_ERROR, message: "Input parameter is incorrect. "}
var E208435 = Global_error{id: "208435", eType: EXPECTED_ERROR, message: "Input parameter already exists. "}
var E208436 = Global_error{id: "208436", eType: EXPECTED_ERROR, message: "An input name does not exist. "}
var E208437 = Global_error{id: "208437", eType: EXPECTED_ERROR, message: "Current version deletion. "}
var E208438 = Global_error{id: "208438", eType: EXPECTED_ERROR, message: "Draft version is not present. "}
var E208439 = Global_error{id: "208439", eType: EXPECTED_ERROR, message: "Item or table or property is not present in topology. "}
var E208440 = Global_error{id: "208440", eType: EXPECTED_ERROR, message: "No access permission for file. "}
var E208441 = Global_error{id: "208441", eType: EXPECTED_ERROR, message: "File read failed. "}
var E208442 = Global_error{id: "208442", eType: EXPECTED_ERROR, message: "File write failed. "}
var E208443 = Global_error{id: "208443", eType: EXPECTED_ERROR, message: "File delete failed. "}
var E208444 = Global_error{id: "208444", eType: EXPECTED_ERROR, message: "Invalid data for file. "}
var E208445 = Global_error{id: "208445", eType: EXPECTED_ERROR, message: "File rename is failed. "}
var E208446 = Global_error{id: "208446", eType: EXPECTED_ERROR, message: "MAX number of label at NE level reached, can not create more label at NE level. "}
var E208447 = Global_error{id: "208447", eType: EXPECTED_ERROR, message: "MAX number of label at MOD level reached, can not create more label at MOD level. "}
var E208448 = Global_error{id: "208448", eType: EXPECTED_ERROR, message: "File create failed. "}
var E208449 = Global_error{id: "208449", eType: EXPECTED_ERROR, message: "Create directory failed. "}
var E208450 = Global_error{id: "208450", eType: EXPECTED_ERROR, message: "Max record limit reached. "}
var E208451 = Global_error{id: "208451", eType: EXPECTED_ERROR, message: "Mismatch between property definition of source and destination module. "}
var E208452 = Global_error{id: "208452", eType: EXPECTED_ERROR, message: "During clone or major upgrade operation no property copied from source to destination module. "}
var E208453 = Global_error{id: "208453", eType: EXPECTED_ERROR, message: "System Error (CBS), Please contact CBS operation. "}
var E208454 = Global_error{id: "208454", eType: EXPECTED_ERROR, message: "The number of subscribers under this account exceeds the maximum number of subscribers who can be queried, please enter MSISDNs in the file. "}
var E208455 = Global_error{id: "208455", eType: EXPECTED_ERROR, message: "Failure to transform a backslash () in a file name into a slash (/). "}
var E208456 = Global_error{id: "208456", eType: EXPECTED_ERROR, message: "Invoke 'doHandleCreated' function error. "}
var E208457 = Global_error{id: "208457", eType: EXPECTED_ERROR, message: "Containers cannot start as 'monitor' type except container0. "}
var E208458 = Global_error{id: "208458", eType: EXPECTED_ERROR, message: "System call 'select' failed. "}
var E208459 = Global_error{id: "208459", eType: EXPECTED_ERROR, message: "The system failed in invoking 'getsockopt'. "}
var E208460 = Global_error{id: "208460", eType: EXPECTED_ERROR, message: "Failed to create 'SOAPSrvRegSession' object. "}
var E208461 = Global_error{id: "208461", eType: EXPECTED_ERROR, message: "Invalid input is provided to the property 'SoapAdapterAlarmOverflowTime' in SOAPAdapter module. "}
var E208462 = Global_error{id: "208462", eType: EXPECTED_ERROR, message: "The SOAPAction parameter value in the HTTP/HTTPS header must be in the format interface#operation. "}
var E208463 = Global_error{id: "208463", eType: EXPECTED_ERROR, message: "The subscriber {0} does not exist. "}
var E208464 = Global_error{id: "208464", eType: EXPECTED_ERROR, message: "The payment modes of the subscriber {0} and account {1} are different. "}
var E208465 = Global_error{id: "208465", eType: EXPECTED_ERROR, message: "The account cannot be added because the Account Code {0} is already used. "}
var E208466 = Global_error{id: "208466", eType: EXPECTED_ERROR, message: "Operation failed because the Account Code {0} is duplicated. "}
var E208467 = Global_error{id: "208467", eType: EXPECTED_ERROR, message: "The account {0} cannot be modified because the account does not exist or does not belong to the customer. "}
var E208468 = Global_error{id: "208468", eType: EXPECTED_ERROR, message: "The account cannot be modified because the payment type of the account {0} is not changed. "}
var E208469 = Global_error{id: "208469", eType: EXPECTED_ERROR, message: "The payment type of account {0} is inconsistent with that of the subscriber. "}
var E208470 = Global_error{id: "208470", eType: EXPECTED_ERROR, message: "The account must be modified because the payment type of the account {0} is changed. "}
var E208471 = Global_error{id: "208471", eType: EXPECTED_ERROR, message: "The account {0} is not used by subscribers, and cannot be modified. "}
var E208472 = Global_error{id: "208472", eType: EXPECTED_ERROR, message: "The account {1} of the subscriber {0} does not exist or is invalid. "}
var E208473 = Global_error{id: "208473", eType: EXPECTED_ERROR, message: "Failed to change the primary offer because the bill cycle of the original account {0} is incorrect. "}
var E208474 = Global_error{id: "208474", eType: EXPECTED_ERROR, message: "The lengths of the start number {0} and end number {1} must be the same. "}
var E208475 = Global_error{id: "208475", eType: EXPECTED_ERROR, message: "The number segment {0} to {1} exceeds the maximum number segment range {2}. "}
var E208476 = Global_error{id: "208476", eType: EXPECTED_ERROR, message: "Certain numbers in the number segment {0}-{1} have already been used. Therefore, the segment cannot be deleted. "}
var E208477 = Global_error{id: "208477", eType: EXPECTED_ERROR, message: "The service action in line {0} of the imported file cannot be blank. "}
var E208478 = Global_error{id: "208478", eType: EXPECTED_ERROR, message: "The sub service key in line {0} of the imported file cannot be blank. "}
var E208479 = Global_error{id: "208479", eType: EXPECTED_ERROR, message: "The sub service key in line {0} of the imported file does not exist in the database. Therefore, it cannot be imported. "}
var E208480 = Global_error{id: "208480", eType: EXPECTED_ERROR, message: "The sub service key in line {0} of the imported file must be blank. "}
var E208481 = Global_error{id: "208481", eType: EXPECTED_ERROR, message: "During primary offer change, the expiration time of the optional offer {0} cannot be later than the effective time of the new primary offer. "}
var E208482 = Global_error{id: "208482", eType: EXPECTED_ERROR, message: "In the offer {0}, incentive products are bound to prepaid subscribers. "}
var E208483 = Global_error{id: "208483", eType: EXPECTED_ERROR, message: "The payment type cannot be changed because the subscriber {0} is an idle prepaid subscriber. "}
var E208484 = Global_error{id: "208484", eType: EXPECTED_ERROR, message: "The account {0} cannot be changed because it is not the default payment account for subscribers before a primary offer change. "}
var E208485 = Global_error{id: "208485", eType: EXPECTED_ERROR, message: "The account {0} cannot be changed because it is the default payment account of multiple subscribers before or after a primary offer change. "}
var E208486 = Global_error{id: "208486", eType: EXPECTED_ERROR, message: "Barring is not allowed because the subscriber {0} is not in the normal state. "}
var E208487 = Global_error{id: "208487", eType: EXPECTED_ERROR, message: "The account {0} cannot be changed because it is not the default payment account of the same subscriber before or after a primary offer change. "}
var E208488 = Global_error{id: "208488", eType: EXPECTED_ERROR, message: "The product {0} is not included in the group {1}. "}
var E208489 = Global_error{id: "208489", eType: EXPECTED_ERROR, message: "The validity period cannot be modified because the subscriber {0} is in the idle state. "}
var E208490 = Global_error{id: "208490", eType: EXPECTED_ERROR, message: "Suspension due to credit control is not allowed because the subscriber {0} is not in the normal credit control state or barring state. "}
var E208491 = Global_error{id: "208491", eType: EXPECTED_ERROR, message: "Releasing the subscriber from the suspend state due to credit control is not required because the subscriber {0} is not in the suspend state due to credit control. "}
var E208492 = Global_error{id: "208492", eType: EXPECTED_ERROR, message: "Suspension due to arrears is not allowed because the subscriber {0} is not in the arrears or barring state. "}
var E208493 = Global_error{id: "208493", eType: EXPECTED_ERROR, message: "Releasing the subscriber from the suspend state due to arrears is not required because the subscriber {0} is not in the suspend state due to arrears. "}
var E208494 = Global_error{id: "208494", eType: EXPECTED_ERROR, message: "Suspension is not allowed because the subscriber {0} is not in the normal or barring state. "}
var E208495 = Global_error{id: "208495", eType: EXPECTED_ERROR, message: "Barring due to credit control is not allowed because the subscriber {0} whose services are resumed is not in the normal credit control state. "}
var E208496 = Global_error{id: "208496", eType: EXPECTED_ERROR, message: "Releasing the subscriber from the barring state due to credit control is not required because the subscriber {0} is not in the barring or suspend state due to credit control. "}
var E208497 = Global_error{id: "208497", eType: EXPECTED_ERROR, message: "Barring due to arrears is not allowed because the subscriber {0} is not in arrears. "}
var E208498 = Global_error{id: "208498", eType: EXPECTED_ERROR, message: "Releasing the subscriber from the barring state due to arrears is not required because the subscriber {0} is not in the barring or suspend state due to arrears. "}
var E208499 = Global_error{id: "208499", eType: EXPECTED_ERROR, message: "Releasing the subscriber from the barring state is not required because the subscriber {0} is not in the proactive barring or suspend state. "}
var E208500 = Global_error{id: "208500", eType: EXPECTED_ERROR, message: "The value of roaming flag {0} exceeds the value range. "}
var E208501 = Global_error{id: "208501", eType: EXPECTED_ERROR, message: "The value of call screen operation type {0} exceeds the value range. "}
var E208502 = Global_error{id: "208502", eType: EXPECTED_ERROR, message: "The payment type of account {0} is different from the payment type of subscriber {1}, and cannot be used as the default payment account of this subscriber. "}
var E208503 = Global_error{id: "208503", eType: EXPECTED_ERROR, message: "The transferee {0} must be exist in the system. "}
var E208504 = Global_error{id: "208504", eType: EXPECTED_ERROR, message: "The subscriber {0} is in the Idle state. The validity period cannot be changed. "}
var E208505 = Global_error{id: "208505", eType: EXPECTED_ERROR, message: "The batch file {0} is already processed and cannot be processed again. Please modify the name of the batch file. "}
var E208506 = Global_error{id: "208506", eType: EXPECTED_ERROR, message: "The number of batch tasks on the BMP {0} exceeds the upper limit. No more new batch tasks can be added. "}
var E208507 = Global_error{id: "208507", eType: EXPECTED_ERROR, message: "The default payment account {1} of subscriber {0} has not taken effect. "}
var E208508 = Global_error{id: "208508", eType: EXPECTED_ERROR, message: "The group number of the new FN number {0} must be the same as the group number of the old FN number to be replaced. "}
var E208509 = Global_error{id: "208509", eType: EXPECTED_ERROR, message: "Duplicate medium ID {0}. "}
var E208510 = Global_error{id: "208510", eType: EXPECTED_ERROR, message: "The FN number {0} has an international prefix but does not have a country code. "}
var E208511 = Global_error{id: "208511", eType: EXPECTED_ERROR, message: "The FN number {0} is not prefixed with a country code. "}
var E208512 = Global_error{id: "208512", eType: EXPECTED_ERROR, message: "No FN number whose index is {1} exists in the FN group {0}. "}
var E208513 = Global_error{id: "208513", eType: EXPECTED_ERROR, message: "Account-level subscription is not allowed because the account {0} has not taken effect. "}
var E208514 = Global_error{id: "208514", eType: EXPECTED_ERROR, message: "Subaccount {0} does not belong to the subscriber account. "}
var E208515 = Global_error{id: "208515", eType: EXPECTED_ERROR, message: "Analyzing the number failed because the PSTN number {0} cannot be set as an FN. "}
var E208516 = Global_error{id: "208516", eType: EXPECTED_ERROR, message: "The number {0} cannot be modified because it is blacklisted. "}
var E208517 = Global_error{id: "208517", eType: EXPECTED_ERROR, message: "The number {0} cannot be modified because it is not whitelisted. "}
var E208518 = Global_error{id: "208518", eType: EXPECTED_ERROR, message: "The value of Expiration Time must be later than the value of Effective Time for the related bill arrangement {0}. "}
var E208519 = Global_error{id: "208519", eType: EXPECTED_ERROR, message: "The value of Expiration Time must be later than the value of Effective Time for scenario {0}. "}
var E208520 = Global_error{id: "208520", eType: EXPECTED_ERROR, message: "The value of Expiration Time must be later than the value of Effective Time for delivery mode {0}. "}
var E208521 = Global_error{id: "208521", eType: EXPECTED_ERROR, message: "The type of account {0} is prepaid. Enter an account of not prepaid type. "}
var E208522 = Global_error{id: "208522", eType: EXPECTED_ERROR, message: "The type of subscriber {0} is prepaid. Enter a subscriber of not prepaid type. "}
var E208523 = Global_error{id: "208523", eType: EXPECTED_ERROR, message: "The code in bill arrangement {0} must be unique. "}
var E208524 = Global_error{id: "208524", eType: EXPECTED_ERROR, message: "The value of Effective Time for scenario {0} must be later than the value of Effective Time for the related bill arrangement. "}
var E208525 = Global_error{id: "208525", eType: EXPECTED_ERROR, message: "The value of Expiration Time for scenario {0} must be earlier than the value of Expiration Time for the related bill arrangement. "}
var E208526 = Global_error{id: "208526", eType: EXPECTED_ERROR, message: "The value of Effective Time for delivery mode {0} must be later than the value of Effective Time for the related bill arrangement. "}
var E208527 = Global_error{id: "208527", eType: EXPECTED_ERROR, message: "The value of Expiration Time for delivery mode {0} must be earlier than the value of Expiration Time for the related bill arrangement. "}
var E208528 = Global_error{id: "208528", eType: EXPECTED_ERROR, message: "Medium {0} does not exist. "}
var E208529 = Global_error{id: "208529", eType: EXPECTED_ERROR, message: "Medium {0} is not free of charge. Enter a payment account. "}
var E208530 = Global_error{id: "208530", eType: EXPECTED_ERROR, message: "Account {0} does not belong to the current customer. "}
var E208531 = Global_error{id: "208531", eType: EXPECTED_ERROR, message: "Number {0} does not belong to the current customer. "}
var E208532 = Global_error{id: "208532", eType: EXPECTED_ERROR, message: "Bill arrangement {0} does not belong to the current customer. "}
var E208533 = Global_error{id: "208533", eType: EXPECTED_ERROR, message: "Bill arrangement {0} does not exist. "}
var E208534 = Global_error{id: "208534", eType: EXPECTED_ERROR, message: "The new value of Expiration Time must be earlier than the original value of Expiration Time for the related bill arrangement {0}. "}
var E208535 = Global_error{id: "208535", eType: EXPECTED_ERROR, message: "The value of Expiration Time for the scenario must be earlier than the original value of Expiration Time for the related bill arrangement with key {0}. "}
var E208536 = Global_error{id: "208536", eType: EXPECTED_ERROR, message: "The value of Expiration Time for delivery mode must be earlier than the original value of Expiration Time for the related bill arrangement with key {0}. "}
var E208537 = Global_error{id: "208537", eType: EXPECTED_ERROR, message: "Bill arrangement {0} cannot be canceled because its type is default. "}
var E208538 = Global_error{id: "208538", eType: EXPECTED_ERROR, message: "The operation failed because the setting of attribute {1} of product {0} is not correct. "}
var E208539 = Global_error{id: "208539", eType: EXPECTED_ERROR, message: "Delivery mode {0} has expired when you modify the bill arrangement. "}
var E208540 = Global_error{id: "208540", eType: EXPECTED_ERROR, message: "Scenario {0} has expired when you modify the bill arrangement. "}
var E208541 = Global_error{id: "208541", eType: EXPECTED_ERROR, message: "Bill arrangement {0} to be modified has expired. "}
var E208542 = Global_error{id: "208542", eType: EXPECTED_ERROR, message: "The number of licenses granted to CBP {0} is insufficient for active subscribers. "}
var E208543 = Global_error{id: "208543", eType: EXPECTED_ERROR, message: "The number of licenses granted to CBP {0} is insufficient. "}
var E208544 = Global_error{id: "208544", eType: EXPECTED_ERROR, message: "The network type of number {0} is inconsistent with the network type of the main product. "}
var E208545 = Global_error{id: "208545", eType: EXPECTED_ERROR, message: "Failed to create task {1} for order {0}. "}
var E208546 = Global_error{id: "208546", eType: EXPECTED_ERROR, message: "The {0} parameter of the order task is incorrect. "}
var E208547 = Global_error{id: "208547", eType: EXPECTED_ERROR, message: "Data in lines {1} and {2} in file {0} is incorrect. "}
var E208548 = Global_error{id: "208548", eType: EXPECTED_ERROR, message: "Only one default billing arrangement can be subscribed to for account {0} during registration. "}
var E208549 = Global_error{id: "208549", eType: EXPECTED_ERROR, message: "In line {1} in request file {0}, the content of segments in parameter {2} must all be numbers. "}
var E208550 = Global_error{id: "208550", eType: EXPECTED_ERROR, message: "In line {1} in request file {0}, the number of segments in parameter {2} is incorrect. "}
var E208551 = Global_error{id: "208551", eType: EXPECTED_ERROR, message: "Service {1} can be enabled for subscriber {0} only once. "}
var E208552 = Global_error{id: "208552", eType: EXPECTED_ERROR, message: "The content in the batch request file {0} cannot be blank. "}
var E208553 = Global_error{id: "208553", eType: EXPECTED_ERROR, message: "The batch request file {0} does not exist. "}
var E208554 = Global_error{id: "208554", eType: EXPECTED_ERROR, message: "The format of line {1} in the batch request file {0} is incorrect. "}
var E208555 = Global_error{id: "208555", eType: EXPECTED_ERROR, message: "The length of the start number in line {1} in the batch request file {0} does not equal to that of the end number. "}
var E208556 = Global_error{id: "208556", eType: EXPECTED_ERROR, message: "The start number in line {1} in the batch request file {0} is greater than the end number. "}
var E208557 = Global_error{id: "208557", eType: EXPECTED_ERROR, message: "The file {0} does not exist. "}
var E208558 = Global_error{id: "208558", eType: EXPECTED_ERROR, message: "Succeeded in activating subscriber {0}, but failed to deliver the recharge bonus. "}
var E208559 = Global_error{id: "208559", eType: EXPECTED_ERROR, message: "Subscriber {0} is not activated, and is therefore not allow to use the recharge package function. "}
var E208560 = Global_error{id: "208560", eType: EXPECTED_ERROR, message: "Customer {0} has expired. "}
var E208561 = Global_error{id: "208561", eType: EXPECTED_ERROR, message: "Account {0} has not taken effect, and cannot be recharged by cash. "}
var E208562 = Global_error{id: "208562", eType: EXPECTED_ERROR, message: "Account {0} is not used by any subscriber, and cannot be recharged. "}
var E208563 = Global_error{id: "208563", eType: EXPECTED_ERROR, message: "Account {0} has not taken effect, and cannot be used to process services. "}
var E208564 = Global_error{id: "208564", eType: EXPECTED_ERROR, message: "Account {0} has not taken effect, and cannot be modified this account when registering a subscriber for an old customer. "}
var E208565 = Global_error{id: "208565", eType: EXPECTED_ERROR, message: "The bill cycle type is not set for product {0}. "}
var E208566 = Global_error{id: "208566", eType: EXPECTED_ERROR, message: "The product whose productCode is set to {0} does not exist. "}
var E208567 = Global_error{id: "208567", eType: EXPECTED_ERROR, message: "The data service key value associated with product {0} is {1}, which is invalid. "}
var E208568 = Global_error{id: "208568", eType: EXPECTED_ERROR, message: "Node data {0} does not exist. "}
var E208569 = Global_error{id: "208569", eType: EXPECTED_ERROR, message: "Node data {0} is abnormal. "}
var E208570 = Global_error{id: "208570", eType: EXPECTED_ERROR, message: "Content data {0} does not exist. "}
var E208571 = Global_error{id: "208571", eType: EXPECTED_ERROR, message: "Content data {0} is abnormal. "}
var E208572 = Global_error{id: "208572", eType: EXPECTED_ERROR, message: "Invalid area type {0}. "}
var E208573 = Global_error{id: "208573", eType: EXPECTED_ERROR, message: "Invalid language type {0}. "}
var E208574 = Global_error{id: "208574", eType: EXPECTED_ERROR, message: "The mapping between the product {0} and the data service does not exist. "}
var E208575 = Global_error{id: "208575", eType: EXPECTED_ERROR, message: "The service type {0} is not defined in the system. "}
var E208576 = Global_error{id: "208576", eType: EXPECTED_ERROR, message: "Invalid time {0} format. "}
var E208577 = Global_error{id: "208577", eType: EXPECTED_ERROR, message: "Invalid subscriber type {0}. "}
var E208578 = Global_error{id: "208578", eType: EXPECTED_ERROR, message: "Service data {0} does not exist. "}
var E208579 = Global_error{id: "208579", eType: EXPECTED_ERROR, message: "Service data {0} is in an abnormal state. "}
var E208580 = Global_error{id: "208580", eType: EXPECTED_ERROR, message: "The basic offering instance {0} has a switchover record. The instance cannot be deregistered. "}
var E208581 = Global_error{id: "208581", eType: EXPECTED_ERROR, message: "The long number or short number of a group member in line {0} cannot be blank. "}
var E208582 = Global_error{id: "208582", eType: EXPECTED_ERROR, message: "Group customer {0} does not exist. "}
var E208583 = Global_error{id: "208583", eType: EXPECTED_ERROR, message: "The long number of a group member in line {0} cannot be blank. "}
var E208584 = Global_error{id: "208584", eType: EXPECTED_ERROR, message: "The short number of a group member in line {0} cannot be blank. "}
var E208585 = Global_error{id: "208585", eType: EXPECTED_ERROR, message: "The type of the number in line {0} is incorrect. "}
var E208586 = Global_error{id: "208586", eType: EXPECTED_ERROR, message: "Customer data of group {0} has been deleted. "}
var E208587 = Global_error{id: "208587", eType: EXPECTED_ERROR, message: "The group customer that group member {0} belongs to does not exist. "}
var E208588 = Global_error{id: "208588", eType: EXPECTED_ERROR, message: "Group member offering {0} must be bound to one subscriber. "}
var E208589 = Global_error{id: "208589", eType: EXPECTED_ERROR, message: "Offering {0} is not a group member offering. "}
var E208590 = Global_error{id: "208590", eType: EXPECTED_ERROR, message: "Offering {0} is not a group offering. "}
var E208591 = Global_error{id: "208591", eType: EXPECTED_ERROR, message: "The subscriber at {0} is in the pre-deregistration state and can be registered only after {1}. "}
var E208592 = Global_error{id: "208592", eType: EXPECTED_ERROR, message: "The subscriber at {0} under the customer is being registered. Register other subscribers later. "}
var E208593 = Global_error{id: "208593", eType: EXPECTED_ERROR, message: "Failed to obtain the account key value based on the account code {0}. "}
var E208594 = Global_error{id: "208594", eType: EXPECTED_ERROR, message: "Failed to obtain the subscriber key value based on the phone number {0}. "}
var E208595 = Global_error{id: "208595", eType: EXPECTED_ERROR, message: "The subscriber number is not found based on the subscriber key value {0} during BA information query. "}
var E208596 = Global_error{id: "208596", eType: EXPECTED_ERROR, message: "The service {0} does not exist. "}
var E208597 = Global_error{id: "208597", eType: EXPECTED_ERROR, message: "The service {0} has been blocked. "}
var E208598 = Global_error{id: "208598", eType: EXPECTED_ERROR, message: "In {2} of the {1} row of file {0}, the start Account Code is larger than the end Account Code. "}
var E208599 = Global_error{id: "208599", eType: EXPECTED_ERROR, message: "In {2} of the {1} row of file {0}, the length of the start Account Code does not equal to the length of the end Account Code. "}
var E208600 = Global_error{id: "208600", eType: EXPECTED_ERROR, message: "In {2} of the {1} row of file {0}, the start Account ID is larger than the end Account ID. "}
var E208601 = Global_error{id: "208601", eType: EXPECTED_ERROR, message: "In {2} of the {1} row of file {0}, the length of the start Account ID does not equal to the length of the end Account ID. "}
var E208602 = Global_error{id: "208602", eType: EXPECTED_ERROR, message: "In {2} of the {1} row of file {0}, the start Customer Code is larger than the end Customer Code. "}
var E208603 = Global_error{id: "208603", eType: EXPECTED_ERROR, message: "In {2} of the {1} row of file {0}, the start Customer ID is larger than the end Customer ID. "}
var E208604 = Global_error{id: "208604", eType: EXPECTED_ERROR, message: "In {2} of the {1} row of file {0}, the length of the start Customer ID does not equal to the length of the end Customer ID. "}
var E208605 = Global_error{id: "208605", eType: EXPECTED_ERROR, message: "{0} cannot be blank. "}
var E208606 = Global_error{id: "208606", eType: EXPECTED_ERROR, message: "In {2} of the {1} row of file {0}, the start Subscriber ID is larger than the end Subscriber ID. "}
var E208607 = Global_error{id: "208607", eType: EXPECTED_ERROR, message: "In {2} of the {1} row of file {0}, the length of the start Subscriber ID does not equal to the length of the end Subscriber ID. "}
var E208608 = Global_error{id: "208608", eType: EXPECTED_ERROR, message: "Failed to generate the batch service file {0}. "}
var E208609 = Global_error{id: "208609", eType: EXPECTED_ERROR, message: "The number of Account Codes of {2} in row {1} of the file {0} is different from the number of MSISDNs. "}
var E208610 = Global_error{id: "208610", eType: EXPECTED_ERROR, message: "The number of Account IDs of {2} in row {1} of the file {0} is different from the number of MSISDNs. "}
var E208611 = Global_error{id: "208611", eType: EXPECTED_ERROR, message: "The number of Customer Codes of {2} in row {1} of the file {0} is different from the number of MSISDNs. "}
var E208612 = Global_error{id: "208612", eType: EXPECTED_ERROR, message: "The number of Customer IDs of {2} in row {1} of the file {0} is different from the number of MSISDNs. "}
var E208613 = Global_error{id: "208613", eType: EXPECTED_ERROR, message: "The service version of CBP {0} is inconsistent with that of CBP {1} after migration. "}
var E208614 = Global_error{id: "208614", eType: EXPECTED_ERROR, message: "The number of Subscriber IDs of {2} in row {1} of the file {0} is different from the number of MSISDNs. "}
var E208615 = Global_error{id: "208615", eType: EXPECTED_ERROR, message: "The platform version of CBP {0} is inconsistent with that of CBP {1} after migration. "}
var E208616 = Global_error{id: "208616", eType: EXPECTED_ERROR, message: "Customer {0} failed to apply for migration. "}
var E208617 = Global_error{id: "208617", eType: EXPECTED_ERROR, message: "The service handling is not allowed because customer {0} is migrating data. "}
var E208618 = Global_error{id: "208618", eType: EXPECTED_ERROR, message: "The customer data migration is not allowed because sessions related to subscriber {1} under customer {0} are running. "}
var E208619 = Global_error{id: "208619", eType: EXPECTED_ERROR, message: "Service {0} cannot be blocked because the service has been subscribed to. "}
var E208620 = Global_error{id: "208620", eType: EXPECTED_ERROR, message: "The optional offer {0} is a reward and cannot be subscribed to. "}
var E208621 = Global_error{id: "208621", eType: EXPECTED_ERROR, message: "The value of {0} is different from the subscriber's payment type. "}
var E208622 = Global_error{id: "208622", eType: EXPECTED_ERROR, message: "The account code {0} already exists. "}
var E208623 = Global_error{id: "208623", eType: EXPECTED_ERROR, message: "The account ID {0} already exists. "}
var E208624 = Global_error{id: "208624", eType: EXPECTED_ERROR, message: "The operation failed because the account ID {0} is duplicated. "}
var E208625 = Global_error{id: "208625", eType: EXPECTED_ERROR, message: "The account whose code is {0} does not take effect, and no account can be created again. "}
var E208626 = Global_error{id: "208626", eType: EXPECTED_ERROR, message: "The service capability {0} has been blocked. "}
var E208627 = Global_error{id: "208627", eType: EXPECTED_ERROR, message: "The service capability {0} does not exist. "}
var E208628 = Global_error{id: "208628", eType: EXPECTED_ERROR, message: "The service capability {0} to be deleted does not exist. "}
var E208629 = Global_error{id: "208629", eType: EXPECTED_ERROR, message: "The {0} value exceeds {1}. "}
var E208630 = Global_error{id: "208630", eType: EXPECTED_ERROR, message: "Adding failed. The number of records in this table can not be more than {0}. "}
var E208631 = Global_error{id: "208631", eType: EXPECTED_ERROR, message: "Importing failed. The number of records in this table can not be more than {0}. "}
var E208632 = Global_error{id: "208632", eType: EXPECTED_ERROR, message: "The accountID {0} does not exist. "}
var E208633 = Global_error{id: "208633", eType: EXPECTED_ERROR, message: "Incorrect content format of the request file {0}. "}
var E208634 = Global_error{id: "208634", eType: EXPECTED_ERROR, message: "The value length of {0} exceeds the maximum {1}. "}
var E208635 = Global_error{id: "208635", eType: EXPECTED_ERROR, message: "The value of expiration time for the bill arrangement must be earlier than the value of expiration time for the original scenario {0}. "}
var E208636 = Global_error{id: "208636", eType: EXPECTED_ERROR, message: "The value of expiration time for the bill arrangement must be earlier than the value of expiration time for the original delivery mode {0}. "}
var E208637 = Global_error{id: "208637", eType: EXPECTED_ERROR, message: "The adjusted amount must be smaller than the account balance {0}. "}
var E208638 = Global_error{id: "208638", eType: EXPECTED_ERROR, message: "Optional offers {0} and {1} have the same MPlusServiceID and cannot be subscribed to at the same time. "}
var E208639 = Global_error{id: "208639", eType: EXPECTED_ERROR, message: "Product {0} does not match the subscriber level. "}
var E208640 = Global_error{id: "208640", eType: EXPECTED_ERROR, message: "The account does not have the payment relationship {0}. "}
var E208641 = Global_error{id: "208641", eType: EXPECTED_ERROR, message: "The account does not have the payment rule {0}. "}
var E208642 = Global_error{id: "208642", eType: EXPECTED_ERROR, message: "The bill cycle can be changed only once within {0} days. "}
var E208643 = Global_error{id: "208643", eType: EXPECTED_ERROR, message: "The subscriber is locked because incorrect passwords are entered for consecutive {0} times. "}
var E208644 = Global_error{id: "208644", eType: EXPECTED_ERROR, message: "The priority of time scheme {0} exists and cannot be added again. "}
var E208645 = Global_error{id: "208645", eType: EXPECTED_ERROR, message: "The priority of scenario {0} is not found. "}
var E208646 = Global_error{id: "208646", eType: EXPECTED_ERROR, message: "The new priority type of scenario {0} is the same as the old priority type. "}
var E208647 = Global_error{id: "208647", eType: EXPECTED_ERROR, message: "Subscriber {0} is not a special child card, and the value of DeductFromParent cannot be 1. "}
var E208648 = Global_error{id: "208648", eType: EXPECTED_ERROR, message: "Offer {0} has multiple subscription instances. "}
var E208649 = Global_error{id: "208649", eType: EXPECTED_ERROR, message: "Offer subscription relationship {0} must be assigned to a subscriber. "}
var E208650 = Global_error{id: "208650", eType: EXPECTED_ERROR, message: "Value {1} of offer attribute {0} is incorrect. "}
var E208651 = Global_error{id: "208651", eType: EXPECTED_ERROR, message: "The TimeSchemaID parameter already exists in scenario {0}. "}
var E208652 = Global_error{id: "208652", eType: EXPECTED_ERROR, message: "The RecID parameter already exists in scenario {0}. "}
var E208653 = Global_error{id: "208653", eType: EXPECTED_ERROR, message: "Failed to create file {0}. "}
var E208654 = Global_error{id: "208654", eType: EXPECTED_ERROR, message: "Value {1} of field {0} is invalid. "}
var E208655 = Global_error{id: "208655", eType: EXPECTED_ERROR, message: "Number segment {0} and another number segment contain same numbers. "}
var E208656 = Global_error{id: "208656", eType: EXPECTED_ERROR, message: "Failed to analyze the national number head or international number head of the call screen number {0}. "}
var E208657 = Global_error{id: "208657", eType: EXPECTED_ERROR, message: "The subscriber cannot switch primary offer {0} because the primary offer or an optional offer has not taken effect. "}
var E208658 = Global_error{id: "208658", eType: EXPECTED_ERROR, message: "Subscriber {0} is in the idle state and cannot subscribe to the one-off package product. "}
var E208659 = Global_error{id: "208659", eType: EXPECTED_ERROR, message: "The values of {0} must be the same. "}
var E208660 = Global_error{id: "208660", eType: EXPECTED_ERROR, message: "A concurrency error has occurred when order task {0} is submitted manually. "}
var E208661 = Global_error{id: "208661", eType: EXPECTED_ERROR, message: "Order task {0} that is submitted manually does not exist. "}
var E208662 = Global_error{id: "208662", eType: EXPECTED_ERROR, message: "Order {0} does not exist. "}
var E208663 = Global_error{id: "208663", eType: EXPECTED_ERROR, message: "Order task {0} does not exist. "}
var E208664 = Global_error{id: "208664", eType: EXPECTED_ERROR, message: "You can change subscriber {0} to a test subscriber only when the subscriber is in the idle state. "}
var E208665 = Global_error{id: "208665", eType: EXPECTED_ERROR, message: "Subscriber {0} is not in the missing claiming state. You cannot suspend the subscriber due to missing claiming. "}
var E208666 = Global_error{id: "208666", eType: EXPECTED_ERROR, message: "Subscriber {0} is not in the missing claiming-based suspension state. You cannot resume the subscriber due to missing disclaiming. "}
var E208667 = Global_error{id: "208667", eType: EXPECTED_ERROR, message: "The balance of the subscriber cannot be smaller than the balance threshold {0} for extending validity period in exchange for balance. "}
var E208668 = Global_error{id: "208668", eType: EXPECTED_ERROR, message: "The OfferOrderKey value cannot be larger than the preset maximum value {0}. "}
var E208669 = Global_error{id: "208669", eType: EXPECTED_ERROR, message: "Converge offer {0} has no association relationship. "}
var E208670 = Global_error{id: "208670", eType: EXPECTED_ERROR, message: "The balance is smaller than minimum threshold {0} for subscription and subscription is not allowed. "}
var E208671 = Global_error{id: "208671", eType: EXPECTED_ERROR, message: "The offer {0} is not in the subscription list. "}
var E208672 = Global_error{id: "208672", eType: EXPECTED_ERROR, message: "The association information about converge offer {1} is inconsistent with offer {0} specified in the association relationship. "}
var E208673 = Global_error{id: "208673", eType: EXPECTED_ERROR, message: "Converge offer {0} already has an association relationship. "}
var E208674 = Global_error{id: "208674", eType: EXPECTED_ERROR, message: "extOfferOrderCode {0} already exists. "}
var E208675 = Global_error{id: "208675", eType: EXPECTED_ERROR, message: "The validity period of the association relationship is different with that of offer {0}. "}
var E208676 = Global_error{id: "208676", eType: EXPECTED_ERROR, message: "The association relationship of offer {0} has taken effect. You cannot change the effective time of the association relationship. "}
var E208677 = Global_error{id: "208677", eType: EXPECTED_ERROR, message: "Offer {0} is not a converage offer. "}
var E208678 = Global_error{id: "208678", eType: EXPECTED_ERROR, message: "The association relationship of offer {0} is not configured. "}
var E208679 = Global_error{id: "208679", eType: EXPECTED_ERROR, message: "The subscription relationship of offer {0} has taken effect. You cannot change the effective time of the association relationship. "}
var E208680 = Global_error{id: "208680", eType: EXPECTED_ERROR, message: "FN group {0} already exists. "}
var E208681 = Global_error{id: "208681", eType: EXPECTED_ERROR, message: "FN group {0} to modify or delete does not exist. "}
var E208682 = Global_error{id: "208682", eType: EXPECTED_ERROR, message: "FN group {0} to delete has been used. "}
var E208683 = Global_error{id: "208683", eType: EXPECTED_ERROR, message: "You attempted to modify and delete a same FN {0}. "}
var E208684 = Global_error{id: "208684", eType: EXPECTED_ERROR, message: "You attempted to add and modify a same FN {0}. "}
var E208685 = Global_error{id: "208685", eType: EXPECTED_ERROR, message: "Numbers in FN group {0} cannot be changed. "}
var E208686 = Global_error{id: "208686", eType: EXPECTED_ERROR, message: "The new familynumber {0} to be added or modified already exsit in group {1}. "}
var E208687 = Global_error{id: "208687", eType: EXPECTED_ERROR, message: "FN group {0} does not match subscribed offering {1}. "}
var E208688 = Global_error{id: "208688", eType: EXPECTED_ERROR, message: "No FN group matches offering {0}. "}
var E208689 = Global_error{id: "208689", eType: EXPECTED_ERROR, message: "Reroute number {0} must be set to an on-net number. "}
var E208690 = Global_error{id: "208690", eType: EXPECTED_ERROR, message: "Subscriber {0} has subscribed to forward-forbidden offer {1}. "}
var E208691 = Global_error{id: "208691", eType: EXPECTED_ERROR, message: "Temporary resumption time {0} cannot be earlier than the current time. "}
var E208692 = Global_error{id: "208692", eType: EXPECTED_ERROR, message: "The redemption rule whose bonus points count is {0} and account book type is {1} does not exist. "}
var E208693 = Global_error{id: "208693", eType: EXPECTED_ERROR, message: "The subscriber does not have account book {0}. "}
var E208694 = Global_error{id: "208694", eType: EXPECTED_ERROR, message: "Parameters {0} and {1} cannot be both empty. "}
var E208695 = Global_error{id: "208695", eType: EXPECTED_ERROR, message: "The offerOrderCode {0} must be the subscriber's primary offering. "}
var E208696 = Global_error{id: "208696", eType: EXPECTED_ERROR, message: "The offerOrderCode {0} has taken effect and you cannot change the effective date. "}
var E208697 = Global_error{id: "208697", eType: EXPECTED_ERROR, message: "After offerOrderCode{0} is modified, the effective date cannot be later than the expiration date. "}
var E208698 = Global_error{id: "208698", eType: EXPECTED_ERROR, message: "Expiration date {0} must be N days later than the effective date. "}
var E208699 = Global_error{id: "208699", eType: EXPECTED_ERROR, message: "The third party returns an error. The error code is {0} and error description is {1}. "}
var E208700 = Global_error{id: "208700", eType: EXPECTED_ERROR, message: "System error: {0}. "}
var E208701 = Global_error{id: "208701", eType: EXPECTED_ERROR, message: "Failed to connect to the CBP {0}. "}
var E208702 = Global_error{id: "208702", eType: EXPECTED_ERROR, message: "The {0} policy template extended attribute does not exist. "}
var E208703 = Global_error{id: "208703", eType: EXPECTED_ERROR, message: "The installment rebate whose key is {0} and price plan version is {1} does not exist. "}
var E208704 = Global_error{id: "208704", eType: EXPECTED_ERROR, message: "The time scheme cannot be saved because the same time scheme {0} already exists. "}
var E208705 = Global_error{id: "208705", eType: EXPECTED_ERROR, message: "The policy template does not exist. TemplateCode: {0}. "}
var E208706 = Global_error{id: "208706", eType: EXPECTED_ERROR, message: "The attribute definition does not exist. AttrbuteCode: {0}. "}
var E208707 = Global_error{id: "208707", eType: EXPECTED_ERROR, message: "The service definition does not exist. ServiceID: {0}."}
var E208708 = Global_error{id: "208708", eType: EXPECTED_ERROR, message: "The fee item {0} does not exist or there is a duplicate. "}
var E208709 = Global_error{id: "208709", eType: EXPECTED_ERROR, message: "The same product code already exists. ProductCode: {0}. "}
var E208710 = Global_error{id: "208710", eType: EXPECTED_ERROR, message: "The expression definition does not exist. ExpressionId: {0}."}
var E208711 = Global_error{id: "208711", eType: EXPECTED_ERROR, message: "Failed to create the service. FileType: {0}; Errorinfo: {1}."}
var E208712 = Global_error{id: "208712", eType: EXPECTED_ERROR, message: "The main product {0} can establish the appendant relationship only with one basic tariff. "}
var E208713 = Global_error{id: "208713", eType: EXPECTED_ERROR, message: "Access code {0} and command word {1} are duplicated. "}
var E208714 = Global_error{id: "208714", eType: EXPECTED_ERROR, message: "Digital right {0} has been defined for this provision. "}
var E208715 = Global_error{id: "208715", eType: EXPECTED_ERROR, message: "The {0} sheet is not found. "}
var E208716 = Global_error{id: "208716", eType: EXPECTED_ERROR, message: "The {0} file is not found. "}
var E208717 = Global_error{id: "208717", eType: EXPECTED_ERROR, message: "The first line in {0} must contain the fields in sequence: {1}. "}
var E208718 = Global_error{id: "208718", eType: EXPECTED_ERROR, message: "{0} cannot contain more than 50000 records. "}
var E208719 = Global_error{id: "208719", eType: EXPECTED_ERROR, message: "Failed to import the product. productCode: {0}; Errorinfo: {1}. "}
var E208720 = Global_error{id: "208720", eType: EXPECTED_ERROR, message: "Failed to import the global policy {0}. Errorinfo: {1}. "}
var E208721 = Global_error{id: "208721", eType: EXPECTED_ERROR, message: "Failed to import the resource. Sequence: {0}; Errorinfo: {1}. "}
var E208722 = Global_error{id: "208722", eType: EXPECTED_ERROR, message: "Failed to import the annex table resource. TableName: {0}; Errorinfo: {1}. "}
var E208723 = Global_error{id: "208723", eType: EXPECTED_ERROR, message: "Failed to import the price plan. PricePlanID: {0}; Errorinfo: {1}."}
var E208724 = Global_error{id: "208724", eType: EXPECTED_ERROR, message: "Failed to import the service. ServiceID: {0}; Errorinfo: {1}. "}
var E208725 = Global_error{id: "208725", eType: EXPECTED_ERROR, message: "Failed to import the policy. InsideCode: {0}; Errorinfo: {1}. "}
var E208726 = Global_error{id: "208726", eType: EXPECTED_ERROR, message: "Failed to import the attribute. attrCode: {0}; Errorinfo: {1}. "}
var E208727 = Global_error{id: "208727", eType: EXPECTED_ERROR, message: "Failed to import the record. tableName: {0}; Errorinfo: {1}. "}
var E208728 = Global_error{id: "208728", eType: EXPECTED_ERROR, message: "{0} must contain at least 1 record. "}
var E208729 = Global_error{id: "208729", eType: EXPECTED_ERROR, message: "The charging matrix contains duplicate record {0}, which violates the uniqueness rule. "}
var E208730 = Global_error{id: "208730", eType: EXPECTED_ERROR, message: "You cannot test or release the product and price plan when the product attribute value of {0} is empty. "}
var E208731 = Global_error{id: "208731", eType: EXPECTED_ERROR, message: "The value of modflag3 in line {0} cannot be found in the data dictionary. "}
var E208732 = Global_error{id: "208732", eType: EXPECTED_ERROR, message: "The value of transsituation in line {0} cannot be found in the data dictionary. "}
var E208733 = Global_error{id: "208733", eType: EXPECTED_ERROR, message: "The value of numberattribute in line {0} cannot be found in the data dictionary. "}
var E208734 = Global_error{id: "208734", eType: EXPECTED_ERROR, message: "The value of object in line {0} cannot be found in the data dictionary. "}
var E208735 = Global_error{id: "208735", eType: EXPECTED_ERROR, message: "The value of changetype in line {0} cannot be found in the data dictionary. "}
var E208736 = Global_error{id: "208736", eType: EXPECTED_ERROR, message: "The value of alternativeflag in line {0} cannot be found in the data dictionary. "}
var E208737 = Global_error{id: "208737", eType: EXPECTED_ERROR, message: "If the value of sourceEventId in line {0} of the to be imported is 12801, 12802, 12803, 12821, or 12823, the value can be only 11, 12, or 13. "}
var E208738 = Global_error{id: "208738", eType: EXPECTED_ERROR, message: "In line {0} in the file, the zone type and zoneID do not match. "}
var E208739 = Global_error{id: "208739", eType: EXPECTED_ERROR, message: "The number of fields in line {0} in the file is incorrect. "}
var E208740 = Global_error{id: "208740", eType: EXPECTED_ERROR, message: "The location type in line {0} in the file does not exist. "}
var E208741 = Global_error{id: "208741", eType: EXPECTED_ERROR, message: "Data {0} in line {1} in the file is invalid. "}
var E208742 = Global_error{id: "208742", eType: EXPECTED_ERROR, message: "The external resource object to be referenced does not exist. CodeField: {0}. "}
var E208743 = Global_error{id: "208743", eType: EXPECTED_ERROR, message: "The log status of the current version is Operation Failed or Deleted. logKey: {0}. "}
var E208744 = Global_error{id: "208744", eType: EXPECTED_ERROR, message: "Connecting to the CBP times out.CBP node:{0} "}
var E208745 = Global_error{id: "208745", eType: EXPECTED_ERROR, message: "The service definition does not exist.service name:{0} "}
var E208746 = Global_error{id: "208746", eType: EXPECTED_ERROR, message: "The required parameter {0} is missing. "}
var E208747 = Global_error{id: "208747", eType: EXPECTED_ERROR, message: "Failed to read the package. ErrorCode={0}. "}
var E208748 = Global_error{id: "208748", eType: EXPECTED_ERROR, message: "The billCycleType is invalid: {0}. "}
var E208749 = Global_error{id: "208749", eType: EXPECTED_ERROR, message: "The first row of {0} should be contain the following fields as sequence: {1}. "}
var E208750 = Global_error{id: "208750", eType: EXPECTED_ERROR, message: "The extension field attrSequence of the primary table {0} is invalid. "}
var E208751 = Global_error{id: "208751", eType: EXPECTED_ERROR, message: "Tariff import failed.Tariff ID:{0} error message:{1} "}
var E208752 = Global_error{id: "208752", eType: EXPECTED_ERROR, message: "Attribute import failed.AttributeValue:{0} error message:{1} "}
var E208753 = Global_error{id: "208753", eType: EXPECTED_ERROR, message: "Failed to save the data because the field {0} is duplicated. "}
var E208754 = Global_error{id: "208754", eType: EXPECTED_ERROR, message: "Fail to convert measure''s unit.{0} "}
var E208755 = Global_error{id: "208755", eType: EXPECTED_ERROR, message: "Failed to notify the product release or test. CauseInfo:{0} "}
var E208756 = Global_error{id: "208756", eType: EXPECTED_ERROR, message: "Failed to connect to the CBP.CBP node:{0} "}
var E208757 = Global_error{id: "208757", eType: EXPECTED_ERROR, message: "DBField_dict_ext_s import failed.table name:{0},error message:{1} "}
var E208758 = Global_error{id: "208758", eType: EXPECTED_ERROR, message: "The measure code does not exist.measure code:{0} "}
var E208759 = Global_error{id: "208759", eType: EXPECTED_ERROR, message: "The size of {0} can not exceed 50000. "}
var E208760 = Global_error{id: "208760", eType: EXPECTED_ERROR, message: "the {0} sheet can't be found. "}
var E208761 = Global_error{id: "208761", eType: EXPECTED_ERROR, message: "Fee item {0} is duplicated. It already exists in the current feeGroup or parent feeGroup. "}
var E208762 = Global_error{id: "208762", eType: EXPECTED_ERROR, message: "The operation failed. The policy {0} you want to modify at {2} has been modified by operator {1}. "}
var E208763 = Global_error{id: "208763", eType: EXPECTED_ERROR, message: "ResAddition import failed.table name:{0},error message:{1} "}
var E208764 = Global_error{id: "208764", eType: EXPECTED_ERROR, message: "Sorry, cannot found the {0} file. "}
var E208765 = Global_error{id: "208765", eType: EXPECTED_ERROR, message: "The extension field attrSequence of the secondary table {0} is invalid. "}
var E208766 = Global_error{id: "208766", eType: EXPECTED_ERROR, message: "Failed to delete the file {0}. "}
var E208767 = Global_error{id: "208767", eType: EXPECTED_ERROR, message: "Failed to export data of table {0}. "}
var E208768 = Global_error{id: "208768", eType: EXPECTED_ERROR, message: "The {0} directory of the synchronization package does not exist. "}
var E208769 = Global_error{id: "208769", eType: EXPECTED_ERROR, message: "Failed to save the data. The uniqueness verification is configured for the {0}, {1}, and {2} fields. These fields cannot be duplicated. "}
var E208770 = Global_error{id: "208770", eType: EXPECTED_ERROR, message: "The service of the appendant product conflicts with the service of the main product. The list of the services is as follows (Format: service/conflict service 1...): {0}. "}
var E208771 = Global_error{id: "208771", eType: EXPECTED_ERROR, message: "Failed to move files from {0} to {1}. "}
var E208772 = Global_error{id: "208772", eType: EXPECTED_ERROR, message: "The input parameter {0} is invalid. "}
var E208773 = Global_error{id: "208773", eType: EXPECTED_ERROR, message: "The number of CBP connections reaches the upper limit.CBP node id:{0} connection number:{1} "}
var E208774 = Global_error{id: "208774", eType: EXPECTED_ERROR, message: "The DAS handles all common SQL error codes in a uniform way and converts uncommon error codes to 405166300. The original uncommon error codes {0} in the database are saved in the error information. "}
var E208775 = Global_error{id: "208775", eType: EXPECTED_ERROR, message: "The catalog does not exist.CatalogCode:{0} "}
var E208776 = Global_error{id: "208776", eType: EXPECTED_ERROR, message: "The record with the value of {0} being {1} exists. "}
var E208777 = Global_error{id: "208777", eType: EXPECTED_ERROR, message: "The encryption algorithm {0} is unavailable in this version. "}
var E208778 = Global_error{id: "208778", eType: EXPECTED_ERROR, message: "The subscriber number {0} does not exist. "}
var E208779 = Global_error{id: "208779", eType: EXPECTED_ERROR, message: "The CBPAgent returns an exception. The exception code is {0}. "}
var E208780 = Global_error{id: "208780", eType: EXPECTED_ERROR, message: "Service import failed.service ID:{0} "}
var E208781 = Global_error{id: "208781", eType: EXPECTED_ERROR, message: "The policy template does not exist.template ID:{0} "}
var E208782 = Global_error{id: "208782", eType: EXPECTED_ERROR, message: "PricePlan import failed.PricePlan ID:{0} Error Message:{1} "}
var E208783 = Global_error{id: "208783", eType: EXPECTED_ERROR, message: "The tag code is not defined.tag code:{0} "}
var E208784 = Global_error{id: "208784", eType: EXPECTED_ERROR, message: "The interface parameter {0} is wrong. "}
var E208785 = Global_error{id: "208785", eType: EXPECTED_ERROR, message: "The subscriber already exists and the phone number is {0}. "}
var E208786 = Global_error{id: "208786", eType: EXPECTED_ERROR, message: "Failed to refresh the product cache. Information about the failed node: {0}. "}
var E208787 = Global_error{id: "208787", eType: EXPECTED_ERROR, message: "The expression is not defined.expression Id:{0} "}
var E208788 = Global_error{id: "208788", eType: EXPECTED_ERROR, message: "The account {0} does not exist. "}
var E208789 = Global_error{id: "208789", eType: EXPECTED_ERROR, message: "The group number {0} does not exist. "}
var E208790 = Global_error{id: "208790", eType: EXPECTED_ERROR, message: "The oprStatus of current Version is delete or failed.logKey:{0}. "}
var E208791 = Global_error{id: "208791", eType: EXPECTED_ERROR, message: "The price plan-level condition does not exist.ConditionExprKey:{0} "}
var E208792 = Global_error{id: "208792", eType: EXPECTED_ERROR, message: "Resource import failed.Sequence:{0}, Errorinfo:{1}. "}
var E208793 = Global_error{id: "208793", eType: EXPECTED_ERROR, message: "The matching table or view does not exist in the database. {0} "}
var E208794 = Global_error{id: "208794", eType: EXPECTED_ERROR, message: "Failed to import the global policy.GlobalPolicy:{0} Errorinfo:{1} "}
var E208795 = Global_error{id: "208795", eType: EXPECTED_ERROR, message: "The accountCode {0} corresponds to more than one piece of route information. "}
var E208796 = Global_error{id: "208796", eType: EXPECTED_ERROR, message: "The accountID {0} corresponds to more than one piece of route information. "}
var E208797 = Global_error{id: "208797", eType: EXPECTED_ERROR, message: "Failed to update the cache data of the node {0}. "}
var E208798 = Global_error{id: "208798", eType: EXPECTED_ERROR, message: "Product import failed.productCode:{0},Errorinfo:{1} "}
var E208799 = Global_error{id: "208799", eType: EXPECTED_ERROR, message: "The record of the subscriber that will be activated exists. The key of the account is {0}. "}
var E208800 = Global_error{id: "208800", eType: EXPECTED_ERROR, message: "The attribute definition does not exist.AttrbuteCode:{0} "}
var E208801 = Global_error{id: "208801", eType: EXPECTED_ERROR, message: "Failed to read the file to be loaded. ErrorCode={0}, please try later! "}
var E208802 = Global_error{id: "208802", eType: EXPECTED_ERROR, message: "The bill cycle type {0} that is in use cannot be deleted. "}
var E208803 = Global_error{id: "208803", eType: EXPECTED_ERROR, message: "Can't refresh data area. ErrorCode={0}, please try later! "}
var E208804 = Global_error{id: "208804", eType: EXPECTED_ERROR, message: "Wrong dataType when transform xmlBean to object.Errorinfo:{0}. "}
var E208805 = Global_error{id: "208805", eType: EXPECTED_ERROR, message: "System error{0}. "}
var E208806 = Global_error{id: "208806", eType: EXPECTED_ERROR, message: "The CBP sends an unknown error code. Error code: {0}. Please try again. "}
var E208807 = Global_error{id: "208807", eType: EXPECTED_ERROR, message: "Cache is insufficient. ErrorCode={0}, please try later! "}
var E208808 = Global_error{id: "208808", eType: EXPECTED_ERROR, message: "The CPU usage is high. ErrorCode={0}, please try later! "}
var E208809 = Global_error{id: "208809", eType: EXPECTED_ERROR, message: "The same Tariff InsideCode has existed.InsideCode:{0} "}
var E208810 = Global_error{id: "208810", eType: EXPECTED_ERROR, message: "Wrong MainType or ProSubType date in productInfo.MainType:{0},ProsubType:{1},Errorinfo:{2} "}
var E208811 = Global_error{id: "208811", eType: EXPECTED_ERROR, message: "The fee item does not exist.FeeCode:{0} "}
var E208812 = Global_error{id: "208812", eType: EXPECTED_ERROR, message: "Failed to create service.FileType:{0}, Errorinfo:{1} "}
var E208813 = Global_error{id: "208813", eType: EXPECTED_ERROR, message: "Switch data area failed. ErrorCode={0}, please try later! "}
var E208814 = Global_error{id: "208814", eType: EXPECTED_ERROR, message: "Services of the product conflict. The list of the services is as follows (Format: service/conflict service 1...): {0} "}
var E208815 = Global_error{id: "208815", eType: EXPECTED_ERROR, message: "The accumulator definition does not exist.CumulateCode:{0} "}
var E208816 = Global_error{id: "208816", eType: EXPECTED_ERROR, message: "The table definition does not exist.TableName:{0} "}
var E208817 = Global_error{id: "208817", eType: EXPECTED_ERROR, message: "Failed to synchronize data to the CBP.CBP Node:{0} "}
var E208818 = Global_error{id: "208818", eType: EXPECTED_ERROR, message: "Record import failed.tableName:{0},Errorinfo:{1} "}
var E208819 = Global_error{id: "208819", eType: EXPECTED_ERROR, message: "The record of the account that will be activated exists. The key of the account is {0}. "}
var E208820 = Global_error{id: "208820", eType: EXPECTED_ERROR, message: "Unzipping package fails. ErrorCode={0}, please try later! "}
var E208821 = Global_error{id: "208821", eType: EXPECTED_ERROR, message: "The records that the value of {0} is {1}, the value of {2} is {3}, and the value of {4} is {5} exist. "}
var E208822 = Global_error{id: "208822", eType: EXPECTED_ERROR, message: "Product extension attributes are not defined in the TS_ProductExtAttr table.AttributeID:{0} "}
var E208823 = Global_error{id: "208823", eType: EXPECTED_ERROR, message: "In the input number segment, the quantity {0} of phone numbers is greater than the specified quantity {1}. "}
var E208824 = Global_error{id: "208824", eType: EXPECTED_ERROR, message: "The product code already exists.ProductCode:{0} "}
var E208825 = Global_error{id: "208825", eType: EXPECTED_ERROR, message: "RollBack failed.logKey:{0},Errorinfo:{1} "}
var E208826 = Global_error{id: "208826", eType: EXPECTED_ERROR, message: "The customer number {0} corresponds to more than one piece of route information. "}
var E208827 = Global_error{id: "208827", eType: EXPECTED_ERROR, message: "The customer ID {0} corresponds to more than one piece of route information. "}
var E208828 = Global_error{id: "208828", eType: EXPECTED_ERROR, message: "The record of to-be-synchronized node {2} with ID {0} and version number {1} does not exist in the TB_TABLEVERSION table. "}
var E208829 = Global_error{id: "208829", eType: EXPECTED_ERROR, message: "The data of the table {0} does not need to be synchronized to the CBP. "}
var E208830 = Global_error{id: "208830", eType: EXPECTED_ERROR, message: "The credit must be a multiple of {0}. "}
var E208831 = Global_error{id: "208831", eType: EXPECTED_ERROR, message: "The credit must be smaller than: {0}. "}
var E208832 = Global_error{id: "208832", eType: EXPECTED_ERROR, message: "Failed to refresh the product offer cache. Faulty BMP node information: {0}. "}
var E208833 = Global_error{id: "208833", eType: EXPECTED_ERROR, message: "The voice service record corresponding to service key {0} already exists. "}
var E208834 = Global_error{id: "208834", eType: EXPECTED_ERROR, message: "The size of the file to be uploaded exceeds the maximum {0}. "}
var E208835 = Global_error{id: "208835", eType: EXPECTED_ERROR, message: "Container not recorded in ${ENIP_HOME}/config/node.cfg. "}
var E208836 = Global_error{id: "208836", eType: EXPECTED_ERROR, message: "Failed to parse the ${ENIP_HOME}/config/NMAdptCfg.xml file. "}
var E208837 = Global_error{id: "208837", eType: EXPECTED_ERROR, message: "The parameter name in ${ENIP_HOME}/data/mibmap is empty. "}
var E208838 = Global_error{id: "208838", eType: EXPECTED_ERROR, message: "Invalid ${ENIP_HOME}. "}
var E208839 = Global_error{id: "208839", eType: EXPECTED_ERROR, message: "The offer subscription key {0} already exists. "}
var E208840 = Global_error{id: "208840", eType: EXPECTED_ERROR, message: "The offer key {0} already exists. "}
var E208841 = Global_error{id: "208841", eType: EXPECTED_ERROR, message: "This operation is not allowed because offering {0} depends on offering {1}. "}
var E208842 = Global_error{id: "208842", eType: EXPECTED_ERROR, message: "The network type {1} of the subscriber is different from the network types of products in the offer {0}. "}
var E208843 = Global_error{id: "208843", eType: EXPECTED_ERROR, message: "The network type {1} of the product {0} is different from the network type {2} of the subscriber. "}
var E208844 = Global_error{id: "208844", eType: EXPECTED_ERROR, message: "The service {0} already exists. "}
var E208845 = Global_error{id: "208845", eType: EXPECTED_ERROR, message: "The subscriber cannot unsubscribe from the offer {0} because the allowed unsubscription date is not reached. "}
var E208846 = Global_error{id: "208846", eType: EXPECTED_ERROR, message: "The subscription attribute {1} of the offer {0} cannot be blank. "}
var E208847 = Global_error{id: "208847", eType: EXPECTED_ERROR, message: "The length of the subscription attribute {1} of the offer {0} exceeds the upper limit {2}. "}
var E208848 = Global_error{id: "208848", eType: EXPECTED_ERROR, message: "The subscription attribute {1} of the offer {0} must be an integer. "}
var E208849 = Global_error{id: "208849", eType: EXPECTED_ERROR, message: "Invalid subscription attribute {1} of the offer {0}. "}
var E208850 = Global_error{id: "208850", eType: EXPECTED_ERROR, message: "The Expiration Time value for the offer {0} to be subscribed to must be later than the current date. "}
var E208851 = Global_error{id: "208851", eType: EXPECTED_ERROR, message: "The offer {0} expires at a specified time. The expiration date cannot be later than January 1, 2037. "}
var E208852 = Global_error{id: "208852", eType: EXPECTED_ERROR, message: "The offer {0} expires at a specified time. The expiration time cannot be blank or earlier than the current time. "}
var E208853 = Global_error{id: "208853", eType: EXPECTED_ERROR, message: "The subscriber has not subscribed to the offer {0} to be unsubscribed from. "}
var E208854 = Global_error{id: "208854", eType: EXPECTED_ERROR, message: "The offer {0} does not contain the product {1}. "}
var E208855 = Global_error{id: "208855", eType: EXPECTED_ERROR, message: "The offer {0} must be bound to at least one subscriber. "}
var E208856 = Global_error{id: "208856", eType: EXPECTED_ERROR, message: "The offer {0} cannot be bound to the subscriber {1}. "}
var E208857 = Global_error{id: "208857", eType: EXPECTED_ERROR, message: "The subscriber {0} does not exist or not belong to current customer. "}
var E208858 = Global_error{id: "208858", eType: EXPECTED_ERROR, message: "Invalid parameter value {0}. "}
var E208859 = Global_error{id: "208859", eType: EXPECTED_ERROR, message: "The offer {0} cannot be subscribed to repeatedly. "}
var E208860 = Global_error{id: "208860", eType: EXPECTED_ERROR, message: "The next bill cycle information about the offer {0} does not exist. "}
var E208861 = Global_error{id: "208861", eType: EXPECTED_ERROR, message: "The hourly package {0} does not support the mode of taking effect in the next bill cycle. "}
var E208862 = Global_error{id: "208862", eType: EXPECTED_ERROR, message: "A subscriber number {1} to be bound to an offer {0} is duplicated. "}
var E208863 = Global_error{id: "208863", eType: EXPECTED_ERROR, message: "The subscription attribute {1} of the offer {0} is duplicated. "}
var E208864 = Global_error{id: "208864", eType: EXPECTED_ERROR, message: "The SMS encoding mode of language {0} is not configured. "}
var E208865 = Global_error{id: "208865", eType: EXPECTED_ERROR, message: "The length of the start number {0} is different from that of the end number {1}. "}
var E208866 = Global_error{id: "208866", eType: EXPECTED_ERROR, message: "Failed to create the file directory {0}. "}
var E208867 = Global_error{id: "208867", eType: EXPECTED_ERROR, message: "The value of suspend days must not be larger than the value {0} of OCS_MAXFREEZEDAYS. "}
var E208868 = Global_error{id: "208868", eType: EXPECTED_ERROR, message: "The call screen number {0} to be deleted does not exist. "}
var E208869 = Global_error{id: "208869", eType: EXPECTED_ERROR, message: "The system does not support the network type {0}. "}
var E208870 = Global_error{id: "208870", eType: EXPECTED_ERROR, message: "The product {0} has expired. "}
var E208871 = Global_error{id: "208871", eType: EXPECTED_ERROR, message: "Failed to obtain the international number prefix of FN {0}. "}
var E208872 = Global_error{id: "208872", eType: EXPECTED_ERROR, message: "The hourly package {0} cannot take effect on the next day. "}
var E208873 = Global_error{id: "208873", eType: EXPECTED_ERROR, message: "The subscription instance of the primary offer {0} does not exist. "}
var E208874 = Global_error{id: "208874", eType: EXPECTED_ERROR, message: "The product {0} does not exist. "}
var E208875 = Global_error{id: "208875", eType: EXPECTED_ERROR, message: "The product {0} cannot be in the Draft state. "}
var E208876 = Global_error{id: "208876", eType: EXPECTED_ERROR, message: "The product {0} is not a main product. "}
var E208877 = Global_error{id: "208877", eType: EXPECTED_ERROR, message: "The URL of the third-party entity {0} is not configured. "}
var E208878 = Global_error{id: "208878", eType: EXPECTED_ERROR, message: "The value of action {0} is invalid. "}
var E208879 = Global_error{id: "208879", eType: EXPECTED_ERROR, message: "The lower limit {0} for low balance notification exceeds the upper limit {1}. "}
var E208880 = Global_error{id: "208880", eType: EXPECTED_ERROR, message: "The message ID {0} must range from 1200 to 1299. "}
var E208881 = Global_error{id: "208881", eType: EXPECTED_ERROR, message: "The number of new records of each call type cannot exceed {0}. "}
var E208882 = Global_error{id: "208882", eType: EXPECTED_ERROR, message: "In line {0}, the value of the imported reroute flag is No Reroute, but the reroute number is not blank. "}
var E208883 = Global_error{id: "208883", eType: EXPECTED_ERROR, message: "In line {0}, the value of the imported reroute flag is not No Reroute, but the reroute number is blank. "}
var E208884 = Global_error{id: "208884", eType: EXPECTED_ERROR, message: "In line {0}, the length of the imported Special Number is larger than the maximum length. "}
var E208885 = Global_error{id: "208885", eType: EXPECTED_ERROR, message: "In line {0}, the operation code, operation type, or result code is blank. "}
var E208886 = Global_error{id: "208886", eType: EXPECTED_ERROR, message: "In line {0}, the value of the imported Prefix Type is not Inter prefix, but the international prefix is not blank. "}
var E208887 = Global_error{id: "208887", eType: EXPECTED_ERROR, message: "In line {0}, the value of the imported prefix type is Inter prefix, but the international prefix is blank. "}
var E208888 = Global_error{id: "208888", eType: EXPECTED_ERROR, message: "The data cannot be imported because the prefix type in line {0} is not Carrier Service Code(10) or P-FPH/Collect Call(7), and the call control flag is not 000000. "}
var E208889 = Global_error{id: "208889", eType: EXPECTED_ERROR, message: "The operation code, operation type, and result code in line {0} do not match. "}
var E208890 = Global_error{id: "208890", eType: EXPECTED_ERROR, message: "The data cannot be imported because the subservicekey in line {0} cannot be found in the database. "}
var E208891 = Global_error{id: "208891", eType: EXPECTED_ERROR, message: "The data cannot be imported because the SERVICEACTION in line {0} is empty. "}
var E208892 = Global_error{id: "208892", eType: EXPECTED_ERROR, message: "The data cannot be imported because the first digit of the Action field in line {0} is 2, and the subservicekey is blank. "}
var E208893 = Global_error{id: "208893", eType: EXPECTED_ERROR, message: "In line {0}, the brand ID or SubCosID is blank. "}
var E208894 = Global_error{id: "208894", eType: EXPECTED_ERROR, message: "The data cannot be imported because the first digit of the Action field in line {0} is not 2, and the subservicekey is not blank. "}
var E208895 = Global_error{id: "208895", eType: EXPECTED_ERROR, message: "The data cannot be imported because the second digit of the Action field in line {0} is 1, and the voice ID and message ID are blank. "}
var E208896 = Global_error{id: "208896", eType: EXPECTED_ERROR, message: "The data cannot be imported because the second digit of the action field in line {0} is 0, and the voice ID and message ID are not blank. "}
var E208897 = Global_error{id: "208897", eType: EXPECTED_ERROR, message: "In line {0}, the relationship between the brand ID and SubCosID is not found in the database. "}
var E208898 = Global_error{id: "208898", eType: EXPECTED_ERROR, message: "The access mode in line {0} does not match the subservicekey. "}
var E208899 = Global_error{id: "208899", eType: EXPECTED_ERROR, message: "The subservice in line {0} cannot be found. "}
var E208900 = Global_error{id: "208900", eType: EXPECTED_ERROR, message: "The access code in line {0} cannot be found. "}
var E208901 = Global_error{id: "208901", eType: EXPECTED_ERROR, message: "The subservicekey parameter in line {0} cannot be blank. "}
var E208902 = Global_error{id: "208902", eType: EXPECTED_ERROR, message: "The length of subbservicekey in line {0} is not 10 digits. "}
var E208903 = Global_error{id: "208903", eType: EXPECTED_ERROR, message: "The accessmethod parameter in line {0} cannot be blank. "}
var E208904 = Global_error{id: "208904", eType: EXPECTED_ERROR, message: "Incorrect value of Action in line {0}. "}
var E208905 = Global_error{id: "208905", eType: EXPECTED_ERROR, message: "The data cannot be imported because the ServiceFlow value in line {0} does not exist in the data dictionary. "}
var E208906 = Global_error{id: "208906", eType: EXPECTED_ERROR, message: "The data cannot be imported because Number Type in line {0} cannot be found in the data dictionary. "}
var E208907 = Global_error{id: "208907", eType: EXPECTED_ERROR, message: "The data cannot be imported because Resource Flag in line {0} cannot be found in the data dictionary. "}
var E208908 = Global_error{id: "208908", eType: EXPECTED_ERROR, message: "The data cannot be imported because SubCosID in line {0} cannot be found in the database. "}
var E208909 = Global_error{id: "208909", eType: EXPECTED_ERROR, message: "The data cannot be imported because Prefix Type in line {0} cannot be found in the data dictionary. "}
var E208910 = Global_error{id: "208910", eType: EXPECTED_ERROR, message: "The basecalltype field is not found in line {0} of the file to be imported. "}
var E208911 = Global_error{id: "208911", eType: EXPECTED_ERROR, message: "The networktype field is not found in line {0} of the file to be imported. "}
var E208912 = Global_error{id: "208912", eType: EXPECTED_ERROR, message: "The roamtype field is not found in line {0} of the file to be imported. "}
var E208913 = Global_error{id: "208913", eType: EXPECTED_ERROR, message: "The transferflag field is not found in line {0} of the file to be imported. "}
var E208914 = Global_error{id: "208914", eType: EXPECTED_ERROR, message: "The value of modflag1 in line {0} cannot be found in the data dictionary. "}
var E208915 = Global_error{id: "208915", eType: EXPECTED_ERROR, message: "The value of modflag2 in line {0} cannot be found in the data dictionary. "}
var E208916 = Global_error{id: "208916", eType: EXPECTED_ERROR, message: "The value of Trade Type in line {0} cannot be found in the data dictionary. "}
var E208917 = Global_error{id: "208917", eType: EXPECTED_ERROR, message: "The value of Life Cycle in line {0} cannot be found in the data dictionary. "}
var E208918 = Global_error{id: "208918", eType: EXPECTED_ERROR, message: "Incorrect value of Action in line {0} of the file to be imported. "}
var E208919 = Global_error{id: "208919", eType: EXPECTED_ERROR, message: "The data cannot be imported because the event and subevent in line {0} cannot be found in the database. "}
var E208920 = Global_error{id: "208920", eType: EXPECTED_ERROR, message: "The data cannot be imported because the event and subevent do not match in line {0}. "}
var E208921 = Global_error{id: "208921", eType: EXPECTED_ERROR, message: "The voice ID and message ID in line {0} of the file to be imported cannot be blank. "}
var E208922 = Global_error{id: "208922", eType: EXPECTED_ERROR, message: "The voice ID and message ID in line {0} of the file to be imported must be blank. "}
var E208923 = Global_error{id: "208923", eType: EXPECTED_ERROR, message: "The data cannot be imported because FN Type in line {0} cannot be found in the data dictionary. "}
var E208924 = Global_error{id: "208924", eType: EXPECTED_ERROR, message: "If the value of cashmoney {1} is smaller than 0 in line {0}, the values of stepmoney {1}, validdays {1}, and stepvaliddays {1} must be smaller than 0. "}
var E208925 = Global_error{id: "208925", eType: EXPECTED_ERROR, message: "If the value of stepmoney {1} is smaller than 0 in line {0}, the values of stepvaliddays {1} must be smaller than 0. "}
var E208926 = Global_error{id: "208926", eType: EXPECTED_ERROR, message: "The value of {1} must be smaller than the value of {2} in line {0}. "}
var E208927 = Global_error{id: "208927", eType: EXPECTED_ERROR, message: "The zone type in line {0} of the imported file does not match the zone ID. "}
var E208928 = Global_error{id: "208928", eType: EXPECTED_ERROR, message: "The locationtype field is not found in line {0} of the file to be imported. "}
var E208929 = Global_error{id: "208929", eType: EXPECTED_ERROR, message: "Incorrect country code in the number {0}. "}
var E208930 = Global_error{id: "208930", eType: EXPECTED_ERROR, message: "The number {0} is a special number. "}
var E208931 = Global_error{id: "208931", eType: EXPECTED_ERROR, message: "The start number {0} cannot be greater than the end number {1}. "}
var E208932 = Global_error{id: "208932", eType: EXPECTED_ERROR, message: "The number segments {0} to {1} and other number segments overlap. "}
var E208933 = Global_error{id: "208933", eType: EXPECTED_ERROR, message: "The value of prompttype in line {0} of the file to be imported cannot be found in the data dictionary. "}
var E208934 = Global_error{id: "208934", eType: EXPECTED_ERROR, message: "The value of lowbalgatetype in line {0} of the file to be imported cannot be found in the data dictionary. "}
var E208935 = Global_error{id: "208935", eType: EXPECTED_ERROR, message: "The value of lowbalgateno in line {0} of the file to be imported cannot be found in the data dictionary. "}
var E208936 = Global_error{id: "208936", eType: EXPECTED_ERROR, message: "Incorrect format of number {0}. "}
var E208937 = Global_error{id: "208937", eType: EXPECTED_ERROR, message: "The user group {0} does not exist. "}
var E208938 = Global_error{id: "208938", eType: EXPECTED_ERROR, message: "The value of promptchanneltype in line {0} of the file to be imported cannot be found in the data dictionary. "}
var E208939 = Global_error{id: "208939", eType: EXPECTED_ERROR, message: "The value of voicetype in line {0} of the file to be imported cannot be found in the data dictionary. "}
var E208940 = Global_error{id: "208940", eType: EXPECTED_ERROR, message: "When the value of the prompttype (lower balance notification mode) in line {0} of the file to be imported is 5 (indicating AOC notification), the value of promptchanneltype must be 0 (not notify), 2 (SMS notification) or 4 (USSD notification). "}
var E208941 = Global_error{id: "208941", eType: EXPECTED_ERROR, message: "When the value of the promptchanneltype (notification mode) in line {0} of the file to be imported is not 0 (not notify), the voiceNo must be an integer and greater than or equal to 1. "}
var E208942 = Global_error{id: "208942", eType: EXPECTED_ERROR, message: "If the value of object is not 11/21 or numberAttribute is not 0/6, the alterNativeFlag in line {0} of the imported file must be 0. "}
var E208943 = Global_error{id: "208943", eType: EXPECTED_ERROR, message: "The data cannot be imported because the start number in line {0} does not exist. "}
var E208944 = Global_error{id: "208944", eType: EXPECTED_ERROR, message: "If the value of oldPrefix is !, the value of changeType in line {0} of the file to be imported must be 0. "}
var E208945 = Global_error{id: "208945", eType: EXPECTED_ERROR, message: "If the value of changeType is not 2, newPrefix in line {0} of the file to be imported must be blank. "}
var E208946 = Global_error{id: "208946", eType: EXPECTED_ERROR, message: "The value of minNumberLength cannot be greater than that of maxNumberLength in line {0} of the file to be imported. "}
var E208947 = Global_error{id: "208947", eType: EXPECTED_ERROR, message: "The value of tradetype in line {0} of the file to be imported is not found in the data dictionary. "}
var E208948 = Global_error{id: "208948", eType: EXPECTED_ERROR, message: "The value of accessmethod in line {0} of the file to be imported is not found in the data dictionary. "}
var E208949 = Global_error{id: "208949", eType: EXPECTED_ERROR, message: "The value of notifyflag in line {0} of the file to be imported is not found in the data dictionary. "}
var E208950 = Global_error{id: "208950", eType: EXPECTED_ERROR, message: "The value of minNumberLength is greater than that of maxNumberLength in line {0} of the file to be imported. "}
var E208951 = Global_error{id: "208951", eType: EXPECTED_ERROR, message: "The start number {0} and end number {1} must be the same in length. "}
var E208952 = Global_error{id: "208952", eType: EXPECTED_ERROR, message: "The data cannot be imported because the end number in line {0} does not exist. "}
var E208953 = Global_error{id: "208953", eType: EXPECTED_ERROR, message: "The value of the field {1} in line {0} of the imported data must be smaller than or equal to the value of the field {2}. "}
var E208954 = Global_error{id: "208954", eType: EXPECTED_ERROR, message: "The value length of startmsisdn in line {0} of the imported data must be the same as that of stopmsisdn. "}
var E208955 = Global_error{id: "208955", eType: EXPECTED_ERROR, message: "When the value of promptchanneltype (notification mode) in line {0} of the file to be imported is 1 (voice notification) or 3 (voice and SMS notification), voiceNo cannot be blank. "}
var E208956 = Global_error{id: "208956", eType: EXPECTED_ERROR, message: "If the value of sourceEventId is 12801, 12802, 12803, 12821 or 12823, the object in line {0} of the file to be imported must be 11, 12 or 13. "}
var E208957 = Global_error{id: "208957", eType: EXPECTED_ERROR, message: "The format of the FN {0} is incorrect because the FN cannot contain letters and the length cannot be greater than 23. "}
var E208958 = Global_error{id: "208958", eType: EXPECTED_ERROR, message: "The field {1} in line {0} of the imported data contains overlapped ranges. "}
var E208959 = Global_error{id: "208959", eType: EXPECTED_ERROR, message: "The network code and country code in line {0} of the file to be imported must be associated. "}
var E208960 = Global_error{id: "208960", eType: EXPECTED_ERROR, message: "If the value of GW Address Type is 0, the GW DPC in line {0} cannot be blank. "}
var E208961 = Global_error{id: "208961", eType: EXPECTED_ERROR, message: "If the value of GW Address Type is 1, the GT Code in line {0} cannot be blank. "}
var E208962 = Global_error{id: "208962", eType: EXPECTED_ERROR, message: "The value of GW Address Type and GT Code in line {0} cannot be blank at one time. "}
var E208963 = Global_error{id: "208963", eType: EXPECTED_ERROR, message: "In line {0}, UCB prefix A cannot be equal to UCB prefix B. "}
var E208964 = Global_error{id: "208964", eType: EXPECTED_ERROR, message: "The value of the field {1} in line {0} of the imported file must be in the range from 0 (excluded) to 2147483647 (included). "}
var E208965 = Global_error{id: "208965", eType: EXPECTED_ERROR, message: "The value of minbalance in line {0} must be integer that is equal to or smaller than 2147483647. "}
var E208966 = Global_error{id: "208966", eType: EXPECTED_ERROR, message: "The value of the {1} field in line {0} of the imported file is duplicated. "}
var E208967 = Global_error{id: "208967", eType: EXPECTED_ERROR, message: "The value of the {1} field in line {0} of the imported file already exists in database. "}
var E208968 = Global_error{id: "208968", eType: EXPECTED_ERROR, message: "The value of the {1} field in line {0} of the imported file cannot include the following characters: &, #, <, >, ! ,', ?. "}
var E208969 = Global_error{id: "208969", eType: EXPECTED_ERROR, message: "The value of cugmemberamt in line {0} must be 0 during importing. "}
var E208970 = Global_error{id: "208970", eType: EXPECTED_ERROR, message: "The value of cugmemberamt in line {0} must be the same as that in the database during replacement importing. "}
var E208971 = Global_error{id: "208971", eType: EXPECTED_ERROR, message: "The number of subscribers in CUG {0} exceeds the upper limit {1}. "}
var E208972 = Global_error{id: "208972", eType: EXPECTED_ERROR, message: "The subscriber {0} does not join CUG {1}. "}
var E208973 = Global_error{id: "208973", eType: EXPECTED_ERROR, message: "Incorrect format of the CUG ID {0}. "}
var E208974 = Global_error{id: "208974", eType: EXPECTED_ERROR, message: "The length of the new password cannot be greater than the maximum length {0}. "}
var E208975 = Global_error{id: "208975", eType: EXPECTED_ERROR, message: "The length of the new password cannot be less than the minimum length {0} specified by the system. "}
var E208976 = Global_error{id: "208976", eType: EXPECTED_ERROR, message: "Incorrect format of the new password. The correct format is {0}. "}
var E208977 = Global_error{id: "208977", eType: EXPECTED_ERROR, message: "The values of upbalgate and lowbalgate in line {0} must be integers of at most 18 digits. "}
var E208978 = Global_error{id: "208978", eType: EXPECTED_ERROR, message: "The value of lowbalgate in line {0} cannot be greater than that of upbalgate. "}
var E208979 = Global_error{id: "208979", eType: EXPECTED_ERROR, message: "The range specified by lowbalgate and upbalgate in line {0} cannot overlap. "}
var E208980 = Global_error{id: "208980", eType: EXPECTED_ERROR, message: "The values of oriaccounttpe and desaccounttpe in line {0} cannot be the same. "}
var E208981 = Global_error{id: "208981", eType: EXPECTED_ERROR, message: "No subscriber is added to CUG {0}. "}
var E208982 = Global_error{id: "208982", eType: EXPECTED_ERROR, message: "The original resource type in line {0} cannot be the same as the target resource type. "}
var E208983 = Global_error{id: "208983", eType: EXPECTED_ERROR, message: "The SubCosID, access method, and access code in line {0} do not match. "}
var E208984 = Global_error{id: "208984", eType: EXPECTED_ERROR, message: "The values of Min. Recharge Amount and Max. Recharge Amount for EVC recharge in line {0} must be integers of at most 18 digits. "}
var E208985 = Global_error{id: "208985", eType: EXPECTED_ERROR, message: "The value of Max. Recharge Amount in line {0} cannot be smaller than the value of Min. Recharge Amount for EVC recharge. "}
var E208986 = Global_error{id: "208986", eType: EXPECTED_ERROR, message: "The range specified by Min. Recharge Amount and Max. Recharge Amount for EVC recharge in line {0} cannot overlap with other records. "}
var E208987 = Global_error{id: "208987", eType: EXPECTED_ERROR, message: "The values of vcname and location in line {0} cannot contain the following special characters: & # < > ! ' ? "}
var E208988 = Global_error{id: "208988", eType: EXPECTED_ERROR, message: "The values of Start Serial No and End Serial No in line {0} must be the same in length. "}
var E208989 = Global_error{id: "208989", eType: EXPECTED_ERROR, message: "The new home zone ID {0} is duplicated. "}
var E208990 = Global_error{id: "208990", eType: EXPECTED_ERROR, message: "The value of Start Serial No in line {0} cannot be greater than the value of End Serial No. "}
var E208991 = Global_error{id: "208991", eType: EXPECTED_ERROR, message: "The range from Start Serial No to End Serial No in line {0} cannot overlap with other records. "}
var E208992 = Global_error{id: "208992", eType: EXPECTED_ERROR, message: "The FN {0} is duplicated. "}
var E208993 = Global_error{id: "208993", eType: EXPECTED_ERROR, message: "The new FN {0} is duplicated. "}
var E208994 = Global_error{id: "208994", eType: EXPECTED_ERROR, message: "The value of subFunctCode1 and subFunctCode2 in line {0} cannot be blank. "}
var E208995 = Global_error{id: "208995", eType: EXPECTED_ERROR, message: "The service {0} and product {1} do not match. "}
var E208996 = Global_error{id: "208996", eType: EXPECTED_ERROR, message: "Routing information about account {0} does not exist. "}
var E208997 = Global_error{id: "208997", eType: EXPECTED_ERROR, message: "The parameter {0} cannot be blank. "}
var E208998 = Global_error{id: "208998", eType: EXPECTED_ERROR, message: "The account corresponding to {0} does not exist. "}
var E208999 = Global_error{id: "208999", eType: EXPECTED_ERROR, message: "The main product {0} does not exist. "}
var E209000 = Global_error{id: "209000", eType: EXPECTED_ERROR, message: "A default account cannot be bound to the subscriber {0} because the customer has multiple accounts of the corresponding subscriber payment type. "}
var E209001 = Global_error{id: "209001", eType: EXPECTED_ERROR, message: "Account {1} bound to the subscriber {0} is not found in the account list. "}
var E209002 = Global_error{id: "209002", eType: EXPECTED_ERROR, message: "The number of accounts of a customer exceeds the maximum number {0}. "}
var E209003 = Global_error{id: "209003", eType: EXPECTED_ERROR, message: "The offer {0} is not at the account level. "}
var E209004 = Global_error{id: "209004", eType: EXPECTED_ERROR, message: "The offer {0} is not at the subscriber level. "}
var E209005 = Global_error{id: "209005", eType: EXPECTED_ERROR, message: "The group member offer {0} can be bound to only one subscriber. "}
var E209006 = Global_error{id: "209006", eType: EXPECTED_ERROR, message: "The group member offer {0} must be bound to a group member. "}
var E209007 = Global_error{id: "209007", eType: EXPECTED_ERROR, message: "Failed to authenticate the status of the subscriber bound to the offer {0}. "}
var E209008 = Global_error{id: "209008", eType: EXPECTED_ERROR, message: "The main product {1} and group {2} in the offer {0} do not match, or the offer {0} does not have group {2}. "}
var E209009 = Global_error{id: "209009", eType: EXPECTED_ERROR, message: "The group ID of the main product {0} is mandatory. "}
var E209010 = Global_error{id: "209010", eType: EXPECTED_ERROR, message: "Routing information about the customer {0} cannot be found. "}
var E209011 = Global_error{id: "209011", eType: EXPECTED_ERROR, message: "Two account codes are {0} in the account interface, or the account code {0} already exists in the database. "}
var E209012 = Global_error{id: "209012", eType: EXPECTED_ERROR, message: "The customer ID {0} already exists. "}
var E209013 = Global_error{id: "209013", eType: EXPECTED_ERROR, message: "Two account IDs are {0} in the account interface, or the account ID {0} already exists in the database. "}
var E209014 = Global_error{id: "209014", eType: EXPECTED_ERROR, message: "The customer code {0} already exists. "}
var E209015 = Global_error{id: "209015", eType: EXPECTED_ERROR, message: "Two subscriber codes are {0} in the subscriber interface. "}
var E209016 = Global_error{id: "209016", eType: EXPECTED_ERROR, message: "The query parameter {0} is not supported. "}
var E209017 = Global_error{id: "209017", eType: EXPECTED_ERROR, message: "The system cannot process concurrent services at the same time. The current trade type is {0}, and the concurrent trade type is {1}. "}
var E209018 = Global_error{id: "209018", eType: EXPECTED_ERROR, message: "The customer corresponding to the customer code {0} does not exist. "}
var E209019 = Global_error{id: "209019", eType: EXPECTED_ERROR, message: "The customer corresponding to the account code {0} does not exist. "}
var E209020 = Global_error{id: "209020", eType: EXPECTED_ERROR, message: "The value {0} must be larger than 0. "}
var E209021 = Global_error{id: "209021", eType: EXPECTED_ERROR, message: "The entered registration ID {0} of an existing customer is in the deregistered state. "}
var E209022 = Global_error{id: "209022", eType: EXPECTED_ERROR, message: "A subscription instance must be specified because the offer {0} has multiple subscription instances. "}
var E209023 = Global_error{id: "209023", eType: EXPECTED_ERROR, message: "The subscriber {0} is not found in the switched subscriber list. "}
var E209024 = Global_error{id: "209024", eType: EXPECTED_ERROR, message: "Offer {0} has not taken effect and cannot be subscribed to. "}
var E209025 = Global_error{id: "209025", eType: EXPECTED_ERROR, message: "No replacement relationship is configured for replacing primary offer {0} with primary offer {1}. "}
var E209026 = Global_error{id: "209026", eType: EXPECTED_ERROR, message: "The subscription property {1} of product {0} is duplicated. "}
var E209027 = Global_error{id: "209027", eType: EXPECTED_ERROR, message: "The primary offer cannot be changed before {0}. "}
var E209028 = Global_error{id: "209028", eType: EXPECTED_ERROR, message: "The bill {0} does not exist. "}
var E209029 = Global_error{id: "209029", eType: EXPECTED_ERROR, message: "The account type {0} does not exist. "}
var E209030 = Global_error{id: "209030", eType: EXPECTED_ERROR, message: "The main product {0} exists in multiple groups. You must specify a group ID. "}
var E209031 = Global_error{id: "209031", eType: EXPECTED_ERROR, message: "The primary offer {0} already exists. "}
var E209032 = Global_error{id: "209032", eType: EXPECTED_ERROR, message: "The subscriber already subscribes to offer {0}, and the offer does not take effect. It cannot be subscribed to repeatedly. "}
var E209033 = Global_error{id: "209033", eType: EXPECTED_ERROR, message: "When the subscriber {0} is in the Idle state, ValidMode must be set to Immediate. "}
var E209034 = Global_error{id: "209034", eType: EXPECTED_ERROR, message: "The customer {0} does not have valid subscribers. "}
var E209035 = Global_error{id: "209035", eType: EXPECTED_ERROR, message: "A default account cannot be bound to the subscriber {0} because the customer does not have an account of the corresponding subscriber payment type. "}
var E209036 = Global_error{id: "209036", eType: EXPECTED_ERROR, message: "The payment mode of the subscriber {0} is different from that of the account {1}. "}
var E209037 = Global_error{id: "209037", eType: EXPECTED_ERROR, message: "The account code cannot be specified because the payment type of the subscriber {0} is not changed. "}
var E209038 = Global_error{id: "209038", eType: EXPECTED_ERROR, message: "The transaction type {0} does not exist. "}
var E209039 = Global_error{id: "209039", eType: EXPECTED_ERROR, message: "{0} does not exist. "}
var E209040 = Global_error{id: "209040", eType: EXPECTED_ERROR, message: "The tax code {0} does not exist. "}
var E209041 = Global_error{id: "209041", eType: EXPECTED_ERROR, message: "The {0} value is smaller than 0. "}
var E209042 = Global_error{id: "209042", eType: EXPECTED_ERROR, message: "The {0} value is smaller than 0 or is not a numeric string. "}
var E209043 = Global_error{id: "209043", eType: EXPECTED_ERROR, message: "Failed to verify the date {0}. "}
var E209044 = Global_error{id: "209044", eType: EXPECTED_ERROR, message: "{0} must be positive integer or 0. "}
var E209045 = Global_error{id: "209045", eType: EXPECTED_ERROR, message: "Refund Amt. is larger than the account balance. The unapplied payment is {0}, outstanding amount is {1}, business fee is {2}, and the maximum refundable amount is {3}. "}
var E209046 = Global_error{id: "209046", eType: EXPECTED_ERROR, message: "The unapplied amount is insufficient. The unapplied payment is {0}, outstanding amount is {1}, business fee is {2}, and the maximum refundable amount is {3}. "}
var E209047 = Global_error{id: "209047", eType: EXPECTED_ERROR, message: "{0} cannot be empty. "}
var E209048 = Global_error{id: "209048", eType: EXPECTED_ERROR, message: "Mandatory field {0} in the batch transaction file cannot be empty. "}
var E209049 = Global_error{id: "209049", eType: EXPECTED_ERROR, message: "{0} is left empty or its value is incorrect. "}
var E209050 = Global_error{id: "209050", eType: EXPECTED_ERROR, message: "The {0} value cannot contain more than 8 characters. "}
var E209051 = Global_error{id: "209051", eType: EXPECTED_ERROR, message: "The {0} field in the request header cannot be empty. "}
var E209052 = Global_error{id: "209052", eType: EXPECTED_ERROR, message: "The account balance is insufficient, and the refund request is failed. The unapplied payment is {0}, outstanding amount is {1}, business fee is {2}, and the maximum refundable request amount is {3}. "}
var E209053 = Global_error{id: "209053", eType: EXPECTED_ERROR, message: "The transfer amount cannot be greater than the advance payment subtract the outstanding amount. The advance payment is {0}, outstanding amount is {1}, and the maximum transfer amount is {2}. "}
var E209054 = Global_error{id: "209054", eType: EXPECTED_ERROR, message: "Incorrect CR rule configurations for GL generated for financial activities, log detail id = {0} . "}
var E209055 = Global_error{id: "209055", eType: EXPECTED_ERROR, message: "Incorrect DR rule configurations for GL generated for financial activities, log detail id = {0} . "}
var E209056 = Global_error{id: "209056", eType: EXPECTED_ERROR, message: "Bill cycle ID {0} does not exist. "}
var E209057 = Global_error{id: "209057", eType: EXPECTED_ERROR, message: "The adjustment cannot be performed in bill cycle {1} because bill run is not performed on account {0} in the bill cycle. "}
var E209058 = Global_error{id: "209058", eType: EXPECTED_ERROR, message: "The transfer amount of a prepaid subscriber cannot be greater than the advance payment minus the outstanding business fee. The advance payment is {0}, the outstanding business fee is {1}, and the maximum transfer amount is {2}. "}
var E209059 = Global_error{id: "209059", eType: EXPECTED_ERROR, message: "Failed to execute the job with the JobId being {0}. "}
var E209060 = Global_error{id: "209060", eType: EXPECTED_ERROR, message: "{0} cannot be empty when PaymentMethod is set to 1003. "}
var E209061 = Global_error{id: "209061", eType: EXPECTED_ERROR, message: "Failed to monitor performance or execute the intercepted action because {0}. "}
var E209062 = Global_error{id: "209062", eType: EXPECTED_ERROR, message: "Operation succeeded, but {0} errors occurred. The error description is {1} "}
var E209063 = Global_error{id: "209063", eType: EXPECTED_ERROR, message: "{0} exists in {1}. "}
var E209064 = Global_error{id: "209064", eType: EXPECTED_ERROR, message: "The parameter {0} is left blank. "}
var E209065 = Global_error{id: "209065", eType: EXPECTED_ERROR, message: "Invalid input parameter {0}. "}
var E209066 = Global_error{id: "209066", eType: EXPECTED_ERROR, message: "No unclaimed account is configured for payment mode {0} and payment channel {1}. "}
var E209067 = Global_error{id: "209067", eType: EXPECTED_ERROR, message: "You have accumulated {0}. The total accumulated cash payment amount must be less than the maximum payment amount {1}. "}
var E209068 = Global_error{id: "209068", eType: EXPECTED_ERROR, message: "Failed to query the available credit of the subscriber because {0} "}
var E209069 = Global_error{id: "209069", eType: EXPECTED_ERROR, message: "Line {0} in the file is incorrect because {1} "}
var E209070 = Global_error{id: "209070", eType: EXPECTED_ERROR, message: "Line {0} in the file is incorrect. "}
var E209071 = Global_error{id: "209071", eType: EXPECTED_ERROR, message: "The number of fields separated by vertical must be larger than {0}. "}
var E209072 = Global_error{id: "209072", eType: EXPECTED_ERROR, message: "The number of fields separated by vertical must be equal {0}. "}
var E209073 = Global_error{id: "209073", eType: EXPECTED_ERROR, message: "The format of parameter {0} is invalid. The correct format is {1}. "}
var E209074 = Global_error{id: "209074", eType: EXPECTED_ERROR, message: "The account {0} is in CASH-ONLY state and payment by check before {1} is not allowed. "}
var E209075 = Global_error{id: "209075", eType: EXPECTED_ERROR, message: "The check date must range from {0} to {1} for payment by check. "}
var E209076 = Global_error{id: "209076", eType: EXPECTED_ERROR, message: "This action is not allowed while account {0} is in handed over state. "}
var E209077 = Global_error{id: "209077", eType: EXPECTED_ERROR, message: "Incorrect file format. Upload a file in the {0} format. "}
var E209078 = Global_error{id: "209078", eType: EXPECTED_ERROR, message: "The account does not match BSNO {0} and DepositType {1}. "}
var E209079 = Global_error{id: "209079", eType: EXPECTED_ERROR, message: "The format of the head line is incorrect due to {0}. "}
var E209080 = Global_error{id: "209080", eType: EXPECTED_ERROR, message: "The format of the tail line is incorrect due to {0}. "}
var E209081 = Global_error{id: "209081", eType: EXPECTED_ERROR, message: "The line in the file must be ended with {0}. "}
var E209082 = Global_error{id: "209082", eType: EXPECTED_ERROR, message: "The date span between the start date and end date cannot be larger than {0} days. "}
var E209083 = Global_error{id: "209083", eType: EXPECTED_ERROR, message: "Invalid {0} value. "}
var E209084 = Global_error{id: "209084", eType: EXPECTED_ERROR, message: "The operator is not allowed to reject virtual payment requests submitted before {0}. "}
var E209085 = Global_error{id: "209085", eType: EXPECTED_ERROR, message: "The available refund amount of the subscriber is insufficient. The creditId is {0}, available refund amount is {1}, and the requested refund amount is {2}. "}
var E209086 = Global_error{id: "209086", eType: EXPECTED_ERROR, message: "Deposit payment with the BSNO {0} and DepositType {1} has been released. "}
var E209087 = Global_error{id: "209087", eType: EXPECTED_ERROR, message: "Unknown error. {0} "}
var E209088 = Global_error{id: "209088", eType: EXPECTED_ERROR, message: "The deposit amount is insufficient, resulting in the failure to process the deposit refund request. The deposit amount is {0}, outstanding amount is {1}, and outstanding business fee is {2}, maximum refundable amount is {3}. "}
var E209089 = Global_error{id: "209089", eType: EXPECTED_ERROR, message: "The transfer-out amount is larger than the maximum hourly transfer-out amount. The remaining transfer-out amount of this hour is {0}. "}
var E209090 = Global_error{id: "209090", eType: EXPECTED_ERROR, message: "The transfer-out amount is larger than the maximum daily transfer-out amount. The remaining transfer-out amount of today is {0}. "}
var E209091 = Global_error{id: "209091", eType: EXPECTED_ERROR, message: "The transfer-out amount is larger than the maximum weekly transfer-out amount. The remaining transfer-out amount of this week is {0}. "}
var E209092 = Global_error{id: "209092", eType: EXPECTED_ERROR, message: "The transfer-out amount is larger than the maximum monthly transfer-out amount. The remaining transfer-out amount of this month is {0}. "}
var E209093 = Global_error{id: "209093", eType: EXPECTED_ERROR, message: "The number of transfer-out times is larger than the maximum number of daily transfer-out times. The remaining number of transfer-out times on the day is {0}. "}
var E209094 = Global_error{id: "209094", eType: EXPECTED_ERROR, message: "The number of transfer-out times is larger than the maximum number of weekly transfer-out times. The remaining number of transfer-out times in this week is {0}. "}
var E209095 = Global_error{id: "209095", eType: EXPECTED_ERROR, message: "The number of transfer-out times is larger than the maximum number of monthly transfer-out times. The remaining number of transfer-out times in this month is {0}. "}
var E209096 = Global_error{id: "209096", eType: EXPECTED_ERROR, message: "An error occurred when invoking the oneDC to query the minimum resumption amount because {0}. "}
var E209097 = Global_error{id: "209097", eType: EXPECTED_ERROR, message: "The value of the parameter [{0}] is incorrect. "}
var E209098 = Global_error{id: "209098", eType: EXPECTED_ERROR, message: "The file size cannot exceed {0} bytes. "}
var E209099 = Global_error{id: "209099", eType: EXPECTED_ERROR, message: "The file cannot contain more than {0} lines. "}
var E209100 = Global_error{id: "209100", eType: EXPECTED_ERROR, message: "The bill cycle {0} does not exist. "}
var E209101 = Global_error{id: "209101", eType: EXPECTED_ERROR, message: "Invalid value {0} of DUEDATE. "}
var E209102 = Global_error{id: "209102", eType: EXPECTED_ERROR, message: "The action {0} is invalid. "}
var E209103 = Global_error{id: "209103", eType: EXPECTED_ERROR, message: "The group {0} is invalid. "}
var E209104 = Global_error{id: "209104", eType: EXPECTED_ERROR, message: "The number of non-dunning days cannot be greater than {0}. "}
var E209105 = Global_error{id: "209105", eType: EXPECTED_ERROR, message: "{0} already exists. "}
var E209106 = Global_error{id: "209106", eType: EXPECTED_ERROR, message: "The reason cannot contain more than {0} characters. "}
var E209107 = Global_error{id: "209107", eType: EXPECTED_ERROR, message: "The value of the {0} parameter is incorrect. "}
var E209108 = Global_error{id: "209108", eType: EXPECTED_ERROR, message: "The value {1} of field {0} already exists. "}
var E209109 = Global_error{id: "209109", eType: EXPECTED_ERROR, message: "The primary key is duplicated when adding {0} data. "}
var E209110 = Global_error{id: "209110", eType: EXPECTED_ERROR, message: "Bill run cannot be performed on the account in the special bill cycle {0}. "}
var E209111 = Global_error{id: "209111", eType: EXPECTED_ERROR, message: "No data about the previous bill cycle of bill cycle {0} is found. "}
var E209112 = Global_error{id: "209112", eType: EXPECTED_ERROR, message: "Incorrect value format of {0}. "}
var E209113 = Global_error{id: "209113", eType: EXPECTED_ERROR, message: "{0} contains invalid characters. "}
var E209114 = Global_error{id: "209114", eType: EXPECTED_ERROR, message: "The interzone {0} mapping {1} and {2} is exist. "}
var E209115 = Global_error{id: "209115", eType: EXPECTED_ERROR, message: "The customer group has been bound to a bill template whose ID is {0} and whose language is {1}. "}
var E209116 = Global_error{id: "209116", eType: EXPECTED_ERROR, message: "The priority exists. The entered priority is the same as the priority of the marketing message {0}. "}
var E209117 = Global_error{id: "209117", eType: EXPECTED_ERROR, message: "{0}, {1}, and {2} in this bill item cannot be the same as those of another bill item at the same time. "}
var E209118 = Global_error{id: "209118", eType: EXPECTED_ERROR, message: "The value of {0} already exists. "}
var E209119 = Global_error{id: "209119", eType: EXPECTED_ERROR, message: "Sample billing cannot be performed on CST subscriber {0}. "}
var E209120 = Global_error{id: "209120", eType: EXPECTED_ERROR, message: "An error occurs in line {0}, {1}. "}
var E209121 = Global_error{id: "209121", eType: EXPECTED_ERROR, message: "The entered priority is the same as that of batch {0}. "}
var E209122 = Global_error{id: "209122", eType: EXPECTED_ERROR, message: "The {0} length must be smaller than 33. "}
var E209123 = Global_error{id: "209123", eType: EXPECTED_ERROR, message: "A mask rule has been configured for {0} within the time segment. "}
var E209124 = Global_error{id: "209124", eType: EXPECTED_ERROR, message: "A detailed bill suppress rule has been configured for {0} within the time segment. "}
var E209125 = Global_error{id: "209125", eType: EXPECTED_ERROR, message: "The bill cycle type whose bill cycle type is {0} does not exist. "}
var E209126 = Global_error{id: "209126", eType: EXPECTED_ERROR, message: "The format of parameter {0} is incorrect. "}
var E209127 = Global_error{id: "209127", eType: EXPECTED_ERROR, message: "The values of {0} cannot be blank. "}
var E209128 = Global_error{id: "209128", eType: EXPECTED_ERROR, message: "Parameter {0} is empty or the format is incorrect. "}
var E209129 = Global_error{id: "209129", eType: EXPECTED_ERROR, message: "The OpenAmount({0}) must match the amount({1}) of the newOpenAmount in the node NewPeriodSegmentList. "}
var E209130 = Global_error{id: "209130", eType: EXPECTED_ERROR, message: "The value of {0} must be an integer in the range {1}. "}
var E209131 = Global_error{id: "209131", eType: EXPECTED_ERROR, message: "The value of {0} must be a numeric string. "}
var E209132 = Global_error{id: "209132", eType: EXPECTED_ERROR, message: "The value of {0} must be later than the value of {1}. "}
var E209133 = Global_error{id: "209133", eType: EXPECTED_ERROR, message: "The length of the {0} array must be the same as the value of the {1} parameter. "}
var E209134 = Global_error{id: "209134", eType: EXPECTED_ERROR, message: "The value of {0} cannot be blank and must be  {1} or  {2}. "}
var E209135 = Global_error{id: "209135", eType: EXPECTED_ERROR, message: "An error occurred when invoking the {0} interface in AR. "}
var E209136 = Global_error{id: "209136", eType: EXPECTED_ERROR, message: "The {0} table does not exist. "}
var E209137 = Global_error{id: "209137", eType: EXPECTED_ERROR, message: "No batch name corresponds to the batch ID {0}. "}
var E209138 = Global_error{id: "209138", eType: EXPECTED_ERROR, message: "The value of {0} must be 0 or 1. "}
var E209139 = Global_error{id: "209139", eType: EXPECTED_ERROR, message: "Failed to synchronize {0} information. "}
var E209140 = Global_error{id: "209140", eType: EXPECTED_ERROR, message: "The {0} value can only be 0, 1, or 2. "}
var E209141 = Global_error{id: "209141", eType: EXPECTED_ERROR, message: "The {0} does not match the {1} value. "}
var E209142 = Global_error{id: "209142", eType: EXPECTED_ERROR, message: "No {0} operation request found. "}
var E209143 = Global_error{id: "209143", eType: EXPECTED_ERROR, message: "The value of the {0} parameter is incorrect, The value must be {1}. "}
var E209144 = Global_error{id: "209144", eType: EXPECTED_ERROR, message: "At least one of the following parameters is required: {0} "}
var E209145 = Global_error{id: "209145", eType: EXPECTED_ERROR, message: "The tax package whose ID is {0} does not exist. "}
var E209146 = Global_error{id: "209146", eType: EXPECTED_ERROR, message: "The date span between the start date and end date is larger than {0}. "}
var E209147 = Global_error{id: "209147", eType: EXPECTED_ERROR, message: "The format of parameter {0} is incorrect. The parameter value contains only 8 or 10 digits. "}
var E209148 = Global_error{id: "209148", eType: EXPECTED_ERROR, message: "The length of parameter {0} is incorrect. "}
var E209149 = Global_error{id: "209149", eType: EXPECTED_ERROR, message: "Failed to read the task {0} "}
var E209150 = Global_error{id: "209150", eType: EXPECTED_ERROR, message: "Failed to synchronize {1} due to failure to perform the {0} operation. "}
var E209151 = Global_error{id: "209151", eType: EXPECTED_ERROR, message: "The button information corresponding to step {0} is not found. "}
var E209152 = Global_error{id: "209152", eType: EXPECTED_ERROR, message: "No batch information about bill cycle {0} is found. "}
var E209153 = Global_error{id: "209153", eType: EXPECTED_ERROR, message: "The current bill cycle whose bill cycle type is {0} does not exist. "}
var E209154 = Global_error{id: "209154", eType: EXPECTED_ERROR, message: "You cannot regenerate bills for bill cycle {0}. "}
var E209155 = Global_error{id: "209155", eType: EXPECTED_ERROR, message: "Incorrect delivery status of the {0} bill. "}
var E209156 = Global_error{id: "209156", eType: EXPECTED_ERROR, message: "Incorrect delivery time format of the {0} bill. "}
var E209157 = Global_error{id: "209157", eType: EXPECTED_ERROR, message: "Incorrect parameter quantity in {0}. "}
var E209158 = Global_error{id: "209158", eType: EXPECTED_ERROR, message: "Invalid parameter {0}. "}
var E209159 = Global_error{id: "209159", eType: EXPECTED_ERROR, message: "In {2} of line {1} of file {0}, the start number and end number are different in length. "}
var E209160 = Global_error{id: "209160", eType: EXPECTED_ERROR, message: "In {2} of line {1} of file {0}, the start number is larger than the end number. "}
var E209161 = Global_error{id: "209161", eType: EXPECTED_ERROR, message: "Failed to add the number {0} because the number is in the FN blacklist of the subscriber. "}
var E209162 = Global_error{id: "209162", eType: EXPECTED_ERROR, message: "Failed to add the number {0} because the number is not in the FN whitelist of the subscriber. "}
var E209163 = Global_error{id: "209163", eType: EXPECTED_ERROR, message: "The FN {0} to be added already exists. "}
var E209164 = Global_error{id: "209164", eType: EXPECTED_ERROR, message: "The FN {0} to be deleted does not exist. "}
var E209165 = Global_error{id: "209165", eType: EXPECTED_ERROR, message: "The FN {0} to be changed does not exist. "}
var E209166 = Global_error{id: "209166", eType: EXPECTED_ERROR, message: "Number analysis failed. The FN {0} entered by the subscriber is the subscriber number {1}. "}
var E209167 = Global_error{id: "209167", eType: EXPECTED_ERROR, message: "The number of FN groups exceeds the upper limit {0}. "}
var E209168 = Global_error{id: "209168", eType: EXPECTED_ERROR, message: "The number of FNs in FN group {0} exceeds the upper limit {1}. "}
var E209169 = Global_error{id: "209169", eType: EXPECTED_ERROR, message: "The number of FNs of the type {0} in the FN group exceeds the upper limit {1}. "}
var E209170 = Global_error{id: "209170", eType: EXPECTED_ERROR, message: "The home zone ID {0} does not exist. "}
var E209171 = Global_error{id: "209171", eType: EXPECTED_ERROR, message: "The home zone ID {0} to be deleted or changed does not exist. "}
var E209172 = Global_error{id: "209172", eType: EXPECTED_ERROR, message: "The subscriber is already in home zone {0}. "}
var E209173 = Global_error{id: "209173", eType: EXPECTED_ERROR, message: "The number of home zones that the subscriber joins exceeds the upper limit {0}. "}
var E209174 = Global_error{id: "209174", eType: EXPECTED_ERROR, message: "The start MSISDN of {2} in line {1} of the file {0} is greater than the end MSISDN. "}
var E209175 = Global_error{id: "209175", eType: EXPECTED_ERROR, message: "The start number and the end number of {2} in line {1} of the file {0} are different in length. "}
var E209176 = Global_error{id: "209176", eType: EXPECTED_ERROR, message: "The start IMSI and end IMSI of {2} in line {1} of the file {0} are different in length. "}
var E209177 = Global_error{id: "209177", eType: EXPECTED_ERROR, message: "The start IMSI of {2} in line {1} of the file {0} is greater than the end IMSI. "}
var E209178 = Global_error{id: "209178", eType: EXPECTED_ERROR, message: "The number of IMSIs of {2} in line {1} of the file {0} is different from the number of MSISDNs. "}
var E209179 = Global_error{id: "209179", eType: EXPECTED_ERROR, message: "The registration request file of {2} in line {1} of the file {0} is in an incorrect format. "}
var E209180 = Global_error{id: "209180", eType: EXPECTED_ERROR, message: "The system does not support the query type {0}. "}
var E209181 = Global_error{id: "209181", eType: EXPECTED_ERROR, message: "The request file {0} does not exist or has no valid data. "}
var E209182 = Global_error{id: "209182", eType: EXPECTED_ERROR, message: "SCP {0} does not exist. "}
var E209183 = Global_error{id: "209183", eType: EXPECTED_ERROR, message: "SDP {0} does not exist. "}
var E209184 = Global_error{id: "209184", eType: EXPECTED_ERROR, message: "CBP {0} does not exist. "}
var E209185 = Global_error{id: "209185", eType: EXPECTED_ERROR, message: "Incorrect number type {0}. "}
var E209186 = Global_error{id: "209186", eType: EXPECTED_ERROR, message: "Incorrect format of the number {0}. "}
var E209187 = Global_error{id: "209187", eType: EXPECTED_ERROR, message: "Invalid offer {0}. "}
var E209188 = Global_error{id: "209188", eType: EXPECTED_ERROR, message: "The number segment {0}-{1} overlaps with the number segment {2}-{3}. "}
var E209189 = Global_error{id: "209189", eType: EXPECTED_ERROR, message: "There is no suspension record for the subscriber {0} in the database. "}
var E209190 = Global_error{id: "209190", eType: EXPECTED_ERROR, message: "The value of {0} cannot be blank. "}
var E209191 = Global_error{id: "209191", eType: EXPECTED_ERROR, message: "Incorrect setting of {0}. "}
var E209192 = Global_error{id: "209192", eType: EXPECTED_ERROR, message: "The number {0} already exists in the call screen list. "}
var E209193 = Global_error{id: "209193", eType: EXPECTED_ERROR, message: "The new number {0} conflicts with an existing number. "}
var E209194 = Global_error{id: "209194", eType: EXPECTED_ERROR, message: "Incorrect format for {0}. "}
var E209195 = Global_error{id: "209195", eType: EXPECTED_ERROR, message: "{0} is a special number. "}
var E209196 = Global_error{id: "209196", eType: EXPECTED_ERROR, message: "The number resource {0} does not exist in the OCS. "}
var E209197 = Global_error{id: "209197", eType: EXPECTED_ERROR, message: "The number resource {0} is unavailable in the OCS. "}
var E209198 = Global_error{id: "209198", eType: EXPECTED_ERROR, message: "The number resource {0} is in use. "}
var E209199 = Global_error{id: "209199", eType: EXPECTED_ERROR, message: "The length of the service number {0} exceeds the upper limit {1}. "}
var E209200 = Global_error{id: "209200", eType: EXPECTED_ERROR, message: "The length of the service number {0} is less than the lower limit {1}. "}
var E209201 = Global_error{id: "209201", eType: EXPECTED_ERROR, message: "The service number {0} is in an incorrect format. A valid service number must meet the regular expression {1}. "}
var E209202 = Global_error{id: "209202", eType: EXPECTED_ERROR, message: "The number segment routing information about the subscriber {0} does not exist. "}
var E209203 = Global_error{id: "209203", eType: EXPECTED_ERROR, message: "Incorrect interface parameter: {0}. "}
var E209204 = Global_error{id: "209204", eType: EXPECTED_ERROR, message: "The number of characters contained in the password exceeds the upper limit {0}. "}
var E209205 = Global_error{id: "209205", eType: EXPECTED_ERROR, message: "The number of characters contained in the password is smaller than the lower limit {0}. "}
var E209206 = Global_error{id: "209206", eType: EXPECTED_ERROR, message: "Incorrect password format. The password must comply with the rule {0}. "}
var E209207 = Global_error{id: "209207", eType: EXPECTED_ERROR, message: "Incorrect subscriber attribute {0}. "}
var E209208 = Global_error{id: "209208", eType: EXPECTED_ERROR, message: "The offer {0} is not an optional offer. "}
var E209209 = Global_error{id: "209209", eType: EXPECTED_ERROR, message: "The offer {0} is not of the subscription type. "}
var E209210 = Global_error{id: "209210", eType: EXPECTED_ERROR, message: "The offer {0} to be unsubscribed from is not in the list of offers that the subscriber subscribes to. "}
var E209211 = Global_error{id: "209211", eType: EXPECTED_ERROR, message: "The release time of the offer {0} is not in the time range from {1} to {2}. "}
var E209212 = Global_error{id: "209212", eType: EXPECTED_ERROR, message: "The offer {0} does not exist. "}
var E209213 = Global_error{id: "209213", eType: EXPECTED_ERROR, message: "The offer instance {0} does not exist. "}
var E209214 = Global_error{id: "209214", eType: EXPECTED_ERROR, message: "The offers {0} and {1} are mutually exclusive. "}
var E209215 = Global_error{id: "209215", eType: EXPECTED_ERROR, message: "The offer {0} is in the draft state. "}
var E209216 = Global_error{id: "209216", eType: EXPECTED_ERROR, message: "The offer {0} is in the test state. "}
var E209217 = Global_error{id: "209217", eType: EXPECTED_ERROR, message: "The offer {0} is a CUG offer. "}
var E209218 = Global_error{id: "209218", eType: EXPECTED_ERROR, message: "The routing information about the customer to which the subscriber {0} belongs does not exist. "}
var E209219 = Global_error{id: "209219", eType: EXPECTED_ERROR, message: "The request file {0} is in an incorrect format. "}
var E209220 = Global_error{id: "209220", eType: EXPECTED_ERROR, message: "The customer to which the subscriber {0} belongs does not exist. "}
var E209221 = Global_error{id: "209221", eType: EXPECTED_ERROR, message: "The data {2} in line {1} in the request file {0} is not a numeric string. "}
var E209222 = Global_error{id: "209222", eType: EXPECTED_ERROR, message: "The number of valid phone numbers in the batch request file is greater than the maximum number {0} that can be processed in the batch registration. "}
var E209223 = Global_error{id: "209223", eType: EXPECTED_ERROR, message: "The subscriber {0} is not activated. "}
var E209224 = Global_error{id: "209224", eType: EXPECTED_ERROR, message: "Invalid attribute {0}. "}
var E209225 = Global_error{id: "209225", eType: EXPECTED_ERROR, message: "The routing information about the subscriber {0} does not exist. "}
var E209226 = Global_error{id: "209226", eType: EXPECTED_ERROR, message: "The parameter {1} of the subbrand {0} does not exist. "}
var E209227 = Global_error{id: "209227", eType: EXPECTED_ERROR, message: "The subscription relationship {0} of the primary offer does not exist. "}
var E209228 = Global_error{id: "209228", eType: EXPECTED_ERROR, message: "The property {1} of the subscriber {0} is duplicated. "}
var E209229 = Global_error{id: "209229", eType: EXPECTED_ERROR, message: "The subscriber {0} cannot be found in the subscriber number list for registration. "}
var E209230 = Global_error{id: "209230", eType: EXPECTED_ERROR, message: "Failed to obtain the default bill cycle of the offer {0}. "}
var E209231 = Global_error{id: "209231", eType: EXPECTED_ERROR, message: "The number of subscribers is different from the number of main products contained in the primary offer {0}. "}
var E209232 = Global_error{id: "209232", eType: EXPECTED_ERROR, message: "The subscriber at {0} exists and cannot be registered again. "}
var E209233 = Global_error{id: "209233", eType: EXPECTED_ERROR, message: "The primary offer {1} does not include the optional offer {0}. "}
var E209234 = Global_error{id: "209234", eType: EXPECTED_ERROR, message: "The optional offer {0} is not appended to the primary offer {1}. "}
var E209235 = Global_error{id: "209235", eType: EXPECTED_ERROR, message: "The offer {0} is not a primary offer. "}
var E209236 = Global_error{id: "209236", eType: EXPECTED_ERROR, message: "Receipt is not allowed to be voided. "}
var E209237 = Global_error{id: "209237", eType: EXPECTED_ERROR, message: "GL Location Branch Code does not exist. "}
var E209238 = Global_error{id: "209238", eType: EXPECTED_ERROR, message: "Subscriber is currently marked with this agreement check flag. "}
var E209239 = Global_error{id: "209239", eType: EXPECTED_ERROR, message: "This is family number; all members will be using this email for e-invoice sending. SMS and email will be sent to inform everyone in the family after subscription is completed. "}
var E209240 = Global_error{id: "209240", eType: EXPECTED_ERROR, message: "Date Of Birth cannot be less than minimum date. "}
var E209241 = Global_error{id: "209241", eType: EXPECTED_ERROR, message: "Warning with duplicated record. "}
var E209242 = Global_error{id: "209242", eType: EXPECTED_ERROR, message: "Success with updating brand/model. "}
var E209243 = Global_error{id: "209243", eType: EXPECTED_ERROR, message: "New card number is not the same as the old card. "}
var E209244 = Global_error{id: "209244", eType: EXPECTED_ERROR, message: "This number is ALC/EPC customer. The customer will lose the benefit of calling at special rate to in group corporate. "}
var E209245 = Global_error{id: "209245", eType: EXPECTED_ERROR, message: "Expiry date must be equal or earlier than package end date. "}
var E209246 = Global_error{id: "209246", eType: EXPECTED_ERROR, message: "Cannot register VPN member Because CBS cannot be operated. "}
var E209247 = Global_error{id: "209247", eType: EXPECTED_ERROR, message: "Invalid postpaid promotion. "}
var E209248 = Global_error{id: "209248", eType: EXPECTED_ERROR, message: "Invalid frozen status. "}
var E209249 = Global_error{id: "209249", eType: EXPECTED_ERROR, message: "Alert Method must be enter 1 more method for 'E-mail' or 'Paper' method. "}
var E209250 = Global_error{id: "209250", eType: EXPECTED_ERROR, message: "Subscriber has outstanding amount. Would  you like to continue process? "}
var E209251 = Global_error{id: "209251", eType: EXPECTED_ERROR, message: "Credit contact number length must be 11 digits "}
var E209252 = Global_error{id: "209252", eType: EXPECTED_ERROR, message: "TCP connection Timeout. "}
var E209253 = Global_error{id: "209253", eType: EXPECTED_ERROR, message: "System Error (SALT), Please contact CCB Operation. "}
var E209254 = Global_error{id: "209254", eType: EXPECTED_ERROR, message: "CBS service is not available. "}
var E209255 = Global_error{id: "209255", eType: EXPECTED_ERROR, message: "Customer using Duall Bill is not allowed for this transaction. "}
var E209256 = Global_error{id: "209256", eType: EXPECTED_ERROR, message: "DTAC customer is not allowed for this transaction. "}
var E209257 = Global_error{id: "209257", eType: EXPECTED_ERROR, message: "The porting number is in internal porting process. "}
var E209258 = Global_error{id: "209258", eType: EXPECTED_ERROR, message: "Web screen code already exists. "}
var E209259 = Global_error{id: "209259", eType: EXPECTED_ERROR, message: "Web screen code does not exist. "}
var E209260 = Global_error{id: "209260", eType: EXPECTED_ERROR, message: "Web screen code exists but is not currently effective. "}
var E209261 = Global_error{id: "209261", eType: EXPECTED_ERROR, message: "Web screen code exists and is currently effective. "}
var E209262 = Global_error{id: "209262", eType: EXPECTED_ERROR, message: "Action name already exists. "}
var E209263 = Global_error{id: "209263", eType: EXPECTED_ERROR, message: "Action name does not exist. "}
var E209264 = Global_error{id: "209264", eType: EXPECTED_ERROR, message: "Action name exists but is not currently effective. "}
var E209265 = Global_error{id: "209265", eType: EXPECTED_ERROR, message: "Action name exists and is currently effective. "}
var E209266 = Global_error{id: "209266", eType: EXPECTED_ERROR, message: "Operation associated to a web screen, cannot delete. "}
var E209267 = Global_error{id: "209267", eType: EXPECTED_ERROR, message: "Web Screen-Operation combination has been associated with action, cannot delete. "}
var E209268 = Global_error{id: "209268", eType: EXPECTED_ERROR, message: "Screen-Operation combination has been associated with group, cannot delete. "}
var E209269 = Global_error{id: "209269", eType: EXPECTED_ERROR, message: "Group-Web Screen-Operation combination does not exist. "}
var E209270 = Global_error{id: "209270", eType: EXPECTED_ERROR, message: "Do not forget! Please suggest customer that close and open mobile before using "}
var E209271 = Global_error{id: "209271", eType: EXPECTED_ERROR, message: "Do not forget! Incase using internet ,please suggest customer that close and open mobile before using "}
var E209272 = Global_error{id: "209272", eType: EXPECTED_ERROR, message: "Invalid dtac lifecare type. "}
var E209273 = Global_error{id: "209273", eType: EXPECTED_ERROR, message: "Benefit code is not Active. "}
var E209274 = Global_error{id: "209274", eType: EXPECTED_ERROR, message: "Benefit code is currently active. "}
var E209275 = Global_error{id: "209275", eType: EXPECTED_ERROR, message: "Benefit code does not exist. "}
var E209276 = Global_error{id: "209276", eType: EXPECTED_ERROR, message: "Benefit code already exists. "}
var E209277 = Global_error{id: "209277", eType: EXPECTED_ERROR, message: "Benefit amount must be greater than or equal to 0. "}
var E209278 = Global_error{id: "209278", eType: EXPECTED_ERROR, message: "Package benefit Information does not exist. "}
var E209279 = Global_error{id: "209279", eType: EXPECTED_ERROR, message: "Data SIM customer is not allowed to apply MultiSIM. "}
var E209280 = Global_error{id: "209280", eType: EXPECTED_ERROR, message: "SDP Product Id already exists. "}
var E209281 = Global_error{id: "209281", eType: EXPECTED_ERROR, message: "SDP Product Id does not exist. "}
var E209282 = Global_error{id: "209282", eType: EXPECTED_ERROR, message: "SDP Product Id exists but is not currently effective. "}
var E209283 = Global_error{id: "209283", eType: EXPECTED_ERROR, message: "SDP Product Id exists and is currently effective. "}
var E209284 = Global_error{id: "209284", eType: EXPECTED_ERROR, message: "No redemption data found. "}
var E209285 = Global_error{id: "209285", eType: EXPECTED_ERROR, message: "Accumulated bonus cannot be granted because criteria for redemption is not satisfied. "}
var E209286 = Global_error{id: "209286", eType: EXPECTED_ERROR, message: "Invalid benefit code. "}
var E209287 = Global_error{id: "209287", eType: EXPECTED_ERROR, message: "Invalid Note type. "}
var E209288 = Global_error{id: "209288", eType: EXPECTED_ERROR, message: "Note Type does not exist "}
var E209289 = Global_error{id: "209289", eType: EXPECTED_ERROR, message: "Note Type already exists and is currently effective "}
var E209290 = Global_error{id: "209290", eType: EXPECTED_ERROR, message: "Note Type already exists and is currently not active "}
var E209291 = Global_error{id: "209291", eType: EXPECTED_ERROR, message: "No other authorized for note type exists "}
var E209292 = Global_error{id: "209292", eType: EXPECTED_ERROR, message: "Invalid prefix of special number. "}
var E209293 = Global_error{id: "209293", eType: EXPECTED_ERROR, message: "Payment contact number does not belong to this customer. "}
var E209294 = Global_error{id: "209294", eType: EXPECTED_ERROR, message: "Customer Promotion and Package Group are inconsistent. "}
var E209295 = Global_error{id: "209295", eType: EXPECTED_ERROR, message: "Retention Type does not exist. "}
var E209296 = Global_error{id: "209296", eType: EXPECTED_ERROR, message: "Invalid Retention Type. "}
var E209297 = Global_error{id: "209297", eType: EXPECTED_ERROR, message: "Invalid Cause of Churn Group. "}
var E209298 = Global_error{id: "209298", eType: EXPECTED_ERROR, message: "Active/Authorized Cause Of Churn is not found. "}
var E209299 = Global_error{id: "209299", eType: EXPECTED_ERROR, message: "Active/Authorized Retention Type is not found. "}
var E209300 = Global_error{id: "209300", eType: EXPECTED_ERROR, message: "Cause of Churn code already exists. "}
var E209301 = Global_error{id: "209301", eType: EXPECTED_ERROR, message: "Cause of Churn code does not exist. "}
var E209302 = Global_error{id: "209302", eType: EXPECTED_ERROR, message: "Cause of Churn code already exists but is not currently active. "}
var E209303 = Global_error{id: "209303", eType: EXPECTED_ERROR, message: "Cause of Churn code already exists and is currently active. "}
var E209304 = Global_error{id: "209304", eType: EXPECTED_ERROR, message: "Offering rule code already exists. "}
var E209305 = Global_error{id: "209305", eType: EXPECTED_ERROR, message: "Offering rule code does not exist. "}
var E209306 = Global_error{id: "209306", eType: EXPECTED_ERROR, message: "Offering rule code already exists and is currently not active. "}
var E209307 = Global_error{id: "209307", eType: EXPECTED_ERROR, message: "Offering rule code already exists and is currently effective. "}
var E209308 = Global_error{id: "209308", eType: EXPECTED_ERROR, message: "Operator code does not exist. "}
var E209309 = Global_error{id: "209309", eType: EXPECTED_ERROR, message: "Operator code already exists but is not currently active. "}
var E209310 = Global_error{id: "209310", eType: EXPECTED_ERROR, message: "Operator code already exists and is currently active. "}
var E209311 = Global_error{id: "209311", eType: EXPECTED_ERROR, message: "Offer code already exists. "}
var E209312 = Global_error{id: "209312", eType: EXPECTED_ERROR, message: "Offer code does not exist. "}
var E209313 = Global_error{id: "209313", eType: EXPECTED_ERROR, message: "Offer code already exists and is currently not active. "}
var E209314 = Global_error{id: "209314", eType: EXPECTED_ERROR, message: "Offer code already exists and is currently effective. "}
var E209315 = Global_error{id: "209315", eType: EXPECTED_ERROR, message: "Offer mapping information already exists. "}
var E209316 = Global_error{id: "209316", eType: EXPECTED_ERROR, message: "Offer mapping information does not exist. "}
var E209317 = Global_error{id: "209317", eType: EXPECTED_ERROR, message: "Offer mapping information already exists and is currently not active. "}
var E209318 = Global_error{id: "209318", eType: EXPECTED_ERROR, message: "Offer mapping information already exists and is currently effective. "}
var E209319 = Global_error{id: "209319", eType: EXPECTED_ERROR, message: "This transaction is not allowed because subscriber is under contract period. "}
var E209320 = Global_error{id: "209320", eType: EXPECTED_ERROR, message: "Cause of churn Group already exists. "}
var E209321 = Global_error{id: "209321", eType: EXPECTED_ERROR, message: "Cause of churn Group does not exist. "}
var E209322 = Global_error{id: "209322", eType: EXPECTED_ERROR, message: "Cause of churn Group already exists and is currently not active. "}
var E209323 = Global_error{id: "209323", eType: EXPECTED_ERROR, message: "Cause of churn Group already exists and is currently effective. "}
var E209324 = Global_error{id: "209324", eType: EXPECTED_ERROR, message: "Invalid Operator. "}
var E209325 = Global_error{id: "209325", eType: EXPECTED_ERROR, message: "Invalid ARPU value. "}
var E209326 = Global_error{id: "209326", eType: EXPECTED_ERROR, message: "Invalid MOU value. "}
var E209327 = Global_error{id: "209327", eType: EXPECTED_ERROR, message: "Invalid Fix Pay amount. "}
var E209328 = Global_error{id: "209328", eType: EXPECTED_ERROR, message: "Invalid Internet Usage Volume. "}
var E209329 = Global_error{id: "209329", eType: EXPECTED_ERROR, message: "Invalid Club Type. "}
var E209330 = Global_error{id: "209330", eType: EXPECTED_ERROR, message: "Club Code does not exist. "}
var E209331 = Global_error{id: "209331", eType: EXPECTED_ERROR, message: "Club Code already exists and is currently not active. "}
var E209332 = Global_error{id: "209332", eType: EXPECTED_ERROR, message: "Club Code already exists and is currently effective. "}
var E209333 = Global_error{id: "209333", eType: EXPECTED_ERROR, message: "Club Code is in use for Club Member, Cannot update. "}
var E209334 = Global_error{id: "209334", eType: EXPECTED_ERROR, message: "Cause of churn Group is already used, Cannot change telephone type. "}
var E209335 = Global_error{id: "209335", eType: EXPECTED_ERROR, message: "Active/Authorized Retention offer is not found. "}
var E209336 = Global_error{id: "209336", eType: EXPECTED_ERROR, message: "Invalid Offer type. "}
var E209337 = Global_error{id: "209337", eType: EXPECTED_ERROR, message: "Club Code already existing, can't be duplicated. "}
var E209338 = Global_error{id: "209338", eType: EXPECTED_ERROR, message: "This Club Type cannot be duplicated. "}
var E209339 = Global_error{id: "209339", eType: EXPECTED_ERROR, message: "New Club Code cannot be used together with the existing one. "}
var E209340 = Global_error{id: "209340", eType: EXPECTED_ERROR, message: "Invalid Club member information. "}
var E209341 = Global_error{id: "209341", eType: EXPECTED_ERROR, message: "Club Code already expired. "}
var E209342 = Global_error{id: "209342", eType: EXPECTED_ERROR, message: "Club Type does not exist. "}
var E209343 = Global_error{id: "209343", eType: EXPECTED_ERROR, message: "The number is already switched off. Not allowed to perform this transaction. "}
var E209344 = Global_error{id: "209344", eType: EXPECTED_ERROR, message: "Subscriber number is not registered. Please register for customer and try again. "}
var E209345 = Global_error{id: "209345", eType: EXPECTED_ERROR, message: "The number has been registered as Corporate customer. Not allowed to perform this transaction. Please recheck the number. "}
var E209346 = Global_error{id: "209346", eType: EXPECTED_ERROR, message: "The subscriber is not allowed to perform this transaction. Please contact dtac service center. "}
var E209347 = Global_error{id: "209347", eType: EXPECTED_ERROR, message: "The Multi SIM subscriber is not allowed to change SIM. Please contact dtac service center. "}
var E209348 = Global_error{id: "209348", eType: EXPECTED_ERROR, message: "Incorrect ID number. The ID number registered with this Mobile number was %s. Please check again. "}
var E209349 = Global_error{id: "209349", eType: EXPECTED_ERROR, message: "The ported number is the number of online dtac prepaid top-up service retailer. "}
var E209350 = Global_error{id: "209350", eType: EXPECTED_ERROR, message: "Invalid SIM Serial Number, Please recheck again. "}
var E209351 = Global_error{id: "209351", eType: EXPECTED_ERROR, message: "Unable to retrieve the information because there are subscribers more than 20 subscribers with this id. "}
var E209352 = Global_error{id: "209352", eType: EXPECTED_ERROR, message: "Reactivation is not allowed as the period exceeds the allowed period. "}
var E209353 = Global_error{id: "209353", eType: EXPECTED_ERROR, message: "Authorization Code already exists. "}
var E209354 = Global_error{id: "209354", eType: EXPECTED_ERROR, message: "Authorization Code does not exist. "}
var E209355 = Global_error{id: "209355", eType: EXPECTED_ERROR, message: "Invalid Authorization Code. "}
var E209356 = Global_error{id: "209356", eType: EXPECTED_ERROR, message: "Data Group authorization does not exist. "}
var E209357 = Global_error{id: "209357", eType: EXPECTED_ERROR, message: "Authorization Code already exists and is currently not active. "}
var E209358 = Global_error{id: "209358", eType: EXPECTED_ERROR, message: "Authorization Code already exists and is currently active. "}
var E209359 = Global_error{id: "209359", eType: EXPECTED_ERROR, message: "Data Group authorization already exists. "}
var E209360 = Global_error{id: "209360", eType: EXPECTED_ERROR, message: "Transaction is not allowed as the number is ported out already. "}
var E209361 = Global_error{id: "209361", eType: EXPECTED_ERROR, message: "Invalid Social type. "}
var E209362 = Global_error{id: "209362", eType: EXPECTED_ERROR, message: "Record already exists and is currently effective "}
var E209363 = Global_error{id: "209363", eType: EXPECTED_ERROR, message: "Record already exists and is currently not active. "}
var E209364 = Global_error{id: "209364", eType: EXPECTED_ERROR, message: "Sum of digit is not correct. "}
var E209365 = Global_error{id: "209365", eType: EXPECTED_ERROR, message: "This telephone number has been assigned to special pool. "}
var E209366 = Global_error{id: "209366", eType: EXPECTED_ERROR, message: "The porting number (Postpaid) has an unbilled or outstanding balance (cost summary). "}
var E209367 = Global_error{id: "209367", eType: EXPECTED_ERROR, message: "No incomplete reason code for incompleted document status of subscriber, cannot insert data without at least one Incomplete reason "}
var E209368 = Global_error{id: "209368", eType: EXPECTED_ERROR, message: "Exceed number of incomplete reason code. "}
var E209369 = Global_error{id: "209369", eType: EXPECTED_ERROR, message: "Invallid agreement check flag, cannot insert incomplete reason code. "}
var E209370 = Global_error{id: "209370", eType: EXPECTED_ERROR, message: "Overrule Class Conflict flag is inconsistent with telephone or package types. "}
var E209371 = Global_error{id: "209371", eType: EXPECTED_ERROR, message: "Unable to make transaction because ID number is locked by 3 levels application. Please unlock via 3 levels application. "}
var E209372 = Global_error{id: "209372", eType: EXPECTED_ERROR, message: "Invalid Financial Package Type. "}
var E209373 = Global_error{id: "209373", eType: EXPECTED_ERROR, message: "The user lan does not exists. "}
var E209374 = Global_error{id: "209374", eType: EXPECTED_ERROR, message: "Password must be combination of alphabets(A-Z, a-z), numeric (0-9) and special characters. "}
var E209375 = Global_error{id: "209375", eType: EXPECTED_ERROR, message: "Not allow to register conflict method for (Paper with SMS and SMS) or (SMS and E-mail). "}
var E209376 = Global_error{id: "209376", eType: EXPECTED_ERROR, message: "Telephone number has been assigned to anyone. "}
var E209377 = Global_error{id: "209377", eType: EXPECTED_ERROR, message: "Telephone type is not allowed to assigned. "}
var E209378 = Global_error{id: "209378", eType: EXPECTED_ERROR, message: "The system can not process concurrent services at the same time. "}
var E209379 = Global_error{id: "209379", eType: EXPECTED_ERROR, message: "Re-apply mode is not setup in this package plan. "}
var E209380 = Global_error{id: "209380", eType: EXPECTED_ERROR, message: "Not allow Friend and Family package . "}
var E209381 = Global_error{id: "209381", eType: EXPECTED_ERROR, message: "You've already subscribed to the package. Renew when max speed Internet's used up or renew tomorrow. "}
var E209382 = Global_error{id: "209382", eType: EXPECTED_ERROR, message: "You cannot re-subscribe to this package. Please try again 30 minutes from now. "}
var E209383 = Global_error{id: "209383", eType: EXPECTED_ERROR, message: "ESIM Card Style is not allowed to process. "}
var E209384 = Global_error{id: "209384", eType: EXPECTED_ERROR, message: "Invalid secondary SIM package. "}
var E209385 = Global_error{id: "209385", eType: EXPECTED_ERROR, message: "Condition to subscribe package multiple times fails. "}
var E209386 = Global_error{id: "209386", eType: EXPECTED_ERROR, message: "Not allow more than 1 record. "}
var E209387 = Global_error{id: "209387", eType: EXPECTED_ERROR, message: "Telephone prefix number is not verify with MNP. "}
var E209388 = Global_error{id: "209388", eType: EXPECTED_ERROR, message: "Transaction is not allowed for ported number. "}
var E209389 = Global_error{id: "209389", eType: EXPECTED_ERROR, message: "IMSI number exists but status already changed. "}
var E209390 = Global_error{id: "209390", eType: EXPECTED_ERROR, message: "Lan User is already associated with maximum allowed value for CCB User. "}
var E209391 = Global_error{id: "209391", eType: EXPECTED_ERROR, message: "Sorry your request has been declined as this number is in the process of number deactivation/postpaid-to-prepaid transfer in order to prevent excess fee from the paid bill. "}
var E209392 = Global_error{id: "209392", eType: EXPECTED_ERROR, message: "Subscriber already have consent with similar or higher version. "}
var E209393 = Global_error{id: "209393", eType: EXPECTED_ERROR, message: "No active consent information found. "}
var E209394 = Global_error{id: "209394", eType: EXPECTED_ERROR, message: "Invalid mapping number type. "}
var E209395 = Global_error{id: "209395", eType: EXPECTED_ERROR, message: "Invalid mapping method. "}
var E209396 = Global_error{id: "209396", eType: EXPECTED_ERROR, message: "Invalid category group. "}
var E209397 = Global_error{id: "209397", eType: EXPECTED_ERROR, message: "Invalid category pattern. "}
var E209398 = Global_error{id: "209398", eType: EXPECTED_ERROR, message: "Not allowed to apply eSIM because there is eSIM pending task. "}
var E209399 = Global_error{id: "209399", eType: EXPECTED_ERROR, message: "eSIM data are not found. "}
var E209400 = Global_error{id: "209400", eType: EXPECTED_ERROR, message: "Not Allow to change fixed IMSI for DTAC number. "}
var E209401 = Global_error{id: "209401", eType: EXPECTED_ERROR, message: "This IMSI number is dtac, please replace a new SIM card before subscribe Multi SIM for customer. "}
var E209402 = Global_error{id: "209402", eType: EXPECTED_ERROR, message: "Secondary SIM is on DTAC IMSI, Please cancel Multi SIM service. "}
var E209403 = Global_error{id: "209403", eType: EXPECTED_ERROR, message: "Telephone or Telephone Dummy available is not enough. "}
var E209404 = Global_error{id: "209404", eType: EXPECTED_ERROR, message: "This telephone is not allowed to change category. "}
var E209405 = Global_error{id: "209405", eType: EXPECTED_ERROR, message: "Telephone�s category is not as same as FROM category. "}
var E209406 = Global_error{id: "209406", eType: EXPECTED_ERROR, message: "Update Package Notification interface table failed. "}
var E209407 = Global_error{id: "209407", eType: EXPECTED_ERROR, message: "Package for sending Notification has already been canceled. "}
var E209408 = Global_error{id: "209408", eType: EXPECTED_ERROR, message: "Do you want to cancel or change while contract term of this number is still active ? "}
var E209409 = Global_error{id: "209409", eType: EXPECTED_ERROR, message: "Branch code must be numeric 5 digits. "}
var E209410 = Global_error{id: "209410", eType: EXPECTED_ERROR, message: "Invalid length of Branch code. "}
var E209411 = Global_error{id: "209411", eType: EXPECTED_ERROR, message: "Number of rows in input data file exceeds allowed maximum limit(%d rows) "}
var E209412 = Global_error{id: "209412", eType: EXPECTED_ERROR, message: "Invalid prefix number "}
var E209413 = Global_error{id: "209413", eType: EXPECTED_ERROR, message: "Sorry, you cannot apply for dtac family watch service because dtac Multi sim service is still remaining in your service. "}
var E209414 = Global_error{id: "209414", eType: EXPECTED_ERROR, message: "Sorry, you cannot apply for dtac Multi sim service because dtac family watch service is still remaining in your service. "}
var E209415 = Global_error{id: "209415", eType: EXPECTED_ERROR, message: "The transaction cannot be processed because this number have been suspended. "}
var E209416 = Global_error{id: "209416", eType: EXPECTED_ERROR, message: "Service Group is not Active. "}
var E209417 = Global_error{id: "209417", eType: EXPECTED_ERROR, message: "Service Group is currently active. "}
var E209418 = Global_error{id: "209418", eType: EXPECTED_ERROR, message: "Service Group does not exist. "}
var E209419 = Global_error{id: "209419", eType: EXPECTED_ERROR, message: "Service Group already exists. "}
var E209420 = Global_error{id: "209420", eType: EXPECTED_ERROR, message: "Subscriber already have consent this service group. "}
var E209421 = Global_error{id: "209421", eType: EXPECTED_ERROR, message: "Record does not exist. "}
var E209422 = Global_error{id: "209422", eType: EXPECTED_ERROR, message: "Extra advance code already exists. "}
var E209423 = Global_error{id: "209423", eType: EXPECTED_ERROR, message: "Extra advance code does not exist. "}
var E209424 = Global_error{id: "209424", eType: EXPECTED_ERROR, message: "Eligibility rule code already exists. "}
var E209425 = Global_error{id: "209425", eType: EXPECTED_ERROR, message: "Eligibility rule code does not exist. "}
var E209426 = Global_error{id: "209426", eType: EXPECTED_ERROR, message: "Sorry, This package is allowed for Internet unlimited packages only. "}
var E209427 = Global_error{id: "209427", eType: EXPECTED_ERROR, message: "Sorry, You have suspend additional packages. "}
var E209428 = Global_error{id: "209428", eType: EXPECTED_ERROR, message: "Customer using family promotion is not allowed for this transaction. "}
var E209429 = Global_error{id: "209429", eType: EXPECTED_ERROR, message: "Invalid telephone property to lock or unlock telephone number "}
var E209430 = Global_error{id: "209430", eType: EXPECTED_ERROR, message: "IMSI group to change pool of telephone number is not correct "}
var E209431 = Global_error{id: "209431", eType: EXPECTED_ERROR, message: "To Telephone Type is the same as From Telephone Type. "}
var E209432 = Global_error{id: "209432", eType: EXPECTED_ERROR, message: "Invalid contract type. "}
var E209433 = Global_error{id: "209433", eType: EXPECTED_ERROR, message: "Invalid Service Lifestyle Flag. "}
var E209434 = Global_error{id: "209434", eType: EXPECTED_ERROR, message: "Information criteria does not matching with Flexy master index. "}
var E209435 = Global_error{id: "209435", eType: EXPECTED_ERROR, message: "The number of contracts reached the maximum limit. "}
var E209436 = Global_error{id: "209436", eType: EXPECTED_ERROR, message: "Subscriber Contract information does not exist. "}
var E209437 = Global_error{id: "209437", eType: EXPECTED_ERROR, message: "Subscriber Contract already exists. "}
var E209438 = Global_error{id: "209438", eType: EXPECTED_ERROR, message: "Invalid consent flag. "}
var E209439 = Global_error{id: "209439", eType: EXPECTED_ERROR, message: "Invalid register type. "}
var E209440 = Global_error{id: "209440", eType: EXPECTED_ERROR, message: "The image size exceeds the maximum size. "}
var E209441 = Global_error{id: "209441", eType: EXPECTED_ERROR, message: "ID Number does not match. "}
var E209442 = Global_error{id: "209442", eType: EXPECTED_ERROR, message: "Your porting request (Postpaid) was unsuccessful due to outstanding balance awaiting payment. Please call 022028211 for more information. "}
var E209443 = Global_error{id: "209443", eType: EXPECTED_ERROR, message: "Active record is not found. "}
var E209444 = Global_error{id: "209444", eType: EXPECTED_ERROR, message: "System Error (BRM), Please contact BRM operation. "}
var E209445 = Global_error{id: "209445", eType: EXPECTED_ERROR, message: "System Error (MDID), Please contact MDID operation. "}
var E209446 = Global_error{id: "209446", eType: EXPECTED_ERROR, message: "Authorization code expired. "}
var E299999 = Global_error{id: "299999", eType: EXPECTED_ERROR, message: "Error message does not inserted in table. "}
